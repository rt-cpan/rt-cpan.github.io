--- a/bin/graph-easy
+++ b/bin/graph-easy
@@ -490,7 +490,7 @@
     GDL		 http://www.aisee.com/
 
 The formats are automatically detected, regardless of the input file name,
-but you can also explicitely declare your input to be in one specific
+but you can also explicitly declare your input to be in one specific
 format.
 
 The output can be a dump of the graph in one of the following formats:
--- a/lib/Graph/Easy.pm
+++ b/lib/Graph/Easy.pm
@@ -2475,7 +2475,7 @@
 them via its own grid-based layouter.
 
 Since the layouter works on a grid (manhattan layout), the output is
-most usefull for flow charts, network diagrams, or hierarchy trees.
+most useful for flow charts, network diagrams, or hierarchy trees.
 
 X<graph>
 X<drawing>
@@ -2592,7 +2592,7 @@
 
 =item Graphviz
 
-Creates graphviz code that can be feed to 'dot', 'neato' or similiar programs.
+Creates graphviz code that can be feed to 'dot', 'neato' or similar programs.
 
 =item GraphML
 
@@ -2650,7 +2650,7 @@
 
 =head2 Two not connected graphs
 
-A graph consisting of two seperate parts, both of them not connected
+A graph consisting of two separate parts, both of them not connected
 to each other:
 
 	[ Bonn ] -> [ Berlin ]
@@ -3999,7 +3999,7 @@
 	print $graph_2->as_ascii();
 
 Returns the animation of C<$graph> as a graph describing the flow of the
-animation. Usefull for debugging animation flows.
+animation. Useful for debugging animation flows.
 
 =head2 add_cycle()
 
@@ -4074,7 +4074,7 @@
 
 L<Graph::Layout::Aesthetic>, L<Graph> and L<Text::Flowchart>.
 
-There is also an very old, unrelated project from ca. 1995, which does something similiar.
+There is also an very old, unrelated project from ca. 1995, which does something similar.
 See L<http://rw4.cs.uni-sb.de/users/sander/html/gsvcg1.html>.
 
 Testcases and more examples under:
--- a/lib/Graph/Easy/Layout/Chain.pm
+++ b/lib/Graph/Easy/Layout/Chain.pm
@@ -485,7 +485,7 @@
 
 	my $len = $chain->length( $node );
 
-Given an optional C<$node> as argument, returns the lenght
+Given an optional C<$node> as argument, returns the length
 from that node onwards. For the chain with the three nodes
 A, B and C would return 3, 2, and 1 for A, B and C, respectively.
 
--- a/lib/Graph/Easy/Node.pm
+++ b/lib/Graph/Easy/Node.pm
@@ -20,7 +20,7 @@
 
 sub _init
   {
-  # Generic init routine, to be overriden in subclasses.
+  # Generic init routine, to be overridden in subclasses.
   my ($self,$args) = @_;
   
   $self->{name} = 'Node #' . $self->{id};
@@ -1278,7 +1278,7 @@
       $need->{$side} += 2 * $cnt->{$side} - $free->{$side} - 1;
       }
     }
-  # now $need contains for each side the absolut min. number of ports we need
+  # now $need contains for each side the absolute min. number of ports we need
 
 #  use Data::Dumper; 
 #  print STDERR "# port contraints for $self->{name}:\n";
@@ -2721,14 +2721,14 @@
 	my @nodes = $node->nodes_sharing_start($side, $port);
 
 Return a list of unique nodes that share a start point with an edge
-from this node, on the specified side (absolut) and port number.
+from this node, on the specified side (absolute) and port number.
 
 =head2 nodes_sharing_end()
 
 	my @nodes = $node->nodes_sharing_end($side, $port);
 
 Return a list of unique nodes that share an end point with an edge
-from this node, on the specified side (absolut) and port number.
+from this node, on the specified side (absolute) and port number.
 
 =head2 edges_at_port()
 
@@ -2810,10 +2810,10 @@
 
 The return value of that method is added as extra params to the
 HTML tag for a node when as_html() is called. Returns the empty
-string by default, and can be overriden in subclasses. See also
+string by default, and can be overridden in subclasses. See also
 L<use_class()>.
 
-Overriden method should return a text with a leading space, or the
+Overridden method should return a text with a leading space, or the
 empty string.
 
 Example:
