# 1 "Socket6.c"
# 1 "<built-in>"
#define __STDC__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 4
#define __GNUC_MINOR__ 2
#define __GNUC_PATCHLEVEL__ 4
#define __APPLE_CC__ 5666
#define __SIZE_TYPE__ long unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ int
#define __WINT_TYPE__ int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __GXX_ABI_VERSION 1002
#define __SCHAR_MAX__ 127
#define __SHRT_MAX__ 32767
#define __INT_MAX__ 2147483647
#define __LONG_MAX__ 2147483647L
#define __LONG_LONG_MAX__ 9223372036854775807LL
#define __WCHAR_MAX__ 2147483647
#define __CHAR_BIT__ 8
#define __INTMAX_MAX__ 9223372036854775807LL
#define __FLT_EVAL_METHOD__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_MAX__ 3.40282347e+38F
#define __FLT_MIN__ 1.17549435e-38F
#define __FLT_EPSILON__ 1.19209290e-7F
#define __FLT_DENORM_MIN__ 1.40129846e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_MAX__ 1.7976931348623157e+308
#define __DBL_MIN__ 2.2250738585072014e-308
#define __DBL_EPSILON__ 2.2204460492503131e-16
#define __DBL_DENORM_MIN__ 4.9406564584124654e-324
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 106
#define __LDBL_DIG__ 31
#define __LDBL_MIN_EXP__ (-968)
#define __LDBL_MIN_10_EXP__ (-291)
#define __LDBL_MAX_EXP__ 1024
#define __LDBL_MAX_10_EXP__ 308
#define __DECIMAL_DIG__ 33
#define __LDBL_MAX__ 1.79769313486231580793728971405301e+308L
#define __LDBL_MIN__ 2.00416836000897277799610805135016e-292L
#define __LDBL_EPSILON__ 4.94065645841246544176568792868221e-324L
#define __LDBL_DENORM_MIN__ 4.94065645841246544176568792868221e-324L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-95)
#define __DEC32_MAX_EXP__ 96
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_DEN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-383)
#define __DEC64_MAX_EXP__ 384
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_DEN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6143)
#define __DEC128_MAX_EXP__ 6144
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_DEN__ 0.000000000000000000000000000000001E-6143DL
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ _
#define __VERSION__ "4.2.4 (Apple Inc. build 5666) (dot 3) (MacPorts apple-gcc42 5666.3_15+gpl3)"
#define __GNUC_GNU_INLINE__ 1
#define __BLOCKS__ 1
#define __OPTIMIZE__ 1
#define __FINITE_MATH_ONLY__ 0
#define __pic__ 2
#define __PIC__ 2
#define _ARCH_PPC 1
#define _ARCH_PPCGR 1
#define __BIG_ENDIAN__ 1
#define _BIG_ENDIAN 1
#define __LONG_DOUBLE_128__ 1
#define __LONGDOUBLE128 1
#define __ppc__ 1
#define __POWERPC__ 1
#define __NATURAL_ALIGNMENT__ 1
#define __MACH__ 1
#define __APPLE__ 1
#define __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ 1040
#define __CONSTANT_CFSTRINGS__ 1
#define __strong 
#define __weak __attribute__((objc_gc(weak)))
#define __block __attribute__((__blocks__(byref)))
#define OBJC_NEW_PROPERTIES 1
# 1 "<command-line>"
#define __DYNAMIC__ 1
#define PERL_DARWIN 1
#define _FORTIFY_SOURCE 2
#define VERSION "0.27"
#define XS_VERSION "0.27"
# 1 "Socket6.c"
# 1 "Socket6.xs"
# 59 "Socket6.xs"
# 1 "/usr/include/sys/types.h" 1 3 4
# 64 "/usr/include/sys/types.h" 3 4
#define _SYS_TYPES_H_ 

# 1 "/usr/include/sys/appleapiopts.h" 1 3 4
# 24 "/usr/include/sys/appleapiopts.h" 3 4
#define __SYS_APPLEAPIOPTS_H__ 



#define __APPLE_API_STANDARD 



#define __APPLE_API_STABLE 





#define __APPLE_API_EVOLVING 



#define __APPLE_API_UNSTABLE 



#define __APPLE_API_PRIVATE 



#define __APPLE_API_OBSOLETE 
# 67 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 62 "/usr/include/sys/cdefs.h" 3 4
#define _CDEFS_H_ 





#define __BEGIN_DECLS 
#define __END_DECLS 
# 80 "/usr/include/sys/cdefs.h" 3 4
#define __P(protos) protos
#define __CONCAT(x,y) x ## y
#define __STRING(x) #x

#define __const const
#define __signed signed
#define __volatile volatile
# 134 "/usr/include/sys/cdefs.h" 3 4
#define __dead2 __attribute__((__noreturn__))
#define __pure2 __attribute__((__const__))



#define __unused __attribute__((__unused__))
# 152 "/usr/include/sys/cdefs.h" 3 4
#define __dead 
#define __pure 
# 169 "/usr/include/sys/cdefs.h" 3 4
#define __restrict 
# 184 "/usr/include/sys/cdefs.h" 3 4
#define __printflike(fmtarg,firstvararg) __attribute__((__format__ (__printf__, fmtarg, firstvararg)))

#define __scanflike(fmtarg,firstvararg) __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))






#define __IDSTRING(name,string) static const char name[] __unused = string


#define __COPYRIGHT(s) __IDSTRING(copyright,s)



#define __RCSID(s) __IDSTRING(rcsid,s)



#define __SCCSID(s) __IDSTRING(sccsid,s)



#define __PROJECT_VERSION(s) __IDSTRING(project_version,s)
# 239 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_UNIX03 0






#define __DARWIN_ALIAS(sym) 
# 305 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_NO_LONG_LONG (defined(__STRICT_ANSI__) && (__STDC_VERSION__-0 < 199901L) && !defined(__GNUG__))
# 321 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_LDBL_COMPAT(x) __asm("_" __STRING(x) "$LDBL128")

#define __DARWIN_LDBL_COMPAT2(x) __asm("_" __STRING(x) "$LDBL128")
#define __DARWIN_LONG_DOUBLE_IS_DOUBLE 0
# 70 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/machine/types.h" 1 3 4
# 26 "/usr/include/machine/types.h" 3 4
#define _BSD_MACHINE_TYPES_H_ 



# 1 "/usr/include/ppc/types.h" 1 3 4
# 61 "/usr/include/ppc/types.h" 3 4
#define _MACHTYPES_H_ 


# 1 "/usr/include/ppc/_types.h" 1 3 4
# 23 "/usr/include/ppc/_types.h" 3 4
#define _BSD_PPC__TYPES_H_ 







typedef signed char __int8_t;



typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;

typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
# 64 "/usr/include/ppc/_types.h" 3 4
typedef int __darwin_ct_rune_t;





typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;

typedef __mbstate_t __darwin_mbstate_t;


typedef int __darwin_ptrdiff_t;





typedef long unsigned int __darwin_size_t;





typedef __builtin_va_list __darwin_va_list;





typedef int __darwin_wchar_t;




typedef __darwin_wchar_t __darwin_rune_t;


typedef int __darwin_wint_t;




typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
# 65 "/usr/include/ppc/types.h" 2 3 4






#define _INT8_T 
typedef signed char int8_t;

typedef unsigned char u_int8_t;

#define _INT16_T 
typedef short int16_t;

typedef unsigned short u_int16_t;

#define _INT32_T 
typedef int int32_t;

typedef unsigned int u_int32_t;

#define _INT64_T 
typedef long long int64_t;

typedef unsigned long long u_int64_t;




typedef int32_t register_t;



#define _INTPTR_T 
typedef __darwin_intptr_t intptr_t;


#define _UINTPTR_T 
typedef unsigned long uintptr_t;
# 112 "/usr/include/ppc/types.h" 3 4
typedef u_int64_t user_addr_t;
typedef u_int64_t user_size_t;
typedef int64_t user_ssize_t;
typedef int64_t user_long_t;
typedef u_int64_t user_ulong_t;
typedef int64_t user_time_t;
#define USER_ADDR_NULL ((user_addr_t) 0)
#define CAST_USER_ADDR_T(a_ptr) ((user_addr_t)((uintptr_t)(a_ptr)))


typedef u_int64_t syscall_arg_t;


#define __offsetof(type,field) ((size_t)(&((type *)0)->field))
# 31 "/usr/include/machine/types.h" 2 3 4
# 73 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types.h" 1 3 4
# 24 "/usr/include/sys/_types.h" 3 4
#define _SYS__TYPES_H_ 


# 1 "/usr/include/machine/_types.h" 1 3 4
# 23 "/usr/include/machine/_types.h" 3 4
#define _BSD_MACHINE__TYPES_H_ 
# 28 "/usr/include/sys/_types.h" 2 3 4



struct mcontext;
struct mcontext64;
# 49 "/usr/include/sys/_types.h" 3 4
#define __PTHREAD_SIZE__ 596
#define __PTHREAD_ATTR_SIZE__ 36
#define __PTHREAD_MUTEXATTR_SIZE__ 8
#define __PTHREAD_MUTEX_SIZE__ 40
#define __PTHREAD_CONDATTR_SIZE__ 4
#define __PTHREAD_COND_SIZE__ 24
#define __PTHREAD_ONCE_SIZE__ 4
#define __PTHREAD_RWLOCK_SIZE__ 124
#define __PTHREAD_RWLOCKATTR_SIZE__ 12


struct __darwin_pthread_handler_rec
{
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};
struct _opaque_pthread_attr_t { long __sig; char __opaque[36]; };
struct _opaque_pthread_cond_t { long __sig; char __opaque[24]; };
struct _opaque_pthread_condattr_t { long __sig; char __opaque[4]; };
struct _opaque_pthread_mutex_t { long __sig; char __opaque[40]; };
struct _opaque_pthread_mutexattr_t { long __sig; char __opaque[8]; };
struct _opaque_pthread_once_t { long __sig; char __opaque[4]; };
struct _opaque_pthread_rwlock_t { long __sig; char __opaque[124]; };
struct _opaque_pthread_rwlockattr_t { long __sig; char __opaque[12]; };
struct _opaque_pthread_t { long __sig; struct __darwin_pthread_handler_rec *__cleanup_stack; char __opaque[596]; };
# 93 "/usr/include/sys/_types.h" 3 4
#define __DARWIN_NULL ((void *)0)


typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint32_t __darwin_ino_t;
typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;

typedef struct mcontext *__darwin_mcontext_t;
typedef struct mcontext64 *__darwin_mcontext64_t;



typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef struct _opaque_pthread_attr_t
   __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t
   __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t
   __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t
   __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t
   __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t
   __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t
   __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t
   __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t
   *__darwin_pthread_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];



struct sigaltstack



{
 void *ss_sp;
 __darwin_size_t ss_size;
 int ss_flags;
};

typedef struct sigaltstack __darwin_stack_t;






struct ucontext



{
 int uc_onstack;
 __darwin_sigset_t uc_sigmask;
 __darwin_stack_t uc_stack;

 struct ucontext *uc_link;



 __darwin_size_t uc_mcsize;
 __darwin_mcontext_t uc_mcontext;
};

typedef struct ucontext __darwin_ucontext_t;





struct ucontext64 {
 int uc_onstack;
 __darwin_sigset_t uc_sigmask;
 __darwin_stack_t uc_stack;
 struct ucontext64 *uc_link;
 __darwin_size_t uc_mcsize;
 __darwin_mcontext64_t uc_mcontext64;
};
typedef struct ucontext64 __darwin_ucontext64_t;
# 74 "/usr/include/sys/types.h" 2 3 4

# 1 "/usr/include/machine/endian.h" 1 3 4
# 26 "/usr/include/machine/endian.h" 3 4
#define _BSD_MACHINE_ENDIAN_H_ 



# 1 "/usr/include/ppc/endian.h" 1 3 4
# 81 "/usr/include/ppc/endian.h" 3 4
#define _PPC_ENDIAN_H_ 




#define _QUAD_HIGHWORD 0
#define _QUAD_LOWWORD 1





#define __DARWIN_LITTLE_ENDIAN 1234
#define __DARWIN_BIG_ENDIAN 4321
#define __DARWIN_PDP_ENDIAN 3412

#define __DARWIN_BYTE_ORDER __DARWIN_BIG_ENDIAN



#define LITTLE_ENDIAN __DARWIN_LITTLE_ENDIAN
#define BIG_ENDIAN __DARWIN_BIG_ENDIAN
#define PDP_ENDIAN __DARWIN_PDP_ENDIAN

#define BYTE_ORDER __DARWIN_BYTE_ORDER

# 1 "/usr/include/sys/_endian.h" 1 3 4
# 79 "/usr/include/sys/_endian.h" 3 4
#define _SYS__ENDIAN_H_ 
# 88 "/usr/include/sys/_endian.h" 3 4
# 1 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stdint.h" 1 3 4






#define _STDINT_H_ 




#define __WORDSIZE 32
# 39 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stdint.h" 3 4
#define _UINT8_T 
typedef unsigned char uint8_t;



#define _UINT16_T 
typedef unsigned short uint16_t;



#define _UINT32_T 
typedef unsigned int uint32_t;



#define _UINT64_T 
typedef unsigned long long uint64_t;



typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;



typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
# 95 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stdint.h" 3 4
#define _INTMAX_T 

typedef long long int intmax_t;






#define _UINTMAX_T 

typedef long long unsigned int uintmax_t;
# 119 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stdint.h" 3 4
#define INT8_MAX 127
#define INT16_MAX 32767
#define INT32_MAX 2147483647
#define INT64_MAX 9223372036854775807LL

#define INT8_MIN -128
#define INT16_MIN -32768






#define INT32_MIN (-INT32_MAX-1)
#define INT64_MIN (-INT64_MAX-1)

#define UINT8_MAX 255
#define UINT16_MAX 65535
#define UINT32_MAX 4294967295U
#define UINT64_MAX 18446744073709551615ULL


#define INT_LEAST8_MIN INT8_MIN
#define INT_LEAST16_MIN INT16_MIN
#define INT_LEAST32_MIN INT32_MIN
#define INT_LEAST64_MIN INT64_MIN

#define INT_LEAST8_MAX INT8_MAX
#define INT_LEAST16_MAX INT16_MAX
#define INT_LEAST32_MAX INT32_MAX
#define INT_LEAST64_MAX INT64_MAX

#define UINT_LEAST8_MAX UINT8_MAX
#define UINT_LEAST16_MAX UINT16_MAX
#define UINT_LEAST32_MAX UINT32_MAX
#define UINT_LEAST64_MAX UINT64_MAX


#define INT_FAST8_MIN INT8_MIN
#define INT_FAST16_MIN INT16_MIN
#define INT_FAST32_MIN INT32_MIN
#define INT_FAST64_MIN INT64_MIN

#define INT_FAST8_MAX INT8_MAX
#define INT_FAST16_MAX INT16_MAX
#define INT_FAST32_MAX INT32_MAX
#define INT_FAST64_MAX INT64_MAX

#define UINT_FAST8_MAX UINT8_MAX
#define UINT_FAST16_MAX UINT16_MAX
#define UINT_FAST32_MAX UINT32_MAX
#define UINT_FAST64_MAX UINT64_MAX







#define INTPTR_MIN INT32_MIN
#define INTPTR_MAX INT32_MAX





#define UINTPTR_MAX UINT32_MAX



#define INTMAX_MIN INT64_MIN
#define INTMAX_MAX INT64_MAX

#define UINTMAX_MAX UINT64_MAX






#define PTRDIFF_MIN INT32_MIN
#define PTRDIFF_MAX INT32_MAX
# 210 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stdint.h" 3 4
#define SIZE_MAX UINT32_MAX




#define WCHAR_MAX __WCHAR_MAX__
# 229 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stdint.h" 3 4
#define WCHAR_MIN (-WCHAR_MAX-1)



#define WINT_MIN INT32_MIN
#define WINT_MAX INT32_MAX

#define SIG_ATOMIC_MIN INT32_MIN
#define SIG_ATOMIC_MAX INT32_MAX


#define INT8_C(v) (v)
#define INT16_C(v) (v)
#define INT32_C(v) (v)
#define INT64_C(v) (v ## LL)

#define UINT8_C(v) (v ## U)
#define UINT16_C(v) (v ## U)
#define UINT32_C(v) (v ## U)
#define UINT64_C(v) (v ## ULL)

#define INTMAX_C(v) (v ## LL)
#define UINTMAX_C(v) (v ## ULL)
# 89 "/usr/include/sys/_endian.h" 2 3 4
# 1 "/usr/include/libkern/OSByteOrder.h" 1 3 4
# 24 "/usr/include/libkern/OSByteOrder.h" 3 4
#define _OS_OSBYTEORDER_H 




#define OSSwapConstInt16(x) ((uint16_t)((((uint16_t)(x) & 0xff00) >> 8) | (((uint16_t)(x) & 0x00ff) << 8)))



#define OSSwapConstInt32(x) ((uint32_t)((((uint32_t)(x) & 0xff000000) >> 24) | (((uint32_t)(x) & 0x00ff0000) >> 8) | (((uint32_t)(x) & 0x0000ff00) << 8) | (((uint32_t)(x) & 0x000000ff) << 24)))





#define OSSwapConstInt64(x) ((uint64_t)((((uint64_t)(x) & 0xff00000000000000ULL) >> 56) | (((uint64_t)(x) & 0x00ff000000000000ULL) >> 40) | (((uint64_t)(x) & 0x0000ff0000000000ULL) >> 24) | (((uint64_t)(x) & 0x000000ff00000000ULL) >> 8) | (((uint64_t)(x) & 0x00000000ff000000ULL) << 8) | (((uint64_t)(x) & 0x0000000000ff0000ULL) << 24) | (((uint64_t)(x) & 0x000000000000ff00ULL) << 40) | (((uint64_t)(x) & 0x00000000000000ffULL) << 56)))
# 52 "/usr/include/libkern/OSByteOrder.h" 3 4
# 1 "/usr/include/libkern/ppc/OSByteOrder.h" 1 3 4
# 24 "/usr/include/libkern/ppc/OSByteOrder.h" 3 4
#define _OS_OSBYTEORDERPPC_H 
# 34 "/usr/include/libkern/ppc/OSByteOrder.h" 3 4
#define OS_INLINE static __inline__





static __inline__
uint16_t
OSReadSwapInt16(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    uint16_t result;
    volatile uint16_t *addr = (volatile uint16_t *)((uintptr_t)base + byteOffset);

    __asm__ ("lhbrx %0, %2, %1"
             : "=r" (result)
             : "r" (base), "bO" (byteOffset), "m" (*addr));
    return result;
}

static __inline__
uint32_t
OSReadSwapInt32(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    uint32_t result;
    volatile uint32_t *addr = (volatile uint32_t *)((uintptr_t)base + byteOffset);

    __asm__ ("lwbrx %0, %2, %1"
             : "=r" (result)
             : "r" (base), "bO" (byteOffset), "m" (*addr));
    return result;
}

static __inline__
uint64_t
OSReadSwapInt64(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    volatile uint64_t *addr = (volatile uint64_t *)((uintptr_t)base + byteOffset);
    union {
        uint64_t u64;
        uint32_t u32[2];
    } u;

    __asm__ ("lwbrx %0, %3, %2\n\t"
             "lwbrx %1, %4, %2"
             : "=&r" (u.u32[1]), "=r" (u.u32[0])
             : "r" (base), "bO" (byteOffset), "b" (byteOffset + 4), "m" (*addr));
    return u.u64;
}



static __inline__
void
OSWriteSwapInt16(
    volatile void * base,
    uintptr_t byteOffset,
    uint16_t data
)
{
    volatile uint16_t *addr = (volatile uint16_t *)((uintptr_t)base + byteOffset);

    __asm__ ("sthbrx %1, %3, %2"
             : "=m" (*addr)
             : "r" (data), "r" (base), "bO" (byteOffset));
}

static __inline__
void
OSWriteSwapInt32(
    volatile void * base,
    uintptr_t byteOffset,
    uint32_t data
)
{
    volatile uint32_t *addr = (volatile uint32_t *)((uintptr_t)base + byteOffset);

    __asm__ ("stwbrx %1, %3, %2"
             : "=m" (*addr)
             : "r" (data), "r" (base), "bO" (byteOffset));
}

static __inline__
void
OSWriteSwapInt64(
    volatile void * base,
    uintptr_t byteOffset,
    uint64_t data
)
{
    volatile uint64_t *addr = (volatile uint64_t *)((uintptr_t)base + byteOffset);
    uint32_t hi = data >> 32;
    uint32_t lo = data & 0xffffffff;

    __asm__ ("stwbrx %1, %4, %3\n\t"
             "stwbrx %2, %5, %3"
             : "=m" (*addr)
             : "r" (lo), "r" (hi), "r" (base), "bO" (byteOffset), "b" (byteOffset + 4));
}



static __inline__
uint16_t
_OSSwapInt16(
    uint16_t data
)
{
    return OSReadSwapInt16(&data, 0);
}

static __inline__
uint32_t
_OSSwapInt32(
    uint32_t data
)
{
    return OSReadSwapInt32(&data, 0);
}

static __inline__
uint64_t
_OSSwapInt64(
    uint64_t data
)
{
    return OSReadSwapInt64(&data, 0);
}
# 53 "/usr/include/libkern/OSByteOrder.h" 2 3 4






#define OSSwapInt16(x) (__builtin_constant_p(x) ? OSSwapConstInt16(x) : _OSSwapInt16(x))


#define OSSwapInt32(x) (__builtin_constant_p(x) ? OSSwapConstInt32(x) : _OSSwapInt32(x))


#define OSSwapInt64(x) (__builtin_constant_p(x) ? OSSwapConstInt64(x) : _OSSwapInt64(x))
# 80 "/usr/include/libkern/OSByteOrder.h" 3 4
enum {
    OSUnknownByteOrder,
    OSLittleEndian,
    OSBigEndian
};

static __inline__
int32_t
OSHostByteOrder(void) {



    return OSBigEndian;



}

#define OSReadBigInt(x,y) OSReadBigInt32(x, y)
#define OSWriteBigInt(x,y,z) OSWriteBigInt32(x, y, z)
#define OSSwapBigToHostInt(x) OSSwapBigToHostInt32(x)
#define OSSwapHostToBigInt(x) OSSwapHostToBigInt32(x)
#define OSReadLittleInt(x,y) OSReadLittleInt32(x, y)
#define OSWriteLittleInt(x,y,z) OSWriteLittleInt32(x, y, z)
#define OSSwapHostToLittleInt(x) OSSwapHostToLittleInt32(x)
#define OSSwapLittleToHostInt(x) OSSwapLittleToHostInt32(x)



static __inline__
uint16_t
_OSReadInt16(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    return *(volatile uint16_t *)((uintptr_t)base + byteOffset);
}

static __inline__
uint32_t
_OSReadInt32(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    return *(volatile uint32_t *)((uintptr_t)base + byteOffset);
}

static __inline__
uint64_t
_OSReadInt64(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    return *(volatile uint64_t *)((uintptr_t)base + byteOffset);
}



static __inline__
void
_OSWriteInt16(
    volatile void * base,
    uintptr_t byteOffset,
    uint16_t data
)
{
    *(volatile uint16_t *)((uintptr_t)base + byteOffset) = data;
}

static __inline__
void
_OSWriteInt32(
    volatile void * base,
    uintptr_t byteOffset,
    uint32_t data
)
{
    *(volatile uint32_t *)((uintptr_t)base + byteOffset) = data;
}

static __inline__
void
_OSWriteInt64(
    volatile void * base,
    uintptr_t byteOffset,
    uint64_t data
)
{
    *(volatile uint64_t *)((uintptr_t)base + byteOffset) = data;
}





#define OSReadBigInt16(base,byteOffset) _OSReadInt16(base, byteOffset)
#define OSReadBigInt32(base,byteOffset) _OSReadInt32(base, byteOffset)
#define OSReadBigInt64(base,byteOffset) _OSReadInt64(base, byteOffset)



#define OSWriteBigInt16(base,byteOffset,data) _OSWriteInt16(base, byteOffset, data)
#define OSWriteBigInt32(base,byteOffset,data) _OSWriteInt32(base, byteOffset, data)
#define OSWriteBigInt64(base,byteOffset,data) _OSWriteInt64(base, byteOffset, data)



#define OSReadLittleInt16(base,byteOffset) OSReadSwapInt16(base, byteOffset)
#define OSReadLittleInt32(base,byteOffset) OSReadSwapInt32(base, byteOffset)
#define OSReadLittleInt64(base,byteOffset) OSReadSwapInt64(base, byteOffset)



#define OSWriteLittleInt16(base,byteOffset,data) OSWriteSwapInt16(base, byteOffset, data)
#define OSWriteLittleInt32(base,byteOffset,data) OSWriteSwapInt32(base, byteOffset, data)
#define OSWriteLittleInt64(base,byteOffset,data) OSWriteSwapInt64(base, byteOffset, data)



#define OSSwapHostToBigConstInt16(x) (x)
#define OSSwapHostToBigConstInt32(x) (x)
#define OSSwapHostToBigConstInt64(x) (x)



#define OSSwapHostToBigInt16(x) ((uint16_t)(x))
#define OSSwapHostToBigInt32(x) ((uint32_t)(x))
#define OSSwapHostToBigInt64(x) ((uint64_t)(x))



#define OSSwapHostToLittleConstInt16(x) OSSwapConstInt16(x)
#define OSSwapHostToLittleConstInt32(x) OSSwapConstInt32(x)
#define OSSwapHostToLittleConstInt64(x) OSSwapConstInt64(x)



#define OSSwapHostToLittleInt16(x) OSSwapInt16(x)
#define OSSwapHostToLittleInt32(x) OSSwapInt32(x)
#define OSSwapHostToLittleInt64(x) OSSwapInt64(x)



#define OSSwapBigToHostConstInt16(x) (x)
#define OSSwapBigToHostConstInt32(x) (x)
#define OSSwapBigToHostConstInt64(x) (x)



#define OSSwapBigToHostInt16(x) ((uint16_t)(x))
#define OSSwapBigToHostInt32(x) ((uint32_t)(x))
#define OSSwapBigToHostInt64(x) ((uint64_t)(x))



#define OSSwapLittleToHostConstInt16(x) OSSwapConstInt16(x)
#define OSSwapLittleToHostConstInt32(x) OSSwapConstInt32(x)
#define OSSwapLittleToHostConstInt64(x) OSSwapConstInt64(x)



#define OSSwapLittleToHostInt16(x) OSSwapInt16(x)
#define OSSwapLittleToHostInt32(x) OSSwapInt32(x)
#define OSSwapLittleToHostInt64(x) OSSwapInt64(x)
# 90 "/usr/include/sys/_endian.h" 2 3 4


uint16_t ntohs(uint16_t);
uint16_t htons(uint16_t);
uint32_t ntohl(uint32_t);
uint32_t htonl(uint32_t);



#define ntohs(x) OSSwapBigToHostInt16(x)
#define htons(x) OSSwapHostToBigInt16(x)

#define ntohl(x) OSSwapBigToHostInt32(x)
#define htonl(x) OSSwapHostToBigInt32(x)


#define NTOHL(x) (x) = ntohl((u_long)x)
#define NTOHS(x) (x) = ntohs((u_short)x)
#define HTONL(x) (x) = htonl((u_long)x)
#define HTONS(x) (x) = htons((u_short)x)
# 108 "/usr/include/ppc/endian.h" 2 3 4
# 31 "/usr/include/machine/endian.h" 2 3 4
# 76 "/usr/include/sys/types.h" 2 3 4


typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;

typedef unsigned long u_long;
#define _U_LONG 

typedef unsigned short ushort;
typedef unsigned int uint;


typedef u_int64_t u_quad_t;
typedef int64_t quad_t;
typedef quad_t * qaddr_t;

typedef char * caddr_t;
typedef int32_t daddr_t;


typedef __darwin_dev_t dev_t;
#define _DEV_T 


typedef u_int32_t fixpt_t;


typedef __darwin_blkcnt_t blkcnt_t;
#define _BLKCNT_T 



typedef __darwin_blksize_t blksize_t;
#define _BLKSIZE_T 



typedef __darwin_gid_t gid_t;
#define _GID_T 



#define _IN_ADDR_T 
typedef __uint32_t in_addr_t;



#define _IN_PORT_T 
typedef __uint16_t in_port_t;



typedef __darwin_ino_t ino_t;
#define _INO_T 



#define _KEY_T 
typedef __int32_t key_t;



typedef __darwin_mode_t mode_t;
#define _MODE_T 



typedef __uint16_t nlink_t;
#define _NLINK_T 



#define _ID_T 
typedef __darwin_id_t id_t;



typedef __darwin_pid_t pid_t;
#define _PID_T 



typedef __darwin_off_t off_t;
#define _OFF_T 


typedef int32_t segsz_t;
typedef int32_t swblk_t;


typedef __darwin_uid_t uid_t;
#define _UID_T 
# 178 "/usr/include/sys/types.h" 3 4
#define major(x) ((int32_t)(((u_int32_t)(x) >> 24) & 0xff))
#define minor(x) ((int32_t)((x) & 0xffffff))
#define makedev(x,y) ((dev_t)(((x) << 24) | (y)))



#define _CLOCK_T 
typedef __darwin_clock_t clock_t;



#define _SIZE_T 


typedef __darwin_size_t size_t;



#define _SSIZE_T 
typedef __darwin_ssize_t ssize_t;



#define _TIME_T 
typedef __darwin_time_t time_t;



#define _USECONDS_T 
typedef __darwin_useconds_t useconds_t;



#define _SUSECONDS_T 
typedef __darwin_suseconds_t suseconds_t;
# 221 "/usr/include/sys/types.h" 3 4
#define NBBY 8
#define NFDBITS (sizeof(__int32_t) * NBBY)
#define howmany(x,y) (((x) + ((y) - 1)) / (y))
typedef __int32_t fd_mask;







#define _FD_SET 
# 241 "/usr/include/sys/types.h" 3 4
#define FD_SETSIZE 1024


#define __DARWIN_NBBY 8
#define __DARWIN_NFDBITS (sizeof(__int32_t) * __DARWIN_NBBY)
#define __DARWIN_howmany(x,y) (((x) + ((y) - 1)) / (y))


typedef struct fd_set {
 __int32_t fds_bits[(((1024) + (((sizeof(__int32_t) * 8)) - 1)) / ((sizeof(__int32_t) * 8)))];
} fd_set;


#define FD_SET(n,p) ((p)->fds_bits[(n)/__DARWIN_NFDBITS] |= (1<<((n) % __DARWIN_NFDBITS)))
#define FD_CLR(n,p) ((p)->fds_bits[(n)/__DARWIN_NFDBITS] &= ~(1<<((n) % __DARWIN_NFDBITS)))
#define FD_ISSET(n,p) ((p)->fds_bits[(n)/__DARWIN_NFDBITS] & (1<<((n) % __DARWIN_NFDBITS)))





#define FD_ZERO(p) __builtin_bzero(p, sizeof(*(p)))




#define FD_COPY(f,t) bcopy(f, t, sizeof(*(f)))
# 295 "/usr/include/sys/types.h" 3 4
#define _PTHREAD_ATTR_T 
typedef __darwin_pthread_attr_t pthread_attr_t;


#define _PTHREAD_COND_T 
typedef __darwin_pthread_cond_t pthread_cond_t;


#define _PTHREAD_CONDATTR_T 
typedef __darwin_pthread_condattr_t pthread_condattr_t;


#define _PTHREAD_MUTEX_T 
typedef __darwin_pthread_mutex_t pthread_mutex_t;


#define _PTHREAD_MUTEXATTR_T 
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;


#define _PTHREAD_ONCE_T 
typedef __darwin_pthread_once_t pthread_once_t;


#define _PTHREAD_RWLOCK_T 
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;


#define _PTHREAD_RWLOCKATTR_T 
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;


#define _PTHREAD_T 
typedef __darwin_pthread_t pthread_t;





#define _PTHREAD_KEY_T 
typedef __darwin_pthread_key_t pthread_key_t;




#define _FSBLKCNT_T 
typedef __darwin_fsblkcnt_t fsblkcnt_t;



#define _FSFILCNT_T 
typedef __darwin_fsfilcnt_t fsfilcnt_t;
# 60 "Socket6.xs" 2
# 1 "/usr/include/sys/socket.h" 1 3 4
# 61 "/usr/include/sys/socket.h" 3 4
#define _SYS_SOCKET_H_ 




#define _NO_NAMESPACE_POLLUTION 
# 1 "/usr/include/machine/param.h" 1 3 4
# 26 "/usr/include/machine/param.h" 3 4
#define _BSD_MACHINE_PARAM_H_ 



# 1 "/usr/include/ppc/param.h" 1 3 4
# 25 "/usr/include/ppc/param.h" 3 4
#define _PPC_PARAM_H_ 






#define ALIGNBYTES 3
#define ALIGN(p) (((unsigned int)(p) + ALIGNBYTES) &~ ALIGNBYTES)

#define NBPG 4096
#define PGOFSET (NBPG-1)
#define PGSHIFT 12

#define NBSEG 0x40000000
#define SEGOFSET (NBSEG-1)
#define SEGSHIFT 30

#define DEV_BSIZE 512
#define DEV_BSHIFT 9
#define BLKDEV_IOSIZE 2048
#define MAXPHYS (128 * 1024)

#define STACK_GROWTH_UP 0

#define CLSIZE 1
#define CLSIZELOG2 0

#define STACKSIZE 4
#define UPAGES 0
# 64 "/usr/include/ppc/param.h" 3 4
#define MSIZE 256
#define MCLBYTES 2048
#define MCLSHIFT 11
#define MCLOFSET (MCLBYTES - 1)




#define NMBCLUSTERS ((1024 * 1024) / MCLBYTES)





#define ctod(x) ((x)<<(PGSHIFT-DEV_BSHIFT))
#define dtoc(x) ((x)>>(PGSHIFT-DEV_BSHIFT))
#define dtob(x) ((x)<<DEV_BSHIFT)


#define ctob(x) ((x)<<PGSHIFT)


#define btoc(x) (((unsigned)(x)+(PGOFSET))>>PGSHIFT)

#define btodb(bytes,devBlockSize) ((unsigned)(bytes) / devBlockSize)

#define dbtob(db,devBlockSize) ((unsigned)(db) * devBlockSize)
# 105 "/usr/include/ppc/param.h" 3 4
#define bdbtofsb(bn) ((bn) / (BLKDEV_IOSIZE/DEV_BSIZE))



#define ENDIAN_MASK(val,size) (1 << (size-1 - val))





#define MASK(PART) ENDIAN_MASK(PART ## _BIT, 32)


#define MSR_EE_BIT 16
#define MSR_PR_BIT 17
#define USERMODE(msr) (msr & MASK(MSR_PR) ? TRUE : FALSE)
#define BASEPRI(msr) (msr & MASK(MSR_EE) ? TRUE : FALSE)





#define DELAY(n) { register int N = (n); while (--N > 0); }


#define NPIDS 16
#define NIOPIDS 8
# 31 "/usr/include/machine/param.h" 2 3 4
# 68 "/usr/include/sys/socket.h" 2 3 4
#undef _NO_NAMESPACE_POLLUTION
# 93 "/usr/include/sys/socket.h" 3 4
#define _SA_FAMILY_T 
typedef __uint8_t sa_family_t;



#define _SOCKLEN_T 
typedef __darwin_socklen_t socklen_t;
# 118 "/usr/include/sys/socket.h" 3 4
#define _STRUCT_IOVEC 
struct iovec {
 void * iov_base;
 size_t iov_len;
};





#define SOCK_STREAM 1
#define SOCK_DGRAM 2
#define SOCK_RAW 3

#define SOCK_RDM 4

#define SOCK_SEQPACKET 5




#define SO_DEBUG 0x0001
#define SO_ACCEPTCONN 0x0002
#define SO_REUSEADDR 0x0004
#define SO_KEEPALIVE 0x0008
#define SO_DONTROUTE 0x0010
#define SO_BROADCAST 0x0020

#define SO_USELOOPBACK 0x0040
#define SO_LINGER 0x0080



#define SO_OOBINLINE 0x0100

#define SO_REUSEPORT 0x0200
#define SO_TIMESTAMP 0x0400



#define SO_DONTTRUNC 0x2000

#define SO_WANTMORE 0x4000
#define SO_WANTOOBFLAG 0x8000






#define SO_SNDBUF 0x1001
#define SO_RCVBUF 0x1002
#define SO_SNDLOWAT 0x1003
#define SO_RCVLOWAT 0x1004
#define SO_SNDTIMEO 0x1005
#define SO_RCVTIMEO 0x1006
#define SO_ERROR 0x1007
#define SO_TYPE 0x1008



#define SO_NREAD 0x1020
#define SO_NKE 0x1021
#define SO_NOSIGPIPE 0x1022
#define SO_NOADDRERR 0x1023
#define SO_NWRITE 0x1024
#define SO_LINGER_SEC 0x1080






struct linger {
 int l_onoff;
 int l_linger;
};
# 206 "/usr/include/sys/socket.h" 3 4
#define SOL_SOCKET 0xffff




#define AF_UNSPEC 0
#define AF_UNIX 1

#define AF_LOCAL AF_UNIX

#define AF_INET 2

#define AF_IMPLINK 3
#define AF_PUP 4
#define AF_CHAOS 5
#define AF_NS 6
#define AF_ISO 7
#define AF_OSI AF_ISO
#define AF_ECMA 8
#define AF_DATAKIT 9
#define AF_CCITT 10
#define AF_SNA 11
#define AF_DECnet 12
#define AF_DLI 13
#define AF_LAT 14
#define AF_HYLINK 15
#define AF_APPLETALK 16
#define AF_ROUTE 17
#define AF_LINK 18
#define pseudo_AF_XTP 19
#define AF_COIP 20
#define AF_CNT 21
#define pseudo_AF_RTIP 22
#define AF_IPX 23
#define AF_SIP 24
#define pseudo_AF_PIP 25


#define AF_NDRV 27

#define AF_ISDN 28
#define AF_E164 AF_ISDN
#define pseudo_AF_KEY 29

#define AF_INET6 30

#define AF_NATM 31

#define AF_SYSTEM 32
#define AF_NETBIOS 33
#define AF_PPP 34



#define pseudo_AF_HDRCMPLT 35


#define AF_RESERVED_36 36




#define AF_MAX 37





struct sockaddr {
 __uint8_t sa_len;
 sa_family_t sa_family;
 char sa_data[14];
};


#define SOCK_MAXADDRLEN 255





struct sockproto {
 __uint16_t sp_family;
 __uint16_t sp_protocol;
};





#define _SS_MAXSIZE 128
#define _SS_ALIGNSIZE (sizeof(__int64_t))
#define _SS_PAD1SIZE (_SS_ALIGNSIZE - sizeof(__uint8_t) - sizeof(sa_family_t))

#define _SS_PAD2SIZE (_SS_MAXSIZE - sizeof(__uint8_t) - sizeof(sa_family_t) - _SS_PAD1SIZE - _SS_ALIGNSIZE)






struct sockaddr_storage {
 __uint8_t ss_len;
 sa_family_t ss_family;
 char __ss_pad1[((sizeof(__int64_t)) - sizeof(__uint8_t) - sizeof(sa_family_t))];
 __int64_t __ss_align;
 char __ss_pad2[(128 - sizeof(__uint8_t) - sizeof(sa_family_t) - ((sizeof(__int64_t)) - sizeof(__uint8_t) - sizeof(sa_family_t)) - (sizeof(__int64_t)))];
};




#define PF_UNSPEC AF_UNSPEC
#define PF_LOCAL AF_LOCAL
#define PF_UNIX PF_LOCAL
#define PF_INET AF_INET
#define PF_IMPLINK AF_IMPLINK
#define PF_PUP AF_PUP
#define PF_CHAOS AF_CHAOS
#define PF_NS AF_NS
#define PF_ISO AF_ISO
#define PF_OSI AF_ISO
#define PF_ECMA AF_ECMA
#define PF_DATAKIT AF_DATAKIT
#define PF_CCITT AF_CCITT
#define PF_SNA AF_SNA
#define PF_DECnet AF_DECnet
#define PF_DLI AF_DLI
#define PF_LAT AF_LAT
#define PF_HYLINK AF_HYLINK
#define PF_APPLETALK AF_APPLETALK
#define PF_ROUTE AF_ROUTE
#define PF_LINK AF_LINK
#define PF_XTP pseudo_AF_XTP
#define PF_COIP AF_COIP
#define PF_CNT AF_CNT
#define PF_SIP AF_SIP
#define PF_IPX AF_IPX
#define PF_RTIP pseudo_AF_RTIP
#define PF_PIP pseudo_AF_PIP

#define PF_NDRV AF_NDRV

#define PF_ISDN AF_ISDN
#define PF_KEY pseudo_AF_KEY
#define PF_INET6 AF_INET6
#define PF_NATM AF_NATM

#define PF_SYSTEM AF_SYSTEM
#define PF_NETBIOS AF_NETBIOS
#define PF_PPP AF_PPP
#define PF_RESERVED_36 AF_RESERVED_36






#define PF_MAX AF_MAX




#define PF_VLAN ((uint32_t)0x766c616e)
#define PF_BOND ((uint32_t)0x626f6e64)
# 380 "/usr/include/sys/socket.h" 3 4
#define NET_MAXID AF_MAX
# 392 "/usr/include/sys/socket.h" 3 4
#define NET_RT_DUMP 1
#define NET_RT_FLAGS 2
#define NET_RT_IFLIST 3
#define NET_RT_STAT 4
#define NET_RT_TRASH 5
#define NET_RT_IFLIST2 6
#define NET_RT_DUMP2 7
#define NET_RT_MAXID 8





#define SOMAXCONN 128





struct msghdr {
 void *msg_name;
 socklen_t msg_namelen;
 struct iovec *msg_iov;
 int msg_iovlen;
 void *msg_control;
 socklen_t msg_controllen;
 int msg_flags;
};



#define MSG_OOB 0x1
#define MSG_PEEK 0x2
#define MSG_DONTROUTE 0x4
#define MSG_EOR 0x8
#define MSG_TRUNC 0x10
#define MSG_CTRUNC 0x20
#define MSG_WAITALL 0x40

#define MSG_DONTWAIT 0x80
#define MSG_EOF 0x100

#define MSG_WAITSTREAM 0x200
#define MSG_FLUSH 0x400
#define MSG_HOLD 0x800
#define MSG_SEND 0x1000
#define MSG_HAVEMORE 0x2000
#define MSG_RCVMORE 0x4000

#define MSG_COMPAT 0x8000
#define MSG_NEEDSA 0x10000
# 451 "/usr/include/sys/socket.h" 3 4
struct cmsghdr {
 socklen_t cmsg_len;
 int cmsg_level;
 int cmsg_type;

};
# 486 "/usr/include/sys/socket.h" 3 4
#define CMSG_DATA(cmsg) ((unsigned char *)(cmsg) + ALIGN(sizeof(struct cmsghdr)))



#define CMSG_NXTHDR(mhdr,cmsg) (((unsigned char *)(cmsg) + ALIGN((cmsg)->cmsg_len) + ALIGN(sizeof(struct cmsghdr)) > (unsigned char *)(mhdr)->msg_control + (mhdr)->msg_controllen) ? (struct cmsghdr *)0 : (struct cmsghdr *)((unsigned char *)(cmsg) + ALIGN((cmsg)->cmsg_len)))






#define CMSG_FIRSTHDR(mhdr) ((struct cmsghdr *)(mhdr)->msg_control)



#define CMSG_SPACE(l) (ALIGN(sizeof(struct cmsghdr)) + ALIGN(l))
#define CMSG_LEN(l) (ALIGN(sizeof(struct cmsghdr)) + (l))




#define SCM_RIGHTS 0x01

#define SCM_TIMESTAMP 0x02
#define SCM_CREDS 0x03




struct osockaddr {
 __uint16_t sa_family;
 char sa_data[14];
};





struct omsghdr {
 void *msg_name;
 socklen_t msg_namelen;
 struct iovec *msg_iov;
 int msg_iovlen;
 void *msg_accrights;
 int msg_accrightslen;
};





#define SHUT_RD 0
#define SHUT_WR 1
#define SHUT_RDWR 2
# 555 "/usr/include/sys/socket.h" 3 4

int accept(int, struct sockaddr * , socklen_t * )
  ;
int bind(int, const struct sockaddr *, socklen_t) ;
int connect(int, const struct sockaddr *, socklen_t) ;
int getpeername(int, struct sockaddr * , socklen_t * )
  ;
int getsockname(int, struct sockaddr * , socklen_t * )
  ;
int getsockopt(int, int, int, void * , socklen_t * );
int listen(int, int) ;
ssize_t recv(int, void *, size_t, int) ;
ssize_t recvfrom(int, void *, size_t, int, struct sockaddr * ,
  socklen_t * ) ;
ssize_t recvmsg(int, struct msghdr *, int) ;
ssize_t send(int, const void *, size_t, int) ;
ssize_t sendmsg(int, const struct msghdr *, int) ;
ssize_t sendto(int, const void *, size_t,
  int, const struct sockaddr *, socklen_t) ;
int setsockopt(int, int, int, const void *, socklen_t);
int shutdown(int, int);
int socket(int, int, int);
int socketpair(int, int, int, int *) ;
# 587 "/usr/include/sys/socket.h" 3 4
void pfctlinput(int, struct sockaddr *);


# 61 "Socket6.xs" 2
# 1 "/usr/include/netinet/in.h" 1 3 4
# 59 "/usr/include/netinet/in.h" 3 4
#define _NETINET_IN_H_ 
# 94 "/usr/include/netinet/in.h" 3 4
#define IPPROTO_IP 0

#define IPPROTO_HOPOPTS 0

#define IPPROTO_ICMP 1

#define IPPROTO_IGMP 2
#define IPPROTO_GGP 3
#define IPPROTO_IPV4 4
#define IPPROTO_IPIP IPPROTO_IPV4

#define IPPROTO_TCP 6

#define IPPROTO_ST 7
#define IPPROTO_EGP 8
#define IPPROTO_PIGP 9
#define IPPROTO_RCCMON 10
#define IPPROTO_NVPII 11
#define IPPROTO_PUP 12
#define IPPROTO_ARGUS 13
#define IPPROTO_EMCON 14
#define IPPROTO_XNET 15
#define IPPROTO_CHAOS 16

#define IPPROTO_UDP 17

#define IPPROTO_MUX 18
#define IPPROTO_MEAS 19
#define IPPROTO_HMP 20
#define IPPROTO_PRM 21
#define IPPROTO_IDP 22
#define IPPROTO_TRUNK1 23
#define IPPROTO_TRUNK2 24
#define IPPROTO_LEAF1 25
#define IPPROTO_LEAF2 26
#define IPPROTO_RDP 27
#define IPPROTO_IRTP 28
#define IPPROTO_TP 29
#define IPPROTO_BLT 30
#define IPPROTO_NSP 31
#define IPPROTO_INP 32
#define IPPROTO_SEP 33
#define IPPROTO_3PC 34
#define IPPROTO_IDPR 35
#define IPPROTO_XTP 36
#define IPPROTO_DDP 37
#define IPPROTO_CMTP 38
#define IPPROTO_TPXX 39
#define IPPROTO_IL 40

#define IPPROTO_IPV6 41

#define IPPROTO_SDRP 42
#define IPPROTO_ROUTING 43
#define IPPROTO_FRAGMENT 44
#define IPPROTO_IDRP 45
#define IPPROTO_RSVP 46
#define IPPROTO_GRE 47
#define IPPROTO_MHRP 48
#define IPPROTO_BHA 49
#define IPPROTO_ESP 50
#define IPPROTO_AH 51
#define IPPROTO_INLSP 52
#define IPPROTO_SWIPE 53
#define IPPROTO_NHRP 54

#define IPPROTO_ICMPV6 58
#define IPPROTO_NONE 59
#define IPPROTO_DSTOPTS 60
#define IPPROTO_AHIP 61
#define IPPROTO_CFTP 62
#define IPPROTO_HELLO 63
#define IPPROTO_SATEXPAK 64
#define IPPROTO_KRYPTOLAN 65
#define IPPROTO_RVD 66
#define IPPROTO_IPPC 67
#define IPPROTO_ADFS 68
#define IPPROTO_SATMON 69
#define IPPROTO_VISA 70
#define IPPROTO_IPCV 71
#define IPPROTO_CPNX 72
#define IPPROTO_CPHB 73
#define IPPROTO_WSN 74
#define IPPROTO_PVP 75
#define IPPROTO_BRSATMON 76
#define IPPROTO_ND 77
#define IPPROTO_WBMON 78
#define IPPROTO_WBEXPAK 79
#define IPPROTO_EON 80
#define IPPROTO_VMTP 81
#define IPPROTO_SVMTP 82
#define IPPROTO_VINES 83
#define IPPROTO_TTP 84
#define IPPROTO_IGP 85
#define IPPROTO_DGP 86
#define IPPROTO_TCF 87
#define IPPROTO_IGRP 88
#define IPPROTO_OSPFIGP 89
#define IPPROTO_SRPC 90
#define IPPROTO_LARP 91
#define IPPROTO_MTP 92
#define IPPROTO_AX25 93
#define IPPROTO_IPEIP 94
#define IPPROTO_MICP 95
#define IPPROTO_SCCSP 96
#define IPPROTO_ETHERIP 97
#define IPPROTO_ENCAP 98
#define IPPROTO_APES 99
#define IPPROTO_GMTP 100
#define IPPROTO_IPCOMP 108

#define IPPROTO_PIM 103
#define IPPROTO_PGM 113


#define IPPROTO_DIVERT 254

#define IPPROTO_RAW 255


#define IPPROTO_MAX 256


#define IPPROTO_DONE 257
# 265 "/usr/include/netinet/in.h" 3 4
#define __DARWIN_IPPORT_RESERVED 1024
# 275 "/usr/include/netinet/in.h" 3 4
#define IPPORT_RESERVED __DARWIN_IPPORT_RESERVED

#define IPPORT_USERRESERVED 5000




#define IPPORT_HIFIRSTAUTO 49152
#define IPPORT_HILASTAUTO 65535







#define IPPORT_RESERVEDSTART 600





struct in_addr {
 in_addr_t s_addr;
};






#define INADDR_ANY (u_int32_t)0x00000000
#define INADDR_BROADCAST (u_int32_t)0xffffffff


#define IN_CLASSA(i) (((u_int32_t)(i) & 0x80000000) == 0)
#define IN_CLASSA_NET 0xff000000
#define IN_CLASSA_NSHIFT 24
#define IN_CLASSA_HOST 0x00ffffff
#define IN_CLASSA_MAX 128

#define IN_CLASSB(i) (((u_int32_t)(i) & 0xc0000000) == 0x80000000)
#define IN_CLASSB_NET 0xffff0000
#define IN_CLASSB_NSHIFT 16
#define IN_CLASSB_HOST 0x0000ffff
#define IN_CLASSB_MAX 65536

#define IN_CLASSC(i) (((u_int32_t)(i) & 0xe0000000) == 0xc0000000)
#define IN_CLASSC_NET 0xffffff00
#define IN_CLASSC_NSHIFT 8
#define IN_CLASSC_HOST 0x000000ff

#define IN_CLASSD(i) (((u_int32_t)(i) & 0xf0000000) == 0xe0000000)
#define IN_CLASSD_NET 0xf0000000
#define IN_CLASSD_NSHIFT 28
#define IN_CLASSD_HOST 0x0fffffff
#define IN_MULTICAST(i) IN_CLASSD(i)

#define IN_EXPERIMENTAL(i) (((u_int32_t)(i) & 0xf0000000) == 0xf0000000)
#define IN_BADCLASS(i) (((u_int32_t)(i) & 0xf0000000) == 0xf0000000)

#define INADDR_LOOPBACK (u_int32_t)0x7f000001
#define INADDR_NONE 0xffffffff

#define INADDR_UNSPEC_GROUP (u_int32_t)0xe0000000
#define INADDR_ALLHOSTS_GROUP (u_int32_t)0xe0000001
#define INADDR_ALLRTRS_GROUP (u_int32_t)0xe0000002
#define INADDR_MAX_LOCAL_GROUP (u_int32_t)0xe00000ff


#define IN_LINKLOCALNETNUM (u_int32_t)0xA9FE0000
#define IN_LINKLOCAL(i) (((u_int32_t)(i) & IN_CLASSB_NET) == IN_LINKLOCALNETNUM)


#define IN_LOOPBACKNET 127





struct sockaddr_in {
 __uint8_t sin_len;
 sa_family_t sin_family;
 in_port_t sin_port;
 struct in_addr sin_addr;
 char sin_zero[8];
};

#define INET_ADDRSTRLEN 16
# 373 "/usr/include/netinet/in.h" 3 4
struct ip_opts {
 struct in_addr ip_dst;
 char ip_opts[40];
};





#define IP_OPTIONS 1
#define IP_HDRINCL 2
#define IP_TOS 3
#define IP_TTL 4
#define IP_RECVOPTS 5
#define IP_RECVRETOPTS 6
#define IP_RECVDSTADDR 7
#define IP_RETOPTS 8
#define IP_MULTICAST_IF 9
#define IP_MULTICAST_TTL 10
#define IP_MULTICAST_LOOP 11
#define IP_ADD_MEMBERSHIP 12
#define IP_DROP_MEMBERSHIP 13
#define IP_MULTICAST_VIF 14
#define IP_RSVP_ON 15
#define IP_RSVP_OFF 16
#define IP_RSVP_VIF_ON 17
#define IP_RSVP_VIF_OFF 18
#define IP_PORTRANGE 19
#define IP_RECVIF 20

#define IP_IPSEC_POLICY 21
#define IP_FAITH 22

#define IP_STRIPHDR 23

#define IP_RECVTTL 24


#define IP_FW_ADD 40
#define IP_FW_DEL 41
#define IP_FW_FLUSH 42
#define IP_FW_ZERO 43
#define IP_FW_GET 44
#define IP_FW_RESETLOG 45


#define IP_OLD_FW_ADD 50
#define IP_OLD_FW_DEL 51
#define IP_OLD_FW_FLUSH 52
#define IP_OLD_FW_ZERO 53
#define IP_OLD_FW_GET 54
#define IP_NAT__XXX 55
#define IP_OLD_FW_RESETLOG 56

#define IP_DUMMYNET_CONFIGURE 60
#define IP_DUMMYNET_DEL 61
#define IP_DUMMYNET_FLUSH 62
#define IP_DUMMYNET_GET 64




#define IP_DEFAULT_MULTICAST_TTL 1
#define IP_DEFAULT_MULTICAST_LOOP 1
#define IP_MAX_MEMBERSHIPS 20




struct ip_mreq {
 struct in_addr imr_multiaddr;
 struct in_addr imr_interface;
};





#define IP_PORTRANGE_DEFAULT 0
#define IP_PORTRANGE_HIGH 1
#define IP_PORTRANGE_LOW 2
# 462 "/usr/include/netinet/in.h" 3 4
#define IPPROTO_MAXID (IPPROTO_AH + 1)





#define IPCTL_FORWARDING 1
#define IPCTL_SENDREDIRECTS 2
#define IPCTL_DEFTTL 3



#define IPCTL_RTEXPIRE 5
#define IPCTL_RTMINEXPIRE 6
#define IPCTL_RTMAXCACHE 7
#define IPCTL_SOURCEROUTE 8
#define IPCTL_DIRECTEDBROADCAST 9
#define IPCTL_INTRQMAXLEN 10
#define IPCTL_INTRQDROPS 11
#define IPCTL_STATS 12
#define IPCTL_ACCEPTSOURCEROUTE 13
#define IPCTL_FASTFORWARDING 14
#define IPCTL_KEEPFAITH 15
#define IPCTL_GIF_TTL 16
#define IPCTL_MAXID 17






#define __KAME_NETINET_IN_H_INCLUDED_ 
# 1 "/usr/include/netinet6/in6.h" 1 3 4
# 73 "/usr/include/netinet6/in6.h" 3 4
#define _NETINET6_IN6_H_ 
# 88 "/usr/include/netinet6/in6.h" 3 4
#define __KAME__ 
#define __KAME_VERSION "20010528/apple-darwin"
# 120 "/usr/include/netinet6/in6.h" 3 4
#define IPV6PORT_RESERVED 1024
#define IPV6PORT_ANONMIN 49152
#define IPV6PORT_ANONMAX 65535
#define IPV6PORT_RESERVEDMIN 600
#define IPV6PORT_RESERVEDMAX (IPV6PORT_RESERVED-1)





struct in6_addr {
 union {
  __uint8_t __u6_addr8[16];
  __uint16_t __u6_addr16[8];
  __uint32_t __u6_addr32[4];
 } __u6_addr;
};

#define s6_addr __u6_addr.__u6_addr8

#define INET6_ADDRSTRLEN 46





#define SIN6_LEN 

struct sockaddr_in6 {
 __uint8_t sin6_len;
 sa_family_t sin6_family;
 in_port_t sin6_port;
 __uint32_t sin6_flowinfo;
 struct in6_addr sin6_addr;
 __uint32_t sin6_scope_id;
};
# 170 "/usr/include/netinet6/in6.h" 3 4
#define IN6ADDR_ANY_INIT {{{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}


#define IN6ADDR_LOOPBACK_INIT {{{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}



#define IN6ADDR_NODELOCAL_ALLNODES_INIT {{{ 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}


#define IN6ADDR_LINKLOCAL_ALLNODES_INIT {{{ 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}


#define IN6ADDR_LINKLOCAL_ALLROUTERS_INIT {{{ 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 }}}




extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;

extern const struct in6_addr in6addr_nodelocal_allnodes;
extern const struct in6_addr in6addr_linklocal_allnodes;
extern const struct in6_addr in6addr_linklocal_allrouters;
# 203 "/usr/include/netinet6/in6.h" 3 4
#define IN6_ARE_ADDR_EQUAL(a,b) (memcmp(&(a)->s6_addr[0], &(b)->s6_addr[0], sizeof(struct in6_addr)) == 0)







#define IN6_IS_ADDR_UNSPECIFIED(a) ((*(const __uint32_t *)(const void *)(&(a)->s6_addr[0]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[4]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[8]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[12]) == 0))
# 220 "/usr/include/netinet6/in6.h" 3 4
#define IN6_IS_ADDR_LOOPBACK(a) ((*(const __uint32_t *)(const void *)(&(a)->s6_addr[0]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[4]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[8]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[12]) == ntohl(1)))
# 229 "/usr/include/netinet6/in6.h" 3 4
#define IN6_IS_ADDR_V4COMPAT(a) ((*(const __uint32_t *)(const void *)(&(a)->s6_addr[0]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[4]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[8]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[12]) != 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[12]) != ntohl(1)))
# 239 "/usr/include/netinet6/in6.h" 3 4
#define IN6_IS_ADDR_V4MAPPED(a) ((*(const __uint32_t *)(const void *)(&(a)->s6_addr[0]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[4]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[8]) == ntohl(0x0000ffff)))
# 248 "/usr/include/netinet6/in6.h" 3 4
#define __IPV6_ADDR_SCOPE_NODELOCAL 0x01
#define __IPV6_ADDR_SCOPE_LINKLOCAL 0x02
#define __IPV6_ADDR_SCOPE_SITELOCAL 0x05
#define __IPV6_ADDR_SCOPE_ORGLOCAL 0x08
#define __IPV6_ADDR_SCOPE_GLOBAL 0x0e





#define IN6_IS_ADDR_LINKLOCAL(a) (((a)->s6_addr[0] == 0xfe) && (((a)->s6_addr[1] & 0xc0) == 0x80))

#define IN6_IS_ADDR_SITELOCAL(a) (((a)->s6_addr[0] == 0xfe) && (((a)->s6_addr[1] & 0xc0) == 0xc0))





#define IN6_IS_ADDR_MULTICAST(a) ((a)->s6_addr[0] == 0xff)

#define __IPV6_ADDR_MC_SCOPE(a) ((a)->s6_addr[1] & 0x0f)




#define IN6_IS_ADDR_MC_NODELOCAL(a) (IN6_IS_ADDR_MULTICAST(a) && (__IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_NODELOCAL))


#define IN6_IS_ADDR_MC_LINKLOCAL(a) (IN6_IS_ADDR_MULTICAST(a) && (__IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_LINKLOCAL))


#define IN6_IS_ADDR_MC_SITELOCAL(a) (IN6_IS_ADDR_MULTICAST(a) && (__IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_SITELOCAL))


#define IN6_IS_ADDR_MC_ORGLOCAL(a) (IN6_IS_ADDR_MULTICAST(a) && (__IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_ORGLOCAL))


#define IN6_IS_ADDR_MC_GLOBAL(a) (IN6_IS_ADDR_MULTICAST(a) && (__IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_GLOBAL))
# 309 "/usr/include/netinet6/in6.h" 3 4
#define IPV6_SOCKOPT_RESERVED1 3

#define IPV6_UNICAST_HOPS 4
#define IPV6_MULTICAST_IF 9
#define IPV6_MULTICAST_HOPS 10
#define IPV6_MULTICAST_LOOP 11
#define IPV6_JOIN_GROUP 12
#define IPV6_LEAVE_GROUP 13


#define IPV6_PORTRANGE 14
#define ICMP6_FILTER 18

#define IPV6_PKTINFO 19
#define IPV6_HOPLIMIT 20
#define IPV6_NEXTHOP 21
#define IPV6_HOPOPTS 22
#define IPV6_DSTOPTS 23
#define IPV6_RTHDR 24
#define IPV6_PKTOPTIONS 25

#define IPV6_CHECKSUM 26

#define IPV6_V6ONLY 27

#define IPV6_BINDV6ONLY IPV6_V6ONLY



#define IPV6_IPSEC_POLICY 28

#define IPV6_FAITH 29


#define IPV6_FW_ADD 30
#define IPV6_FW_DEL 31
#define IPV6_FW_FLUSH 32
#define IPV6_FW_ZERO 33
#define IPV6_FW_GET 34




#define IPV6_RTHDR_LOOSE 0
#define IPV6_RTHDR_STRICT 1
#define IPV6_RTHDR_TYPE_0 0




#define IPV6_DEFAULT_MULTICAST_HOPS 1
#define IPV6_DEFAULT_MULTICAST_LOOP 1




struct ipv6_mreq {
 struct in6_addr ipv6mr_multiaddr;
 unsigned int ipv6mr_interface;
};




struct in6_pktinfo {
 struct in6_addr ipi6_addr;
 unsigned int ipi6_ifindex;
};





#define IPV6_PORTRANGE_DEFAULT 0
#define IPV6_PORTRANGE_HIGH 1
#define IPV6_PORTRANGE_LOW 2







#define IPV6PROTO_MAXID (IPPROTO_PIM + 1)




#define IPV6CTL_FORWARDING 1
#define IPV6CTL_SENDREDIRECTS 2
#define IPV6CTL_DEFHLIM 3



#define IPV6CTL_FORWSRCRT 5
#define IPV6CTL_STATS 6
#define IPV6CTL_MRTSTATS 7
#define IPV6CTL_MRTPROTO 8
#define IPV6CTL_MAXFRAGPACKETS 9
#define IPV6CTL_SOURCECHECK 10
#define IPV6CTL_SOURCECHECK_LOGINT 11
#define IPV6CTL_ACCEPT_RTADV 12
#define IPV6CTL_KEEPFAITH 13
#define IPV6CTL_LOG_INTERVAL 14
#define IPV6CTL_HDRNESTLIMIT 15
#define IPV6CTL_DAD_COUNT 16
#define IPV6CTL_AUTO_FLOWLABEL 17
#define IPV6CTL_DEFMCASTHLIM 18
#define IPV6CTL_GIF_HLIM 19
#define IPV6CTL_KAME_VERSION 20
#define IPV6CTL_USE_DEPRECATED 21
#define IPV6CTL_RR_PRUNE 22



#define IPV6CTL_V6ONLY 24
#define IPV6CTL_RTEXPIRE 25
#define IPV6CTL_RTMINEXPIRE 26
#define IPV6CTL_RTMAXCACHE 27

#define IPV6CTL_USETEMPADDR 32
#define IPV6CTL_TEMPPLTIME 33
#define IPV6CTL_TEMPVLTIME 34
#define IPV6CTL_AUTO_LINKLOCAL 35
#define IPV6CTL_RIP6STATS 36

#define IPV6CTL_MAXFRAGS 41



#define IPV6CTL_MAXID 42



struct cmsghdr;

extern int inet6_option_space(int);
extern int inet6_option_init(void *, struct cmsghdr **, int);
extern int inet6_option_append(struct cmsghdr *, const __uint8_t *,
 int, int);
extern __uint8_t *inet6_option_alloc(struct cmsghdr *, int, int, int);
extern int inet6_option_next(const struct cmsghdr *, __uint8_t **);
extern int inet6_option_find(const struct cmsghdr *, __uint8_t **, int);

extern size_t inet6_rthdr_space(int, int);
extern struct cmsghdr *inet6_rthdr_init(void *, int);
extern int inet6_rthdr_add(struct cmsghdr *, const struct in6_addr *,
  unsigned int);
extern int inet6_rthdr_lasthop(struct cmsghdr *, unsigned int);



extern int inet6_rthdr_segments(const struct cmsghdr *);
extern struct in6_addr *inet6_rthdr_getaddr(struct cmsghdr *, int);
extern int inet6_rthdr_getflags(const struct cmsghdr *, int);

extern int inet6_opt_init(void *, size_t);
extern int inet6_opt_append(void *, size_t, int, __uint8_t,
     size_t, __uint8_t, void **);
extern int inet6_opt_finish(void *, size_t, int);
extern int inet6_opt_set_val(void *, size_t, void *, int);

extern int inet6_opt_next(void *, size_t, int, __uint8_t *,
          size_t *, void **);
extern int inet6_opt_find(void *, size_t, int, __uint8_t,
     size_t *, void **);
extern int inet6_opt_get_val(void *, size_t, void *, int);
extern size_t inet6_rth_space(int, int);
extern void *inet6_rth_init(void *, int, int, int);
extern int inet6_rth_add(void *, const struct in6_addr *);
extern int inet6_rth_reverse(const void *, void *);
extern int inet6_rth_segments(const void *);
extern struct in6_addr *inet6_rth_getaddr(const void *, int);

# 495 "/usr/include/netinet/in.h" 2 3 4
#undef __KAME_NETINET_IN_H_INCLUDED_
# 62 "Socket6.xs" 2

# 1 "/usr/include/sys/param.h" 1 3 4
# 64 "/usr/include/sys/param.h" 3 4
#define _SYS_PARAM_H_ 

#define BSD 199506
#define BSD4_3 1
#define BSD4_4 1

#define NeXTBSD 1995064
#define NeXTBSD4_0 0




#define NULL __DARWIN_NULL
# 90 "/usr/include/sys/param.h" 3 4
# 1 "/usr/include/sys/syslimits.h" 1 3 4
# 60 "/usr/include/sys/syslimits.h" 3 4
#define _SYS_SYSLIMITS_H_ 






#define ARG_MAX (256 * 1024)
#define CHILD_MAX 266
#define GID_MAX 2147483647U
#define LINK_MAX 32767
#define MAX_CANON 255
#define MAX_INPUT 255
#define NAME_MAX 255
#define NGROUPS_MAX 16
#define UID_MAX 2147483647U
#define OPEN_MAX 10240
#define PATH_MAX 1024
#define PIPE_BUF 512

#define BC_BASE_MAX 99
#define BC_DIM_MAX 2048
#define BC_SCALE_MAX 99
#define BC_STRING_MAX 1000
#define COLL_WEIGHTS_MAX 2
#define EQUIV_CLASS_MAX 2
#define EXPR_NEST_MAX 32
#define LINE_MAX 2048
#define RE_DUP_MAX 255
# 91 "/usr/include/sys/param.h" 2 3 4

#define MAXCOMLEN 16
#define MAXINTERP 64
#define MAXLOGNAME 255
#define MAXUPRC CHILD_MAX
#define NCARGS ARG_MAX
#define NGROUPS NGROUPS_MAX
#define NOFILE 256
#define NOGROUP 65535
#define MAXHOSTNAMELEN 256
#define MAXDOMNAMELEN 256





# 1 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/limits.h" 1 3 4






# 1 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/syslimits.h" 1 3 4





#define _GCC_NEXT_LIMITS_H 
# 8 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/limits.h" 2 3 4


# 1 "/usr/include/limits.h" 1 3 4
# 61 "/usr/include/limits.h" 3 4
#define _LIMITS_H_ 

# 1 "/usr/include/machine/limits.h" 1 3 4





# 1 "/usr/include/ppc/limits.h" 1 3 4
# 37 "/usr/include/ppc/limits.h" 3 4
#define _PPC_LIMITS_H_ 

# 1 "/usr/include/ppc/_limits.h" 1 3 4
# 23 "/usr/include/ppc/_limits.h" 3 4
#define _PPC__LIMITS_H_ 

#define __DARWIN_CLK_TCK 100
# 40 "/usr/include/ppc/limits.h" 2 3 4

#define CHAR_BIT 8
#define MB_LEN_MAX 6

#define CLK_TCK __DARWIN_CLK_TCK
# 56 "/usr/include/ppc/limits.h" 3 4
#define SCHAR_MAX 127
#define SCHAR_MIN (-128)

#define UCHAR_MAX 255
#define CHAR_MAX 127
#define CHAR_MIN (-128)

#define USHRT_MAX 65535
#define SHRT_MAX 32767
#define SHRT_MIN (-32768)

#define UINT_MAX 0xffffffff
#define INT_MAX 2147483647
#define INT_MIN (-2147483647-1)






#define ULONG_MAX 0xffffffffL
#define LONG_MAX 2147483647L
#define LONG_MIN (-2147483647L-1)


#define ULLONG_MAX 0xffffffffffffffffULL
#define LLONG_MAX 0x7fffffffffffffffLL
#define LLONG_MIN (-0x7fffffffffffffffLL-1)


#define SSIZE_MAX LONG_MAX


#define SIZE_T_MAX ULONG_MAX

#define UQUAD_MAX ULLONG_MAX
#define QUAD_MAX LLONG_MAX
#define QUAD_MIN LLONG_MIN
# 102 "/usr/include/ppc/limits.h" 3 4
#define LONG_BIT 32

#define WORD_BIT 32
# 7 "/usr/include/machine/limits.h" 2 3 4
# 64 "/usr/include/limits.h" 2 3 4



#define _POSIX_AIO_LISTIO_MAX 16
#define _POSIX_AIO_MAX 1
#define _POSIX_DELAYTIMER_MAX 32
#define _POSIX_HOST_NAME_MAX 255
#define _POSIX_LOGIN_NAME_MAX 9
#define _POSIX_MQ_OPEN_MAX 8
#define _POSIX_MQ_PRIO_MAX 32

#define _POSIX_ARG_MAX 4096
#define _POSIX_CHILD_MAX 25
#define _POSIX_LINK_MAX 8
#define _POSIX_MAX_CANON 255
#define _POSIX_MAX_INPUT 255
#define _POSIX_NAME_MAX 14
#define _POSIX_NGROUPS_MAX 8
#define _POSIX_OPEN_MAX 20
#define _POSIX_PATH_MAX 256
#define _POSIX_PIPE_BUF 512
#define _POSIX_SSIZE_MAX 32767
#define _POSIX_STREAM_MAX 8
#define _POSIX_TZNAME_MAX 6

#define _POSIX_RTSIG_MAX 8
#define _POSIX_SEM_NSEMS_MAX 256
#define _POSIX_SEM_VALUE_MAX 32767
#define _POSIX_SIGQUEUE_MAX 32
#define _POSIX_SSIZE_MAX 32767
#define _POSIX_STREAM_MAX 8
#define _POSIX_SS_REPL_MAX 4
#define _POSIX_SYMLINK_MAX 255
#define _POSIX_SYMLOOP_MAX 8
#define _POSIX_THREAD_DESTRUCTOR_ITERATIONS 4
#define _POSIX_THREAD_KEYS_MAX 128
#define _POSIX_THREAD_THREADS_MAX 64
#define _POSIX_TIMER_MAX 32
#define _POSIX_TRACE_EVENT_NAME_MAX 30
#define _POSIX_TRACE_NAME_MAX 8
#define _POSIX_TRACE_SYS_MAX 8
#define _POSIX_TRACE_USER_EVENT_MAX 32
#define _POSIX_TTY_NAME_MAX 9

#define _POSIX2_BC_BASE_MAX 99
#define _POSIX2_BC_DIM_MAX 2048
#define _POSIX2_BC_SCALE_MAX 99
#define _POSIX2_BC_STRING_MAX 1000
#define _POSIX2_CHARCLASS_NAME_MAX 14
#define _POSIX2_COLL_WEIGHTS_MAX 2
#define _POSIX2_EQUIV_CLASS_MAX 2
#define _POSIX2_EXPR_NEST_MAX 32
#define _POSIX2_LINE_MAX 2048
#define _POSIX2_RE_DUP_MAX 255

#define PTHREAD_STACK_MIN 8192
#define PTHREAD_DESTRUCTOR_ITERATIONS 4
#define PTHREAD_KEYS_MAX 128


#define PASS_MAX 128


#define NL_ARGMAX 9
#define NL_LANGMAX 14
#define NL_MSGMAX 32767
#define NL_NMAX 1
#define NL_SETMAX 255
#define NL_TEXTMAX 2048

#define _XOPEN_IOV_MAX 16
#define IOV_MAX 1024
#define _XOPEN_NAME_MAX 255
#define _XOPEN_PATH_MAX 1024
# 11 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/limits.h" 2 3 4
#undef _GCC_NEXT_LIMITS_H



#define _LIMITS_H___ 


#undef CHAR_BIT
#define CHAR_BIT __CHAR_BIT__







#undef SCHAR_MIN
#define SCHAR_MIN (-SCHAR_MAX - 1)
#undef SCHAR_MAX
#define SCHAR_MAX __SCHAR_MAX__


#undef UCHAR_MAX



#define UCHAR_MAX (SCHAR_MAX * 2 + 1)
# 51 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/limits.h" 3 4
#undef CHAR_MIN
#define CHAR_MIN SCHAR_MIN
#undef CHAR_MAX
#define CHAR_MAX SCHAR_MAX



#undef SHRT_MIN
#define SHRT_MIN (-SHRT_MAX - 1)
#undef SHRT_MAX
#define SHRT_MAX __SHRT_MAX__


#undef USHRT_MAX



#define USHRT_MAX (SHRT_MAX * 2 + 1)



#undef INT_MIN
#define INT_MIN (-INT_MAX - 1)
#undef INT_MAX
#define INT_MAX __INT_MAX__


#undef UINT_MAX
#define UINT_MAX (INT_MAX * 2U + 1U)



#undef LONG_MIN
#define LONG_MIN (-LONG_MAX - 1L)
#undef LONG_MAX
#define LONG_MAX __LONG_MAX__


#undef ULONG_MAX
#define ULONG_MAX (LONG_MAX * 2UL + 1UL)
# 106 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/limits.h" 3 4
#undef LONG_LONG_MIN
#define LONG_LONG_MIN (-LONG_LONG_MAX - 1LL)
#undef LONG_LONG_MAX
#define LONG_LONG_MAX __LONG_LONG_MAX__


#undef ULONG_LONG_MAX
#define ULONG_LONG_MAX (LONG_LONG_MAX * 2ULL + 1ULL)
# 108 "/usr/include/sys/param.h" 2 3 4


# 1 "/usr/include/sys/signal.h" 1 3 4
# 64 "/usr/include/sys/signal.h" 3 4
#define _SYS_SIGNAL_H_ 





#define NSIG 32


# 1 "/usr/include/machine/signal.h" 1 3 4
# 23 "/usr/include/machine/signal.h" 3 4
#define _BSD_MACHINE_SIGNAL_H_ 



# 1 "/usr/include/ppc/signal.h" 1 3 4
# 27 "/usr/include/ppc/signal.h" 3 4
#define _PPC_SIGNAL_ 1




typedef int sig_atomic_t;




#define SV_SAVE_REGS 0x1000
# 50 "/usr/include/ppc/signal.h" 3 4
typedef enum {
 REGS_SAVED_NONE,
 REGS_SAVED_CALLER,


 REGS_SAVED_ALL
} regs_saved_t;
# 66 "/usr/include/ppc/signal.h" 3 4
struct sigcontext32 {
    int sc_onstack;
    int sc_mask;
    int sc_ir;
    int sc_psw;
    int sc_sp;
    void *sc_regs;
};

struct sigcontext64 {
    int sc_onstack;
    int sc_mask;
    long long sc_ir;
    long long sc_psw;
    long long sc_sp;
    void *sc_regs;
};





struct sigcontext {
    int sc_onstack;
    int sc_mask;
    int sc_ir;
    int sc_psw;
    int sc_sp;
    void *sc_regs;
};
# 28 "/usr/include/machine/signal.h" 2 3 4
# 74 "/usr/include/sys/signal.h" 2 3 4

#define SIGHUP 1
#define SIGINT 2
#define SIGQUIT 3
#define SIGILL 4
#define SIGTRAP 5
#define SIGABRT 6



#define SIGIOT SIGABRT
#define SIGEMT 7

#define SIGFPE 8
#define SIGKILL 9
#define SIGBUS 10
#define SIGSEGV 11
#define SIGSYS 12
#define SIGPIPE 13
#define SIGALRM 14
#define SIGTERM 15
#define SIGURG 16
#define SIGSTOP 17
#define SIGTSTP 18
#define SIGCONT 19
#define SIGCHLD 20
#define SIGTTIN 21
#define SIGTTOU 22

#define SIGIO 23

#define SIGXCPU 24
#define SIGXFSZ 25
#define SIGVTALRM 26
#define SIGPROF 27

#define SIGWINCH 28
#define SIGINFO 29

#define SIGUSR1 30
#define SIGUSR2 31
# 128 "/usr/include/sys/signal.h" 3 4
#define SIG_DFL (void (*)( ))0
#define SIG_IGN (void (*)( ))1
#define SIG_HOLD (void (*)( ))5
#define SIG_ERR ((void (*)( ))-1)






#define _MCONTEXT_T 
typedef __darwin_mcontext_t mcontext_t;




#define _MCONTEXT64_T 
typedef __darwin_mcontext64_t mcontext64_t;
# 160 "/usr/include/sys/signal.h" 3 4
#define _SIGSET_T 
typedef __darwin_sigset_t sigset_t;
# 170 "/usr/include/sys/signal.h" 3 4
#define _UCONTEXT_T 
typedef __darwin_ucontext_t ucontext_t;




#define _UCONTEXT64_T 
typedef __darwin_ucontext64_t ucontext64_t;
# 186 "/usr/include/sys/signal.h" 3 4
union sigval {

 int sival_int;
 void *sival_ptr;
};

#define SIGEV_NONE 0
#define SIGEV_SIGNAL 1
#define SIGEV_THREAD 3

struct sigevent {
 int sigev_notify;
 int sigev_signo;
 union sigval sigev_value;
 void (*sigev_notify_function)(union sigval);
 pthread_attr_t *sigev_notify_attributes;
};



typedef struct __siginfo {
 int si_signo;
 int si_errno;
 int si_code;
 pid_t si_pid;
 uid_t si_uid;
 int si_status;
 void *si_addr;
 union sigval si_value;
 long si_band;
 unsigned long pad[7];
} siginfo_t;
# 234 "/usr/include/sys/signal.h" 3 4
#define ILL_NOOP 0

#define ILL_ILLOPC 1
#define ILL_ILLTRP 2
#define ILL_PRVOPC 3
#define ILL_ILLOPN 4
#define ILL_ILLADR 5
#define ILL_PRVREG 6
#define ILL_COPROC 7
#define ILL_BADSTK 8



#define FPE_NOOP 0

#define FPE_FLTDIV 1
#define FPE_FLTOVF 2
#define FPE_FLTUND 3
#define FPE_FLTRES 4
#define FPE_FLTINV 5
#define FPE_FLTSUB 6
#define FPE_INTDIV 7
#define FPE_INTOVF 8



#define SEGV_NOOP 0

#define SEGV_MAPERR 1
#define SEGV_ACCERR 2



#define BUS_NOOP 0

#define BUS_ADRALN 1
#define BUS_ADRERR 2
#define BUS_OBJERR 3


#define TRAP_BRKPT 1
#define TRAP_TRACE 2



#define CLD_NOOP 0

#define CLD_EXITED 1
#define CLD_KILLED 2
#define CLD_DUMPED 3
#define CLD_TRAPPED 4
#define CLD_STOPPED 5
#define CLD_CONTINUED 6


#define POLL_IN 1
#define POLL_OUT 2
#define POLL_MSG 3
#define POLL_ERR 4
#define POLL_PRI 5
#define POLL_HUP 6


union __sigaction_u {
 void (*__sa_handler)(int);
 void (*__sa_sigaction)(int, struct __siginfo *,
         void *);
};


struct __sigaction {
 union __sigaction_u __sigaction_u;
 void (*sa_tramp)(void *, int, int, siginfo_t *, void *);
 sigset_t sa_mask;
 int sa_flags;
};




struct sigaction {
 union __sigaction_u __sigaction_u;
 sigset_t sa_mask;
 int sa_flags;
};




#define sa_handler __sigaction_u.__sa_handler
#define sa_sigaction __sigaction_u.__sa_sigaction

#define SA_ONSTACK 0x0001
#define SA_RESTART 0x0002
#define SA_DISABLE 0x0004
#define SA_RESETHAND 0x0004
#define SA_NOCLDSTOP 0x0008
#define SA_NODEFER 0x0010
#define SA_NOCLDWAIT 0x0020
#define SA_SIGINFO 0x0040

#define SA_USERTRAMP 0x0100

#define SA_64REGSET 0x0200





#define SIG_BLOCK 1
#define SIG_UNBLOCK 2
#define SIG_SETMASK 3


#define SI_USER 0x10001
#define SI_QUEUE 0x10002
#define SI_TIMER 0x10003
#define SI_ASYNCIO 0x10004
#define SI_MESGQ 0x10005


typedef void (*sig_t)(int);







#define _STACK_T 
typedef __darwin_stack_t stack_t;


#define SS_ONSTACK 0x0001
#define SS_DISABLE 0x0004
#define MINSIGSTKSZ 32768
#define SIGSTKSZ 131072






struct sigvec {
 void (*sv_handler)(int);
 int sv_mask;
 int sv_flags;
};

#define SV_ONSTACK SA_ONSTACK
#define SV_INTERRUPT SA_RESTART
#define SV_RESETHAND SA_RESETHAND
#define SV_NODEFER SA_NODEFER
#define SV_NOCLDSTOP SA_NOCLDSTOP
#define SV_SIGINFO SA_SIGINFO

#define sv_onstack sv_flags





struct sigstack {
 char *ss_sp;
 int ss_onstack;
};






#define sigmask(m) (1 << ((m)-1))


#define BADSIG SIG_ERR
# 418 "/usr/include/sys/signal.h" 3 4

void (*signal(int, void (*)(int)))(int);

# 111 "/usr/include/sys/param.h" 2 3 4





#define PSWP 0
#define PVM 4
#define PINOD 8
#define PRIBIO 16
#define PVFS 20
#define PZERO 22
#define PSOCK 24
#define PWAIT 32
#define PLOCK 36
#define PPAUSE 40
#define PUSER 50
#define MAXPRI 127

#define PRIMASK 0x0ff
#define PCATCH 0x100
#define PTTYBLOCK 0x200
#define PDROP 0x400

#define NZERO 0

#define NBPW sizeof(int)

#define CMASK 022
#define NODEV (dev_t)(-1)






#define CLBYTES (CLSIZE*NBPG)
#define CLOFSET (CLSIZE*NBPG-1)
#define claligned(x) ((((int)(x))&CLOFSET)==0)
#define CLOFF CLOFSET
#define CLSHIFT (PGSHIFT+CLSIZELOG2)


#define clbase(i) (i)
#define clrnd(i) (i)







#define CBLOCK 64
#define CBQSIZE (CBLOCK/NBBY)

#define CBSIZE (CBLOCK - sizeof(struct cblock *) - CBQSIZE)
#define CROUND (CBLOCK - 1)
# 179 "/usr/include/sys/param.h" 3 4
#define MAXBSIZE (256 * 4096)
#define MAXPHYSIO MAXPHYS
#define MAXFRAG 8

#define MAXPHYSIO_WIRED (16 * 1024 * 1024)
# 194 "/usr/include/sys/param.h" 3 4
#define MAXPATHLEN PATH_MAX
#define MAXSYMLINKS 32


#define setbit(a,i) (((char *)(a))[(i)/NBBY] |= 1<<((i)%NBBY))
#define clrbit(a,i) (((char *)(a))[(i)/NBBY] &= ~(1<<((i)%NBBY)))
#define isset(a,i) (((char *)(a))[(i)/NBBY] & (1<<((i)%NBBY)))
#define isclr(a,i) ((((char *)(a))[(i)/NBBY] & (1<<((i)%NBBY))) == 0)





#define roundup(x,y) ((((x)+((y)-1))/(y))*(y))
#define powerof2(x) ((((x)-1)&(x))==0)



#define MIN(a,b) (((a)<(b))?(a):(b))


#define MAX(a,b) (((a)>(b))?(a):(b))
# 233 "/usr/include/sys/param.h" 3 4
#define MINBUCKET 4
#define MAXALLOCSAVE (2 * CLBYTES)
# 247 "/usr/include/sys/param.h" 3 4
#define FSHIFT 11
#define FSCALE (1<<FSHIFT)
# 64 "Socket6.xs" 2
# 1 "/usr/include/net/route.h" 1 3 4
# 59 "/usr/include/net/route.h" 3 4
#define _NET_ROUTE_H_ 
# 76 "/usr/include/net/route.h" 3 4
struct route;





struct rt_metrics {
 u_long rmx_locks;
 u_long rmx_mtu;
 u_long rmx_hopcount;
 int32_t rmx_expire;
 u_long rmx_recvpipe;
 u_long rmx_sendpipe;
 u_long rmx_ssthresh;
 u_long rmx_rtt;
 u_long rmx_rttvar;
 u_long rmx_pksent;
 u_long rmx_filler[4];
};






#define RTM_RTTUNIT 1000000
#define RTTTOPRHZ(r) ((r) / (RTM_RTTUNIT / PR_SLOWHZ))
# 122 "/usr/include/net/route.h" 3 4
struct ortentry {
 u_long rt_hash;
 struct sockaddr rt_dst;
 struct sockaddr rt_gateway;
 short rt_flags;
 short rt_refcnt;
 u_long rt_use;
 struct ifnet *rt_ifp;
};



#define RTF_UP 0x1
#define RTF_GATEWAY 0x2
#define RTF_HOST 0x4
#define RTF_REJECT 0x8
#define RTF_DYNAMIC 0x10
#define RTF_MODIFIED 0x20
#define RTF_DONE 0x40
#define RTF_DELCLONE 0x80
#define RTF_CLONING 0x100
#define RTF_XRESOLVE 0x200
#define RTF_LLINFO 0x400
#define RTF_STATIC 0x800
#define RTF_BLACKHOLE 0x1000
#define RTF_PROTO2 0x4000
#define RTF_PROTO1 0x8000

#define RTF_PRCLONING 0x10000
#define RTF_WASCLONED 0x20000
#define RTF_PROTO3 0x40000

#define RTF_PINNED 0x100000
#define RTF_LOCAL 0x200000
#define RTF_BROADCAST 0x400000
#define RTF_MULTICAST 0x800000





struct rtstat {
 short rts_badredirect;
 short rts_dynamic;
 short rts_newgateway;
 short rts_unreach;
 short rts_wildcard;
};




struct rt_msghdr {
 u_short rtm_msglen;
 u_char rtm_version;
 u_char rtm_type;
 u_short rtm_index;
 int rtm_flags;
 int rtm_addrs;
 pid_t rtm_pid;
 int rtm_seq;
 int rtm_errno;
 int rtm_use;
 u_long rtm_inits;
 struct rt_metrics rtm_rmx;
};

struct rt_msghdr2 {
        u_short rtm_msglen;
        u_char rtm_version;
        u_char rtm_type;
        u_short rtm_index;
        int rtm_flags;
        int rtm_addrs;
 int32_t rtm_refcnt;
 int rtm_parentflags;
        int rtm_reserved;
        int rtm_use;
        u_long rtm_inits;
        struct rt_metrics rtm_rmx;
};


#define RTM_VERSION 5




#define RTM_ADD 0x1
#define RTM_DELETE 0x2
#define RTM_CHANGE 0x3
#define RTM_GET 0x4
#define RTM_LOSING 0x5
#define RTM_REDIRECT 0x6
#define RTM_MISS 0x7
#define RTM_LOCK 0x8
#define RTM_OLDADD 0x9
#define RTM_OLDDEL 0xa
#define RTM_RESOLVE 0xb
#define RTM_NEWADDR 0xc
#define RTM_DELADDR 0xd
#define RTM_IFINFO 0xe
#define RTM_NEWMADDR 0xf
#define RTM_DELMADDR 0x10
#define RTM_IFINFO2 0x12
#define RTM_NEWMADDR2 0x13
#define RTM_GET2 0x14




#define RTV_MTU 0x1
#define RTV_HOPCOUNT 0x2
#define RTV_EXPIRE 0x4
#define RTV_RPIPE 0x8
#define RTV_SPIPE 0x10
#define RTV_SSTHRESH 0x20
#define RTV_RTT 0x40
#define RTV_RTTVAR 0x80




#define RTA_DST 0x1
#define RTA_GATEWAY 0x2
#define RTA_NETMASK 0x4
#define RTA_GENMASK 0x8
#define RTA_IFP 0x10
#define RTA_IFA 0x20
#define RTA_AUTHOR 0x40
#define RTA_BRD 0x80




#define RTAX_DST 0
#define RTAX_GATEWAY 1
#define RTAX_NETMASK 2
#define RTAX_GENMASK 3
#define RTAX_IFP 4
#define RTAX_IFA 5
#define RTAX_AUTHOR 6
#define RTAX_BRD 7
#define RTAX_MAX 8

struct rt_addrinfo {
 int rti_addrs;
 struct sockaddr *rti_info[8];
};

struct route_cb {
 int ip_count;
 int ip6_count;
 int ipx_count;
 int ns_count;
 int iso_count;
 int any_count;
};
# 65 "Socket6.xs" 2



# 1 "/usr/include/netinet6/ipsec.h" 1 3 4
# 38 "/usr/include/netinet6/ipsec.h" 3 4
#define _NETINET6_IPSEC_H_ 


# 1 "/usr/include/net/pfkeyv2.h" 1 3 4
# 60 "/usr/include/net/pfkeyv2.h" 3 4
#define _NET_PFKEYV2_H_ 
# 70 "/usr/include/net/pfkeyv2.h" 3 4
#define __PFKEY_V2_H 1

#define PF_KEY_V2 2
#define PFKEYV2_REVISION 199806L

#define SADB_RESERVED 0
#define SADB_GETSPI 1
#define SADB_UPDATE 2
#define SADB_ADD 3
#define SADB_DELETE 4
#define SADB_GET 5
#define SADB_ACQUIRE 6
#define SADB_REGISTER 7
#define SADB_EXPIRE 8
#define SADB_FLUSH 9
#define SADB_DUMP 10
#define SADB_X_PROMISC 11
#define SADB_X_PCHANGE 12

#define SADB_X_SPDUPDATE 13
#define SADB_X_SPDADD 14
#define SADB_X_SPDDELETE 15
#define SADB_X_SPDGET 16
#define SADB_X_SPDACQUIRE 17
#define SADB_X_SPDDUMP 18
#define SADB_X_SPDFLUSH 19
#define SADB_X_SPDSETIDX 20
#define SADB_X_SPDEXPIRE 21
#define SADB_X_SPDDELETE2 22
#define SADB_MAX 22

struct sadb_msg {
  u_int8_t sadb_msg_version;
  u_int8_t sadb_msg_type;
  u_int8_t sadb_msg_errno;
  u_int8_t sadb_msg_satype;
  u_int16_t sadb_msg_len;
  u_int16_t sadb_msg_reserved;
  u_int32_t sadb_msg_seq;
  u_int32_t sadb_msg_pid;
};

struct sadb_ext {
  u_int16_t sadb_ext_len;
  u_int16_t sadb_ext_type;
};

struct sadb_sa {
  u_int16_t sadb_sa_len;
  u_int16_t sadb_sa_exttype;
  u_int32_t sadb_sa_spi;
  u_int8_t sadb_sa_replay;
  u_int8_t sadb_sa_state;
  u_int8_t sadb_sa_auth;
  u_int8_t sadb_sa_encrypt;
  u_int32_t sadb_sa_flags;
};


struct sadb_lifetime {
  u_int16_t sadb_lifetime_len;
  u_int16_t sadb_lifetime_exttype;
  u_int32_t sadb_lifetime_allocations;
  u_int64_t sadb_lifetime_bytes;
  u_int64_t sadb_lifetime_addtime;
  u_int64_t sadb_lifetime_usetime;
};

struct sadb_address {
  u_int16_t sadb_address_len;
  u_int16_t sadb_address_exttype;
  u_int8_t sadb_address_proto;
  u_int8_t sadb_address_prefixlen;
  u_int16_t sadb_address_reserved;
};

struct sadb_key {
  u_int16_t sadb_key_len;
  u_int16_t sadb_key_exttype;
  u_int16_t sadb_key_bits;
  u_int16_t sadb_key_reserved;
};

struct sadb_ident {
  u_int16_t sadb_ident_len;
  u_int16_t sadb_ident_exttype;
  u_int16_t sadb_ident_type;
  u_int16_t sadb_ident_reserved;
  u_int64_t sadb_ident_id;
};

struct sadb_sens {
  u_int16_t sadb_sens_len;
  u_int16_t sadb_sens_exttype;
  u_int32_t sadb_sens_dpd;
  u_int8_t sadb_sens_sens_level;
  u_int8_t sadb_sens_sens_len;
  u_int8_t sadb_sens_integ_level;
  u_int8_t sadb_sens_integ_len;
  u_int32_t sadb_sens_reserved;
};

struct sadb_prop {
  u_int16_t sadb_prop_len;
  u_int16_t sadb_prop_exttype;
  u_int8_t sadb_prop_replay;
  u_int8_t sadb_prop_reserved[3];
};

struct sadb_comb {
  u_int8_t sadb_comb_auth;
  u_int8_t sadb_comb_encrypt;
  u_int16_t sadb_comb_flags;
  u_int16_t sadb_comb_auth_minbits;
  u_int16_t sadb_comb_auth_maxbits;
  u_int16_t sadb_comb_encrypt_minbits;
  u_int16_t sadb_comb_encrypt_maxbits;
  u_int32_t sadb_comb_reserved;
  u_int32_t sadb_comb_soft_allocations;
  u_int32_t sadb_comb_hard_allocations;
  u_int64_t sadb_comb_soft_bytes;
  u_int64_t sadb_comb_hard_bytes;
  u_int64_t sadb_comb_soft_addtime;
  u_int64_t sadb_comb_hard_addtime;
  u_int64_t sadb_comb_soft_usetime;
  u_int64_t sadb_comb_hard_usetime;
};

struct sadb_supported {
  u_int16_t sadb_supported_len;
  u_int16_t sadb_supported_exttype;
  u_int32_t sadb_supported_reserved;
};

struct sadb_alg {
  u_int8_t sadb_alg_id;
  u_int8_t sadb_alg_ivlen;
  u_int16_t sadb_alg_minbits;
  u_int16_t sadb_alg_maxbits;
  u_int16_t sadb_alg_reserved;
};

struct sadb_spirange {
  u_int16_t sadb_spirange_len;
  u_int16_t sadb_spirange_exttype;
  u_int32_t sadb_spirange_min;
  u_int32_t sadb_spirange_max;
  u_int32_t sadb_spirange_reserved;
};

struct sadb_x_kmprivate {
  u_int16_t sadb_x_kmprivate_len;
  u_int16_t sadb_x_kmprivate_exttype;
  u_int32_t sadb_x_kmprivate_reserved;
};







struct sadb_x_sa2 {
  u_int16_t sadb_x_sa2_len;
  u_int16_t sadb_x_sa2_exttype;
  u_int8_t sadb_x_sa2_mode;
  u_int8_t sadb_x_sa2_reserved1;
  u_int16_t sadb_x_sa2_reserved2;
  u_int32_t sadb_x_sa2_sequence;
  u_int32_t sadb_x_sa2_reqid;
};



struct sadb_x_policy {
  u_int16_t sadb_x_policy_len;
  u_int16_t sadb_x_policy_exttype;
  u_int16_t sadb_x_policy_type;
  u_int8_t sadb_x_policy_dir;
  u_int8_t sadb_x_policy_reserved;
  u_int32_t sadb_x_policy_id;
  u_int32_t sadb_x_policy_reserved2;
};
# 264 "/usr/include/net/pfkeyv2.h" 3 4
struct sadb_x_ipsecrequest {
  u_int16_t sadb_x_ipsecrequest_len;


  u_int16_t sadb_x_ipsecrequest_proto;
  u_int8_t sadb_x_ipsecrequest_mode;
  u_int8_t sadb_x_ipsecrequest_level;
  u_int16_t sadb_x_ipsecrequest_reqid;
# 280 "/usr/include/net/pfkeyv2.h" 3 4
};

#define SADB_EXT_RESERVED 0
#define SADB_EXT_SA 1
#define SADB_EXT_LIFETIME_CURRENT 2
#define SADB_EXT_LIFETIME_HARD 3
#define SADB_EXT_LIFETIME_SOFT 4
#define SADB_EXT_ADDRESS_SRC 5
#define SADB_EXT_ADDRESS_DST 6
#define SADB_EXT_ADDRESS_PROXY 7
#define SADB_EXT_KEY_AUTH 8
#define SADB_EXT_KEY_ENCRYPT 9
#define SADB_EXT_IDENTITY_SRC 10
#define SADB_EXT_IDENTITY_DST 11
#define SADB_EXT_SENSITIVITY 12
#define SADB_EXT_PROPOSAL 13
#define SADB_EXT_SUPPORTED_AUTH 14
#define SADB_EXT_SUPPORTED_ENCRYPT 15
#define SADB_EXT_SPIRANGE 16
#define SADB_X_EXT_KMPRIVATE 17
#define SADB_X_EXT_POLICY 18
#define SADB_X_EXT_SA2 19
#define SADB_EXT_MAX 19

#define SADB_SATYPE_UNSPEC 0
#define SADB_SATYPE_AH 2
#define SADB_SATYPE_ESP 3
#define SADB_SATYPE_RSVP 5
#define SADB_SATYPE_OSPFV2 6
#define SADB_SATYPE_RIPV2 7
#define SADB_SATYPE_MIP 8
#define SADB_X_SATYPE_IPCOMP 9
#define SADB_X_SATYPE_POLICY 10
#define SADB_SATYPE_MAX 11

#define SADB_SASTATE_LARVAL 0
#define SADB_SASTATE_MATURE 1
#define SADB_SASTATE_DYING 2
#define SADB_SASTATE_DEAD 3
#define SADB_SASTATE_MAX 3

#define SADB_SAFLAGS_PFS 1


#define SADB_AALG_NONE 0
#define SADB_AALG_MD5HMAC 1
#define SADB_AALG_SHA1HMAC 2
#define SADB_AALG_MAX 8

#define SADB_X_AALG_SHA2_256 6
#define SADB_X_AALG_SHA2_384 7
#define SADB_X_AALG_SHA2_512 8

#define SADB_X_AALG_MD5 3
#define SADB_X_AALG_SHA 4
#define SADB_X_AALG_NULL 5


#define SADB_EALG_NONE 0
#define SADB_EALG_DESCBC 1
#define SADB_EALG_3DESCBC 2
#define SADB_EALG_NULL 3
#define SADB_EALG_MAX 12

#define SADB_X_EALG_CAST128CBC 5
#define SADB_X_EALG_BLOWFISHCBC 4
#define SADB_X_EALG_RIJNDAELCBC 12
#define SADB_X_EALG_AES 12



#define SADB_X_CALG_NONE 0
#define SADB_X_CALG_OUI 1
#define SADB_X_CALG_DEFLATE 2
#define SADB_X_CALG_LZS 3
#define SADB_X_CALG_MAX 4


#define SADB_IDENTTYPE_RESERVED 0
#define SADB_IDENTTYPE_PREFIX 1
#define SADB_IDENTTYPE_FQDN 2
#define SADB_IDENTTYPE_USERFQDN 3
#define SADB_X_IDENTTYPE_ADDR 4
#define SADB_IDENTTYPE_MAX 4


#define SADB_X_EXT_NONE 0x0000
#define SADB_X_EXT_OLD 0x0001

#define SADB_X_EXT_IV4B 0x0010
#define SADB_X_EXT_DERIV 0x0020
#define SADB_X_EXT_CYCSEQ 0x0040


#define SADB_X_EXT_PSEQ 0x0000
#define SADB_X_EXT_PRAND 0x0100
#define SADB_X_EXT_PZERO 0x0200
#define SADB_X_EXT_PMASK 0x0300


#define SADB_X_EXT_RAWCPI 0x0080


#define SADB_KEY_FLAGS_MAX 0x0fff


#define PFKEY_SPI_SIZE sizeof(u_int32_t)


#define SADB_X_LIFETIME_ALLOCATIONS 0
#define SADB_X_LIFETIME_BYTES 1
#define SADB_X_LIFETIME_ADDTIME 2
#define SADB_X_LIFETIME_USETIME 3


#define PFKEY_SOFT_LIFETIME_RATE 80


#define PFKEY_ALIGN8(a) (1 + (((a) - 1) | (8 - 1)))
#define PFKEY_EXTLEN(msg) PFKEY_UNUNIT64(((struct sadb_ext *)(msg))->sadb_ext_len)

#define PFKEY_ADDR_PREFIX(ext) (((struct sadb_address *)(ext))->sadb_address_prefixlen)

#define PFKEY_ADDR_PROTO(ext) (((struct sadb_address *)(ext))->sadb_address_proto)

#define PFKEY_ADDR_SADDR(ext) ((struct sockaddr *)((caddr_t)(ext) + sizeof(struct sadb_address)))



#define PFKEY_UNUNIT64(a) ((a) << 3)
#define PFKEY_UNIT64(a) ((a) >> 3)
# 42 "/usr/include/netinet6/ipsec.h" 2 3 4


#define IPSEC_PORT_ANY 0
#define IPSEC_ULPROTO_ANY 255
#define IPSEC_PROTO_ANY 255



#define IPSEC_MODE_ANY 0
#define IPSEC_MODE_TRANSPORT 1
#define IPSEC_MODE_TUNNEL 2






#define IPSEC_DIR_ANY 0
#define IPSEC_DIR_INBOUND 1
#define IPSEC_DIR_OUTBOUND 2
#define IPSEC_DIR_MAX 3
#define IPSEC_DIR_INVALID 4







#define IPSEC_POLICY_DISCARD 0
#define IPSEC_POLICY_NONE 1
#define IPSEC_POLICY_IPSEC 2
#define IPSEC_POLICY_ENTRUST 3
#define IPSEC_POLICY_BYPASS 4


#define IPSEC_LEVEL_DEFAULT 0
#define IPSEC_LEVEL_USE 1
#define IPSEC_LEVEL_REQUIRE 2
#define IPSEC_LEVEL_UNIQUE 3

#define IPSEC_MANUAL_REQID_MAX 0x3fff
# 94 "/usr/include/netinet6/ipsec.h" 3 4
#define IPSEC_REPLAYWSIZE 32


struct ipsecstat {
 u_quad_t in_success;
 u_quad_t in_polvio;

 u_quad_t in_nosa;
 u_quad_t in_inval;
 u_quad_t in_nomem;
 u_quad_t in_badspi;
 u_quad_t in_ahreplay;
 u_quad_t in_espreplay;
 u_quad_t in_ahauthsucc;
 u_quad_t in_ahauthfail;
 u_quad_t in_espauthsucc;
 u_quad_t in_espauthfail;
 u_quad_t in_esphist[256];
 u_quad_t in_ahhist[256];
 u_quad_t in_comphist[256];
 u_quad_t out_success;
 u_quad_t out_polvio;

 u_quad_t out_nosa;
 u_quad_t out_inval;
 u_quad_t out_nomem;
 u_quad_t out_noroute;
 u_quad_t out_esphist[256];
 u_quad_t out_ahhist[256];
 u_quad_t out_comphist[256];
};


extern caddr_t ipsec_set_policy(char *, int);
extern int ipsec_get_policylen(caddr_t);
extern char *ipsec_dump_policy(caddr_t, char *);

extern const char *ipsec_strerror(void);
# 69 "Socket6.xs" 2


# 1 "/usr/include/netdb.h" 1 3 4
# 82 "/usr/include/netdb.h" 3 4
#define _NETDB_H_ 


# 1 "/usr/include/_types.h" 1 3 4
# 25 "/usr/include/_types.h" 3 4
#define __TYPES_H_ 



typedef int __darwin_nl_item;
typedef int __darwin_wctrans_t;



typedef unsigned long __darwin_wctype_t;



#define __DARWIN_WCHAR_MAX __WCHAR_MAX__





#define __DARWIN_WCHAR_MIN (-0x7fffffff - 1)



#define __DARWIN_WEOF ((__darwin_wint_t)-1)
# 86 "/usr/include/netdb.h" 2 3 4
# 98 "/usr/include/netdb.h" 3 4
#define _PATH_HEQUIV "/etc/hosts.equiv"
#define _PATH_HOSTS "/etc/hosts"
#define _PATH_NETWORKS "/etc/networks"
#define _PATH_PROTOCOLS "/etc/protocols"
#define _PATH_SERVICES "/etc/services"

extern int h_errno;
# 115 "/usr/include/netdb.h" 3 4
struct hostent {
 char *h_name;
 char **h_aliases;
 int h_addrtype;
 int h_length;
 char **h_addr_list;

#define h_addr h_addr_list[0]

};





struct netent {
 char *n_name;
 char **n_aliases;
 int n_addrtype;
 uint32_t n_net;
};

struct servent {
 char *s_name;
 char **s_aliases;
 int s_port;
 char *s_proto;
};

struct protoent {
 char *p_name;
 char **p_aliases;
 int p_proto;
};

struct addrinfo {
 int ai_flags;
 int ai_family;
 int ai_socktype;
 int ai_protocol;
 socklen_t ai_addrlen;
 char *ai_canonname;
 struct sockaddr *ai_addr;
 struct addrinfo *ai_next;
};


struct rpcent {
        char *r_name;
        char **r_aliases;
        int r_number;
};







#define NETDB_INTERNAL -1
#define NETDB_SUCCESS 0

#define HOST_NOT_FOUND 1
#define TRY_AGAIN 2
#define NO_RECOVERY 3
#define NO_DATA 4

#define NO_ADDRESS NO_DATA





#define EAI_ADDRFAMILY 1

#define EAI_AGAIN 2
#define EAI_BADFLAGS 3
#define EAI_FAIL 4
#define EAI_FAMILY 5
#define EAI_MEMORY 6

#define EAI_NODATA 7

#define EAI_NONAME 8
#define EAI_SERVICE 9
#define EAI_SOCKTYPE 10
#define EAI_SYSTEM 11

#define EAI_BADHINTS 12
#define EAI_PROTOCOL 13
#define EAI_MAX 14







#define AI_PASSIVE 0x00000001
#define AI_CANONNAME 0x00000002
#define AI_NUMERICHOST 0x00000004


#define AI_MASK (AI_PASSIVE | AI_CANONNAME | AI_NUMERICHOST)

#define AI_ALL 0x00000100

#define AI_V4MAPPED_CFG 0x00000200

#define AI_ADDRCONFIG 0x00000400
#define AI_V4MAPPED 0x00000800


#define AI_DEFAULT (AI_V4MAPPED_CFG | AI_ADDRCONFIG)






#define NI_MAXHOST 1025
#define NI_MAXSERV 32




#define NI_NOFQDN 0x00000001
#define NI_NUMERICHOST 0x00000002
#define NI_NAMEREQD 0x00000004
#define NI_NUMERICSERV 0x00000008
#define NI_DGRAM 0x00000010

#define NI_WITHSCOPEID 0x00000020




#define SCOPE_DELIMITER '%'



void endhostent(void);
void endnetent(void);
void endprotoent(void);
void endservent(void);

void freeaddrinfo(struct addrinfo *);
const char *gai_strerror(int);
int getaddrinfo(const char * , const char * ,
       const struct addrinfo * ,
       struct addrinfo ** );
struct hostent *gethostbyaddr(const void *, socklen_t, int);
struct hostent *gethostbyname(const char *);
struct hostent *gethostent(void);
int getnameinfo(const struct sockaddr * , socklen_t,
         char * , socklen_t, char * ,
         socklen_t, int);
struct netent *getnetbyaddr(uint32_t, int);
struct netent *getnetbyname(const char *);
struct netent *getnetent(void);
struct protoent *getprotobyname(const char *);
struct protoent *getprotobynumber(int);
struct protoent *getprotoent(void);
struct servent *getservbyname(const char *, const char *);
struct servent *getservbyport(int, const char *);
struct servent *getservent(void);
void sethostent(int);

void setnetent(int);
void setprotoent(int);
void setservent(int);

void freehostent(struct hostent *);
struct hostent *gethostbyname2(const char *, int);
struct hostent *getipnodebyaddr(const void *, size_t, int, int *);
struct hostent *getipnodebyname(const char *, int, int, int *);
struct rpcent *getrpcbyname(const char *name);
struct rpcent *getrpcbynumber(long number);
struct rpcent *getrpcent(void);
void setrpcent(int stayopen);
void endrpcent(void);
void herror(const char *);
const char *hstrerror(int);
int innetgr(const char *, const char *, const char *, const char *);


# 72 "Socket6.xs" 2
#define WSA_DECLARE 
#define WSA_STARTUP() 
#define WSA_CLEANUP() 



# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/EXTERN.h" 1
# 17 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/EXTERN.h"
#undef EXT
#undef dEXT
#undef EXTCONST
#undef dEXTCONST
# 49 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/EXTERN.h"
#define EXT extern
#define dEXT 
#define EXTCONST extern const
#define dEXTCONST const



#undef INIT
#define INIT(x) 

#undef DOINIT
# 79 "Socket6.xs" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 1
# 12 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define H_PERL 1
# 28 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h" 1
# 18 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define _config_h_ 




#define LOC_SED "/usr/bin/sed"





#define HAS_ALARM 





#define HAS_BCMP 





#define HAS_BCOPY 





#define HAS_BZERO 





#define HAS_CBRT 





#define HAS_CHOWN 





#define HAS_CHROOT 
# 77 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_CRYPT 





#define HAS_CTERMID 
# 97 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_DBL_DIG 





#define HAS_DIFFTIME 






#define HAS_DLERROR 





#define HAS_DUP2 





#define HAS_FCHMOD 





#define HAS_FCHOWN 





#define HAS_FCNTL 





#define HAS_FGETPOS 





#define HAS_FLOCK 





#define HAS_FORK 





#define HAS_FSETPOS 







#define HAS_GETTIMEOFDAY 

#define Timeval struct timeval







#define HAS_GETGROUPS 





#define HAS_GETLOGIN 






#define HAS_GETPGID 
# 201 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_GETPPID 





#define HAS_GETPRIORITY 






#define HAS_INET_ATON 






#define HAS_KILLPG 





#define HAS_LINK 





#define HAS_LOCALECONV 





#define HAS_LOCKF 





#define HAS_LSTAT 





#define HAS_MBLEN 





#define HAS_MBSTOWCS 





#define HAS_MBTOWC 





#define HAS_MEMCMP 





#define HAS_MEMCPY 







#define HAS_MEMMOVE 





#define HAS_MEMSET 






#define HAS_MKDIR 







#define HAS_MKFIFO 





#define HAS_MKTIME 





#define HAS_MSYNC 





#define HAS_MUNMAP 





#define HAS_NICE 
# 340 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_PATHCONF 
#define HAS_FPATHCONF 





#define HAS_PAUSE 





#define HAS_PIPE 
# 367 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_READDIR 





#define HAS_SEEKDIR 





#define HAS_TELLDIR 





#define HAS_REWINDDIR 





#define HAS_READLINK 






#define HAS_REGCOMP 






#define HAS_RENAME 






#define HAS_RMDIR 






#define HAS_SELECT 





#define HAS_SETEGID 





#define HAS_SETEUID 






#define HAS_SETGROUPS 






#define HAS_SETLINEBUF 





#define HAS_SETLOCALE 





#define HAS_SETPGID 
# 469 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_SETPRIORITY 
# 513 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_SETSID 





#define HAS_STAT 
# 530 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_STRCHR 






#define HAS_STRCOLL 





#define HAS_STRTOD 





#define HAS_STRTOL 





#define HAS_STRXFRM 





#define HAS_SYMLINK 





#define HAS_SYSCALL 





#define HAS_SYSCONF 





#define HAS_SYSTEM 





#define HAS_TCGETPGRP 





#define HAS_TCSETPGRP 





#define HAS_TRUNCATE 





#define HAS_TZNAME 





#define HAS_UMASK 





#define HAS_USLEEP 




#define HAS_WAIT4 





#define HAS_WAITPID 





#define HAS_WCSTOMBS 





#define HAS_WCTOMB 
# 650 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define Groups_t gid_t






#define I_ARPA_INET 
# 674 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_DLFCN 
# 686 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_FLOAT 





#define I_GDBM 






#define I_LIMITS 





#define I_LOCALE 





#define I_MATH 
# 723 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_NETINET_IN 





#define I_STDDEF 





#define I_STDLIB 





#define I_STRING 





#define I_SYS_DIR 





#define I_SYS_FILE 
# 763 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_SYS_IOCTL 
#define I_SYS_SOCKIO 
# 776 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_SYS_PARAM 






#define I_SYS_POLL 





#define I_SYS_RESOURCE 





#define I_SYS_SELECT 





#define I_SYS_STAT 





#define I_SYS_TIMES 





#define I_SYS_TYPES 





#define I_SYS_UN 





#define I_SYS_WAIT 





#define I_UNISTD 





#define I_UTIME 
# 868 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define CAN_VAPROTO 

#define _V(args) args
# 885 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define OSNAME "darwin"
#define OSVERS "8.11.0"
# 895 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define MULTIARCH 







#define MEM_ALIGNBYTES 8
# 918 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define ARCHLIB "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level"
#define ARCHLIB_EXP "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level"







#define ARCHNAME "darwin-thread-multi-2level"
# 941 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define BIN "/opt/local/bin"
#define BIN_EXP "/opt/local/bin"
#define PERL_RELOCATABLE_INC "undef"
# 957 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define INTSIZE 4
#define LONGSIZE 4
#define SHORTSIZE 2
# 980 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define BYTEORDER 0x4321
# 996 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define CHARBITS 8
# 1009 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define PeRl_CaTiFy(a,b) a ## b
#define PeRl_StGiFy(a) #a
#define CAT2(a,b) PeRl_CaTiFy(a,b)
#define StGiFy(a) PeRl_StGiFy(a)
#define STRINGIFY(a) PeRl_StGiFy(a)
# 1044 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define CPPSTDIN "/opt/local/bin/gcc-apple-4.2 -I/opt/local/include -E"
#define CPPMINUS "-"
#define CPPRUN "/opt/local/bin/gcc-apple-4.2 -I/opt/local/include -E"
#define CPPLAST "-"






#define HAS_ACCESS 
# 1072 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_ASCTIME_R 
#define ASCTIME_R_PROTO REENTRANT_PROTO_B_SB
# 1102 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HASATTRIBUTE_DEPRECATED 
#define HASATTRIBUTE_FORMAT 
#define PRINTF_FORMAT_NULL_OK 
#define HASATTRIBUTE_NORETURN 
#define HASATTRIBUTE_MALLOC 
#define HASATTRIBUTE_NONNULL 
#define HASATTRIBUTE_PURE 
#define HASATTRIBUTE_UNUSED 
#define HASATTRIBUTE_WARN_UNUSED_RESULT 
# 1123 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define CASTI32 
# 1137 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define CASTNEGFLOAT 
#define CASTFLAGS 0
# 1152 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HASCONST 
# 1168 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define CRYPT_R_PROTO 0







#define HAS_CSH 

#define CSH "/bin/csh"
# 1191 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_CTERMID_R 
#define CTERMID_R_PROTO REENTRANT_PROTO_B_B
# 1204 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_CTIME_R 
#define CTIME_R_PROTO REENTRANT_PROTO_B_SB






#define HAS_DLADDR 
# 1245 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define DRAND48_R_PROTO 0







#define HAS_DRAND48_PROTO 
# 1265 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_ENDGRENT 
# 1278 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define ENDGRENT_R_PROTO 0





#define HAS_ENDHOSTENT 
# 1297 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define ENDHOSTENT_R_PROTO 0





#define HAS_ENDNETENT 
# 1316 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define ENDNETENT_R_PROTO 0





#define HAS_ENDPROTOENT 
# 1335 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define ENDPROTOENT_R_PROTO 0





#define HAS_ENDPWENT 
# 1354 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define ENDPWENT_R_PROTO 0





#define HAS_ENDSERVENT 
# 1373 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define ENDSERVENT_R_PROTO 0





#define HAS_FD_SET 





#define FLEXFILENAMES 
# 1402 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define Gconvert(x,n,t,b) sprintf((b),"%.*g",(n),(x))





#define HAS_GETGRENT 
# 1421 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define GETGRENT_R_PROTO 0
# 1433 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_GETGRGID_R 
#define GETGRGID_R_PROTO REENTRANT_PROTO_I_TSBWR
# 1446 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_GETGRNAM_R 
#define GETGRNAM_R_PROTO REENTRANT_PROTO_I_CSBWR





#define HAS_GETHOSTBYADDR 





#define HAS_GETHOSTBYNAME 





#define HAS_GETHOSTENT 
# 1489 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_GETHOSTNAME 
#define HAS_UNAME 
# 1507 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define GETHOSTBYADDR_R_PROTO 0
# 1520 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define GETHOSTBYNAME_R_PROTO 0
# 1533 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define GETHOSTENT_R_PROTO 0







#define HAS_GETHOST_PROTOS 
# 1553 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_GETLOGIN_R 
#define GETLOGIN_R_PROTO REENTRANT_PROTO_I_BW





#define HAS_GETNETBYADDR 





#define HAS_GETNETBYNAME 





#define HAS_GETNETENT 
# 1585 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define GETNETBYADDR_R_PROTO 0
# 1598 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define GETNETBYNAME_R_PROTO 0
# 1611 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define GETNETENT_R_PROTO 0







#define HAS_GETNET_PROTOS 






#define HAS_GETPAGESIZE 





#define HAS_GETPROTOENT 
# 1642 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_GETPGRP 
# 1653 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_GETPROTOBYNAME 
#define HAS_GETPROTOBYNUMBER 
# 1667 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define GETPROTOBYNAME_R_PROTO 0
# 1680 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define GETPROTOBYNUMBER_R_PROTO 0
# 1693 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define GETPROTOENT_R_PROTO 0







#define HAS_GETPROTO_PROTOS 






#define HAS_GETPWENT 
# 1721 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define GETPWENT_R_PROTO 0
# 1733 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_GETPWNAM_R 
#define GETPWNAM_R_PROTO REENTRANT_PROTO_I_CSBWR
# 1746 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_GETPWUID_R 
#define GETPWUID_R_PROTO REENTRANT_PROTO_I_TSBWR





#define HAS_GETSERVENT 
# 1766 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define GETSERVBYNAME_R_PROTO 0
# 1779 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define GETSERVBYPORT_R_PROTO 0
# 1792 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define GETSERVENT_R_PROTO 0







#define HAS_GETSERV_PROTOS 
# 1813 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define GETSPNAM_R_PROTO 0
# 1823 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_GETSERVBYNAME 
#define HAS_GETSERVBYPORT 
# 1836 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_GMTIME_R 
#define GMTIME_R_PROTO REENTRANT_PROTO_S_TS
# 1869 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_HTONL 
#define HAS_HTONS 
#define HAS_NTOHL 
#define HAS_NTOHS 





#define HAS_ISASCII 






#define HAS_LCHOWN 
# 1901 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define L_R_TZSET 
# 1910 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_LOCALTIME_R 
#define LOCALTIME_R_PROTO REENTRANT_PROTO_S_TS
# 1940 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_LDEXPL 
#define HAS_LONG_DOUBLE 

#define LONG_DOUBLESIZE 16
#define LONG_DOUBLEKIND 6
#define LONG_DOUBLE_IS_DOUBLE 0
#define LONG_DOUBLE_IS_IEEE_754_128_BIT_LITTLE_ENDIAN 1
#define LONG_DOUBLE_IS_IEEE_754_128_BIT_BIG_ENDIAN 2
#define LONG_DOUBLE_IS_X86_80_BIT_LITTLE_ENDIAN 3
#define LONG_DOUBLE_IS_X86_80_BIT_BIG_ENDIAN 4
#define LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LITTLE_ENDIAN 5
#define LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BIG_ENDIAN 6
#define LONG_DOUBLE_IS_UNKNOWN_FORMAT -1
# 1963 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_LONG_LONG 

#define LONGLONGSIZE 8
# 1974 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_LSEEK_PROTO 





#define HAS_MEMCHR 






#define HAS_MKSTEMP 
# 1998 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_MMAP 
#define Mmap_t void *





#define HAS_MSG 





#define HAS_OPEN3 
# 2027 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_PTHREAD_ATFORK 
# 2045 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SCHED_YIELD sched_yield()
#define HAS_SCHED_YIELD 
# 2059 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define RANDOM_R_PROTO 0
# 2072 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define READDIR64_R_PROTO 0
# 2084 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_READDIR_R 
#define READDIR_R_PROTO REENTRANT_PROTO_I_TSR
# 2108 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_SANE_MEMCMP 





#define HAS_SEM 





#define HAS_SETGRENT 
# 2133 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SETGRENT_R_PROTO 0





#define HAS_SETHOSTENT 
# 2152 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SETHOSTENT_R_PROTO 0
# 2165 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SETLOCALE_R_PROTO 0





#define HAS_SETNETENT 
# 2184 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SETNETENT_R_PROTO 0





#define HAS_SETPROTOENT 
# 2201 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_SETPGRP 
#define USE_BSD_SETPGRP 
# 2215 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SETPROTOENT_R_PROTO 0





#define HAS_SETPWENT 
# 2234 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SETPWENT_R_PROTO 0





#define HAS_SETSERVENT 
# 2253 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SETSERVENT_R_PROTO 0






#define HAS_SETVBUF 





#define HAS_SHM 
# 2279 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define Shmat_t void *
#define HAS_SHMAT_PROTOTYPE 





#define HAS_SIGACTION 
# 2308 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_SIGSETJMP 

#define Sigjmp_buf sigjmp_buf
#define Sigsetjmp(buf,save_mask) sigsetjmp((buf),(save_mask))
#define Siglongjmp(buf,retval) siglongjmp((buf),(retval))
# 2386 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_SOCKET 
#define HAS_SOCKETPAIR 
#define HAS_SOCKADDR_SA_LEN 
#define HAS_MSG_CTRUNC 
#define HAS_MSG_DONTROUTE 
#define HAS_MSG_OOB 
#define HAS_MSG_PEEK 

#define HAS_SCM_RIGHTS 
#define HAS_SOCKADDR_IN6 
#define HAS_SIN6_SCOPE_ID 
#define HAS_IP_MREQ 

#define HAS_IPV6_MREQ 
# 2413 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SRAND48_R_PROTO 0
# 2426 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SRANDOM_R_PROTO 0






#define USE_STAT_BLOCKS 
# 2454 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_STATIC_INLINE 
#define PERL_STATIC_INLINE static __inline__
# 2491 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define USE_STDIO_PTR 

#define FILE_ptr(fp) ((fp)->_p)
#define STDIO_PTR_LVALUE 
#define FILE_cnt(fp) ((fp)->_r)
#define STDIO_CNT_LVALUE 

#define STDIO_PTR_LVAL_NOCHANGE_CNT 
# 2521 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define USE_STDIO_BASE 

#define FILE_base(fp) ((fp)->_ub._base ? (fp)->_ub._base : (fp)->_bf._base)
#define FILE_bufsiz(fp) ((fp)->_ub._base ? (fp)->_ub._size : (fp)->_bf._size)







#define USE_STRUCT_COPY 
# 2549 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_STRERROR 
#define HAS_SYS_ERRLIST 
#define Strerror(e) strerror(e)
# 2563 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_STRERROR_R 
#define STRERROR_R_PROTO REENTRANT_PROTO_I_IBW





#define HAS_STRTOUL 
# 2580 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_TIME 
#define Time_t time_t






#define HAS_TIMES 
# 2601 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define TMPNAM_R_PROTO 0
# 2614 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define TTYNAME_R_PROTO 0
# 2634 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_UNION_SEMUN 
#define USE_SEMCTL_SEMUN 
#define USE_SEMCTL_SEMID_DS 




#define HAS_VFORK 
# 2655 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define Signal_t void





#define HASVOLATILE 
# 2677 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_VPRINTF 






#define DOUBLESIZE 8
# 2697 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define Fpos_t fpos_t




#define Gid_t_f "lu"





#define Gid_t_sign 1




#define Gid_t_size 4
# 2722 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define Gid_t gid_t
# 2740 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_DIRENT 
#define DIRNAMLEN 
#define Direntry_t struct dirent
# 2758 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_GRP 
#define GRPASSWD 
# 2799 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_NDBM 


#define NDBM_H_USES_PROTOTYPES 







#define I_NETDB 
# 2822 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_PTHREAD 
# 2860 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_PWD 


#define PWCHANGE 
#define PWCLASS 
#define PWEXPIRE 

#define PWGECOS 
#define PWPASSWD 
# 2886 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_SYSUIO 
# 2905 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_TERMIOS 
# 2929 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_SYS_TIME 

#define HAS_TM_TM_ZONE 
#define HAS_TM_TM_GMTOFF 
# 2942 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_STDARG 
# 2971 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define Off_t off_t
#define LSEEKSIZE 8
#define Off_t_size 8
# 2982 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define Malloc_t void *
#define Free_t void




#define PERL_MALLOC_WRAP 
# 3001 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define Mode_t mode_t
# 3025 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define VAL_O_NONBLOCK O_NONBLOCK
#define VAL_EAGAIN EAGAIN
#define RD_NODATA -1
#define EOF_NONBLOCK 
# 3046 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define Netdb_host_t char *
#define Netdb_hlen_t size_t
#define Netdb_name_t const char *
#define Netdb_net_t in_addr_t
# 3066 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define Pid_t pid_t
# 3078 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define PRIVLIB "/opt/local/lib/perl5/5.22"
#define PRIVLIB_EXP "/opt/local/lib/perl5/5.22"
# 3092 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define CAN_PROTOTYPE 

#define _(args) args
# 3105 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define PTRSIZE 4







#define HAS_QUAD 

#define Quad_t long long
#define Uquad_t unsigned long long
#define QUADKIND 3
#define QUAD_IS_INT 1
#define QUAD_IS_LONG 2
#define QUAD_IS_LONG_LONG 3
#define QUAD_IS_INT64_T 4
#define QUAD_IS___INT64 5
# 3145 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define Drand01() Perl_drand48()
#define Rand_seed_t U32
#define seedDrand01(x) Perl_drand48_init((Rand_seed_t)x)
#define RANDBITS 48







#define Select_fd_set_t fd_set *
# 3165 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SH_PATH "/bin/sh"
# 3203 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SIG_NAME "ZERO", "HUP", "INT", "QUIT", "ILL", "TRAP", "ABRT", "EMT", "FPE", "KILL", "BUS", "SEGV", "SYS", "PIPE", "ALRM", "TERM", "URG", "STOP", "TSTP", "CONT", "CHLD", "TTIN", "TTOU", "IO", "XCPU", "XFSZ", "VTALRM", "PROF", "WINCH", "INFO", "USR1", "USR2", "IOT", 0
#define SIG_NUM 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 6, 0
#define SIG_SIZE 33
# 3222 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SITEARCH "/opt/local/lib/perl5/site_perl/5.22/darwin-thread-multi-2level"
#define SITEARCH_EXP "/opt/local/lib/perl5/site_perl/5.22/darwin-thread-multi-2level"
# 3245 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SITELIB "/opt/local/lib/perl5/site_perl/5.22"
#define SITELIB_EXP "/opt/local/lib/perl5/site_perl/5.22"
#define SITELIB_STEM "/opt/local/lib/perl5/site_perl/5.22"




#define Size_t_size 4







#define Size_t size_t





#define Sock_size_t socklen_t
# 3276 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SSize_t ssize_t





#define STDCHAR char




#define Uid_t_f "lu"





#define Uid_t_sign 1




#define Uid_t_size 4






#define Uid_t uid_t
# 3326 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define USE_ITHREADS 




#define USE_REENTRANT_API 
# 3348 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define PERL_VENDORARCH "/opt/local/lib/perl5/vendor_perl/5.22/darwin-thread-multi-2level"
#define PERL_VENDORARCH_EXP "/opt/local/lib/perl5/vendor_perl/5.22/darwin-thread-multi-2level"
# 3360 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define PERL_VENDORLIB_EXP "/opt/local/lib/perl5/vendor_perl/5.22"
#define PERL_VENDORLIB_STEM "/opt/local/lib/perl5/vendor_perl/5.22"
# 3372 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define PERL_TARGETARCH ""
# 3392 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_ATOLL 
# 3404 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_ACOSH 
# 3416 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_ASINH 





#define HAS_ATANH 
# 3431 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_BUILTIN_EXPECT 
#define HAS_BUILTIN_CHOOSE_EXPR 




#define HAS_C99_VARIADIC_MACROS 
# 3467 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_STRUCT_CMSGHDR 





#define HAS_COPYSIGN 





#define HAS_COPYSIGNL 
# 3499 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_DIR_DD_FD 





#define HAS_DIRFD 
# 3519 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_ERF 





#define HAS_ERFC 





#define HAS_EXP2 





#define HAS_EXPM1 





#define HAS_FAST_STDIO 





#define HAS_FCHDIR 






#define FCNTL_CAN_LOCK 





#define HAS_FDIM 






#define HAS_FEGETROUND 





#define HAS_FINITE 
# 3590 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_FLOCK_PROTO 





#define HAS_FMA 





#define HAS_FMAX 





#define HAS_FMIN 
# 3676 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_FPCLASSIFY 
# 3713 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_FREXPL 
# 3725 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_FSEEKO 





#define HAS_FSTATFS 






#define HAS_FSYNC 





#define HAS_FTELLO 





#define HAS_FUTIMES 





#define HAS_GETADDRINFO 





#define HAS_GETCWD 
# 3774 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_GETFSSTAT 





#define HAS_GETITIMER 
# 3798 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_GETNAMEINFO 
# 3822 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_HYPOT 





#define HAS_ILOGB 





#define HAS_ILOGBL 





#define HAS_INETNTOP 





#define HAS_INETPTON 






#define HAS_INT64_T 





#define HAS_ISBLANK 





#define HAS_ISFINITE 
# 3878 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_ISINF 
# 3896 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_ISNAN 
# 3908 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_ISNORMAL 
# 3920 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_J0 






#define HAS_LC_MONETARY_2008 







#define HAS_LDBL_DIG 






#define HAS_LGAMMA 






#define HAS_LGAMMA_R 





#define LIBM_LIB_VERSION 






#define HAS_LLRINT 






#define HAS_LLRINTL 





#define HAS_LLROUND 






#define HAS_LLROUNDL 





#define HAS_LOG1P 





#define HAS_LOG2 





#define HAS_LOGB 






#define HAS_LRINT 






#define HAS_LRINTL 





#define HAS_LROUND 






#define HAS_LROUNDL 





#define HAS_MADVISE 





#define HAS_MALLOC_SIZE 





#define HAS_MALLOC_GOOD_SIZE 





#define HAS_MKDTEMP 






#define HAS_MKSTEMPS 
# 4077 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_MODFL 
#define HAS_MODFL_PROTO 






#define HAS_MPROTECT 





#define HAS_STRUCT_MSGHDR 





#define HAS_NAN 






#define HAS_NEARBYINT 






#define HAS_NEXTAFTER 






#define HAS_NEXTTOWARD 






#define HAS_NL_LANGINFO 
# 4164 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_PTHREAD_ATTR_SETSCOPE 




#define HAS_PTRDIFF_T 






#define HAS_READV 





#define HAS_RECVMSG 





#define HAS_REMAINDER 





#define HAS_REMQUO 






#define HAS_RINT 





#define HAS_ROUND 
# 4216 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_SBRK_PROTO 






#define HAS_SCALBN 





#define HAS_SCALBNL 





#define HAS_SENDMSG 





#define HAS_SETITIMER 
# 4257 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_SIGNBIT 






#define HAS_SIGPROCMASK 
# 4282 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_SNPRINTF 
#define HAS_VSNPRINTF 
# 4311 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SPRINTF_RETURNS_STRLEN 





#define HAS_SQRTL 
# 4344 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_STRUCT_STATFS_F_FLAGS 





#define HAS_STRUCT_STATFS 





#define HAS_FSTATVFS 





#define HAS_STRFTIME 





#define HAS_STRLCAT 





#define HAS_STRLCPY 





#define HAS_STRTOLD 





#define HAS_STRTOLL 





#define HAS_STRTOQ 





#define HAS_STRTOULL 





#define HAS_STRTOUQ 
# 4413 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_SYSCALL_PROTO 







#define HAS_TELLDIR_PROTO 





#define HAS_TGAMMA 
# 4464 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_TIMEGM 





#define HAS_TRUNC 





#define HAS_TRUNCL 






#define U32_ALIGNMENT_REQUIRED 






#define HAS_UALARM 
# 4503 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_UNSETENV 







#define HAS_USLEEP_PROTO 
# 4523 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_WCSCMP 





#define HAS_WCSXFRM 





#define HAS_WRITEV 





#define USE_DYNAMIC_LOADING 
# 4556 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define FFLUSH_NULL 






#define I_ASSERT 





#define I_BFD 
# 4601 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define DB_Hash_t u_int32_t
#define DB_Prefix_t size_t
#define DB_VERSION_MAJOR_CFG 1
#define DB_VERSION_MINOR_CFG 0
#define DB_VERSION_PATCH_CFG 0





#define I_FENV 
# 4635 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_INTTYPES 





#define I_LANGINFO 
# 4653 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_MALLOCMALLOC 
# 4665 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_NETINET_TCP 
# 4701 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_STDBOOL 





#define I_STDINT 
# 4719 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_SYSLOG 
# 4731 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_SYS_MOUNT 
# 4742 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define I_SYS_STATVFS 





#define I_SYSUTSNAME 
# 4790 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define DOUBLEKIND 4
#define DOUBLE_IS_IEEE_754_32_BIT_LITTLE_ENDIAN 1
#define DOUBLE_IS_IEEE_754_32_BIT_BIG_ENDIAN 2
#define DOUBLE_IS_IEEE_754_64_BIT_LITTLE_ENDIAN 3
#define DOUBLE_IS_IEEE_754_64_BIT_BIG_ENDIAN 4
#define DOUBLE_IS_IEEE_754_128_BIT_LITTLE_ENDIAN 5
#define DOUBLE_IS_IEEE_754_128_BIT_BIG_ENDIAN 6
#define DOUBLE_IS_IEEE_754_64_BIT_MIXED_ENDIAN_LE_BE 7
#define DOUBLE_IS_IEEE_754_64_BIT_MIXED_ENDIAN_BE_LE 8
#define DOUBLE_IS_UNKNOWN_FORMAT -1
#define PERL_PRIfldbl "Lf"
#define PERL_PRIgldbl "Lg"
#define PERL_PRIeldbl "Le"
#define PERL_SCNfldbl "Lf"
# 4905 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define IVTYPE long
#define UVTYPE unsigned long
#define I8TYPE signed char
#define U8TYPE unsigned char
#define I16TYPE short
#define U16TYPE unsigned short
#define I32TYPE long
#define U32TYPE unsigned long

#define I64TYPE long long
#define U64TYPE unsigned long long

#define NVTYPE double
#define IVSIZE 4
#define UVSIZE 4
#define I8SIZE 1
#define U8SIZE 1
#define I16SIZE 2
#define U16SIZE 2
#define I32SIZE 4
#define U32SIZE 4

#define I64SIZE 8
#define U64SIZE 8

#define NVSIZE 8
#define NV_PRESERVES_UV 
#define NV_PRESERVES_UV_BITS 32
#define NV_OVERFLOWS_INTEGERS_AT 256.0*256.0*256.0*256.0*256.0*256.0*2.0*2.0*2.0*2.0*2.0
#define NV_ZERO_IS_ALLBITS_ZERO 
# 4981 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define IVdf "ld"
#define UVuf "lu"
#define UVof "lo"
#define UVxf "lx"
#define UVXf "lX"
#define NVef "e"
#define NVff "f"
#define NVgf "g"
# 4997 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define SELECT_MIN_BITS 32
# 5006 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define ST_INO_SIGN 1
#define ST_INO_SIZE 4






#define STARTPERL "#!/opt/local/bin/perl5.22"
# 5024 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define HAS_STDIO_STREAM_ARRAY 

#define STDIO_STREAM_ARRAY __sF
# 5045 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define GMTIME_MAX 2147483647
#define GMTIME_MIN -2147483648
#define LOCALTIME_MAX 2147483647
#define LOCALTIME_MIN -2147483648
# 5108 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define USE_LARGE_FILES 
# 5132 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define MULTIPLICITY 
# 5148 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/config.h"
#define USE_PERLIO 
# 29 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 69 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_IMPLICIT_CONTEXT 
# 113 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#undef START_EXTERN_C
#undef END_EXTERN_C
#undef EXTERN_C





#define START_EXTERN_C 
#define END_EXTERN_C 
#define EXTERN_C extern
# 150 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERLIO_FUNCS_CONST 

#define pVAR struct perl_vars* my_vars PERL_UNUSED_DECL




#define dVAR dNOOP






#define tTHX PerlInterpreter*
#define pTHX tTHX my_perl PERL_UNUSED_DECL
#define aTHX my_perl
#define aTHXa(a) aTHX = (tTHX)a



#define dTHXa(a) pTHX = (tTHX)a




#define dTHX pTHX = PERL_GET_THX

#define pTHX_ pTHX,
#define aTHX_ aTHX,
#define pTHX_1 2
#define pTHX_2 3
#define pTHX_3 4
#define pTHX_4 5
#define pTHX_5 6
#define pTHX_6 7
#define pTHX_7 8
#define pTHX_8 9
#define pTHX_9 10
#define pTHX_12 13







#define STATIC static







#define CPERLscope(x) x
#define CPERLarg void
#define CPERLarg_ 
#define _CPERLarg 
#define PERL_OBJECT_THIS 
#define _PERL_OBJECT_THIS 
#define PERL_OBJECT_THIS_ 
#define CALL_FPTR(fptr) (*fptr)
#define MEMBER_TO_FPTR(name) name


#define CALLRUNOPS PL_runops

#define CALLREGCOMP(sv,flags) Perl_pregcomp(aTHX_ (sv),(flags))

#define CALLREGCOMP_ENG(prog,sv,flags) (prog)->comp(aTHX_ sv, flags)
#define CALLREGEXEC(prog,stringarg,strend,strbeg,minend,sv,data,flags) RX_ENGINE(prog)->exec(aTHX_ (prog),(stringarg),(strend), (strbeg),(minend),(sv),(data),(flags))


#define CALLREG_INTUIT_START(prog,sv,strbeg,strpos,strend,flags,data) RX_ENGINE(prog)->intuit(aTHX_ (prog), (sv), (strbeg), (strpos), (strend),(flags),(data))


#define CALLREG_INTUIT_STRING(prog) RX_ENGINE(prog)->checkstr(aTHX_ (prog))


#define CALLREGFREE(prog) Perl_pregfree(aTHX_ (prog))


#define CALLREGFREE_PVT(prog) if(prog) RX_ENGINE(prog)->free(aTHX_ (prog))


#define CALLREG_NUMBUF_FETCH(rx,paren,usesv) RX_ENGINE(rx)->numbered_buff_FETCH(aTHX_ (rx),(paren),(usesv))


#define CALLREG_NUMBUF_STORE(rx,paren,value) RX_ENGINE(rx)->numbered_buff_STORE(aTHX_ (rx),(paren),(value))


#define CALLREG_NUMBUF_LENGTH(rx,sv,paren) RX_ENGINE(rx)->numbered_buff_LENGTH(aTHX_ (rx),(sv),(paren))


#define CALLREG_NAMED_BUFF_FETCH(rx,key,flags) RX_ENGINE(rx)->named_buff(aTHX_ (rx), (key), NULL, ((flags) | RXapif_FETCH))


#define CALLREG_NAMED_BUFF_STORE(rx,key,value,flags) RX_ENGINE(rx)->named_buff(aTHX_ (rx), (key), (value), ((flags) | RXapif_STORE))


#define CALLREG_NAMED_BUFF_DELETE(rx,key,flags) RX_ENGINE(rx)->named_buff(aTHX_ (rx),(key), NULL, ((flags) | RXapif_DELETE))


#define CALLREG_NAMED_BUFF_CLEAR(rx,flags) RX_ENGINE(rx)->named_buff(aTHX_ (rx), NULL, NULL, ((flags) | RXapif_CLEAR))


#define CALLREG_NAMED_BUFF_EXISTS(rx,key,flags) RX_ENGINE(rx)->named_buff(aTHX_ (rx), (key), NULL, ((flags) | RXapif_EXISTS))


#define CALLREG_NAMED_BUFF_FIRSTKEY(rx,flags) RX_ENGINE(rx)->named_buff_iter(aTHX_ (rx), NULL, ((flags) | RXapif_FIRSTKEY))


#define CALLREG_NAMED_BUFF_NEXTKEY(rx,lastkey,flags) RX_ENGINE(rx)->named_buff_iter(aTHX_ (rx), (lastkey), ((flags) | RXapif_NEXTKEY))


#define CALLREG_NAMED_BUFF_SCALAR(rx,flags) RX_ENGINE(rx)->named_buff(aTHX_ (rx), NULL, NULL, ((flags) | RXapif_SCALAR))


#define CALLREG_NAMED_BUFF_COUNT(rx) RX_ENGINE(rx)->named_buff(aTHX_ (rx), NULL, NULL, RXapif_REGNAMES_COUNT)


#define CALLREG_NAMED_BUFF_ALL(rx,flags) RX_ENGINE(rx)->named_buff(aTHX_ (rx), NULL, NULL, flags)


#define CALLREG_PACKAGE(rx) RX_ENGINE(rx)->qr_package(aTHX_ (rx))



#define CALLREGDUPE(prog,param) Perl_re_dup(aTHX_ (prog),(param))


#define CALLREGDUPE_PVT(prog,param) (prog ? RX_ENGINE(prog)->dupe(aTHX_ (prog),(param)) : (REGEXP *)NULL)
# 313 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_UNUSED_DECL __attribute__unused__
# 329 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_UNUSED_ARG(x) ((void)sizeof(x))



#define PERL_UNUSED_VAR(x) ((void)sizeof(x))



#define PERL_UNUSED_CONTEXT PERL_UNUSED_ARG(my_perl)
# 382 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_UNUSED_RESULT(v) STMT_START { __typeof__(v) z = (v); (void)sizeof(z); } STMT_END
# 421 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define GCC_DIAG_IGNORE(w) 
#define GCC_DIAG_RESTORE 


#define NOOP (void)0
# 434 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define dNOOP extern int Perl___notused(void)
# 466 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define pTHXo pTHX
#define pTHXo_ pTHX_
#define aTHXo aTHX
#define aTHXo_ aTHX_
#define dTHXo dTHX
#define dTHXoa(x) dTHXa(x)



#define pTHXx PerlInterpreter *my_perl
#define pTHXx_ pTHXx,
#define aTHXx my_perl
#define aTHXx_ aTHXx,
#define dTHXx dTHX
# 495 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define dTHXs dNOOP
# 508 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_EXPORT_C extern






#define PERL_XS_EXPORT_C 





#define PERL_USE_GCC_BRACE_GROUPS 
# 534 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define STMT_START (void)(
#define STMT_END )
# 548 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define LIBERAL 1



#define ASCIIish 
# 571 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define STANDARD_C 1







#define VOL volatile
# 620 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define TAINT (PL_tainted = TRUE)
#define TAINT_NOT (PL_tainted = FALSE)
#define TAINT_IF(c) if (UNLIKELY(c)) { PL_tainted = TRUE; }
#define TAINT_ENV() if (UNLIKELY(PL_tainting)) { taint_env(); }
#define TAINT_PROPER(s) if (UNLIKELY(PL_tainting)) { taint_proper(NULL, s); }
#define TAINT_set(s) (PL_tainted = (s))
#define TAINT_get (PL_tainted)
#define TAINTING_get (PL_tainting)
#define TAINTING_set(s) (PL_tainting = (s))
#define TAINT_WARN_get (PL_taint_warn)
#define TAINT_WARN_set(s) (PL_taint_warn = (s))
# 650 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define BSD_SETPGRP(pid,pgrp) setpgid((pid), (pgrp))
# 668 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define BSD_GETPGRP(pid) getpgid((pid))
# 688 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define USE_BSDPGRP 
# 717 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stdarg.h" 1 3 4
# 34 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stdarg.h" 3 4
#define _STDARG_H 
#define _ANSI_STDARG_H_ 

#undef __need___va_list




#define __GNUC_VA_LIST 
typedef __builtin_va_list __gnuc_va_list;






#define va_start(v,l) __builtin_va_start(v,l)
#define va_end(v) __builtin_va_end(v)
#define va_arg(v,l) __builtin_va_arg(v,l)

#define va_copy(d,s) __builtin_va_copy(d,s)

#define __va_copy(d,s) __builtin_va_copy(d,s)
# 105 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;





#define _VA_LIST_ 


#define _VA_LIST 


#define _VA_LIST_DEFINED 


#define _VA_LIST_T_H 


#define __va_list__ 
# 718 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 728 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/usr/include/ctype.h" 1 3 4
# 67 "/usr/include/ctype.h" 3 4
#define _CTYPE_H_ 

# 1 "/usr/include/runetype.h" 1 3 4
# 40 "/usr/include/runetype.h" 3 4
#define _RUNETYPE_H_ 
# 53 "/usr/include/runetype.h" 3 4
#define _CT_RUNE_T 
typedef __darwin_ct_rune_t ct_rune_t;



#define _RUNE_T 
typedef __darwin_rune_t rune_t;




#define _WCHAR_T 
typedef __darwin_wchar_t wchar_t;




#define _WINT_T 
typedef __darwin_wint_t wint_t;




#define _CACHED_RUNES (1 <<8 )
#define _CRMASK (~(_CACHED_RUNES - 1))




typedef struct {
 __darwin_rune_t __min;
 __darwin_rune_t __max;
 __darwin_rune_t __map;
 __uint32_t *__types;
} _RuneEntry;

typedef struct {
 int __nranges;
 _RuneEntry *__ranges;
} _RuneRange;

typedef struct {
 char __magic[8];
 char __encoding[32];

 __darwin_rune_t (*__sgetrune)(const char *, __darwin_size_t, char const **);
 int (*__sputrune)(__darwin_rune_t, char *, __darwin_size_t, char **);
 __darwin_rune_t __invalid_rune;

 __uint32_t __runetype[(1 <<8 )];
 __darwin_rune_t __maplower[(1 <<8 )];
 __darwin_rune_t __mapupper[(1 <<8 )];






 _RuneRange __runetype_ext;
 _RuneRange __maplower_ext;
 _RuneRange __mapupper_ext;

 void *__variable;
 int __variable_len;
} _RuneLocale;

#define _RUNE_MAGIC_1 "RuneMagi"


extern _RuneLocale _DefaultRuneLocale;
extern _RuneLocale *_CurrentRuneLocale;

# 70 "/usr/include/ctype.h" 2 3 4

#define _CTYPE_A 0x00000100L
#define _CTYPE_C 0x00000200L
#define _CTYPE_D 0x00000400L
#define _CTYPE_G 0x00000800L
#define _CTYPE_L 0x00001000L
#define _CTYPE_P 0x00002000L
#define _CTYPE_S 0x00004000L
#define _CTYPE_U 0x00008000L
#define _CTYPE_X 0x00010000L
#define _CTYPE_B 0x00020000L
#define _CTYPE_R 0x00040000L
#define _CTYPE_I 0x00080000L
#define _CTYPE_T 0x00100000L
#define _CTYPE_Q 0x00200000L
#define _CTYPE_SW0 0x20000000L
#define _CTYPE_SW1 0x40000000L
#define _CTYPE_SW2 0x80000000L
#define _CTYPE_SW3 0xc0000000L
#define _CTYPE_SWM 0xe0000000L
#define _CTYPE_SWS 30
# 116 "/usr/include/ctype.h" 3 4

int isalnum(int);
int isalpha(int);
int isblank(int);
int iscntrl(int);
int isdigit(int);
int isgraph(int);
int islower(int);
int isprint(int);
int ispunct(int);
int isspace(int);
int isupper(int);
int isxdigit(int);
int tolower(int);
int toupper(int);
int isascii(int);
int toascii(int);


int _tolower(int);
int _toupper(int);
int digittoint(int);
int ishexnumber(int);
int isideogram(int);
int isnumber(int);
int isphonogram(int);
int isrune(int);
int isspecial(int);




#define isalnum(c) __istype((c), (_CTYPE_A|_CTYPE_D))
#define isalpha(c) __istype((c), _CTYPE_A)
#define isblank(c) __istype((c), _CTYPE_B)
#define iscntrl(c) __istype((c), _CTYPE_C)
#define isdigit(c) __isctype((c), _CTYPE_D)
#define isgraph(c) __istype((c), _CTYPE_G)
#define islower(c) __istype((c), _CTYPE_L)
#define isprint(c) __istype((c), _CTYPE_R)
#define ispunct(c) __istype((c), _CTYPE_P)
#define isspace(c) __istype((c), _CTYPE_S)
#define isupper(c) __istype((c), _CTYPE_U)
#define isxdigit(c) __isctype((c), _CTYPE_X)
#define tolower(c) __tolower(c)
#define toupper(c) __toupper(c)

#define _tolower(c) __tolower(c)
#define _toupper(c) __toupper(c)


#define digittoint(c) __maskrune((c), 0xFF)
#define isascii(c) (((c) & ~0x7F) == 0)
#define ishexnumber(c) __istype((c), _CTYPE_X)
#define isideogram(c) __istype((c), _CTYPE_I)
#define isnumber(c) __istype((c), _CTYPE_D)
#define isphonogram(c) __istype((c), _CTYPE_Q)
#define isrune(c) __istype((c), 0xFFFFFF00L)
#define isspecial(c) __istype((c), _CTYPE_T)
#define toascii(c) ((c) & 0x7F)




unsigned long ___runetype(__darwin_ct_rune_t);
__darwin_ct_rune_t ___tolower(__darwin_ct_rune_t);
__darwin_ct_rune_t ___toupper(__darwin_ct_rune_t);

# 208 "/usr/include/ctype.h" 3 4

int __maskrune(__darwin_ct_rune_t, unsigned long);



static __inline int
__istype(__darwin_ct_rune_t _c, unsigned long _f)
{



 return !!((((_c) & ~0x7F) == 0) ? (_DefaultRuneLocale.__runetype[_c] & _f)
  : __maskrune(_c, _f));

}

static __inline __darwin_ct_rune_t
__isctype(__darwin_ct_rune_t _c, unsigned long _f)
{



 return (_c < 0 || _c >= (1 <<8 )) ? 0 :
  !!(_DefaultRuneLocale.__runetype[_c] & _f);

}
# 248 "/usr/include/ctype.h" 3 4

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t);
__darwin_ct_rune_t __tolower(__darwin_ct_rune_t);



static __inline int
__wcwidth(__darwin_ct_rune_t _c)
{
 unsigned int _x;

 if (_c == 0)
  return (0);
 _x = (unsigned int)__maskrune(_c, 0xe0000000L|0x00040000L);
 if ((_x & 0xe0000000L) != 0)
  return ((_x & 0xe0000000L) >> 30);
 return ((_x & 0x00040000L) != 0 ? 1 : -1);
}
# 729 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 739 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/usr/include/locale.h" 1 3 4
# 38 "/usr/include/locale.h" 3 4
#define _LOCALE_H_ 

# 1 "/usr/include/_locale.h" 1 3 4
# 38 "/usr/include/_locale.h" 3 4
#define __LOCALE_H_ 




struct lconv {
 char *decimal_point;
 char *thousands_sep;
 char *grouping;
 char *int_curr_symbol;
 char *currency_symbol;
 char *mon_decimal_point;
 char *mon_thousands_sep;
 char *mon_grouping;
 char *positive_sign;
 char *negative_sign;
 char int_frac_digits;
 char frac_digits;
 char p_cs_precedes;
 char p_sep_by_space;
 char n_cs_precedes;
 char n_sep_by_space;
 char p_sign_posn;
 char n_sign_posn;
 char int_p_cs_precedes;
 char int_n_cs_precedes;
 char int_p_sep_by_space;
 char int_n_sep_by_space;
 char int_p_sign_posn;
 char int_n_sign_posn;
};






struct lconv *localeconv(void);

# 41 "/usr/include/locale.h" 2 3 4

#define LC_ALL 0
#define LC_COLLATE 1
#define LC_CTYPE 2
#define LC_MONETARY 3
#define LC_NUMERIC 4
#define LC_TIME 5
#define LC_MESSAGES 6

#define _LC_LAST 7


char *setlocale(int, const char *);

# 740 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2



#define USE_LOCALE 
#define HAS_SKIP_LOCALE_INIT 



#define USE_LOCALE_COLLATE 


#define USE_LOCALE_CTYPE 


#define USE_LOCALE_NUMERIC 


#define USE_LOCALE_MESSAGES 


#define USE_LOCALE_MONETARY 


#define USE_LOCALE_TIME 


#define my_setlocale(a,b) setlocale(a,b)




#define IN_ENCODING UNLIKELY(PL_encoding || (PL_lex_encoding && _get_encoding() != NULL))


# 1 "/usr/include/setjmp.h" 1 3 4
# 24 "/usr/include/setjmp.h" 3 4
#define _BSD_SETJMP_H 

# 1 "/usr/include/machine/setjmp.h" 1 3 4
# 25 "/usr/include/machine/setjmp.h" 3 4
#define _MACHINE_SETJMP_H_ 



# 1 "/usr/include/ppc/setjmp.h" 1 3 4
# 29 "/usr/include/ppc/setjmp.h" 3 4
#define _BSD_PPC_SETJMP_H_ 




struct _jmp_buf {
 struct sigcontext sigcontext;
 unsigned int vmask __attribute__((aligned(8)));
 unsigned int vreg[32 * 4] __attribute__((aligned(16)));

};
# 50 "/usr/include/ppc/setjmp.h" 3 4
#define _JBLEN64 (26*2 + 18*2 + 129 + 1)
#define _JBLEN32 (26 + 18*2 + 129 + 1)
#define _JBLEN_MAX _JBLEN64







#define _JBLEN _JBLEN32
# 82 "/usr/include/ppc/setjmp.h" 3 4
typedef int jmp_buf[(26 + 18*2 + 129 + 1)];
typedef int sigjmp_buf[(26 + 18*2 + 129 + 1) + 1];



extern int setjmp(jmp_buf env);
extern void longjmp(jmp_buf env, int val);


int _setjmp(jmp_buf env);
void _longjmp(jmp_buf, int val);
int sigsetjmp(sigjmp_buf env, int val);
void siglongjmp(sigjmp_buf env, int val);



void longjmperror(void);


# 30 "/usr/include/machine/setjmp.h" 2 3 4
# 27 "/usr/include/setjmp.h" 2 3 4
# 775 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 789 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define BSDish 





# 1 "/usr/include/stdlib.h" 1 3 4
# 59 "/usr/include/stdlib.h" 3 4
#define _STDLIB_H_ 




# 1 "/usr/include/sys/wait.h" 1 3 4
# 59 "/usr/include/sys/wait.h" 3 4
#define _SYS_WAIT_H_ 
# 73 "/usr/include/sys/wait.h" 3 4
typedef enum {
 P_ALL,
 P_PID,
 P_PGID
} idtype_t;
# 111 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/sys/resource.h" 1 3 4
# 59 "/usr/include/sys/resource.h" 3 4
#define _SYS_RESOURCE_H_ 
# 73 "/usr/include/sys/resource.h" 3 4
#define _TIMEVAL 
struct timeval {
 __darwin_time_t tv_sec;
 __darwin_suseconds_t tv_usec;
};
# 90 "/usr/include/sys/resource.h" 3 4
typedef __int64_t rlim_t;
# 101 "/usr/include/sys/resource.h" 3 4
#define PRIO_PROCESS 0
#define PRIO_PGRP 1
#define PRIO_USER 2





#define PRIO_MIN -20
#define PRIO_MAX 20
# 123 "/usr/include/sys/resource.h" 3 4
#define RUSAGE_SELF 0
#define RUSAGE_CHILDREN -1
# 135 "/usr/include/sys/resource.h" 3 4
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
# 146 "/usr/include/sys/resource.h" 3 4
 long ru_maxrss;
#define ru_first ru_ixrss
 long ru_ixrss;
 long ru_idrss;
 long ru_isrss;
 long ru_minflt;
 long ru_majflt;
 long ru_nswap;
 long ru_inblock;
 long ru_oublock;
 long ru_msgsnd;
 long ru_msgrcv;
 long ru_nsignals;
 long ru_nvcsw;
 long ru_nivcsw;
#define ru_last ru_nivcsw

};
# 179 "/usr/include/sys/resource.h" 3 4
#define RLIM_INFINITY (((__uint64_t)1 << 63) - 1)
#define RLIM_SAVED_MAX RLIM_INFINITY
#define RLIM_SAVED_CUR RLIM_INFINITY





#define RLIMIT_CPU 0
#define RLIMIT_FSIZE 1
#define RLIMIT_DATA 2
#define RLIMIT_STACK 3
#define RLIMIT_CORE 4
#define RLIMIT_AS 5

#define RLIMIT_RSS RLIMIT_AS
#define RLIMIT_MEMLOCK 6
#define RLIMIT_NPROC 7

#define RLIMIT_NOFILE 8

#define RLIM_NLIMITS 9






struct rlimit {
 rlim_t rlim_cur;
 rlim_t rlim_max;
};




int getpriority(int, id_t);
int getrlimit(int, struct rlimit *);
int getrusage(int, struct rusage *);
int setpriority(int, id_t, int);
int setrlimit(int, const struct rlimit *);

# 112 "/usr/include/sys/wait.h" 2 3 4
# 122 "/usr/include/sys/wait.h" 3 4
#define WNOHANG 0x01
#define WUNTRACED 0x02
# 132 "/usr/include/sys/wait.h" 3 4
#define _W_INT(w) (*(int *)&(w))
#define WCOREFLAG 0200



#define _WSTATUS(x) (_W_INT(x) & 0177)
#define _WSTOPPED 0177





#define WEXITSTATUS(x) (_W_INT(x) >> 8)
#define WIFCONTINUED(x) (x == 0x13)
#define WIFEXITED(x) (_WSTATUS(x) == 0)
#define WIFSIGNALED(x) (_WSTATUS(x) != _WSTOPPED && _WSTATUS(x) != 0)
#define WIFSTOPPED(x) (_WSTATUS(x) == _WSTOPPED)
#define WSTOPSIG(x) (_W_INT(x) >> 8)
#define WTERMSIG(x) (_WSTATUS(x))

#define WCOREDUMP(x) (_W_INT(x) & WCOREFLAG)

#define W_EXITCODE(ret,sig) ((ret) << 8 | (sig))
#define W_STOPCODE(sig) ((sig) << 8 | _WSTOPPED)
# 164 "/usr/include/sys/wait.h" 3 4
#define WEXITED 0x04




#define WCONTINUED 0x10
#define WNOWAIT 0x20
# 179 "/usr/include/sys/wait.h" 3 4
#define WAIT_ANY (-1)
#define WAIT_MYPGRP 0
# 190 "/usr/include/sys/wait.h" 3 4
union wait {
 int w_status;



 struct {







  unsigned int w_Filler:16,
    w_Retcode:8,
    w_Coredump:1,
    w_Termsig:7;

 } w_T;





 struct {






  unsigned int w_Filler:16,
    w_Stopsig:8,
    w_Stopval:8;

 } w_S;
};
#define w_termsig w_T.w_Termsig
#define w_coredump w_T.w_Coredump
#define w_retcode w_T.w_Retcode
#define w_stopval w_S.w_Stopval
#define w_stopsig w_S.w_Stopsig





#define WSTOPPED _WSTOPPED



pid_t wait(int *);
pid_t waitpid(pid_t, int *, int);

int waitid(idtype_t, id_t, siginfo_t *, int);


pid_t wait3(int *, int, struct rusage *);
pid_t wait4(pid_t, int *, int, struct rusage *);


# 65 "/usr/include/stdlib.h" 2 3 4

# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
#define _ALLOCA_H_ 
# 35 "/usr/include/alloca.h" 3 4

void *alloca(size_t);




#undef alloca
#undef __alloca
#define alloca(size) __alloca(size)
#define __alloca(size) __builtin_alloca(size)
# 67 "/usr/include/stdlib.h" 2 3 4
# 96 "/usr/include/stdlib.h" 3 4
typedef struct {
 int quot;
 int rem;
} div_t;

typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef struct {
 long long quot;
 long long rem;
} lldiv_t;






#define EXIT_FAILURE 1
#define EXIT_SUCCESS 0

#define RAND_MAX 0x7fffffff
# 133 "/usr/include/stdlib.h" 3 4
extern int __mb_cur_max;
#define MB_CUR_MAX __mb_cur_max
# 143 "/usr/include/stdlib.h" 3 4

void abort(void) __attribute__((__noreturn__));
int abs(int) __attribute__((__const__));
int atexit(void (*)(void));
double atof(const char *);
int atoi(const char *);
long atol(const char *);

long long
  atoll(const char *);

void *bsearch(const void *, const void *, size_t,
     size_t, int (*)(const void *, const void *));
void *calloc(size_t, size_t);
div_t div(int, int) __attribute__((__const__));
void exit(int) __attribute__((__noreturn__));
void free(void *);
char *getenv(const char *);
long labs(long) __attribute__((__const__));
ldiv_t ldiv(long, long) __attribute__((__const__));

long long
  llabs(long long);
lldiv_t lldiv(long long, long long);

void *malloc(size_t);
int mblen(const char *, size_t);
size_t mbstowcs(wchar_t * , const char * , size_t);
int mbtowc(wchar_t * , const char * , size_t);
void qsort(void *, size_t, size_t,
     int (*)(const void *, const void *));
int rand(void);
void *realloc(void *, size_t);
void srand(unsigned);
double strtod(const char *, char **);
float strtof(const char *, char **);
long strtol(const char *, char **, int);
long double
  strtold(const char *, char **) __asm("_" "strtold" "$LDBL128");

long long
  strtoll(const char *, char **, int);

unsigned long
  strtoul(const char *, char **, int);

unsigned long long
  strtoull(const char *, char **, int);

int system(const char *);
size_t wcstombs(char * , const wchar_t * , size_t);
int wctomb(char *, wchar_t);


void _Exit(int) __attribute__((__noreturn__));
long a64l(const char *);
double drand48(void);
char *ecvt(double, int, int *, int *);
double erand48(unsigned short[3]);
char *fcvt(double, int, int *, int *);
char *gcvt(double, int, char *);
int getsubopt(char **, char * const *, char **);
int grantpt(int);



char *initstate(unsigned long, char *, long);

long jrand48(unsigned short[3]);
char *l64a(long);
void lcong48(unsigned short[7]);
long lrand48(void);
char *mktemp(char *);
int mkstemp(char *);
long mrand48(void);
long nrand48(unsigned short[3]);
int posix_openpt(int);
char *ptsname(int);
int putenv(char *) ;
long random(void);
char *realpath(const char *, char *resolved_path);
unsigned short
 *seed48(unsigned short[3]);
int setenv(const char *, const char *, int) ;



int setkey(const char *);

char *setstate(const char *);
void srand48(long);



void srandom(unsigned long);

int unlockpt(int);



void unsetenv(const char *);
# 260 "/usr/include/stdlib.h" 3 4
u_int32_t
  arc4random(void);
void arc4random_addrandom(unsigned char *dat, int datlen);
void arc4random_stir(void);


char *cgetcap(char *, const char *, int);
int cgetclose(void);
int cgetent(char **, char **, const char *);
int cgetfirst(char **, char **);
int cgetmatch(const char *, const char *);
int cgetnext(char **, char **);
int cgetnum(char *, const char *, long *);
int cgetset(const char *);
int cgetstr(char *, const char *, char **);
int cgetustr(char *, const char *, char **);

int daemon(int, int);
char *devname(dev_t, mode_t);
char *devname_r(dev_t, mode_t, char *buf, int len);
char *getbsize(int *, long *);
int getloadavg(double [], int);
const char
 *getprogname(void);

int heapsort(void *, size_t, size_t,
     int (*)(const void *, const void *));
int mergesort(void *, size_t, size_t,
     int (*)(const void *, const void *));
void qsort_r(void *, size_t, size_t, void *,
     int (*)(void *, const void *, const void *));
int radixsort(const unsigned char **, int, const unsigned char *,
     unsigned);
void setprogname(const char *);
int sradixsort(const unsigned char **, int, const unsigned char *,
     unsigned);
void sranddev(void);
void srandomdev(void);
int rand_r(unsigned *);
void *reallocf(void *, size_t);

long long
  strtoq(const char *, char **, int);
unsigned long long
  strtouq(const char *, char **, int);

extern char *suboptarg;
void *valloc(size_t);


# 796 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2




# 1 "/usr/include/unistd.h" 1 3 4
# 69 "/usr/include/unistd.h" 3 4
#define _UNISTD_H_ 




# 1 "/usr/include/sys/unistd.h" 1 3 4
# 59 "/usr/include/sys/unistd.h" 3 4
#define _SYS_UNISTD_H_ 
# 71 "/usr/include/sys/unistd.h" 3 4
#define _POSIX_VERSION 200112L
#define _POSIX2_VERSION 200112L




#define _POSIX_VDISABLE ((unsigned char)'\377')


#define _POSIX_THREAD_KEYS_MAX 128


#define F_OK 0
#define X_OK (1<<0)
#define W_OK (1<<1)
#define R_OK (1<<2)







#define _READ_OK (1<<9)
#define _WRITE_OK (1<<10)
#define _EXECUTE_OK (1<<11)
#define _DELETE_OK (1<<12)
#define _APPEND_OK (1<<13)
#define _RMFILE_OK (1<<14)
#define _RATTR_OK (1<<15)
#define _WATTR_OK (1<<16)
#define _REXT_OK (1<<17)
#define _WEXT_OK (1<<18)
#define _RPERM_OK (1<<19)
#define _WPERM_OK (1<<20)
#define _CHOWN_OK (1<<21)

#define _ACCESS_EXTENDED_MASK (_READ_OK | _WRITE_OK | _EXECUTE_OK | _DELETE_OK | _APPEND_OK | _RMFILE_OK | _REXT_OK | _WEXT_OK | _RATTR_OK | _WATTR_OK | _RPERM_OK | _WPERM_OK | _CHOWN_OK)
# 117 "/usr/include/sys/unistd.h" 3 4
#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2




#define L_SET SEEK_SET
#define L_INCR SEEK_CUR
#define L_XTND SEEK_END



struct accessx_descriptor {
 unsigned ad_name_offset;
 int ad_flags;
 int ad_pad[2];
};
#define ACCESSX_MAX_DESCRIPTORS 100
#define ACCESSX_MAX_TABLESIZE (16 * 1024)



#define _PC_LINK_MAX 1
#define _PC_MAX_CANON 2
#define _PC_MAX_INPUT 3
#define _PC_NAME_MAX 4
#define _PC_PATH_MAX 5
#define _PC_PIPE_BUF 6
#define _PC_CHOWN_RESTRICTED 7
#define _PC_NO_TRUNC 8
#define _PC_VDISABLE 9


#define _PC_NAME_CHARS_MAX 10
#define _PC_CASE_SENSITIVE 11
#define _PC_CASE_PRESERVING 12
#define _PC_EXTENDED_SECURITY_NP 13
#define _PC_AUTH_OPAQUE_NP 14



#define _CS_PATH 1
# 75 "/usr/include/unistd.h" 2 3 4
# 120 "/usr/include/unistd.h" 3 4
#define _UUID_T 
typedef __darwin_uuid_t uuid_t;



#define STDIN_FILENO 0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2







#define _XOPEN_VERSION 600
#define _XOPEN_XCU_VERSION 4



#define _POSIX_ADVISORY_INFO (-1)
#define _POSIX_ASYNCHRONOUS_IO (-1)
#define _POSIX_BARRIERS (-1)
#define _POSIX_CHOWN_RESTRICTED 200112L
#define _POSIX_CLOCK_SELECTION (-1)
#define _POSIX_CPUTIME (-1)
#define _POSIX_FSYNC (-1)
#define _POSIX_IPV6 200112L
#define _POSIX_JOB_CONTROL 200112L
#define _POSIX_MAPPED_FILES 200112L
#define _POSIX_MEMLOCK (-1)
#define _POSIX_MEMLOCK_RANGE (-1)
#define _POSIX_MEMORY_PROTECTION 200112L
#define _POSIX_MESSAGE_PASSING (-1)
#define _POSIX_MONOTONIC_CLOCK (-1)
#define _POSIX_NO_TRUNC 200112L
#define _POSIX_PRIORITIZED_IO (-1)
#define _POSIX_PRIORITY_SCHEDULING (-1)
#define _POSIX_RAW_SOCKETS (-1)
#define _POSIX_READER_WRITER_LOCKS 200112L
#define _POSIX_REALTIME_SIGNALS (-1)
#define _POSIX_REGEXP 200112L
#define _POSIX_SAVED_IDS 200112L
#define _POSIX_SEMAPHORES (-1)
#define _POSIX_SHARED_MEMORY_OBJECTS (-1)
#define _POSIX_SHELL 200112L
#define _POSIX_SPAWN (-1)
#define _POSIX_SPIN_LOCKS (-1)
#define _POSIX_SPORADIC_SERVER (-1)
#define _POSIX_SYNCHRONIZED_IO (-1)
#define _POSIX_THREAD_ATTR_STACKADDR 200112L
#define _POSIX_THREAD_ATTR_STACKSIZE 200112L
#define _POSIX_THREAD_CPUTIME (-1)
#define _POSIX_THREAD_PRIO_INHERIT (-1)
#define _POSIX_THREAD_PRIO_PROTECT (-1)
#define _POSIX_THREAD_PRIORITY_SCHEDULING (-1)
#define _POSIX_THREAD_PROCESS_SHARED (-1)
#define _POSIX_THREAD_SAFE_FUNCTIONS 200112L
#define _POSIX_THREAD_SPORADIC_SERVER (-1)
#define _POSIX_THREADS 200112L
#define _POSIX_TIMEOUTS (-1)
#define _POSIX_TIMERS (-1)
#define _POSIX_TRACE (-1)
#define _POSIX_TRACE_EVENT_FILTER (-1)
#define _POSIX_TRACE_INHERIT (-1)
#define _POSIX_TRACE_LOG (-1)
#define _POSIX_TYPED_MEMORY_OBJECTS (-1)




#define _POSIX2_C_BIND 200112L
#define _POSIX2_C_DEV 200112L
#define _POSIX2_CHAR_TERM 200112L
#define _POSIX2_FORT_DEV (-1)
#define _POSIX2_FORT_RUN 200112L
#define _POSIX2_LOCALEDEF 200112L
#define _POSIX2_PBS (-1)
#define _POSIX2_PBS_ACCOUNTING (-1)
#define _POSIX2_PBS_CHECKPOINT (-1)
#define _POSIX2_PBS_LOCATE (-1)
#define _POSIX2_PBS_MESSAGE (-1)
#define _POSIX2_PBS_TRACK (-1)
#define _POSIX2_SW_DEV 200112L
#define _POSIX2_UPE 200112L

#define _V6_ILP32_OFF32 (-1)
#define _V6_ILP32_OFFBIG (1)
#define _V6_LP64_OFF64 (1)
#define _V6_LPBIG_OFFBIG (1)

#define _XBS5_ILP32_OFF32 _V6_ILP32_OFF32
#define _XBS5_ILP32_OFFBIG _V6_ILP32_OFFBIG
#define _XBS5_LP64_OFF64 _V6_LP64_OFF64
#define _XBS5_LPBIG_OFFBIG _V6_LPBIG_OFFBIG

#define _XOPEN_CRYPT (1)
#define _XOPEN_ENH_I18N (1)
#define _XOPEN_LEGACY (-1)
#define _XOPEN_REALTIME (-1)
#define _XOPEN_REALTIME_THREADS (-1)
#define _XOPEN_SHM (1)
#define _XOPEN_STREAMS (-1)
#define _XOPEN_UNIX (1)


#define F_ULOCK 0
#define F_LOCK 1
#define F_TLOCK 2
#define F_TEST 3


#define _SC_ARG_MAX 1
#define _SC_CHILD_MAX 2
#define _SC_CLK_TCK 3
#define _SC_NGROUPS_MAX 4
#define _SC_OPEN_MAX 5
#define _SC_JOB_CONTROL 6
#define _SC_SAVED_IDS 7
#define _SC_VERSION 8
#define _SC_BC_BASE_MAX 9
#define _SC_BC_DIM_MAX 10
#define _SC_BC_SCALE_MAX 11
#define _SC_BC_STRING_MAX 12
#define _SC_COLL_WEIGHTS_MAX 13
#define _SC_EXPR_NEST_MAX 14
#define _SC_LINE_MAX 15
#define _SC_RE_DUP_MAX 16
#define _SC_2_VERSION 17
#define _SC_2_C_BIND 18
#define _SC_2_C_DEV 19
#define _SC_2_CHAR_TERM 20
#define _SC_2_FORT_DEV 21
#define _SC_2_FORT_RUN 22
#define _SC_2_LOCALEDEF 23
#define _SC_2_SW_DEV 24
#define _SC_2_UPE 25
#define _SC_STREAM_MAX 26
#define _SC_TZNAME_MAX 27
#define _SC_ASYNCHRONOUS_IO 28
#define _SC_PAGESIZE 29
#define _SC_MEMLOCK 30
#define _SC_MEMLOCK_RANGE 31
#define _SC_MEMORY_PROTECTION 32
#define _SC_MESSAGE_PASSING 33
#define _SC_PRIORITIZED_IO 34
#define _SC_PRIORITY_SCHEDULING 35
#define _SC_REALTIME_SIGNALS 36
#define _SC_SEMAPHORES 37
#define _SC_FSYNC 38
#define _SC_SHARED_MEMORY_OBJECTS 39
#define _SC_SYNCHRONIZED_IO 40
#define _SC_TIMERS 41
#define _SC_AIO_LISTIO_MAX 42
#define _SC_AIO_MAX 43
#define _SC_AIO_PRIO_DELTA_MAX 44
#define _SC_DELAYTIMER_MAX 45
#define _SC_MQ_OPEN_MAX 46
#define _SC_MAPPED_FILES 47
#define _SC_RTSIG_MAX 48
#define _SC_SEM_NSEMS_MAX 49
#define _SC_SEM_VALUE_MAX 50
#define _SC_SIGQUEUE_MAX 51
#define _SC_TIMER_MAX 52
#define _SC_2_PBS 59
#define _SC_2_PBS_ACCOUNTING 60
#define _SC_2_PBS_CHECKPOINT 61
#define _SC_2_PBS_LOCATE 62
#define _SC_2_PBS_MESSAGE 63
#define _SC_2_PBS_TRACK 64
#define _SC_ADVISORY_INFO 65
#define _SC_BARRIERS 66
#define _SC_CLOCK_SELECTION 67
#define _SC_CPUTIME 68
#define _SC_FILE_LOCKING 69
#define _SC_GETGR_R_SIZE_MAX 70
#define _SC_GETPW_R_SIZE_MAX 71
#define _SC_HOST_NAME_MAX 72
#define _SC_LOGIN_NAME_MAX 73
#define _SC_MONOTONIC_CLOCK 74
#define _SC_MQ_PRIO_MAX 75
#define _SC_READER_WRITER_LOCKS 76
#define _SC_REGEXP 77
#define _SC_SHELL 78
#define _SC_SPAWN 79
#define _SC_SPIN_LOCKS 80
#define _SC_SPORADIC_SERVER 81
#define _SC_THREAD_ATTR_STACKADDR 82
#define _SC_THREAD_ATTR_STACKSIZE 83
#define _SC_THREAD_CPUTIME 84
#define _SC_THREAD_DESTRUCTOR_ITERATIONS 85
#define _SC_THREAD_KEYS_MAX 86
#define _SC_THREAD_PRIO_INHERIT 87
#define _SC_THREAD_PRIO_PROTECT 88
#define _SC_THREAD_PRIORITY_SCHEDULING 89
#define _SC_THREAD_PROCESS_SHARED 90
#define _SC_THREAD_SAFE_FUNCTIONS 91
#define _SC_THREAD_SPORADIC_SERVER 92
#define _SC_THREAD_STACK_MIN 93
#define _SC_THREAD_THREADS_MAX 94
#define _SC_TIMEOUTS 95
#define _SC_THREADS 96
#define _SC_TRACE 97
#define _SC_TRACE_EVENT_FILTER 98
#define _SC_TRACE_INHERIT 99
#define _SC_TRACE_LOG 100
#define _SC_TTY_NAME_MAX 101
#define _SC_TYPED_MEMORY_OBJECTS 102
#define _SC_V6_ILP32_OFF32 103
#define _SC_V6_ILP32_OFFBIG 104
#define _SC_V6_LP64_OFF64 105
#define _SC_V6_LPBIG_OFFBIG 106
#define _SC_IPV6 118
#define _SC_RAW_SOCKETS 119
#define _SC_SYMLOOP_MAX 120
#define _SC_ATEXIT_MAX 107
#define _SC_IOV_MAX 56
#define _SC_PAGE_SIZE _SC_PAGESIZE
#define _SC_XOPEN_CRYPT 108
#define _SC_XOPEN_ENH_I18N 109
#define _SC_XOPEN_LEGACY 110
#define _SC_XOPEN_REALTIME 111
#define _SC_XOPEN_REALTIME_THREADS 112
#define _SC_XOPEN_SHM 113
#define _SC_XOPEN_STREAMS 114
#define _SC_XOPEN_UNIX 115
#define _SC_XOPEN_VERSION 116
#define _SC_XOPEN_XCU_VERSION 121
#define _SC_XBS5_ILP32_OFF32 122
#define _SC_XBS5_ILP32_OFFBIG 123
#define _SC_XBS5_LP64_OFF64 124
#define _SC_XBS5_LPBIG_OFFBIG 125




#define _CS_POSIX_V6_ILP32_OFF32_CFLAGS 2
#define _CS_POSIX_V6_ILP32_OFF32_LDFLAGS 3
#define _CS_POSIX_V6_ILP32_OFF32_LIBS 4
#define _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS 5
#define _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS 6
#define _CS_POSIX_V6_ILP32_OFFBIG_LIBS 7
#define _CS_POSIX_V6_LP64_OFF64_CFLAGS 8
#define _CS_POSIX_V6_LP64_OFF64_LDFLAGS 9
#define _CS_POSIX_V6_LP64_OFF64_LIBS 10
#define _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS 11
#define _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS 12
#define _CS_POSIX_V6_LPBIG_OFFBIG_LIBS 13
#define _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS 14


#define _CS_XBS5_ILP32_OFF32_CFLAGS 20
#define _CS_XBS5_ILP32_OFF32_LDFLAGS 21
#define _CS_XBS5_ILP32_OFF32_LIBS 22
#define _CS_XBS5_ILP32_OFF32_LINTFLAGS 23
#define _CS_XBS5_ILP32_OFFBIG_CFLAGS 24
#define _CS_XBS5_ILP32_OFFBIG_LDFLAGS 25
#define _CS_XBS5_ILP32_OFFBIG_LIBS 26
#define _CS_XBS5_ILP32_OFFBIG_LINTFLAGS 27
#define _CS_XBS5_LP64_OFF64_CFLAGS 28
#define _CS_XBS5_LP64_OFF64_LDFLAGS 29
#define _CS_XBS5_LP64_OFF64_LIBS 30
#define _CS_XBS5_LP64_OFF64_LINTFLAGS 31
#define _CS_XBS5_LPBIG_OFFBIG_CFLAGS 32
#define _CS_XBS5_LPBIG_OFFBIG_LDFLAGS 33
#define _CS_XBS5_LPBIG_OFFBIG_LIBS 34
#define _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS 35



void _exit(int) __attribute__((__noreturn__));
int access(const char *, int);
unsigned int
  alarm(unsigned int);
int chdir(const char *);
int chown(const char *, uid_t, gid_t);
int close(int);
size_t confstr(int, char *, size_t);
char *crypt(const char *, const char *);
char *ctermid(char *);
int dup(int);
int dup2(int, int);
int execl(const char *, const char *, ...);
int execle(const char *, const char *, ...);
int execlp(const char *, const char *, ...);
int execv(const char *, char * const *);
int execve(const char *, char * const *, char * const *);
int execvp(const char *, char * const *);
int fchown(int, uid_t, gid_t);
int fchdir(int);
pid_t fork(void);
long fpathconf(int, int);
int ftruncate(int, off_t);
char *getcwd(char *, size_t);
gid_t getegid(void);
uid_t geteuid(void);
gid_t getgid(void);
int getgroups(int, gid_t []);
long gethostid(void);
int gethostname(char *, size_t);
char *getlogin(void);
int getlogin_r(char *, size_t);
int getopt(int, char * const [], const char *);
pid_t getpgid(pid_t);
pid_t getpgrp(void);
pid_t getpid(void);
pid_t getppid(void);
pid_t getsid(pid_t);
uid_t getuid(void);
char *getwd(char *);
int isatty(int);
int lchown(const char *, uid_t, gid_t) ;
int link(const char *, const char *);
int lockf(int, int, off_t);
off_t lseek(int, off_t, int);
int nice(int);
long pathconf(const char *, int);
int pause(void);
int pipe(int [2]);
ssize_t pread(int, void *, size_t, off_t);
ssize_t pwrite(int, const void *, size_t, off_t);
ssize_t read(int, void *, size_t);
ssize_t readlink(const char * , char * , size_t);
int rmdir(const char *);
int setegid(gid_t);
int seteuid(uid_t);
int setgid(gid_t);
int setpgid(pid_t, pid_t);



int setpgrp(pid_t pid, pid_t pgrp);

int setregid(gid_t, gid_t);
int setreuid(uid_t, uid_t);
pid_t setsid(void);
int setuid(uid_t);
unsigned int
  sleep(unsigned int);
void swab(const void * , void * , ssize_t);
int symlink(const char *, const char *);
void sync(void);
long sysconf(int);
pid_t tcgetpgrp(int);
int tcsetpgrp(int, pid_t);
int truncate(const char *, off_t);
char *ttyname(int);



char *ttyname_r(int, char *, size_t);

useconds_t
  ualarm(useconds_t, useconds_t);
int unlink(const char *);
int usleep(useconds_t);
pid_t vfork(void);
ssize_t write(int, const void *, size_t);

extern char *optarg;
extern int optind, opterr, optopt;


# 1 "/usr/include/sys/select.h" 1 3 4
# 58 "/usr/include/sys/select.h" 3 4
#define _SYS_SELECT_H_ 
# 86 "/usr/include/sys/select.h" 3 4
#define _TIMESPEC 
struct timespec {
 time_t tv_sec;
 long tv_nsec;
};
# 146 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/signal.h" 1 3 4
# 59 "/usr/include/signal.h" 3 4
#define _USER_SIGNAL_H 
# 71 "/usr/include/signal.h" 3 4
extern const char *const sys_signame[32];
extern const char *const sys_siglist[32];



int raise(int);




void (*bsd_signal(int, void (*)(int)))(int);
int kill(pid_t, int);
int killpg(pid_t, int);
int pthread_kill(pthread_t, int);
int pthread_sigmask(int, const sigset_t *, sigset_t *);
int sigaction(int, const struct sigaction * ,
     struct sigaction * );
int sigaddset(sigset_t *, int);
int sigaltstack(const stack_t * , stack_t * );
int sigdelset(sigset_t *, int);
int sigemptyset(sigset_t *);
int sigfillset(sigset_t *);
int sighold(int);
int sigignore(int);
int siginterrupt(int, int);
int sigismember(const sigset_t *, int);
int sigpause(int);
int sigpending(sigset_t *);
int sigprocmask(int, const sigset_t * , sigset_t * );
int sigrelse(int);
void (*sigset(int, void (*)(int)))(int);
int sigsuspend(const sigset_t *);
int sigwait(const sigset_t * , int * );

void psignal(unsigned int, const char *);
int sigblock(int);
int sigreturn(struct sigcontext *);
int sigsetmask(int);
int sigvec(int, struct sigvec *, struct sigvec *);




#define sigaddset(set,signo) (*(set) |= 1 << ((signo) - 1), 0)
#define sigdelset(set,signo) (*(set) &= ~(1 << ((signo) - 1)), 0)
#define sigemptyset(set) (*(set) = 0, 0)
#define sigfillset(set) (*(set) = ~(sigset_t)0, 0)
#define sigismember(set,signo) ((*(set) & (1 << ((signo) - 1))) != 0)
# 147 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/sys/time.h" 1 3 4
# 59 "/usr/include/sys/time.h" 3 4
#define _SYS_TIME_H_ 
# 91 "/usr/include/sys/time.h" 3 4
struct itimerval {
 struct timeval it_interval;
 struct timeval it_value;
};





#define ITIMER_REAL 0
#define ITIMER_VIRTUAL 1
#define ITIMER_PROF 2
# 169 "/usr/include/sys/time.h" 3 4
#define TIMEVAL_TO_TIMESPEC(tv,ts) { (ts)->tv_sec = (tv)->tv_sec; (ts)->tv_nsec = (tv)->tv_usec * 1000; }



#define TIMESPEC_TO_TIMEVAL(tv,ts) { (tv)->tv_sec = (ts)->tv_sec; (tv)->tv_usec = (ts)->tv_nsec / 1000; }




struct timezone {
 int tz_minuteswest;
 int tz_dsttime;
};
#define DST_NONE 0
#define DST_USA 1
#define DST_AUST 2
#define DST_WET 3
#define DST_MET 4
#define DST_EET 5
#define DST_CAN 6


#define timerclear(tvp) (tvp)->tv_sec = (tvp)->tv_usec = 0
#define timerisset(tvp) ((tvp)->tv_sec || (tvp)->tv_usec)
#define timercmp(tvp,uvp,cmp) (((tvp)->tv_sec == (uvp)->tv_sec) ? ((tvp)->tv_usec cmp (uvp)->tv_usec) : ((tvp)->tv_sec cmp (uvp)->tv_sec))



#define timeradd(tvp,uvp,vvp) do { (vvp)->tv_sec = (tvp)->tv_sec + (uvp)->tv_sec; (vvp)->tv_usec = (tvp)->tv_usec + (uvp)->tv_usec; if ((vvp)->tv_usec >= 1000000) { (vvp)->tv_sec++; (vvp)->tv_usec -= 1000000; } } while (0)
# 206 "/usr/include/sys/time.h" 3 4
#define timersub(tvp,uvp,vvp) do { (vvp)->tv_sec = (tvp)->tv_sec - (uvp)->tv_sec; (vvp)->tv_usec = (tvp)->tv_usec - (uvp)->tv_usec; if ((vvp)->tv_usec < 0) { (vvp)->tv_sec--; (vvp)->tv_usec += 1000000; } } while (0)
# 216 "/usr/include/sys/time.h" 3 4
#define timevalcmp(l,r,cmp) timercmp(l, r, cmp)




struct clockinfo {
 int hz;
 int tick;
 int tickadj;
 int stathz;
 int profhz;
};







# 1 "/usr/include/time.h" 1 3 4
# 64 "/usr/include/time.h" 3 4
#define _TIME_H_ 
# 95 "/usr/include/time.h" 3 4
struct tm {
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;
 long tm_gmtoff;
 char *tm_zone;
};

# 1 "/usr/include/machine/_limits.h" 1 3 4
# 23 "/usr/include/machine/_limits.h" 3 4
#define _BSD_MACHINE__LIMITS_H_ 
# 110 "/usr/include/time.h" 2 3 4

#define CLOCKS_PER_SEC (__DARWIN_CLK_TCK)




extern char *tzname[];


extern int getdate_err;



extern int daylight;


char *asctime(const struct tm *);
clock_t clock(void);
char *ctime(const time_t *);
double difftime(time_t, time_t);
struct tm *getdate(const char *);
struct tm *gmtime(const time_t *);
struct tm *localtime(const time_t *);
time_t mktime(struct tm *);
size_t strftime(char * , size_t, const char * , const struct tm * ) ;
char *strptime(const char * , const char * , struct tm * );
time_t time(time_t *);


void tzset(void);



char *asctime_r(const struct tm *, char *);
char *ctime_r(const time_t *, char *);
struct tm *gmtime_r(const time_t *, struct tm *);
struct tm *localtime_r(const time_t *, struct tm *);
time_t posix2time(time_t);

char *timezone(int, int);

void tzsetwall(void);
time_t time2posix(time_t);
time_t timelocal(struct tm * const);
time_t timegm(struct tm * const);



int nanosleep(const struct timespec *, struct timespec *) ;


# 236 "/usr/include/sys/time.h" 2 3 4

int adjtime(const struct timeval *, struct timeval *);
int futimes(int, const struct timeval *);
int settimeofday(const struct timeval *, const struct timezone *);


int getitimer(int, struct itimerval *);
int gettimeofday(struct timeval * , struct timezone * );
int select(int, fd_set * , fd_set * ,
  fd_set * , struct timeval * );
int setitimer(int, const struct itimerval * ,
  struct itimerval * );
int utimes(const char *, const struct timeval *);


# 149 "/usr/include/sys/select.h" 2 3 4




int pselect(int, fd_set * , fd_set * ,
  fd_set * , const struct timespec * ,
  const sigset_t * );

int select(int, fd_set * , fd_set * ,
  fd_set * , struct timeval * );

# 484 "/usr/include/unistd.h" 2 3 4

void _Exit(int) __attribute__((__noreturn__));
int accessx_np(const struct accessx_descriptor *, size_t, int *, uid_t);
int acct(const char *);
int add_profil(char *, size_t, unsigned long, unsigned int);
int async_daemon(void);
void *brk(const void *);
int chroot(const char *);



int encrypt(char *, int);

void endusershell(void);
int execvP(const char *, const char *, char * const *);
char *fflagstostr(unsigned long);
int fsync(int);
int getdtablesize(void);
int getdomainname(char *, int);
int getgrouplist(const char *, int, int *, int *);
mode_t getmode(const void *, mode_t);
int getpagesize(void) __attribute__((__const__));
char *getpass(const char *);
int getpeereid(int, uid_t *, gid_t *);
int getpgid(pid_t _pid);
int getsgroups_np(int *, uuid_t);
int getsid(pid_t _pid);
char *getusershell(void);
int getwgroups_np(int *, uuid_t);
int initgroups(const char *, int);
int iruserok(unsigned long, int, const char *, const char *);
int issetugid(void);
char *mkdtemp(char *);
int mknod(const char *, mode_t, dev_t);
int mkstemp(char *);
int mkstemps(char *, int);
char *mktemp(char *);
int nfssvc(int, void *);
int profil(char *, size_t, unsigned long, unsigned int);
int pthread_setugid_np(uid_t, gid_t);
int pthread_getugid_np( uid_t *, gid_t *);
int rcmd(char **, int, const char *, const char *, const char *, int *);
int reboot(int);
int revoke(const char *);
int rresvport(int *);
int rresvport_af(int *, int);
int ruserok(const char *, int, const char *, const char *);
void *sbrk(int);
int setdomainname(const char *, int);
int setgroups(int, const gid_t *);
void sethostid(long);
int sethostname(const char *, int);



int setkey(const char *);

int setlogin(const char *);
void *setmode(const char *);
int setrgid(gid_t);
int setruid(uid_t);
int setsgroups_np(int, const uuid_t);
void setusershell(void);
int setwgroups_np(int, const uuid_t);
int strtofflags(char **, unsigned long *, unsigned long *);
int swapon(const char *);
int syscall(int, ...);
int ttyslot(void);
int undelete(const char *);
int unwhiteout(const char *);
void *valloc(size_t);

extern char *suboptarg;
int getsubopt(char **, char * const *, char **);
# 570 "/usr/include/unistd.h" 3 4
int getattrlist(const char*,void*,void*,size_t,unsigned long) ;
int setattrlist(const char*,void*,void*,size_t,unsigned long) ;
int exchangedata(const char*,const char*,unsigned long);
int checkuseraccess(const char*,uid_t,gid_t*,int,int,unsigned long);
int getdirentriesattr(int,void*,void*,size_t,unsigned long*,unsigned long*,unsigned long*,unsigned long);
int searchfs(const char*,void*,void*,unsigned long,unsigned long,void*);

int fsctl(const char *,unsigned long,void*,unsigned long);


extern int optreset;



# 801 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 889 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_DONT_CREATE_GVSV 
# 898 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_DEFAULT_DO_EXEC3_IMPLEMENTATION 


#define MEM_SIZE Size_t





#define PERL_STRLEN_ROUNDUP_QUANTUM Size_t_size







#define PERL_STRLEN_EXPAND_SHIFT 2



# 1 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stddef.h" 1 3 4
# 43 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stddef.h" 3 4
#define _STDDEF_H 
#define _STDDEF_H_ 

#define _ANSI_STDDEF_H 

#define __STDDEF_H__ 
# 141 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stddef.h" 3 4
#define _PTRDIFF_T 
#define _T_PTRDIFF_ 
#define _T_PTRDIFF 
#define __PTRDIFF_T 
#define _PTRDIFF_T_ 
#define _BSD_PTRDIFF_T_ 
#define ___int_ptrdiff_t_h 
#define _GCC_PTRDIFF_T 



typedef int ptrdiff_t;
# 163 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 236 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stddef.h" 3 4
#undef __need_size_t
# 345 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stddef.h" 3 4
#undef __need_wchar_t
# 398 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 920 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
#define STRUCT_OFFSET(s,m) offsetof(s,m)
# 932 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/usr/include/string.h" 1 3 4
# 59 "/usr/include/string.h" 3 4
#define _STRING_H_ 
# 80 "/usr/include/string.h" 3 4

void *memchr(const void *, int, size_t);
int memcmp(const void *, const void *, size_t);
void *memcpy(void *, const void *, size_t);
void *memmove(void *, const void *, size_t);
void *memset(void *, int, size_t);

char *stpcpy(char *, const char *);
char *strcasestr(const char *, const char *);

char *strcat(char *, const char *);
char *strchr(const char *, int);
int strcmp(const char *, const char *);
int strcoll(const char *, const char *);
char *strcpy(char *, const char *);
size_t strcspn(const char *, const char *);
char *strerror(int);
int strerror_r(int, char *, size_t);
size_t strlen(const char *);
char *strncat(char *, const char *, size_t);
int strncmp(const char *, const char *, size_t);
char *strncpy(char *, const char *, size_t);

char *strnstr(const char *, const char *, size_t);

char *strpbrk(const char *, const char *);
char *strrchr(const char *, int);
size_t strspn(const char *, const char *);
char *strstr(const char *, const char *);
char *strtok(char *, const char *);
size_t strxfrm(char *, const char *, size_t);



void *memccpy(void *, const void *, int, size_t);
char *strtok_r(char *, const char *, char **);
char *strdup(const char *);

int bcmp(const void *, const void *, size_t);
void bcopy(const void *, void *, size_t);
void bzero(void *, size_t);
int ffs(int);
char *index(const char *, int);
char *rindex(const char *, int);
int strcasecmp(const char *, const char *);
size_t strlcat(char *, const char *, size_t);
size_t strlcpy(char *, const char *, size_t);
void strmode(int, char *);
int strncasecmp(const char *, const char *, size_t);
char *strsep(char **, const char *);
char *strsignal(int sig);
void swab(const void * , void * , ssize_t);



# 933 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 974 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define safemalloc safesysmalloc
#define safecalloc safesyscalloc
#define saferealloc safesysrealloc
#define safefree safesysfree
#define CHECK_MALLOC_TOO_LATE_FOR(ch) ((void)0)
#define CHECK_MALLOC_TAINT(newval) ((void)0)
#define MALLOC_CHECK_TAINT(argc,argv,env) 



#define TOO_LATE_FOR_(ch,what) Perl_croak(aTHX_ "\"-%c\" is on the #! line, it must also be used on the command line%s", (char)(ch), what)
#define TOO_LATE_FOR(ch) TOO_LATE_FOR_(ch, "")
#define MALLOC_TOO_LATE_FOR(ch) TOO_LATE_FOR_(ch, " with $ENV{PERL_MALLOC_OPT}")
#define MALLOC_CHECK_TAINT2(argc,argv) MALLOC_CHECK_TAINT(argc,argv,NULL)
# 1055 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define memzero(d,l) memset(d,0,l)
# 1084 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/usr/include/arpa/inet.h" 1 3 4
# 85 "/usr/include/arpa/inet.h" 3 4
#define _INET_H_ 
# 101 "/usr/include/arpa/inet.h" 3 4


in_addr_t inet_addr(const char *);
char *inet_ntoa(struct in_addr);
const char *inet_ntop(int, const void *, char *, size_t);
int inet_pton(int, const char *, void *);

int ascii2addr(int, const char *, void *);
char *addr2ascii(int, const void *, int, char *);
int inet_aton(const char *, struct in_addr *);
in_addr_t inet_lnaof(struct in_addr);
struct in_addr inet_makeaddr(in_addr_t, in_addr_t);
in_addr_t inet_netof(struct in_addr);
in_addr_t inet_network(const char *);
char *inet_net_ntop(int, const void *, int, char *, size_t);
int inet_net_pton(int, const char *, void *, size_t);
char *inet_neta(in_addr_t, char *, size_t);
unsigned int inet_nsap_addr(const char *, unsigned char *, int maxlen);
char *inet_nsap_ntoa(int, const unsigned char *, char *ascii);



# 1085 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2



# 1 "/usr/include/sys/stat.h" 1 3 4
# 65 "/usr/include/sys/stat.h" 3 4
#define _SYS_STAT_H_ 
# 147 "/usr/include/sys/stat.h" 3 4
struct ostat {
 __uint16_t st_dev;
 ino_t st_ino;
 mode_t st_mode;
 nlink_t st_nlink;
 __uint16_t st_uid;
 __uint16_t st_gid;
 __uint16_t st_rdev;
 __int32_t st_size;
 struct timespec st_atimespec;
 struct timespec st_mtimespec;
 struct timespec st_ctimespec;
 __int32_t st_blksize;
 __int32_t st_blocks;
 __uint32_t st_flags;
 __uint32_t st_gen;
};






struct stat {
 dev_t st_dev;
 ino_t st_ino;
 mode_t st_mode;
 nlink_t st_nlink;
 uid_t st_uid;
 gid_t st_gid;
 dev_t st_rdev;

 struct timespec st_atimespec;
 struct timespec st_mtimespec;
 struct timespec st_ctimespec;
# 190 "/usr/include/sys/stat.h" 3 4
 off_t st_size;
 blkcnt_t st_blocks;
 blksize_t st_blksize;
 __uint32_t st_flags;
 __uint32_t st_gen;
 __int32_t st_lspare;
 __int64_t st_qspare[2];
};





#define st_atime st_atimespec.tv_sec
#define st_mtime st_mtimespec.tv_sec
#define st_ctime st_ctimespec.tv_sec
# 214 "/usr/include/sys/stat.h" 3 4
#define S_IFMT 0170000
#define S_IFIFO 0010000
#define S_IFCHR 0020000
#define S_IFDIR 0040000
#define S_IFBLK 0060000
#define S_IFREG 0100000
#define S_IFLNK 0120000
#define S_IFSOCK 0140000

#define S_IFWHT 0160000
#define S_IFXATTR 0200000




#define S_IRWXU 0000700
#define S_IRUSR 0000400
#define S_IWUSR 0000200
#define S_IXUSR 0000100

#define S_IRWXG 0000070
#define S_IRGRP 0000040
#define S_IWGRP 0000020
#define S_IXGRP 0000010

#define S_IRWXO 0000007
#define S_IROTH 0000004
#define S_IWOTH 0000002
#define S_IXOTH 0000001

#define S_ISUID 0004000
#define S_ISGID 0002000
#define S_ISVTX 0001000


#define S_ISTXT S_ISVTX
#define S_IREAD S_IRUSR
#define S_IWRITE S_IWUSR
#define S_IEXEC S_IXUSR
# 262 "/usr/include/sys/stat.h" 3 4
#define S_ISBLK(m) (((m) & 0170000) == 0060000)
#define S_ISCHR(m) (((m) & 0170000) == 0020000)
#define S_ISDIR(m) (((m) & 0170000) == 0040000)
#define S_ISFIFO(m) (((m) & 0170000) == 0010000)
#define S_ISREG(m) (((m) & 0170000) == 0100000)
#define S_ISLNK(m) (((m) & 0170000) == 0120000)
#define S_ISSOCK(m) (((m) & 0170000) == 0140000)

#define S_ISWHT(m) (((m) & 0170000) == 0160000)
#define S_ISXATTR(m) (((m) & 0200000) == 0200000)
# 289 "/usr/include/sys/stat.h" 3 4
#define S_TYPEISMQ(buf) (0)
#define S_TYPEISSEM(buf) (0)
#define S_TYPEISSHM(buf) (0)
# 307 "/usr/include/sys/stat.h" 3 4
#define S_TYPEISTMO(buf) (0)



#define ACCESSPERMS (S_IRWXU|S_IRWXG|S_IRWXO)

#define ALLPERMS (S_ISUID|S_ISGID|S_ISTXT|S_IRWXU|S_IRWXG|S_IRWXO)

#define DEFFILEMODE (S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)

#define S_BLKSIZE 512






#define UF_SETTABLE 0x0000ffff
#define UF_NODUMP 0x00000001
#define UF_IMMUTABLE 0x00000002
#define UF_APPEND 0x00000004
#define UF_OPAQUE 0x00000008



#define SF_SETTABLE 0xffff0000
#define SF_ARCHIVED 0x00010000
#define SF_IMMUTABLE 0x00020000
#define SF_APPEND 0x00040000






int chmod(const char *, mode_t);
int fchmod(int, mode_t);
int fstat(int, struct stat *);
int lstat(const char *, struct stat *);
int mkdir(const char *, mode_t);
int mkfifo(const char *, mode_t);
int stat(const char *, struct stat *);
int mknod(const char *, mode_t, dev_t);
mode_t umask(mode_t);



struct _filesec;
typedef struct _filesec *filesec_t;
#define _FILESEC_T 

int chflags(const char *, __uint32_t);
int chmodx_np(const char *, filesec_t);
int fchflags(int, __uint32_t);
int fchmodx_np(int, filesec_t);
int fstatx_np(int, struct stat *, filesec_t);
int lstatx_np(const char *, struct stat *, filesec_t);
int mkdirx_np(const char *, filesec_t);
int mkfifox_np(const char *, filesec_t);
int statx_np(const char *, struct stat *, filesec_t);
int umaskx_np(filesec_t);


# 1089 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1131 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/usr/include/sys/times.h" 1 3 4
# 64 "/usr/include/sys/times.h" 3 4
#define _SYS_TIMES_H_ 
# 79 "/usr/include/sys/times.h" 3 4
struct tms {
 clock_t tms_utime;
 clock_t tms_stime;
 clock_t tms_cutime;
 clock_t tms_cstime;
};


clock_t times(struct tms *);

# 1132 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2






# 1 "/usr/include/errno.h" 1 3 4
# 23 "/usr/include/errno.h" 3 4
# 1 "/usr/include/sys/errno.h" 1 3 4
# 64 "/usr/include/sys/errno.h" 3 4
#define _SYS_ERRNO_H_ 




extern int * __error(void);
#define errno (*__error())







#define EPERM 1
#define ENOENT 2
#define ESRCH 3
#define EINTR 4
#define EIO 5
#define ENXIO 6
#define E2BIG 7
#define ENOEXEC 8
#define EBADF 9
#define ECHILD 10
#define EDEADLK 11

#define ENOMEM 12
#define EACCES 13
#define EFAULT 14

#define ENOTBLK 15

#define EBUSY 16
#define EEXIST 17
#define EXDEV 18
#define ENODEV 19
#define ENOTDIR 20
#define EISDIR 21
#define EINVAL 22
#define ENFILE 23
#define EMFILE 24
#define ENOTTY 25
#define ETXTBSY 26
#define EFBIG 27
#define ENOSPC 28
#define ESPIPE 29
#define EROFS 30
#define EMLINK 31
#define EPIPE 32


#define EDOM 33
#define ERANGE 34


#define EAGAIN 35
#define EWOULDBLOCK EAGAIN
#define EINPROGRESS 36
#define EALREADY 37


#define ENOTSOCK 38
#define EDESTADDRREQ 39
#define EMSGSIZE 40
#define EPROTOTYPE 41
#define ENOPROTOOPT 42
#define EPROTONOSUPPORT 43

#define ESOCKTNOSUPPORT 44

#define ENOTSUP 45
# 144 "/usr/include/sys/errno.h" 3 4
#define EOPNOTSUPP ENOTSUP



#define EPFNOSUPPORT 46

#define EAFNOSUPPORT 47
#define EADDRINUSE 48
#define EADDRNOTAVAIL 49


#define ENETDOWN 50
#define ENETUNREACH 51
#define ENETRESET 52
#define ECONNABORTED 53
#define ECONNRESET 54
#define ENOBUFS 55
#define EISCONN 56
#define ENOTCONN 57

#define ESHUTDOWN 58
#define ETOOMANYREFS 59

#define ETIMEDOUT 60
#define ECONNREFUSED 61

#define ELOOP 62
#define ENAMETOOLONG 63



#define EHOSTDOWN 64

#define EHOSTUNREACH 65
#define ENOTEMPTY 66



#define EPROCLIM 67
#define EUSERS 68

#define EDQUOT 69


#define ESTALE 70

#define EREMOTE 71
#define EBADRPC 72
#define ERPCMISMATCH 73
#define EPROGUNAVAIL 74
#define EPROGMISMATCH 75
#define EPROCUNAVAIL 76


#define ENOLCK 77
#define ENOSYS 78


#define EFTYPE 79
#define EAUTH 80
#define ENEEDAUTH 81


#define EPWROFF 82
#define EDEVERR 83


#define EOVERFLOW 84



#define EBADEXEC 85
#define EBADARCH 86
#define ESHLIBVERS 87
#define EBADMACHO 88


#define ECANCELED 89

#define EIDRM 90
#define ENOMSG 91
#define EILSEQ 92

#define ENOATTR 93


#define EBADMSG 94
#define EMULTIHOP 95
#define ENODATA 96
#define ENOLINK 97
#define ENOSR 98
#define ENOSTR 99
#define EPROTO 100
#define ETIME 101







#define ELAST 102
# 24 "/usr/include/errno.h" 2 3 4
# 1139 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1231 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define LIB_INVARG 0
#define RMS_DIR 0
#define RMS_FAC 0
#define RMS_FEX 0
#define RMS_FNF 0
#define RMS_IFI 0
#define RMS_ISI 0
#define RMS_PRV 0
#define SS_ACCVIO 0
#define SS_DEVOFFLINE 0
#define SS_IVCHAN 0
#define SS_NORMAL 0
#define SS_NOPRIV 0
#define SS_BUFFEROVF 0
# 1262 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define SETERRNO(errcode,vmserrcode) (errno = (errcode))



#define dSAVEDERRNO int saved_errno
#define dSAVE_ERRNO int saved_errno = errno
#define SAVE_ERRNO (saved_errno = errno)
#define RESTORE_ERRNO (errno = saved_errno)


#define ERRSV GvSVn(PL_errgv)


#define CLEAR_ERRSV() STMT_START { SV ** const svp = &GvSV(PL_errgv); if (!*svp) { goto clresv_newemptypv; } else if (SvREADONLY(*svp)) { SvREFCNT_dec_NN(*svp); clresv_newemptypv: *svp = newSVpvs(""); } else { SV *const errsv = *svp; sv_setpvs(errsv, ""); SvPOK_only(errsv); if (SvMAGICAL(errsv)) { mg_free(errsv); } } } STMT_END
# 1306 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define DEFSV GvSVn(PL_defgv)
#define DEFSV_set(sv) (GvSV(PL_defgv) = (sv))
#define SAVE_DEFSV SAVESPTR(GvSV(PL_defgv))
# 1319 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define UNKNOWN_ERRNO_MSG "(unknown)"






 char *strerror (int);
# 1345 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/usr/include/sys/ioctl.h" 1 3 4
# 64 "/usr/include/sys/ioctl.h" 3 4
#define _SYS_IOCTL_H_ 

# 1 "/usr/include/sys/ttycom.h" 1 3 4
# 64 "/usr/include/sys/ttycom.h" 3 4
#define _SYS_TTYCOM_H_ 

# 1 "/usr/include/sys/ioccom.h" 1 3 4
# 59 "/usr/include/sys/ioccom.h" 3 4
#define _SYS_IOCCOM_H_ 






#define IOCPARM_MASK 0x1fff
#define IOCPARM_LEN(x) (((x) >> 16) & IOCPARM_MASK)
#define IOCBASECMD(x) ((x) & ~(IOCPARM_MASK << 16))
#define IOCGROUP(x) (((x) >> 8) & 0xff)

#define IOCPARM_MAX (IOCPARM_MASK + 1)

#define IOC_VOID (unsigned long)0x20000000

#define IOC_OUT (unsigned long)0x40000000

#define IOC_IN (unsigned long)0x80000000

#define IOC_INOUT (IOC_IN|IOC_OUT)

#define IOC_DIRMASK (unsigned long)0xe0000000

#define _IOC(inout,group,num,len) (inout | ((len & IOCPARM_MASK) << 16) | ((group) << 8) | (num))

#define _IO(g,n) _IOC(IOC_VOID, (g), (n), 0)
#define _IOR(g,n,t) _IOC(IOC_OUT, (g), (n), sizeof(t))
#define _IOW(g,n,t) _IOC(IOC_IN, (g), (n), sizeof(t))

#define _IOWR(g,n,t) _IOC(IOC_INOUT, (g), (n), sizeof(t))
# 67 "/usr/include/sys/ttycom.h" 2 3 4
# 77 "/usr/include/sys/ttycom.h" 3 4
struct winsize {
 unsigned short ws_row;
 unsigned short ws_col;
 unsigned short ws_xpixel;
 unsigned short ws_ypixel;
};

#define TIOCMODG _IOR('t', 3, int)
#define TIOCMODS _IOW('t', 4, int)
#define TIOCM_LE 0001
#define TIOCM_DTR 0002
#define TIOCM_RTS 0004
#define TIOCM_ST 0010
#define TIOCM_SR 0020
#define TIOCM_CTS 0040
#define TIOCM_CAR 0100
#define TIOCM_CD TIOCM_CAR
#define TIOCM_RNG 0200
#define TIOCM_RI TIOCM_RNG
#define TIOCM_DSR 0400

#define TIOCEXCL _IO('t', 13)
#define TIOCNXCL _IO('t', 14)

#define TIOCFLUSH _IOW('t', 16, int)

#define TIOCGETA _IOR('t', 19, struct termios)
#define TIOCSETA _IOW('t', 20, struct termios)
#define TIOCSETAW _IOW('t', 21, struct termios)
#define TIOCSETAF _IOW('t', 22, struct termios)
#define TIOCGETD _IOR('t', 26, int)
#define TIOCSETD _IOW('t', 27, int)

#define TIOCSBRK _IO('t', 123)
#define TIOCCBRK _IO('t', 122)
#define TIOCSDTR _IO('t', 121)
#define TIOCCDTR _IO('t', 120)
#define TIOCGPGRP _IOR('t', 119, int)
#define TIOCSPGRP _IOW('t', 118, int)

#define TIOCOUTQ _IOR('t', 115, int)
#define TIOCSTI _IOW('t', 114, char)
#define TIOCNOTTY _IO('t', 113)
#define TIOCPKT _IOW('t', 112, int)
#define TIOCPKT_DATA 0x00
#define TIOCPKT_FLUSHREAD 0x01
#define TIOCPKT_FLUSHWRITE 0x02
#define TIOCPKT_STOP 0x04
#define TIOCPKT_START 0x08
#define TIOCPKT_NOSTOP 0x10
#define TIOCPKT_DOSTOP 0x20
#define TIOCPKT_IOCTL 0x40
#define TIOCSTOP _IO('t', 111)
#define TIOCSTART _IO('t', 110)
#define TIOCMSET _IOW('t', 109, int)
#define TIOCMBIS _IOW('t', 108, int)
#define TIOCMBIC _IOW('t', 107, int)
#define TIOCMGET _IOR('t', 106, int)
#define TIOCREMOTE _IOW('t', 105, int)
#define TIOCGWINSZ _IOR('t', 104, struct winsize)
#define TIOCSWINSZ _IOW('t', 103, struct winsize)
#define TIOCUCNTL _IOW('t', 102, int)
#define TIOCSTAT _IO('t', 101)
#define UIOCCMD(n) _IO('u', n)
#define TIOCSCONS _IO('t', 99)
#define TIOCCONS _IOW('t', 98, int)
#define TIOCSCTTY _IO('t', 97)
#define TIOCEXT _IOW('t', 96, int)
#define TIOCSIG _IO('t', 95)
#define TIOCDRAIN _IO('t', 94)
#define TIOCMSDTRWAIT _IOW('t', 91, int)
#define TIOCMGDTRWAIT _IOR('t', 90, int)
#define TIOCTIMESTAMP _IOR('t', 89, struct timeval)

#define TIOCDCDTIMESTAMP _IOR('t', 88, struct timeval)

#define TIOCSDRAINWAIT _IOW('t', 87, int)
#define TIOCGDRAINWAIT _IOR('t', 86, int)
#define TIOCDSIMICROCODE _IO('t', 85)


#define TTYDISC 0
#define TABLDISC 3
#define SLIPDISC 4
#define PPPDISC 5
# 67 "/usr/include/sys/ioctl.h" 2 3 4






struct ttysize {
 unsigned short ts_lines;
 unsigned short ts_cols;
 unsigned short ts_xxx;
 unsigned short ts_yyy;
};
#define TIOCGSIZE TIOCGWINSZ
#define TIOCSSIZE TIOCSWINSZ



# 1 "/usr/include/sys/filio.h" 1 3 4
# 64 "/usr/include/sys/filio.h" 3 4
#define _SYS_FILIO_H_ 




#define FIOCLEX _IO('f', 1)
#define FIONCLEX _IO('f', 2)
#define FIONREAD _IOR('f', 127, int)
#define FIONBIO _IOW('f', 126, int)
#define FIOASYNC _IOW('f', 125, int)
#define FIOSETOWN _IOW('f', 124, int)
#define FIOGETOWN _IOR('f', 123, int)
#define FIODTYPE _IOR('f', 122, int)
# 85 "/usr/include/sys/ioctl.h" 2 3 4
# 1 "/usr/include/sys/sockio.h" 1 3 4
# 59 "/usr/include/sys/sockio.h" 3 4
#define _SYS_SOCKIO_H_ 






#define SIOCSHIWAT _IOW('s', 0, int)
#define SIOCGHIWAT _IOR('s', 1, int)
#define SIOCSLOWAT _IOW('s', 2, int)
#define SIOCGLOWAT _IOR('s', 3, int)
#define SIOCATMARK _IOR('s', 7, int)
#define SIOCSPGRP _IOW('s', 8, int)
#define SIOCGPGRP _IOR('s', 9, int)






#define SIOCSIFADDR _IOW('i', 12, struct ifreq)
#define OSIOCGIFADDR _IOWR('i', 13, struct ifreq)
#define SIOCSIFDSTADDR _IOW('i', 14, struct ifreq)
#define OSIOCGIFDSTADDR _IOWR('i', 15, struct ifreq)
#define SIOCSIFFLAGS _IOW('i', 16, struct ifreq)
#define SIOCGIFFLAGS _IOWR('i', 17, struct ifreq)
#define OSIOCGIFBRDADDR _IOWR('i', 18, struct ifreq)
#define SIOCSIFBRDADDR _IOW('i', 19, struct ifreq)
#define OSIOCGIFCONF _IOWR('i', 20, struct ifconf)
#define OSIOCGIFNETMASK _IOWR('i', 21, struct ifreq)
#define SIOCSIFNETMASK _IOW('i', 22, struct ifreq)
#define SIOCGIFMETRIC _IOWR('i', 23, struct ifreq)
#define SIOCSIFMETRIC _IOW('i', 24, struct ifreq)
#define SIOCDIFADDR _IOW('i', 25, struct ifreq)
#define SIOCAIFADDR _IOW('i', 26, struct ifaliasreq)
#define SIOCGETVIFCNT _IOWR('r', 27, struct sioc_vif_req)
#define SIOCGETSGCNT _IOWR('r', 28, struct sioc_sg_req)
#define SIOCALIFADDR _IOW('i', 29, struct if_laddrreq)
#define SIOCGLIFADDR _IOWR('i', 30, struct if_laddrreq)
#define SIOCDLIFADDR _IOW('i', 31, struct if_laddrreq)


#define SIOCGIFADDR _IOWR('i', 33, struct ifreq)
#define SIOCGIFDSTADDR _IOWR('i', 34, struct ifreq)
#define SIOCGIFBRDADDR _IOWR('i', 35, struct ifreq)
#define SIOCGIFCONF _IOWR('i', 36, struct ifconf)
#define SIOCGIFNETMASK _IOWR('i', 37, struct ifreq)
#define SIOCAUTOADDR _IOWR('i', 38, struct ifreq)
#define SIOCAUTONETMASK _IOW('i', 39, struct ifreq)
#define SIOCARPIPLL _IOWR('i', 40, struct ifreq)


#define SIOCADDMULTI _IOW('i', 49, struct ifreq)
#define SIOCDELMULTI _IOW('i', 50, struct ifreq)
#define SIOCGIFMTU _IOWR('i', 51, struct ifreq)
#define SIOCSIFMTU _IOW('i', 52, struct ifreq)
#define SIOCGIFPHYS _IOWR('i', 53, struct ifreq)
#define SIOCSIFPHYS _IOW('i', 54, struct ifreq)
#define SIOCSIFMEDIA _IOWR('i', 55, struct ifreq)
#define SIOCGIFMEDIA _IOWR('i', 56, struct ifmediareq)
#define SIOCSIFGENERIC _IOW('i', 57, struct ifreq)
#define SIOCGIFGENERIC _IOWR('i', 58, struct ifreq)
#define SIOCRSLVMULTI _IOWR('i', 59, struct rslvmulti_req)

#define SIOCSIFLLADDR _IOW('i', 60, struct ifreq)
#define SIOCGIFSTATUS _IOWR('i', 61, struct ifstat)
#define SIOCSIFPHYADDR _IOW('i', 62, struct ifaliasreq)
#define SIOCGIFPSRCADDR _IOWR('i', 63, struct ifreq)
#define SIOCGIFPDSTADDR _IOWR('i', 64, struct ifreq)
#define SIOCDIFPHYADDR _IOW('i', 65, struct ifreq)
#define SIOCSLIFPHYADDR _IOW('i', 66, struct if_laddrreq)
#define SIOCGLIFPHYADDR _IOWR('i', 67, struct if_laddrreq)

#define SIOCGIFDEVMTU _IOWR('i', 68, struct ifreq)
#define SIOCSIFALTMTU _IOW('i', 69, struct ifreq)
#define SIOCGIFALTMTU _IOWR('i', 72, struct ifreq)
#define SIOCSIFBOND _IOW('i', 70, struct ifreq)
#define SIOCGIFBOND _IOWR('i', 71, struct ifreq)
#define SIOCIFCREATE _IOWR('i', 120, struct ifreq)
#define SIOCIFDESTROY _IOW('i', 121, struct ifreq)
#define SIOCSIFVLAN _IOW('i', 126, struct ifreq)
#define SIOCGIFVLAN _IOWR('i', 127, struct ifreq)
#define SIOCSETVLAN SIOCSIFVLAN
#define SIOCGETVLAN SIOCGIFVLAN


#define SIOCGIFASYNCMAP _IOWR('i', 124, struct ifreq)
#define SIOCSIFASYNCMAP _IOW('i', 125, struct ifreq)
# 86 "/usr/include/sys/ioctl.h" 2 3 4





int ioctl(int, unsigned long, ...);

# 1346 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1368 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define htoni htonl
#define ntohi ntohl




# 1 "/usr/include/dirent.h" 1 3 4
# 59 "/usr/include/dirent.h" 3 4
#define _DIRENT_H_ 






# 1 "/usr/include/sys/dirent.h" 1 3 4
# 70 "/usr/include/sys/dirent.h" 3 4
#define _SYS_DIRENT_H 
# 80 "/usr/include/sys/dirent.h" 3 4
#define __DARWIN_MAXNAMLEN 255

#pragma pack(4)

struct dirent {
 ino_t d_ino;
 __uint16_t d_reclen;
 __uint8_t d_type;
 __uint8_t d_namlen;
 char d_name[255 + 1];
};

#pragma pack()




#define d_fileno d_ino
#define MAXNAMLEN __DARWIN_MAXNAMLEN



#define DT_UNKNOWN 0
#define DT_FIFO 1
#define DT_CHR 2
#define DT_DIR 4
#define DT_BLK 6
#define DT_REG 8
#define DT_LNK 10
#define DT_SOCK 12
#define DT_WHT 14




#define IFTODT(mode) (((mode) & 0170000) >> 12)
#define DTTOIF(dirtype) ((dirtype) << 12)
# 67 "/usr/include/dirent.h" 2 3 4

struct _telldir;


typedef struct {
 int dd_fd;
 long dd_loc;
 long dd_size;
 char *dd_buf;
 int dd_len;
 long dd_seek;
 long dd_rewind;
 int dd_flags;
 __darwin_pthread_mutex_t dd_lock;
 struct _telldir *dd_td;
} DIR;



#define DIRBLKSIZ 1024

#define dirfd(dirp) ((dirp)->dd_fd)


#define DTF_HIDEW 0x0001
#define DTF_NODUP 0x0002
#define DTF_REWIND 0x0004
#define __DTF_READALL 0x0008









int alphasort(const void *, const void *);

int closedir(DIR *) ;

int getdirentries(int, char *, int, long *);

DIR *opendir(const char *) ;

DIR *__opendir2(const char *, int) ;

struct dirent *readdir(DIR *);
int readdir_r(DIR *, struct dirent *, struct dirent **);
void rewinddir(DIR *) ;

int scandir(const char *, struct dirent ***,
    int (*)(struct dirent *), int (*)(const void *, const void *));

void seekdir(DIR *, long) ;
long telldir(DIR *) ;

# 1375 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1552 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define my_sprintf sprintf
# 1573 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_SNPRINTF_CHECK(len,max,api) STMT_START { if ((max) > 0 && (Size_t)len >= (max)) Perl_croak_nocontext("panic: %s buffer overflow", STRINGIFY(api)); } STMT_END







#define my_snprintf(buffer,max,...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
#define PERL_MY_SNPRINTF_GUARDED 
# 1596 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define my_vsnprintf(buffer,max,...) ({ int len = vsnprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, vsnprintf); len; })
#define PERL_MY_VSNPRINTF_GUARDED 
# 1628 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_MY_SNPRINTF_POST_GUARD(len,max) PERL_UNUSED_VAR(len)





#define PERL_MY_VSNPRINTF_POST_GUARD(len,max) PERL_UNUSED_VAR(len)



#define my_strlcat strlcat





#define my_strlcpy strlcpy
# 1655 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
typedef long IV;
typedef unsigned long UV;
# 1677 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define IV_MAX INT32_MAX
#define IV_MIN INT32_MIN

#define UV_MAX UINT32_MAX




#define UINT32_MIN 0

#define UV_MIN UINT32_MIN
# 1701 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#undef IV_IS_QUAD
#undef UV_IS_QUAD





#undef HAS_QUAD




#define Size_t_MAX (~(Size_t)0)
#define SSize_t_MAX (SSize_t)(~(Size_t)0 >> 1)

#define IV_DIG (BIT_DIGITS(IVSIZE * 8))
#define UV_DIG (BIT_DIGITS(UVSIZE * 8))


#define PERL_PRESERVE_IVUV 
# 1734 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PTRV UV
#define INT2PTR(any,d) (any)(d)
# 1750 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PTR2ul(p) INT2PTR(unsigned long,p)


#define NUM2PTR(any,d) (any)(PTRV)(d)
#define PTR2IV(p) INT2PTR(IV,p)
#define PTR2UV(p) INT2PTR(UV,p)
#define PTR2NV(p) NUM2PTR(NV,p)
#define PTR2nat(p) (PTRV)(p)
# 1769 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define DPTR2FPTR(t,p) ((t)PTR2nat(p))
#define FPTR2DPTR(t,p) ((t)PTR2nat(p))
# 1793 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/limits.h" 1 3 4






# 1 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/syslimits.h" 1 3 4





#define _GCC_NEXT_LIMITS_H 
# 8 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/limits.h" 2 3 4



#undef _GCC_NEXT_LIMITS_H
# 1794 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2


# 1 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/float.h" 1 3 4
# 32 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/float.h" 3 4
#define _FLOAT_H___ 


#undef FLT_RADIX
#define FLT_RADIX __FLT_RADIX__


#undef FLT_MANT_DIG
#undef DBL_MANT_DIG
#undef LDBL_MANT_DIG
#define FLT_MANT_DIG __FLT_MANT_DIG__
#define DBL_MANT_DIG __DBL_MANT_DIG__
#define LDBL_MANT_DIG __LDBL_MANT_DIG__
# 53 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/float.h" 3 4
#undef FLT_DIG
#undef DBL_DIG
#undef LDBL_DIG
#define FLT_DIG __FLT_DIG__
#define DBL_DIG __DBL_DIG__
#define LDBL_DIG __LDBL_DIG__


#undef FLT_MIN_EXP
#undef DBL_MIN_EXP
#undef LDBL_MIN_EXP
#define FLT_MIN_EXP __FLT_MIN_EXP__
#define DBL_MIN_EXP __DBL_MIN_EXP__
#define LDBL_MIN_EXP __LDBL_MIN_EXP__






#undef FLT_MIN_10_EXP
#undef DBL_MIN_10_EXP
#undef LDBL_MIN_10_EXP
#define FLT_MIN_10_EXP __FLT_MIN_10_EXP__
#define DBL_MIN_10_EXP __DBL_MIN_10_EXP__
#define LDBL_MIN_10_EXP __LDBL_MIN_10_EXP__


#undef FLT_MAX_EXP
#undef DBL_MAX_EXP
#undef LDBL_MAX_EXP
#define FLT_MAX_EXP __FLT_MAX_EXP__
#define DBL_MAX_EXP __DBL_MAX_EXP__
#define LDBL_MAX_EXP __LDBL_MAX_EXP__






#undef FLT_MAX_10_EXP
#undef DBL_MAX_10_EXP
#undef LDBL_MAX_10_EXP
#define FLT_MAX_10_EXP __FLT_MAX_10_EXP__
#define DBL_MAX_10_EXP __DBL_MAX_10_EXP__
#define LDBL_MAX_10_EXP __LDBL_MAX_10_EXP__





#undef FLT_MAX
#undef DBL_MAX
#undef LDBL_MAX
#define FLT_MAX __FLT_MAX__
#define DBL_MAX __DBL_MAX__
#define LDBL_MAX __LDBL_MAX__



#undef FLT_EPSILON
#undef DBL_EPSILON
#undef LDBL_EPSILON
#define FLT_EPSILON __FLT_EPSILON__
#define DBL_EPSILON __DBL_EPSILON__
#define LDBL_EPSILON __LDBL_EPSILON__


#undef FLT_MIN
#undef DBL_MIN
#undef LDBL_MIN
#define FLT_MIN __FLT_MIN__
#define DBL_MIN __DBL_MIN__
#define LDBL_MIN __LDBL_MIN__




#undef FLT_ROUNDS
#define FLT_ROUNDS (__builtin_flt_rounds ())
# 1797 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1815 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/limits.h" 1 3 4






# 1 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/syslimits.h" 1 3 4





#define _GCC_NEXT_LIMITS_H 
# 8 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/limits.h" 2 3 4



#undef _GCC_NEXT_LIMITS_H
# 1816 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1847 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/limits.h" 1 3 4






# 1 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/syslimits.h" 1 3 4





#define _GCC_NEXT_LIMITS_H 
# 8 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/limits.h" 2 3 4



#undef _GCC_NEXT_LIMITS_H
# 1848 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1862 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
typedef double NV;
# 2028 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define NV_DIG DBL_DIG

#define NV_MANT_DIG DBL_MANT_DIG


#define NV_MIN DBL_MIN


#define NV_MAX DBL_MAX


#define NV_MIN_EXP DBL_MIN_EXP


#define NV_MAX_EXP DBL_MAX_EXP


#define NV_MIN_10_EXP DBL_MIN_10_EXP


#define NV_MAX_10_EXP DBL_MAX_10_EXP


#define NV_EPSILON DBL_EPSILON


#define NV_MAX DBL_MAX
#define NV_MIN DBL_MIN







#define Perl_acos acos
#define Perl_asin asin
#define Perl_atan atan
#define Perl_atan2 atan2
#define Perl_ceil ceil
#define Perl_cos cos
#define Perl_cosh cosh
#define Perl_exp exp

#define Perl_floor floor
#define Perl_fmod fmod
#define Perl_log log
#define Perl_log10 log10
#define Perl_pow pow
#define Perl_sin sin
#define Perl_sinh sinh
#define Perl_sqrt sqrt
#define Perl_tan tan
#define Perl_tanh tanh

#define Perl_modf(x,y) modf(x,y)
#define Perl_frexp(x,y) frexp(x,y)
#define Perl_ldexp(x,y) ldexp(x,y)



#define Perl_isnan(x) isnan(x)




#define Perl_isinf(x) isinf(x)






#define Perl_isfinite(x) isfinite(x)
# 2111 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/usr/include/math.h" 1 3 4
# 23 "/usr/include/math.h" 3 4
#define __MATH_H__ 


# 1 "/usr/include/architecture/ppc/math.h" 1 3 4
# 31 "/usr/include/architecture/ppc/math.h" 3 4
#define __MATH__ 





#define __WANT_LONG_DOUBLE_FORMAT__ 128






#define __LIBMLDBL_COMPAT(sym) __asm("_" __STRING(sym) "$LDBL128")
# 65 "/usr/include/architecture/ppc/math.h" 3 4
 typedef float float_t;
 typedef double double_t;
# 79 "/usr/include/architecture/ppc/math.h" 3 4
#define HUGE_VAL __builtin_huge_val()
#define HUGE_VALF __builtin_huge_valf()
#define HUGE_VALL __builtin_huge_vall()
#define NAN __builtin_nanf("0x7fc00000")
#define __MATH_H_ALWAYS_INLINE__ __attribute__ ((always_inline))
# 92 "/usr/include/architecture/ppc/math.h" 3 4
#define INFINITY HUGE_VALF





enum {
 _FP_NAN = 1,
 _FP_INFINITE = 2,
 _FP_ZERO = 3,
 _FP_NORMAL = 4,
 _FP_SUBNORMAL = 5,
 _FP_SUPERNORMAL = 6
};

#define FP_NAN _FP_NAN
#define FP_INFINITE _FP_INFINITE
#define FP_ZERO _FP_ZERO
#define FP_NORMAL _FP_NORMAL
#define FP_SUBNORMAL _FP_SUBNORMAL
#define FP_SUPERNORMAL _FP_SUPERNORMAL


#undef FP_FAST_FMA
#undef FP_FAST_FMAF
#undef FP_FAST_FMAL


#define FP_ILOGB0 (-2147483647)
#define FP_ILOGBNAN (2147483647)


#define MATH_ERRNO 1
#define MATH_ERREXCEPT 2

#define math_errhandling (__math_errhandling())
extern unsigned int __math_errhandling ( void );
# 144 "/usr/include/architecture/ppc/math.h" 3 4
#define fpclassify(x) ( sizeof (x) == sizeof(float ) ? __fpclassifyf((float)x) : sizeof (x) == sizeof(double) ? __fpclassifyd((double)x) : __fpclassify ((long double)x))




 extern int __fpclassifyf(float );
 extern int __fpclassifyd(double );
 extern int __fpclassify (long double);


#define isnormal(x) ( sizeof (x) == sizeof(float ) ? __inline_isnormalf((float)(x)) : sizeof (x) == sizeof(double) ? __inline_isnormald((double)(x)) : __inline_isnormal ((long double)(x)))




#define isfinite(x) ( sizeof (x) == sizeof(float ) ? __inline_isfinitef((float)(x)) : sizeof (x) == sizeof(double) ? __inline_isfinited((double)(x)) : __inline_isfinite ((long double)(x)))




#define isinf(x) ( sizeof (x) == sizeof(float ) ? __inline_isinff((float)(x)) : sizeof (x) == sizeof(double) ? __inline_isinfd((double)(x)) : __inline_isinf ((long double)(x)))




#define isnan(x) ( sizeof (x) == sizeof(float ) ? __inline_isnanf((float)(x)) : sizeof (x) == sizeof(double) ? __inline_isnand((double)(x)) : __inline_isnan ((long double)(x)))




#define signbit(x) ( sizeof (x) == sizeof(float ) ? __inline_signbitf((float)(x)) : sizeof (x) == sizeof(double) ? __inline_signbitd((double)(x)) : __inline_signbit((long double)(x)))




  static __inline__ int __inline_isfinitef (float ) __attribute__ ((always_inline));
  static __inline__ int __inline_isfinited (double ) __attribute__ ((always_inline));
  static __inline__ int __inline_isfinite (long double) __attribute__ ((always_inline));
  static __inline__ int __inline_isinff (float ) __attribute__ ((always_inline));
  static __inline__ int __inline_isinfd (double ) __attribute__ ((always_inline));
  static __inline__ int __inline_isinf (long double) __attribute__ ((always_inline));
  static __inline__ int __inline_isnanf (float ) __attribute__ ((always_inline));
  static __inline__ int __inline_isnand (double ) __attribute__ ((always_inline));
  static __inline__ int __inline_isnan (long double) __attribute__ ((always_inline));
  static __inline__ int __inline_isnormalf (float ) __attribute__ ((always_inline));
  static __inline__ int __inline_isnormald (double ) __attribute__ ((always_inline));
  static __inline__ int __inline_isnormal (long double) __attribute__ ((always_inline));
  static __inline__ int __inline_signbitf (float ) __attribute__ ((always_inline));
  static __inline__ int __inline_signbitd (double ) __attribute__ ((always_inline));
  static __inline__ int __inline_signbit (long double) __attribute__ ((always_inline));

  static __inline__ int __inline_isinff( float __x ) { return __builtin_fabsf(__x) == __builtin_inff(); }
  static __inline__ int __inline_isinfd( double __x ) { return __builtin_fabs(__x) == __builtin_inf(); }
  static __inline__ int __inline_isinf( long double __x ) { return __builtin_fabsl(__x) == __builtin_infl(); }
  static __inline__ int __inline_isfinitef( float __x ) { return __x == __x && __builtin_fabsf(__x) != __builtin_inff(); }
  static __inline__ int __inline_isfinited( double __x ) { return __x == __x && __builtin_fabs(__x) != __builtin_inf(); }
  static __inline__ int __inline_isfinite( long double __x ) { return __x == __x && __builtin_fabsl(__x) != __builtin_infl(); }
  static __inline__ int __inline_isnanf( float __x ) { return __x != __x; }
  static __inline__ int __inline_isnand( double __x ) { return __x != __x; }
  static __inline__ int __inline_isnan( long double __x ) { return __x != __x; }
  static __inline__ int __inline_signbitf( float __x ) { union{ float __f; unsigned int __u; }__u = {__x}; return (int)(__u.__u >> 31); }
  static __inline__ int __inline_signbitd( double __x ) { union{ double __f; unsigned long long __u; }__u = {__x}; return (int)(__u.__u >> 63); }
  static __inline__ int __inline_signbit( long double __x ){ union{ long double __ld; long long __p[2]; }__u = {__x}; return (int) ((unsigned long long) __u.__p[0] >> 63); }
  static __inline__ int __inline_isnormalf( float __x ) { float fabsf = __builtin_fabsf(__x); if( __x != __x ) return 0; return fabsf < __builtin_inff() && fabsf >= 1.17549435e-38F; }
  static __inline__ int __inline_isnormald( double __x ) { double fabsf = __builtin_fabs(__x); if( __x != __x ) return 0; return fabsf < __builtin_inf() && fabsf >= 2.2250738585072014e-308; }
  static __inline__ int __inline_isnormal( long double __x ) { long double fabsf = __builtin_fabsl(__x); if( __x != __x ) return 0; return fabsf < __builtin_infl() && fabsf >= 2.00416836000897277799610805135016e-292L; }
# 360 "/usr/include/architecture/ppc/math.h" 3 4
extern double acos( double );
extern float acosf( float );

extern double asin( double );
extern float asinf( float );

extern double atan( double );
extern float atanf( float );

extern double atan2( double, double );
extern float atan2f( float, float );

extern double cos( double );
extern float cosf( float );

extern double sin( double );
extern float sinf( float );

extern double tan( double );
extern float tanf( float );

extern double acosh( double );
extern float acoshf( float );

extern double asinh( double );
extern float asinhf( float );

extern double atanh( double );
extern float atanhf( float );

extern double cosh( double );
extern float coshf( float );

extern double sinh( double );
extern float sinhf( float );

extern double tanh( double );
extern float tanhf( float );

extern double exp( double );
extern float expf( float );

extern double exp2( double );
extern float exp2f( float );

extern double expm1( double );
extern float expm1f( float );

extern double log( double );
extern float logf( float );

extern double log10( double );
extern float log10f( float );

extern double log2( double );
extern float log2f( float );

extern double log1p( double );
extern float log1pf( float );

extern double logb( double );
extern float logbf( float );

extern double modf( double, double * );
extern float modff( float, float * );

extern double ldexp( double, int );
extern float ldexpf( float, int );

extern double frexp( double, int * );
extern float frexpf( float, int * );

extern int ilogb( double );
extern int ilogbf( float );

extern double scalbn( double, int );
extern float scalbnf( float, int );

extern double scalbln( double, long int );
extern float scalblnf( float, long int );

extern double fabs( double );
extern float fabsf( float );

extern double cbrt( double );
extern float cbrtf( float );

extern double hypot( double, double );
extern float hypotf( float, float );

extern double pow( double, double );
extern float powf( float, float );

extern double sqrt( double );
extern float sqrtf( float );

extern double erf( double );
extern float erff( float );

extern double erfc( double );
extern float erfcf( float );

extern double lgamma( double );
extern float lgammaf( float );

extern double tgamma( double );
extern float tgammaf( float );

extern double ceil( double );
extern float ceilf( float );

extern double floor( double );
extern float floorf( float );

extern double nearbyint( double );
extern float nearbyintf( float );

extern double rint( double );
extern float rintf( float );

extern long int lrint( double );
extern long int lrintf( float );

extern long long int llrint( double );
extern long long int llrintf( float );

extern double round( double );
extern float roundf( float );

extern long int lround( double );
extern long int lroundf( float );

extern long long int llround( double );
extern long long int llroundf( float );

extern double trunc( double );
extern float truncf( float );

extern double fmod( double, double );
extern float fmodf( float, float );

extern double remainder( double, double );
extern float remainderf( float, float );

extern double remquo( double, double, int * );
extern float remquof( float, float, int * );

extern double copysign( double, double );
extern float copysignf( float, float );

extern double nan( const char * );
extern float nanf( const char * );

extern double nextafter( double, double );
extern float nextafterf( float, float );


extern double fdim( double, double );
extern float fdimf( float, float );

extern double fmax( double, double );
extern float fmaxf( float, float );

extern double fmin( double, double );
extern float fminf( float, float );

extern double fma( double, double, double );
extern float fmaf( float, float, float );


extern long double acosl( long double ) __asm("_" "acosl" "$LDBL128");
extern long double asinl( long double ) __asm("_" "asinl" "$LDBL128");
extern long double atanl( long double ) __asm("_" "atanl" "$LDBL128");
extern long double atan2l( long double, long double ) __asm("_" "atan2l" "$LDBL128");
extern long double cosl( long double ) __asm("_" "cosl" "$LDBL128");
extern long double sinl( long double ) __asm("_" "sinl" "$LDBL128");
extern long double tanl( long double ) __asm("_" "tanl" "$LDBL128");
extern long double acoshl( long double ) __asm("_" "acoshl" "$LDBL128");
extern long double asinhl( long double ) __asm("_" "asinhl" "$LDBL128");
extern long double atanhl( long double ) __asm("_" "atanhl" "$LDBL128");
extern long double coshl( long double ) __asm("_" "coshl" "$LDBL128");
extern long double sinhl( long double ) __asm("_" "sinhl" "$LDBL128");
extern long double tanhl( long double ) __asm("_" "tanhl" "$LDBL128");
extern long double expl( long double ) __asm("_" "expl" "$LDBL128");
extern long double exp2l( long double ) __asm("_" "exp2l" "$LDBL128");
extern long double expm1l( long double ) __asm("_" "expm1l" "$LDBL128");
extern long double logl( long double ) __asm("_" "logl" "$LDBL128");
extern long double log10l( long double ) __asm("_" "log10l" "$LDBL128");
extern long double log2l( long double ) __asm("_" "log2l" "$LDBL128");
extern long double log1pl( long double ) __asm("_" "log1pl" "$LDBL128");
extern long double logbl( long double ) __asm("_" "logbl" "$LDBL128");
extern long double modfl( long double, long double * ) __asm("_" "modfl" "$LDBL128");
extern long double ldexpl( long double, int ) __asm("_" "ldexpl" "$LDBL128");
extern long double frexpl( long double, int * ) __asm("_" "frexpl" "$LDBL128");
extern int ilogbl( long double ) __asm("_" "ilogbl" "$LDBL128");
extern long double scalbnl( long double, int ) __asm("_" "scalbnl" "$LDBL128");
extern long double scalblnl( long double, long int ) __asm("_" "scalblnl" "$LDBL128");
extern long double fabsl( long double ) __asm("_" "fabsl" "$LDBL128");
extern long double cbrtl( long double ) __asm("_" "cbrtl" "$LDBL128");
extern long double hypotl( long double, long double ) __asm("_" "hypotl" "$LDBL128");
extern long double powl( long double, long double ) __asm("_" "powl" "$LDBL128");
extern long double sqrtl( long double ) __asm("_" "sqrtl" "$LDBL128");
extern long double erfl( long double ) __asm("_" "erfl" "$LDBL128");
extern long double erfcl( long double ) __asm("_" "erfcl" "$LDBL128");
extern long double lgammal( long double ) __asm("_" "lgammal" "$LDBL128");
extern long double tgammal( long double ) __asm("_" "tgammal" "$LDBL128");
extern long double ceill( long double ) __asm("_" "ceill" "$LDBL128");
extern long double floorl( long double ) __asm("_" "floorl" "$LDBL128");
extern long double nearbyintl( long double ) __asm("_" "nearbyintl" "$LDBL128");
extern long double rintl( long double ) __asm("_" "rintl" "$LDBL128");
extern long int lrintl( long double ) __asm("_" "lrintl" "$LDBL128");
extern long long int llrintl( long double ) __asm("_" "llrintl" "$LDBL128");
extern long double roundl( long double ) __asm("_" "roundl" "$LDBL128");
extern long int lroundl( long double ) __asm("_" "lroundl" "$LDBL128");
extern long long int llroundl( long double ) __asm("_" "llroundl" "$LDBL128");
extern long double truncl( long double ) __asm("_" "truncl" "$LDBL128");
extern long double fmodl( long double, long double) __asm("_" "fmodl" "$LDBL128");
extern long double remainderl( long double, long double ) __asm("_" "remainderl" "$LDBL128");
extern long double remquol( long double, long double, int * ) __asm("_" "remquol" "$LDBL128");
extern long double copysignl( long double, long double ) __asm("_" "copysignl" "$LDBL128");
extern long double nanl( const char * ) __asm("_" "nanl" "$LDBL128");
extern long double nextafterl( long double, long double ) __asm("_" "nextafterl" "$LDBL128");
extern double nexttoward( double, long double ) __asm("_" "nexttoward" "$LDBL128");
extern float nexttowardf( float, long double ) __asm("_" "nexttowardf" "$LDBL128");
extern long double nexttowardl( long double, long double ) __asm("_" "nexttowardl" "$LDBL128");
extern long double fdiml( long double, long double ) __asm("_" "fdiml" "$LDBL128");
extern long double fmaxl( long double, long double ) __asm("_" "fmaxl" "$LDBL128");
extern long double fminl( long double, long double ) __asm("_" "fminl" "$LDBL128");
extern long double fmal( long double, long double, long double ) __asm("_" "fmal" "$LDBL128");


#define isgreater(x,y) __builtin_isgreater ((x),(y))
#define isgreaterequal(x,y) __builtin_isgreaterequal ((x),(y))
#define isless(x,y) __builtin_isless ((x),(y))
#define islessequal(x,y) __builtin_islessequal ((x),(y))
#define islessgreater(x,y) __builtin_islessgreater ((x),(y))
#define isunordered(x,y) __builtin_isunordered ((x),(y))

extern double __inf( void );
extern float __inff( void );
extern float __nan( void );


extern double j0 ( double );
extern double j1 ( double );
extern double jn ( int, double );

extern double y0 ( double );
extern double y1 ( double );
extern double yn ( int, double );
# 648 "/usr/include/architecture/ppc/math.h" 3 4
        extern double scalb ( double, double ) __asm("_scalb$UNIX2003" );







#define M_E 2.71828182845904523536028747135266250
#define M_LOG2E 1.44269504088896340735992468100189214
#define M_LOG10E 0.434294481903251827651128918916605082
#define M_LN2 0.693147180559945309417232121458176568
#define M_LN10 2.30258509299404568401799145468436421
#define M_PI 3.14159265358979323846264338327950288
#define M_PI_2 1.57079632679489661923132169163975144
#define M_PI_4 0.785398163397448309615660845819875721
#define M_1_PI 0.318309886183790671537767526745028724
#define M_2_PI 0.636619772367581343075535053490057448
#define M_2_SQRTPI 1.12837916709551257389615890312154517
#define M_SQRT2 1.41421356237309504880168872420969808
#define M_SQRT1_2 0.707106781186547524400844362104849039

#define MAXFLOAT ((float)3.40282346638528860e+38)
extern int signgam;




#define __WANT_EXTENSIONS__ 




#define FP_SNAN FP_NAN
#define FP_QNAN FP_NAN

extern long int rinttol ( double );

extern long int roundtol ( double );

typedef struct __complex_s {
        double Real;
        double Imag;
} __complex_t;







enum fdversion {_fdlibm_ieee = -1, _fdlibm_svid, _fdlibm_xopen, _fdlibm_posix};
#define fdlibm_ieee _fdlibm_ieee
#define fdlibm_svid _fdlibm_svid
#define fdlibm_xopen _fdlibm_xopen
#define fdlibm_posix _fdlibm_posix

#define _LIB_VERSION_TYPE enum fdversion
#define _LIB_VERSION _fdlib_version
# 715 "/usr/include/architecture/ppc/math.h" 3 4
extern enum fdversion _fdlib_version;

#define _IEEE_ fdlibm_ieee
#define _SVID_ fdlibm_svid
#define _XOPEN_ fdlibm_xopen
#define _POSIX_ fdlibm_posix


struct exception {
 int type;
 char *name;
 double arg1;
 double arg2;
 double retval;
};


#define HUGE MAXFLOAT






#define X_TLOSS 1.41484755040568800000e+16

#define DOMAIN 1
#define SING 2
#define OVERFLOW 3
#define UNDERFLOW 4
#define TLOSS 5
#define PLOSS 6





extern int finite ( double );

extern double gamma ( double );




extern int matherr ( struct exception * );





extern double significand ( double );




extern double drem ( double, double );
# 27 "/usr/include/math.h" 2 3 4
# 2112 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2

#define Perl_fp_class(x) fpclassify(x)
#define Perl_fp_class_inf(x) (Perl_fp_class(x)==FP_INFINITE)
#define Perl_fp_class_nan(x) (Perl_fp_class(x)==FP_NAN)
#define Perl_fp_class_norm(x) (Perl_fp_class(x)==FP_NORMAL)
#define Perl_fp_class_denorm(x) (Perl_fp_class(x)==FP_SUBNORMAL)
#define Perl_fp_class_zero(x) (Perl_fp_class(x)==FP_ZERO)
# 2394 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define Perl_isfinitel(x) ((x) * 0 == 0)
# 2408 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define USE_PERL_ATOF 
# 2417 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define Perl_atof(s) Perl_my_atof(s)
#define Perl_atof2(s,n) Perl_my_atof2(aTHX_ (s), &(n))
# 2436 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/limits.h" 1 3 4






# 1 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/syslimits.h" 1 3 4





#define _GCC_NEXT_LIMITS_H 
# 8 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/limits.h" 2 3 4



#undef _GCC_NEXT_LIMITS_H
# 2437 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 2462 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_UCHAR_MIN ((unsigned char)0)


#define PERL_UCHAR_MAX ((unsigned char)UCHAR_MAX)
# 2483 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_USHORT_MIN ((unsigned short)0)
# 2492 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_USHORT_MAX ((unsigned short)USHRT_MAX)
# 2506 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_SHORT_MAX ((short)SHRT_MAX)
# 2520 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_SHORT_MIN ((short)SHRT_MIN)







#define PERL_UINT_MAX ((unsigned int)UINT_MAX)
# 2537 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_UINT_MIN ((unsigned int)0)


#define PERL_INT_MAX ((int)INT_MAX)
# 2550 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_INT_MIN ((int)INT_MIN)
# 2560 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_ULONG_MAX ((unsigned long)ULONG_MAX)
# 2569 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_ULONG_MIN ((unsigned long)0L)


#define PERL_LONG_MAX ((long)LONG_MAX)
# 2582 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_LONG_MIN ((long)LONG_MIN)
# 2600 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
typedef size_t STRLEN;

typedef struct op OP;
typedef struct cop COP;
typedef struct unop UNOP;
typedef struct unop_aux UNOP_AUX;
typedef struct binop BINOP;
typedef struct listop LISTOP;
typedef struct logop LOGOP;
typedef struct pmop PMOP;
typedef struct svop SVOP;
typedef struct padop PADOP;
typedef struct pvop PVOP;
typedef struct loop LOOP;
typedef struct methop METHOP;






typedef struct block_hooks BHK;
typedef struct custom_op XOP;

typedef struct interpreter PerlInterpreter;





#define STRUCT_SV sv

typedef struct sv SV;
typedef struct av AV;
typedef struct hv HV;
typedef struct cv CV;
typedef struct p5rx REGEXP;
typedef struct gp GP;
typedef struct gv GV;
typedef struct io IO;
typedef struct context PERL_CONTEXT;
typedef struct block BLOCK;

typedef struct magic MAGIC;
typedef struct xpv XPV;
typedef struct xpviv XPVIV;
typedef struct xpvuv XPVUV;
typedef struct xpvnv XPVNV;
typedef struct xpvmg XPVMG;
typedef struct xpvlv XPVLV;
typedef struct xpvinvlist XINVLIST;
typedef struct xpvav XPVAV;
typedef struct xpvhv XPVHV;
typedef struct xpvgv XPVGV;
typedef struct xpvcv XPVCV;
typedef struct xpvbm XPVBM;
typedef struct xpvfm XPVFM;
typedef struct xpvio XPVIO;
typedef struct mgvtbl MGVTBL;
typedef union any ANY;
typedef struct ptr_tbl_ent PTR_TBL_ENT_t;
typedef struct ptr_tbl PTR_TBL_t;
typedef struct clone_params CLONE_PARAMS;



typedef struct padlist PADLIST;
typedef AV PAD;
typedef struct padnamelist PADNAMELIST;
typedef struct padname PADNAME;



#define PERL_NEW_COPY_ON_WRITE 






#define PERL_ANY_COW 
# 2690 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h" 1
# 15 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define HANDY_H 
# 25 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define Null(type) ((type)NULL)
# 40 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define Nullch Null(char*)
#define Nullfp Null(PerlIO*)
#define Nullsv Null(SV*)
# 51 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define TRUE (1)
#define FALSE (0)
# 64 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define MUTABLE_PTR(p) ({ void *_p = (p); _p; })




#define MUTABLE_AV(p) ((AV *)MUTABLE_PTR(p))
#define MUTABLE_CV(p) ((CV *)MUTABLE_PTR(p))
#define MUTABLE_GV(p) ((GV *)MUTABLE_PTR(p))
#define MUTABLE_HV(p) ((HV *)MUTABLE_PTR(p))
#define MUTABLE_IO(p) ((IO *)MUTABLE_PTR(p))
#define MUTABLE_SV(p) ((SV *)MUTABLE_PTR(p))


# 1 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stdbool.h" 1 3 4
# 32 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stdbool.h" 3 4
#define _STDBOOL_H 



#define bool _Bool
#define true 1
#define false 0
# 51 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stdbool.h" 3 4
#define __bool_true_false_are_defined 1
# 78 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h" 2

#define HAS_BOOL 1
# 111 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define cBOOL(cbool) ((cbool) ? (bool)1 : (bool)0)
# 124 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define FUNCTION__ __FUNCTION__
# 159 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
# 1 "/usr/include/inttypes.h" 1 3 4
# 32 "/usr/include/inttypes.h" 3 4
#define _INTTYPES_H_ 
# 41 "/usr/include/inttypes.h" 3 4
#define restrict 
#define __RESTRICT_KEYWORD_DEFINED__ 
# 51 "/usr/include/inttypes.h" 3 4
#undef __PRI_8_LENGTH_MODIFIER__
#undef __PRI_64_LENGTH_MODIFIER__
#undef __SCN_64_LENGTH_MODIFIER__





#define __PRI_8_LENGTH_MODIFIER__ ""
#define __PRI_64_LENGTH_MODIFIER__ "q"
#define __SCN_64_LENGTH_MODIFIER__ "q"
#define __PRI_MAX_LENGTH_MODIFIER__ "j"
#define __SCN_MAX_LENGTH_MODIFIER__ "j"

#define PRId8 __PRI_8_LENGTH_MODIFIER__ "d"
#define PRIi8 __PRI_8_LENGTH_MODIFIER__ "i"
#define PRIo8 __PRI_8_LENGTH_MODIFIER__ "o"
#define PRIu8 __PRI_8_LENGTH_MODIFIER__ "u"
#define PRIx8 __PRI_8_LENGTH_MODIFIER__ "x"
#define PRIX8 __PRI_8_LENGTH_MODIFIER__ "X"

#define PRId16 "hd"
#define PRIi16 "hi"
#define PRIo16 "ho"
#define PRIu16 "hu"
#define PRIx16 "hx"
#define PRIX16 "hX"

#define PRId32 "d"
#define PRIi32 "i"
#define PRIo32 "o"
#define PRIu32 "u"
#define PRIx32 "x"
#define PRIX32 "X"

#define PRId64 __PRI_64_LENGTH_MODIFIER__ "d"
#define PRIi64 __PRI_64_LENGTH_MODIFIER__ "i"
#define PRIo64 __PRI_64_LENGTH_MODIFIER__ "o"
#define PRIu64 __PRI_64_LENGTH_MODIFIER__ "u"
#define PRIx64 __PRI_64_LENGTH_MODIFIER__ "x"
#define PRIX64 __PRI_64_LENGTH_MODIFIER__ "X"

#define PRIdLEAST8 PRId8
#define PRIiLEAST8 PRIi8
#define PRIoLEAST8 PRIo8
#define PRIuLEAST8 PRIu8
#define PRIxLEAST8 PRIx8
#define PRIXLEAST8 PRIX8

#define PRIdLEAST16 PRId16
#define PRIiLEAST16 PRIi16
#define PRIoLEAST16 PRIo16
#define PRIuLEAST16 PRIu16
#define PRIxLEAST16 PRIx16
#define PRIXLEAST16 PRIX16

#define PRIdLEAST32 PRId32
#define PRIiLEAST32 PRIi32
#define PRIoLEAST32 PRIo32
#define PRIuLEAST32 PRIu32
#define PRIxLEAST32 PRIx32
#define PRIXLEAST32 PRIX32

#define PRIdLEAST64 PRId64
#define PRIiLEAST64 PRIi64
#define PRIoLEAST64 PRIo64
#define PRIuLEAST64 PRIu64
#define PRIxLEAST64 PRIx64
#define PRIXLEAST64 PRIX64

#define PRIdFAST8 PRId8
#define PRIiFAST8 PRIi8
#define PRIoFAST8 PRIo8
#define PRIuFAST8 PRIu8
#define PRIxFAST8 PRIx8
#define PRIXFAST8 PRIX8

#define PRIdFAST16 PRId16
#define PRIiFAST16 PRIi16
#define PRIoFAST16 PRIo16
#define PRIuFAST16 PRIu16
#define PRIxFAST16 PRIx16
#define PRIXFAST16 PRIX16

#define PRIdFAST32 PRId32
#define PRIiFAST32 PRIi32
#define PRIoFAST32 PRIo32
#define PRIuFAST32 PRIu32
#define PRIxFAST32 PRIx32
#define PRIXFAST32 PRIX32

#define PRIdFAST64 PRId64
#define PRIiFAST64 PRIi64
#define PRIoFAST64 PRIo64
#define PRIuFAST64 PRIu64
#define PRIxFAST64 PRIx64
#define PRIXFAST64 PRIX64


#define PRIdPTR "ld"
#define PRIiPTR "li"
#define PRIoPTR "lo"
#define PRIuPTR "lu"
#define PRIxPTR "lx"
#define PRIXPTR "lX"

#define PRIdMAX __PRI_MAX_LENGTH_MODIFIER__ "d"
#define PRIiMAX __PRI_MAX_LENGTH_MODIFIER__ "i"
#define PRIoMAX __PRI_MAX_LENGTH_MODIFIER__ "o"
#define PRIuMAX __PRI_MAX_LENGTH_MODIFIER__ "u"
#define PRIxMAX __PRI_MAX_LENGTH_MODIFIER__ "x"
#define PRIXMAX __PRI_MAX_LENGTH_MODIFIER__ "X"

#define SCNd8 "hhd"
#define SCNi8 "hhi"
#define SCNo8 "hho"
#define SCNu8 "hhu"
#define SCNx8 "hhx"

#define SCNd16 "hd"
#define SCNi16 "hi"
#define SCNo16 "ho"
#define SCNu16 "hu"
#define SCNx16 "hx"

#define SCNd32 "d"
#define SCNi32 "i"
#define SCNo32 "o"
#define SCNu32 "u"
#define SCNx32 "x"

#define SCNd64 __SCN_64_LENGTH_MODIFIER__ "d"
#define SCNi64 __SCN_64_LENGTH_MODIFIER__ "i"
#define SCNo64 __SCN_64_LENGTH_MODIFIER__ "o"
#define SCNu64 __SCN_64_LENGTH_MODIFIER__ "u"
#define SCNx64 __SCN_64_LENGTH_MODIFIER__ "x"

#define SCNdLEAST8 SCNd8
#define SCNiLEAST8 SCNi8
#define SCNoLEAST8 SCNo8
#define SCNuLEAST8 SCNu8
#define SCNxLEAST8 SCNx8

#define SCNdLEAST16 SCNd16
#define SCNiLEAST16 SCNi16
#define SCNoLEAST16 SCNo16
#define SCNuLEAST16 SCNu16
#define SCNxLEAST16 SCNx16

#define SCNdLEAST32 SCNd32
#define SCNiLEAST32 SCNi32
#define SCNoLEAST32 SCNo32
#define SCNuLEAST32 SCNu32
#define SCNxLEAST32 SCNx32

#define SCNdLEAST64 SCNd64
#define SCNiLEAST64 SCNi64
#define SCNoLEAST64 SCNo64
#define SCNuLEAST64 SCNu64
#define SCNxLEAST64 SCNx64

#define SCNdFAST8 SCNd8
#define SCNiFAST8 SCNi8
#define SCNoFAST8 SCNo8
#define SCNuFAST8 SCNu8
#define SCNxFAST8 SCNx8

#define SCNdFAST16 SCNd16
#define SCNiFAST16 SCNi16
#define SCNoFAST16 SCNo16
#define SCNuFAST16 SCNu16
#define SCNxFAST16 SCNx16

#define SCNdFAST32 SCNd32
#define SCNiFAST32 SCNi32
#define SCNoFAST32 SCNo32
#define SCNuFAST32 SCNu32
#define SCNxFAST32 SCNx32

#define SCNdFAST64 SCNd64
#define SCNiFAST64 SCNi64
#define SCNoFAST64 SCNo64
#define SCNuFAST64 SCNu64
#define SCNxFAST64 SCNx64

#define SCNdPTR "ld"
#define SCNiPTR "li"
#define SCNoPTR "lo"
#define SCNuPTR "lu"
#define SCNxPTR "lx"

#define SCNdMAX __SCN_MAX_LENGTH_MODIFIER__ "d"
#define SCNiMAX __SCN_MAX_LENGTH_MODIFIER__ "i"
#define SCNoMAX __SCN_MAX_LENGTH_MODIFIER__ "o"
#define SCNuMAX __SCN_MAX_LENGTH_MODIFIER__ "u"
#define SCNxMAX __SCN_MAX_LENGTH_MODIFIER__ "x"






  extern intmax_t imaxabs(intmax_t j);


  typedef struct {
        intmax_t quot;
        intmax_t rem;
  } imaxdiv_t;

  extern imaxdiv_t imaxdiv(intmax_t numer, intmax_t denom);


  extern intmax_t strtoimax(const char * nptr, char ** endptr, int base);
  extern uintmax_t strtoumax(const char * nptr, char ** endptr, int base);
# 275 "/usr/include/inttypes.h" 3 4
  extern intmax_t wcstoimax(const wchar_t * nptr, wchar_t ** endptr, int base);
  extern uintmax_t wcstoumax(const wchar_t * nptr, wchar_t ** endptr, int base);


# 297 "/usr/include/inttypes.h" 3 4
#undef restrict
#undef __RESTRICT_KEYWORD_DEFINED__
# 160 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h" 2
# 170 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
typedef signed char I8;
typedef unsigned char U8;
typedef short I16;
typedef unsigned short U16;
typedef long I32;
typedef unsigned long U32;
# 230 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define U8_MAX UINT8_MAX
#define U8_MIN UINT8_MIN

#define I16_MAX INT16_MAX
#define I16_MIN INT16_MIN
#define U16_MAX UINT16_MAX
#define U16_MIN UINT16_MIN

#define I32_MAX INT32_MAX
#define I32_MIN INT32_MIN

#define U32_MAX UINT32_MAX



#define U32_MIN UINT32_MIN
# 274 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define BIT_DIGITS(N) (((N)*146)/485 + 1)
#define TYPE_DIGITS(T) BIT_DIGITS(sizeof(T) * 8)
#define TYPE_CHARS(T) (TYPE_DIGITS(T) + 2)


#define Ctl(ch) ((ch) & 037)
# 288 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define __ASSERT_(statement) 
# 368 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define STR_WITH_LEN(s) ("" s ""), (sizeof(s)-1)







#define newSVpvs(str) Perl_newSVpvn(aTHX_ STR_WITH_LEN(str))
#define newSVpvs_flags(str,flags) Perl_newSVpvn_flags(aTHX_ STR_WITH_LEN(str), flags)

#define newSVpvs_share(str) Perl_newSVpvn_share(aTHX_ STR_WITH_LEN(str), 0)
#define sv_catpvs_flags(sv,str,flags) Perl_sv_catpvn_flags(aTHX_ sv, STR_WITH_LEN(str), flags)

#define sv_catpvs_nomg(sv,str) Perl_sv_catpvn_flags(aTHX_ sv, STR_WITH_LEN(str), 0)

#define sv_catpvs(sv,str) Perl_sv_catpvn_flags(aTHX_ sv, STR_WITH_LEN(str), SV_GMAGIC)

#define sv_catpvs_mg(sv,str) Perl_sv_catpvn_flags(aTHX_ sv, STR_WITH_LEN(str), SV_GMAGIC|SV_SMAGIC)

#define sv_setpvs(sv,str) Perl_sv_setpvn(aTHX_ sv, STR_WITH_LEN(str))
#define sv_setpvs_mg(sv,str) Perl_sv_setpvn_mg(aTHX_ sv, STR_WITH_LEN(str))
#define sv_setref_pvs(rv,classname,str) Perl_sv_setref_pvn(aTHX_ rv, classname, STR_WITH_LEN(str))

#define savepvs(str) Perl_savepvn(aTHX_ STR_WITH_LEN(str))
#define savesharedpvs(str) Perl_savesharedpvn(aTHX_ STR_WITH_LEN(str))
#define gv_stashpvs(str,create) Perl_gv_stashpvn(aTHX_ STR_WITH_LEN(str), create)

#define gv_fetchpvs(namebeg,add,sv_type) Perl_gv_fetchpvn_flags(aTHX_ STR_WITH_LEN(namebeg), add, sv_type)

#define gv_fetchpvn(namebeg,len,add,sv_type) Perl_gv_fetchpvn_flags(aTHX_ namebeg, len, add, sv_type)

#define sv_catxmlpvs(dsv,str,utf8) Perl_sv_catxmlpvn(aTHX_ dsv, STR_WITH_LEN(str), utf8)

#define hv_fetchs(hv,key,lval) ((SV **)Perl_hv_common(aTHX_ (hv), NULL, STR_WITH_LEN(key), 0, (lval) ? (HV_FETCH_JUST_SV | HV_FETCH_LVALUE) : HV_FETCH_JUST_SV, NULL, 0))




#define hv_stores(hv,key,val) ((SV **)Perl_hv_common(aTHX_ (hv), NULL, STR_WITH_LEN(key), 0, (HV_FETCH_ISSTORE|HV_FETCH_JUST_SV), (val), 0))



#define lex_stuff_pvs(pv,flags) Perl_lex_stuff_pvn(aTHX_ STR_WITH_LEN(pv), flags)

#define get_cvs(str,flags) Perl_get_cvn_flags(aTHX_ STR_WITH_LEN(str), (flags))
# 465 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define strNE(s1,s2) (strcmp(s1,s2))
#define strEQ(s1,s2) (!strcmp(s1,s2))
#define strLT(s1,s2) (strcmp(s1,s2) < 0)
#define strLE(s1,s2) (strcmp(s1,s2) <= 0)
#define strGT(s1,s2) (strcmp(s1,s2) > 0)
#define strGE(s1,s2) (strcmp(s1,s2) >= 0)
#define strnNE(s1,s2,l) (strncmp(s1,s2,l))
#define strnEQ(s1,s2,l) (!strncmp(s1,s2,l))


#define memNE(s1,s2,l) (memcmp(s1,s2,l))
#define memEQ(s1,s2,l) (!memcmp(s1,s2,l))





#define memEQs(s1,l,s2) (sizeof(s2)-1 == l && memEQ(s1, ("" s2 ""), (sizeof(s2)-1)))

#define memNEs(s1,l,s2) !memEQs(s1, l, s2)
# 501 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define CTYPE256 
# 885 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define WIDEST_UTYPE U32
# 895 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define FITS_IN_8_BITS(c) ((sizeof(c) == 1) || !(((WIDEST_UTYPE)(c)) & ~0xFF))
# 907 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define isASCII(c) ((WIDEST_UTYPE)(c) < 128)





#define isOCTAL_A(c) cBOOL(FITS_IN_8_BITS(c) && (0xF8 & (c)) == '0')
# 927 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define _CC_WORDCHAR 0
#define _CC_DIGIT 1
#define _CC_ALPHA 2
#define _CC_LOWER 3
#define _CC_UPPER 4
#define _CC_PUNCT 5
#define _CC_PRINT 6
#define _CC_ALPHANUMERIC 7
#define _CC_GRAPH 8
#define _CC_CASED 9

#define _FIRST_NON_SWASH_CC 10
# 948 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define _CC_SPACE 10
#define _CC_BLANK 11
#define _CC_XDIGIT 12
#define _CC_CNTRL 13
#define _CC_ASCII 14
#define _CC_VERTSPACE 15

#define _HIGHEST_REGCOMP_DOT_H_SYNC _CC_VERTSPACE



#define _CC_IDFIRST 16
#define _CC_CHARNAME_CONT 17
#define _CC_NONLATIN1_FOLD 18
#define _CC_NONLATIN1_SIMPLE_FOLD 19
#define _CC_QUOTEMETA 20
#define _CC_NON_FINAL_FOLD 21
#define _CC_IS_IN_SOME_FOLD 22
#define _CC_MNEMONIC_CNTRL 23
# 999 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define POSIX_SWASH_COUNT _FIRST_NON_SWASH_CC
#define POSIX_CC_COUNT (_HIGHEST_REGCOMP_DOT_H_SYNC + 1)
# 1027 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"







extern const U32 PL_charclass[];




#define _CC_mask(classnum) (1U << (classnum))



#define _generic_isCC(c,classnum) cBOOL(FITS_IN_8_BITS(c) && (PL_charclass[(U8) (c)] & _CC_mask(classnum)))




#define _CC_mask_A(classnum) (_CC_mask(classnum) | _CC_mask(_CC_ASCII))




#define _generic_isCC_A(c,classnum) (FITS_IN_8_BITS(c) && ((PL_charclass[(U8) (c)] & _CC_mask_A(classnum)) == _CC_mask_A(classnum)))



#define isALPHA_A(c) _generic_isCC_A(c, _CC_ALPHA)
#define isALPHANUMERIC_A(c) _generic_isCC_A(c, _CC_ALPHANUMERIC)
#define isBLANK_A(c) _generic_isCC_A(c, _CC_BLANK)
#define isCNTRL_A(c) _generic_isCC_A(c, _CC_CNTRL)
#define isDIGIT_A(c) _generic_isCC(c, _CC_DIGIT)
#define isGRAPH_A(c) _generic_isCC_A(c, _CC_GRAPH)
#define isLOWER_A(c) _generic_isCC_A(c, _CC_LOWER)
#define isPRINT_A(c) _generic_isCC_A(c, _CC_PRINT)
#define isPUNCT_A(c) _generic_isCC_A(c, _CC_PUNCT)
#define isSPACE_A(c) _generic_isCC_A(c, _CC_SPACE)
#define isUPPER_A(c) _generic_isCC_A(c, _CC_UPPER)
#define isWORDCHAR_A(c) _generic_isCC_A(c, _CC_WORDCHAR)
#define isXDIGIT_A(c) _generic_isCC(c, _CC_XDIGIT)
#define isIDFIRST_A(c) _generic_isCC_A(c, _CC_IDFIRST)
#define isALPHA_L1(c) _generic_isCC(c, _CC_ALPHA)
#define isALPHANUMERIC_L1(c) _generic_isCC(c, _CC_ALPHANUMERIC)
#define isBLANK_L1(c) _generic_isCC(c, _CC_BLANK)


#define isCHARNAME_CONT(c) _generic_isCC(c, _CC_CHARNAME_CONT)

#define isCNTRL_L1(c) _generic_isCC(c, _CC_CNTRL)
#define isGRAPH_L1(c) _generic_isCC(c, _CC_GRAPH)
#define isLOWER_L1(c) _generic_isCC(c, _CC_LOWER)
#define isPRINT_L1(c) _generic_isCC(c, _CC_PRINT)
#define isPSXSPC_L1(c) isSPACE_L1(c)
#define isPUNCT_L1(c) _generic_isCC(c, _CC_PUNCT)
#define isSPACE_L1(c) _generic_isCC(c, _CC_SPACE)
#define isUPPER_L1(c) _generic_isCC(c, _CC_UPPER)
#define isWORDCHAR_L1(c) _generic_isCC(c, _CC_WORDCHAR)
#define isIDFIRST_L1(c) _generic_isCC(c, _CC_IDFIRST)






#define _HAS_NONLATIN1_SIMPLE_FOLD_CLOSURE_ONLY_FOR_USE_BY_REGCOMP_DOT_C_AND_REGEXEC_DOT_C(c) ((! cBOOL(FITS_IN_8_BITS(c))) || (PL_charclass[(U8) (c)] & _CC_mask(_CC_NONLATIN1_SIMPLE_FOLD)))


#define _HAS_NONLATIN1_FOLD_CLOSURE_ONLY_FOR_USE_BY_REGCOMP_DOT_C_AND_REGEXEC_DOT_C(c) ((! cBOOL(FITS_IN_8_BITS(c))) || (PL_charclass[(U8) (c)] & _CC_mask(_CC_NONLATIN1_FOLD)))

#define _isQUOTEMETA(c) _generic_isCC(c, _CC_QUOTEMETA)
#define _IS_NON_FINAL_FOLD_ONLY_FOR_USE_BY_REGCOMP_DOT_C(c) _generic_isCC(c, _CC_NON_FINAL_FOLD)

#define _IS_IN_SOME_FOLD_ONLY_FOR_USE_BY_REGCOMP_DOT_C(c) _generic_isCC(c, _CC_IS_IN_SOME_FOLD)

#define _IS_MNEMONIC_CNTRL_ONLY_FOR_USE_BY_REGCOMP_DOT_C(c) _generic_isCC(c, _CC_MNEMONIC_CNTRL)
# 1262 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define isALPHANUMERIC(c) isALPHANUMERIC_A(c)
#define isALPHA(c) isALPHA_A(c)
#define isASCII_A(c) isASCII(c)
#define isASCII_L1(c) isASCII(c)
#define isBLANK(c) isBLANK_A(c)
#define isCNTRL(c) isCNTRL_A(c)
#define isDIGIT(c) isDIGIT_A(c)
#define isGRAPH(c) isGRAPH_A(c)
#define isIDFIRST(c) isIDFIRST_A(c)
#define isLOWER(c) isLOWER_A(c)
#define isPRINT(c) isPRINT_A(c)
#define isPSXSPC_A(c) isSPACE_A(c)
#define isPSXSPC(c) isPSXSPC_A(c)
#define isPSXSPC_L1(c) isSPACE_L1(c)
#define isPUNCT(c) isPUNCT_A(c)
#define isSPACE(c) isSPACE_A(c)
#define isUPPER(c) isUPPER_A(c)
#define isWORDCHAR(c) isWORDCHAR_A(c)
#define isXDIGIT(c) isXDIGIT_A(c)






#define toLOWER(c) (isUPPER(c) ? (U8)((c) + ('a' - 'A')) : (c))
#define toUPPER(c) (isLOWER(c) ? (U8)((c) - ('a' - 'A')) : (c))




#define toFOLD(c) toLOWER(c)
#define toTITLE(c) toUPPER(c)

#define toLOWER_A(c) toLOWER(c)
#define toUPPER_A(c) toUPPER(c)
#define toFOLD_A(c) toFOLD(c)
#define toTITLE_A(c) toTITLE(c)


#define toLOWER_LATIN1(c) ((! FITS_IN_8_BITS(c)) ? (c) : PL_latin1_lc[ (U8) (c) ])


#define toLOWER_L1(c) toLOWER_LATIN1(c)




#define toUPPER_LATIN1_MOD(c) ((! FITS_IN_8_BITS(c)) ? (c) : PL_mod_latin1_uc[ (U8) (c) ])


#define IN_UTF8_CTYPE_LOCALE PL_in_utf8_CTYPE_locale
# 1326 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define _generic_LC_base(c,utf8_locale_classnum,non_utf8) (! FITS_IN_8_BITS(c) ? 0 : IN_UTF8_CTYPE_LOCALE ? cBOOL(PL_charclass[(U8) (c)] & _CC_mask(utf8_locale_classnum)) : cBOOL(non_utf8))
# 1338 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define _generic_LC(c,utf8_locale_classnum,non_utf8_func) _generic_LC_base(c,utf8_locale_classnum, non_utf8_func( (_LC_CAST) (c)))





#define _generic_LC_underscore(c,utf8_locale_classnum,non_utf8_func) _generic_LC_base(c, utf8_locale_classnum, (non_utf8_func( (_LC_CAST) (c)) || (char)(c) == '_'))






#define _generic_toLOWER_LC(c,function,cast) (! FITS_IN_8_BITS(c) ? (c) : (IN_UTF8_CTYPE_LOCALE) ? PL_latin1_lc[ (U8) (c) ] : (cast)function((cast)(c)))
# 1362 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define _generic_toUPPER_LC(c,function,cast) (! FITS_IN_8_BITS(c) ? (c) : ((! IN_UTF8_CTYPE_LOCALE) ? (cast)function((cast)(c)) : ((((U8)(c)) == MICRO_SIGN) ? GREEK_CAPITAL_LETTER_MU : ((((U8)(c)) == LATIN_SMALL_LETTER_Y_WITH_DIAERESIS) ? LATIN_CAPITAL_LETTER_Y_WITH_DIAERESIS : ((((U8)(c)) == LATIN_SMALL_LETTER_SHARP_S) ? (__ASSERT_(0) (c)) : PL_mod_latin1_uc[ (U8) (c) ])))))
# 1380 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define _generic_toFOLD_LC(c,function,cast) ((UNLIKELY((c) == MICRO_SIGN) && IN_UTF8_CTYPE_LOCALE) ? GREEK_SMALL_LETTER_MU : (__ASSERT_(! IN_UTF8_CTYPE_LOCALE || (c) != LATIN_SMALL_LETTER_SHARP_S) _generic_toLOWER_LC(c, function, cast)))
# 1389 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define isASCII_LC(c) (FITS_IN_8_BITS(c) && isascii( (U8) (c)))





#define isBLANK_LC(c) _generic_LC(c, _CC_BLANK, isblank)




#define _LC_CAST U8
# 1435 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define isALPHA_LC(c) _generic_LC(c, _CC_ALPHA, isalpha)
#define isALPHANUMERIC_LC(c) _generic_LC(c, _CC_ALPHANUMERIC, isalnum)
#define isCNTRL_LC(c) _generic_LC(c, _CC_CNTRL, iscntrl)
#define isDIGIT_LC(c) _generic_LC(c, _CC_DIGIT, isdigit)
#define isGRAPH_LC(c) _generic_LC(c, _CC_GRAPH, isgraph)
#define isIDFIRST_LC(c) _generic_LC_underscore(c, _CC_IDFIRST, isalpha)
#define isLOWER_LC(c) _generic_LC(c, _CC_LOWER, islower)
#define isPRINT_LC(c) _generic_LC(c, _CC_PRINT, isprint)
#define isPUNCT_LC(c) _generic_LC(c, _CC_PUNCT, ispunct)
#define isSPACE_LC(c) _generic_LC(c, _CC_SPACE, isspace)
#define isUPPER_LC(c) _generic_LC(c, _CC_UPPER, isupper)
#define isWORDCHAR_LC(c) _generic_LC_underscore(c, _CC_WORDCHAR, isalnum)
#define isXDIGIT_LC(c) _generic_LC(c, _CC_XDIGIT, isxdigit)


#define toLOWER_LC(c) _generic_toLOWER_LC((c), tolower, U8)
#define toUPPER_LC(c) _generic_toUPPER_LC((c), toupper, U8)
#define toFOLD_LC(c) _generic_toFOLD_LC((c), tolower, U8)
# 1476 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define isIDCONT(c) isWORDCHAR(c)
#define isIDCONT_A(c) isWORDCHAR_A(c)
#define isIDCONT_L1(c) isWORDCHAR_L1(c)
#define isIDCONT_LC(c) isWORDCHAR_LC(c)
#define isPSXSPC_LC(c) isSPACE_LC(c)
# 1496 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define _generic_uni(classnum,above_latin1,c) ((c) < 256 ? _generic_isCC(c, classnum) : above_latin1(c))


#define _generic_swash_uni(classnum,c) ((c) < 256 ? _generic_isCC(c, classnum) : _is_uni_FOO(classnum, c))


#define isALPHA_uni(c) _generic_swash_uni(_CC_ALPHA, c)
#define isALPHANUMERIC_uni(c) _generic_swash_uni(_CC_ALPHANUMERIC, c)
#define isASCII_uni(c) isASCII(c)
#define isBLANK_uni(c) _generic_uni(_CC_BLANK, is_HORIZWS_cp_high, c)
#define isCNTRL_uni(c) isCNTRL_L1(c)
#define isDIGIT_uni(c) _generic_swash_uni(_CC_DIGIT, c)
#define isGRAPH_uni(c) _generic_swash_uni(_CC_GRAPH, c)
#define isIDCONT_uni(c) _generic_uni(_CC_WORDCHAR, _is_uni_perl_idcont, c)
#define isIDFIRST_uni(c) _generic_uni(_CC_IDFIRST, _is_uni_perl_idstart, c)
#define isLOWER_uni(c) _generic_swash_uni(_CC_LOWER, c)
#define isPRINT_uni(c) _generic_swash_uni(_CC_PRINT, c)

#define isPUNCT_uni(c) _generic_swash_uni(_CC_PUNCT, c)
#define isSPACE_uni(c) _generic_uni(_CC_SPACE, is_XPERLSPACE_cp_high, c)
#define isPSXSPC_uni(c) isSPACE_uni(c)

#define isUPPER_uni(c) _generic_swash_uni(_CC_UPPER, c)
#define isVERTWS_uni(c) _generic_uni(_CC_VERTSPACE, is_VERTWS_cp_high, c)
#define isWORDCHAR_uni(c) _generic_swash_uni(_CC_WORDCHAR, c)
#define isXDIGIT_uni(c) _generic_uni(_CC_XDIGIT, is_XDIGIT_cp_high, c)

#define toFOLD_uni(c,s,l) to_uni_fold(c,s,l)
#define toLOWER_uni(c,s,l) to_uni_lower(c,s,l)
#define toTITLE_uni(c,s,l) to_uni_title(c,s,l)
#define toUPPER_uni(c,s,l) to_uni_upper(c,s,l)






#define _generic_LC_uvchr(latin1,above_latin1,c) (c < 256 ? latin1(c) : above_latin1(c))

#define _generic_LC_swash_uvchr(latin1,classnum,c) (c < 256 ? latin1(c) : _is_uni_FOO(classnum, c))


#define isALPHA_LC_uvchr(c) _generic_LC_swash_uvchr(isALPHA_LC, _CC_ALPHA, c)
#define isALPHANUMERIC_LC_uvchr(c) _generic_LC_swash_uvchr(isALPHANUMERIC_LC, _CC_ALPHANUMERIC, c)

#define isASCII_LC_uvchr(c) isASCII_LC(c)
#define isBLANK_LC_uvchr(c) _generic_LC_uvchr(isBLANK_LC, is_HORIZWS_cp_high, c)
#define isCNTRL_LC_uvchr(c) (c < 256 ? isCNTRL_LC(c) : 0)
#define isDIGIT_LC_uvchr(c) _generic_LC_swash_uvchr(isDIGIT_LC, _CC_DIGIT, c)
#define isGRAPH_LC_uvchr(c) _generic_LC_swash_uvchr(isGRAPH_LC, _CC_GRAPH, c)
#define isIDCONT_LC_uvchr(c) _generic_LC_uvchr(isIDCONT_LC, _is_uni_perl_idcont, c)

#define isIDFIRST_LC_uvchr(c) _generic_LC_uvchr(isIDFIRST_LC, _is_uni_perl_idstart, c)

#define isLOWER_LC_uvchr(c) _generic_LC_swash_uvchr(isLOWER_LC, _CC_LOWER, c)
#define isPRINT_LC_uvchr(c) _generic_LC_swash_uvchr(isPRINT_LC, _CC_PRINT, c)
#define isPSXSPC_LC_uvchr(c) isSPACE_LC_uvchr(c)
#define isPUNCT_LC_uvchr(c) _generic_LC_swash_uvchr(isPUNCT_LC, _CC_PUNCT, c)
#define isSPACE_LC_uvchr(c) _generic_LC_uvchr(isSPACE_LC, is_XPERLSPACE_cp_high, c)

#define isUPPER_LC_uvchr(c) _generic_LC_swash_uvchr(isUPPER_LC, _CC_UPPER, c)
#define isWORDCHAR_LC_uvchr(c) _generic_LC_swash_uvchr(isWORDCHAR_LC, _CC_WORDCHAR, c)

#define isXDIGIT_LC_uvchr(c) _generic_LC_uvchr(isXDIGIT_LC, is_XDIGIT_cp_high, c)

#define isBLANK_LC_uni(c) isBLANK_LC_uvchr(UNI_TO_NATIVE(c))
# 1570 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define _generic_utf8(classnum,p,utf8) (UTF8_IS_INVARIANT(*(p)) ? _generic_isCC(*(p), classnum) : (UTF8_IS_DOWNGRADEABLE_START(*(p))) ? _generic_isCC( TWO_BYTE_UTF8_TO_NATIVE(*(p), *((p)+1 )), classnum) : utf8)
# 1580 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define _generic_func_utf8(classnum,above_latin1,p) _generic_utf8(classnum, p, above_latin1(p))



#define _generic_swash_utf8(classnum,p) _generic_utf8(classnum, p, _is_utf8_FOO(classnum, p))






#define _generic_utf8_no_upper_latin1(classnum,p,above_latin1) (UTF8_IS_INVARIANT(*(p)) ? _generic_isCC(*(p), classnum) : (UTF8_IS_ABOVE_LATIN1(*(p))) ? above_latin1 : 0)
# 1606 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define isALPHA_utf8(p) _generic_swash_utf8(_CC_ALPHA, p)
#define isALPHANUMERIC_utf8(p) _generic_swash_utf8(_CC_ALPHANUMERIC, p)
#define isASCII_utf8(p) isASCII(*p)


#define isBLANK_utf8(p) _generic_func_utf8(_CC_BLANK, is_HORIZWS_high, p)






#define isCNTRL_utf8(p) _generic_utf8(_CC_CNTRL, p, 0)


#define isDIGIT_utf8(p) _generic_utf8_no_upper_latin1(_CC_DIGIT, p, _is_utf8_FOO(_CC_DIGIT, p))

#define isGRAPH_utf8(p) _generic_swash_utf8(_CC_GRAPH, p)
#define isIDCONT_utf8(p) _generic_func_utf8(_CC_WORDCHAR, _is_utf8_perl_idcont, p)
# 1633 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define isIDFIRST_utf8(p) _generic_func_utf8(_CC_IDFIRST, _is_utf8_perl_idstart, p)


#define isLOWER_utf8(p) _generic_swash_utf8(_CC_LOWER, p)
#define isPRINT_utf8(p) _generic_swash_utf8(_CC_PRINT, p)
#define isPSXSPC_utf8(p) isSPACE_utf8(p)
#define isPUNCT_utf8(p) _generic_swash_utf8(_CC_PUNCT, p)
#define isSPACE_utf8(p) _generic_func_utf8(_CC_SPACE, is_XPERLSPACE_high, p)
#define isUPPER_utf8(p) _generic_swash_utf8(_CC_UPPER, p)
#define isVERTWS_utf8(p) _generic_func_utf8(_CC_VERTSPACE, is_VERTWS_high, p)
#define isWORDCHAR_utf8(p) _generic_swash_utf8(_CC_WORDCHAR, p)
#define isXDIGIT_utf8(p) _generic_utf8_no_upper_latin1(_CC_XDIGIT, p, is_XDIGIT_high(p))


#define toFOLD_utf8(p,s,l) to_utf8_fold(p,s,l)
#define toLOWER_utf8(p,s,l) to_utf8_lower(p,s,l)
#define toTITLE_utf8(p,s,l) to_utf8_title(p,s,l)
#define toUPPER_utf8(p,s,l) to_utf8_upper(p,s,l)





#define _generic_LC_utf8(macro,p,utf8) (UTF8_IS_INVARIANT(*(p)) ? macro(*(p)) : (UTF8_IS_DOWNGRADEABLE_START(*(p))) ? macro(TWO_BYTE_UTF8_TO_NATIVE(*(p), *((p)+1))) : utf8)






#define _generic_LC_swash_utf8(macro,classnum,p) _generic_LC_utf8(macro, p, _is_utf8_FOO(classnum, p))

#define _generic_LC_func_utf8(macro,above_latin1,p) _generic_LC_utf8(macro, p, above_latin1(p))


#define isALPHANUMERIC_LC_utf8(p) _generic_LC_swash_utf8(isALPHANUMERIC_LC, _CC_ALPHANUMERIC, p)

#define isALPHA_LC_utf8(p) _generic_LC_swash_utf8(isALPHA_LC, _CC_ALPHA, p)
#define isASCII_LC_utf8(p) isASCII_LC(*p)
#define isBLANK_LC_utf8(p) _generic_LC_func_utf8(isBLANK_LC, is_HORIZWS_high, p)
#define isCNTRL_LC_utf8(p) _generic_LC_utf8(isCNTRL_LC, p, 0)
#define isDIGIT_LC_utf8(p) _generic_LC_swash_utf8(isDIGIT_LC, _CC_DIGIT, p)
#define isGRAPH_LC_utf8(p) _generic_LC_swash_utf8(isGRAPH_LC, _CC_GRAPH, p)
#define isIDCONT_LC_utf8(p) _generic_LC_func_utf8(isIDCONT_LC, _is_utf8_perl_idcont, p)
#define isIDFIRST_LC_utf8(p) _generic_LC_func_utf8(isIDFIRST_LC, _is_utf8_perl_idstart, p)
#define isLOWER_LC_utf8(p) _generic_LC_swash_utf8(isLOWER_LC, _CC_LOWER, p)
#define isPRINT_LC_utf8(p) _generic_LC_swash_utf8(isPRINT_LC, _CC_PRINT, p)
#define isPSXSPC_LC_utf8(p) isSPACE_LC_utf8(p)
#define isPUNCT_LC_utf8(p) _generic_LC_swash_utf8(isPUNCT_LC, _CC_PUNCT, p)
#define isSPACE_LC_utf8(p) _generic_LC_func_utf8(isSPACE_LC, is_XPERLSPACE_high, p)
#define isUPPER_LC_utf8(p) _generic_LC_swash_utf8(isUPPER_LC, _CC_UPPER, p)
#define isWORDCHAR_LC_utf8(p) _generic_LC_swash_utf8(isWORDCHAR_LC, _CC_WORDCHAR, p)

#define isXDIGIT_LC_utf8(p) _generic_LC_func_utf8(isXDIGIT_LC, is_XDIGIT_high, p)



#define isALPHAU(c) isALPHA_L1(c)
#define isDIGIT_L1(c) isDIGIT_A(c)
#define isOCTAL(c) isOCTAL_A(c)
#define isOCTAL_L1(c) isOCTAL_A(c)
#define isXDIGIT_L1(c) isXDIGIT_A(c)
#define isALNUM(c) isWORDCHAR(c)
#define isALNUMU(c) isWORDCHAR_L1(c)
#define isALNUM_LC(c) isWORDCHAR_LC(c)
#define isALNUM_uni(c) isWORDCHAR_uni(c)
#define isALNUM_LC_uvchr(c) isWORDCHAR_LC_uvchr(c)
#define isALNUM_utf8(p) isWORDCHAR_utf8(p)
#define isALNUM_LC_utf8(p) isWORDCHAR_LC_utf8(p)
#define isALNUMC_A(c) isALPHANUMERIC_A(c)
#define isALNUMC_L1(c) isALPHANUMERIC_L1(c)
#define isALNUMC(c) isALPHANUMERIC(c)
#define isALNUMC_LC(c) isALPHANUMERIC_LC(c)
#define isALNUMC_uni(c) isALPHANUMERIC_uni(c)
#define isALNUMC_LC_uvchr(c) isALPHANUMERIC_LC_uvchr(c)
#define isALNUMC_utf8(p) isALPHANUMERIC_utf8(p)
#define isALNUMC_LC_utf8(p) isALPHANUMERIC_LC_utf8(p)
# 1721 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define toCTRL(c) (__ASSERT_(FITS_IN_8_BITS(c)) toUPPER(((U8)(c))) ^ 64)
# 1734 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
typedef U32 line_t;
#define NOLINE ((line_t) 4294967295UL)


#define is_LAX_VERSION(a,b) (a != Perl_prescan_version(aTHX_ a, FALSE, b, NULL, NULL, NULL, NULL))


#define is_STRICT_VERSION(a,b) (a != Perl_prescan_version(aTHX_ a, TRUE, b, NULL, NULL, NULL, NULL))


#define BADVERSION(a,b,c) if (b) { *b = c; } return a;
# 1755 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define XDIGIT_VALUE(c) (__ASSERT_(isXDIGIT(c)) (0xf & (isDIGIT(c) ? (c) : ((c) + 9))))


#define READ_XDIGIT(s) (__ASSERT_(isXDIGIT(*s)) (0xf & (isDIGIT(*(s)) ? (*(s)++) : (*(s)++ + 9))))






#define OCTAL_VALUE(c) (__ASSERT_(isOCTAL(c)) (7 & (c)))
# 1781 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define isALPHA_FOLD_EQ(c1,c2) (__ASSERT_(isALPHA_A(c1) || isALPHA_A(c2)) ((c1) & ~('A' ^ 'a')) == ((c2) & ~('A' ^ 'a')))


#define isALPHA_FOLD_NE(c1,c2) (! isALPHA_FOLD_EQ((c1), (c2)))
# 1884 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define NEWSV(x,len) newSV(len)


#define MEM_SIZE_MAX ((MEM_SIZE)~0)
# 1900 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define _MEM_WRAP_NEEDS_RUNTIME_CHECK(n,t) (sizeof(t) > ((MEM_SIZE)1 << 8*(sizeof(MEM_SIZE) - sizeof(n))))
# 1920 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define _MEM_WRAP_WILL_WRAP(n,t) ((_MEM_WRAP_NEEDS_RUNTIME_CHECK(n,t) ? (MEM_SIZE)(n) : MEM_SIZE_MAX/sizeof(t)) > MEM_SIZE_MAX/sizeof(t))



#define MEM_WRAP_CHECK(n,t) (void)(UNLIKELY(_MEM_WRAP_WILL_WRAP(n,t)) && (croak_memory_wrap(),0))



#define MEM_WRAP_CHECK_1(n,t,a) (void)(UNLIKELY(_MEM_WRAP_WILL_WRAP(n,t)) && (Perl_croak_nocontext("%s",(a)),0))



#define MEM_WRAP_CHECK_(n,t) MEM_WRAP_CHECK(n,t),

#define PERL_STRLEN_ROUNDUP(n) ((void)(((n) > MEM_SIZE_MAX - 2 * PERL_STRLEN_ROUNDUP_QUANTUM) ? (croak_memory_wrap(),0):0),((n-1+PERL_STRLEN_ROUNDUP_QUANTUM)&~((MEM_SIZE)PERL_STRLEN_ROUNDUP_QUANTUM-1)))
# 2010 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define MEM_LOG_ALLOC(n,t,a) (a)


#define MEM_LOG_REALLOC(n,t,v,a) (a)


#define MEM_LOG_FREE(a) (a)


#define Newx(v,n,t) (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
#define Newxc(v,n,t,c) (v = (MEM_WRAP_CHECK_(n,t) (c*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
#define Newxz(v,n,t) (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safecalloc((n),sizeof(t)))))



#define New(x,v,n,t) Newx(v,n,t)
#define Newc(x,v,n,t,c) Newxc(v,n,t,c)
#define Newz(x,v,n,t) Newxz(v,n,t)


#define Renew(v,n,t) (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))

#define Renewc(v,n,t,c) (v = (MEM_WRAP_CHECK_(n,t) (c*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))






#define Safefree(d) safefree(MEM_LOG_FREE((Malloc_t)(d)))


#define Move(s,d,n,t) (MEM_WRAP_CHECK_(n,t) (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
#define Copy(s,d,n,t) (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#define Zero(d,n,t) (MEM_WRAP_CHECK_(n,t) (void)memzero((char*)(d), (n) * sizeof(t)))

#define MoveD(s,d,n,t) (MEM_WRAP_CHECK_(n,t) memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
#define CopyD(s,d,n,t) (MEM_WRAP_CHECK_(n,t) memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))

#define ZeroD(d,n,t) (MEM_WRAP_CHECK_(n,t) memzero((char*)(d), (n) * sizeof(t)))





#define PoisonWith(d,n,t,b) (MEM_WRAP_CHECK_(n,t) (void)memset((char*)(d), (U8)(b), (n) * sizeof(t)))
#define PoisonNew(d,n,t) PoisonWith(d,n,t,0xAB)
#define PoisonFree(d,n,t) PoisonWith(d,n,t,0xEF)
#define Poison(d,n,t) PoisonFree(d,n,t)




#define PERL_POISON_EXPR(x) 



#define StructCopy(s,d,t) (*((t*)(d)) = *((t*)(s)))
# 2077 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define C_ARRAY_LENGTH(a) (sizeof(a)/sizeof((a)[0]))
#define C_ARRAY_END(a) ((a) + C_ARRAY_LENGTH(a))
# 2094 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/handy.h"
#define pTHX_FORMAT "Perl interpreter: 0x%p"
#define pTHX__FORMAT ", Perl interpreter: 0x%p"
#define pTHX_VALUE_ (void *)my_perl,
#define pTHX_VALUE (void *)my_perl
#define pTHX__VALUE_ ,(void *)my_perl,
#define pTHX__VALUE ,(void *)my_perl
# 2691 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/charclass_invlists.h" 1
# 2692 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2



#define USE_64_BIT_RAWIO 
# 2704 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define FSEEKSIZE LSEEKSIZE







#define USE_64_BIT_STDIO 
# 2818 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/unixish.h" 1
# 24 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/unixish.h"
#define HAS_IOCTL 





#define HAS_UTIME 






#define HAS_GROUP 






#define HAS_PASSWD 

#define HAS_KILL 
#define HAS_WAIT 
# 57 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/unixish.h"
#undef USEMYBINMODE







#define Stat_t struct stat





#define USE_STAT_RDEV 






#undef ACME_MESS
# 114 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/unixish.h"
#define ABORT() kill(PerlProc_getpid(),SIGABRT);







#define fwrite1 fwrite

#define Stat(fname,bufptr) stat((fname),(bufptr))
#define Fstat(fd,bufptr) fstat((fd),(bufptr))
#define Fflush(fp) fflush(fp)
#define Mkdir(path,mode) mkdir((path),(mode))


#define PERL_SYS_INIT_BODY(c,v) MALLOC_CHECK_TAINT2(*c,*v) PERL_FPU_INIT; PERLIO_INIT; MALLOC_INIT




#define PERL_SYS_TERM_BODY() HINTS_REFCNT_TERM; OP_CHECK_MUTEX_TERM; OP_REFCNT_TERM; PERLIO_TERM; MALLOC_TERM;





#define BIT_BUCKET "/dev/null"

#define dXSUB_SYS 


#define USE_ENVIRON_ARRAY 
# 2819 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 2880 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define USE_ENVIRON_ARRAY 
# 2898 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_FPU_INIT PL_sigfpe_saved = (Sighandler_t) signal(SIGFPE, SIG_IGN)
#define PERL_FPU_PRE_EXEC { Sigsave_t xfpe; rsignal_save(SIGFPE, PL_sigfpe_saved, &xfpe);
#define PERL_FPU_POST_EXEC rsignal_restore(SIGFPE, &xfpe); }
# 2946 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_SYS_FPU_INIT NOOP



#define PERL_SYS_INIT3_BODY(argvp,argcp,envp) PERL_SYS_INIT_BODY(argvp,argcp)
# 2974 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_SYS_INIT(argc,argv) Perl_sys_init(argc, argv)
#define PERL_SYS_INIT3(argc,argv,env) Perl_sys_init3(argc, argv, env)
#define PERL_SYS_TERM() Perl_sys_term()


#define PERL_WRITE_MSG_TO_CONSOLE(io,msg,len) PerlIO_write(io, msg, len)
# 3020 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define HASATTRIBUTE_DEPRECATED 


#define HASATTRIBUTE_FORMAT 





#define HASATTRIBUTE_MALLOC 


#define HASATTRIBUTE_NONNULL 


#define HASATTRIBUTE_NORETURN 


#define HASATTRIBUTE_PURE 


#define HASATTRIBUTE_UNUSED 





#define HASATTRIBUTE_WARN_UNUSED_RESULT 
# 3076 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/usr/include/pthread.h" 1 3 4
# 53 "/usr/include/pthread.h" 3 4
#define _POSIX_PTHREAD_H 



# 1 "/usr/include/pthread_impl.h" 1 3 4
# 25 "/usr/include/pthread_impl.h" 3 4
#define _PTHREAD_IMPL_H_ 
# 37 "/usr/include/pthread_impl.h" 3 4
#define _PTHREAD_MUTEX_SIG_init 0x32AAABA7
#define _PTHREAD_COND_SIG_init 0x3CB0B1BB
#define _PTHREAD_ONCE_SIG_init 0x30B1BCBA



#define SCHED_OTHER 1
#define SCHED_FIFO 4
#define SCHED_RR 2

#define __SCHED_PARAM_SIZE__ 4
# 58 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/sched.h" 1 3 4
# 25 "/usr/include/sched.h" 3 4
#define _SCHED_H_ 









struct sched_param { int sched_priority; char opaque[4]; };


extern int sched_yield(void);
extern int sched_get_priority_min(int);
extern int sched_get_priority_max(int);

# 60 "/usr/include/pthread.h" 2 3 4
# 115 "/usr/include/pthread.h" 3 4
#define _MACH_PORT_T 
typedef __darwin_mach_port_t mach_port_t;
# 148 "/usr/include/pthread.h" 3 4

# 159 "/usr/include/pthread.h" 3 4
#define pthread_cleanup_push(func,val) { struct __darwin_pthread_handler_rec __handler; pthread_t __self = pthread_self(); __handler.__routine = func; __handler.__arg = val; __handler.__next = __self->__cleanup_stack; __self->__cleanup_stack = &__handler;
# 168 "/usr/include/pthread.h" 3 4
#define pthread_cleanup_pop(execute) __self->__cleanup_stack = __handler.__next; if (execute) (__handler.__routine)(__handler.__arg); }
# 178 "/usr/include/pthread.h" 3 4
#define PTHREAD_CREATE_JOINABLE 1
#define PTHREAD_CREATE_DETACHED 2

#define PTHREAD_INHERIT_SCHED 1
#define PTHREAD_EXPLICIT_SCHED 2

#define PTHREAD_CANCEL_ENABLE 0x01
#define PTHREAD_CANCEL_DISABLE 0x00
#define PTHREAD_CANCEL_DEFERRED 0x02
#define PTHREAD_CANCEL_ASYNCHRONOUS 0x00


#define PTHREAD_CANCELED ((void *) 1)


#define PTHREAD_SCOPE_SYSTEM 1
#define PTHREAD_SCOPE_PROCESS 2


#define PTHREAD_PROCESS_SHARED 1
#define PTHREAD_PROCESS_PRIVATE 2




#define PTHREAD_PRIO_NONE 0
#define PTHREAD_PRIO_INHERIT 1
#define PTHREAD_PRIO_PROTECT 2




#define PTHREAD_MUTEX_NORMAL 0
#define PTHREAD_MUTEX_ERRORCHECK 1
#define PTHREAD_MUTEX_RECURSIVE 2
#define PTHREAD_MUTEX_DEFAULT PTHREAD_MUTEX_NORMAL




#define PTHREAD_MUTEX_INITIALIZER {_PTHREAD_MUTEX_SIG_init, {0}}
# 228 "/usr/include/pthread.h" 3 4
#define PTHREAD_COND_INITIALIZER {_PTHREAD_COND_SIG_init, {0}}





#define PTHREAD_ONCE_INIT {_PTHREAD_ONCE_SIG_init, {0}}




int pthread_atfork(void (*prepare)(void), void (*parent)(void),
                      void (*child)(void));
int pthread_attr_destroy(pthread_attr_t *attr);
int pthread_attr_getdetachstate(const pthread_attr_t *attr,
          int *detachstate);
int pthread_attr_getguardsize(const pthread_attr_t *attr,
                                      size_t *guardsize);
int pthread_attr_getinheritsched(const pthread_attr_t *attr,
           int *inheritsched);
int pthread_attr_getschedparam(const pthread_attr_t *attr,
                                     struct sched_param *param);
int pthread_attr_getschedpolicy(const pthread_attr_t *attr,
          int *policy);
int pthread_attr_getscope(pthread_attr_t *, int *);
int pthread_attr_getstack(const pthread_attr_t *attr,
                                      void **stackaddr, size_t *stacksize);
int pthread_attr_getstackaddr(const pthread_attr_t *attr,
                                      void **stackaddr);
int pthread_attr_getstacksize(const pthread_attr_t *attr,
                                      size_t *stacksize);
int pthread_attr_init(pthread_attr_t *attr);
int pthread_attr_setdetachstate(pthread_attr_t *attr,
          int detachstate);
int pthread_attr_setguardsize(pthread_attr_t *attr, size_t guardsize);
int pthread_attr_setinheritsched(pthread_attr_t *attr,
           int inheritsched);
int pthread_attr_setschedparam(pthread_attr_t *attr,
                                     const struct sched_param *param);
int pthread_attr_setschedpolicy(pthread_attr_t *attr,
          int policy);
int pthread_attr_setscope(pthread_attr_t *, int);
int pthread_attr_setstack(pthread_attr_t *attr,
                                      void *stackaddr, size_t stacksize);
int pthread_attr_setstackaddr(pthread_attr_t *attr,
                                      void *stackaddr);
int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);
int pthread_cancel(pthread_t thread) ;

int pthread_cond_broadcast(pthread_cond_t *cond);
int pthread_cond_destroy(pthread_cond_t *cond);
int pthread_cond_init(pthread_cond_t *cond,
                            const pthread_condattr_t *attr);
int pthread_cond_signal(pthread_cond_t *cond);
int pthread_cond_timedwait(pthread_cond_t *cond,
     pthread_mutex_t *mutex,
     const struct timespec *abstime) ;
int pthread_cond_wait(pthread_cond_t *cond,
       pthread_mutex_t *mutex) ;
int pthread_condattr_destroy(pthread_condattr_t *attr);
int pthread_condattr_getpshared(const pthread_condattr_t *attr,
   int *pshared);
int pthread_condattr_init(pthread_condattr_t *attr);
int pthread_condattr_setpshared(pthread_condattr_t *attr,
   int pshared);
int pthread_create(pthread_t *thread,
                         const pthread_attr_t *attr,
                         void *(*start_routine)(void *),
                         void *arg);
int pthread_detach(pthread_t thread);
int pthread_equal(pthread_t t1,
   pthread_t t2);
void pthread_exit(void *value_ptr) __attribute__((__noreturn__));
int pthread_getconcurrency(void);
int pthread_getschedparam(pthread_t thread,
    int *policy,
                                struct sched_param *param);
void *pthread_getspecific(pthread_key_t key);
int pthread_join(pthread_t thread,
         void **value_ptr) ;
int pthread_key_create(pthread_key_t *key,
        void (*destructor)(void *));
int pthread_key_delete(pthread_key_t key);
int pthread_mutex_destroy(pthread_mutex_t *mutex);
int pthread_mutex_getprioceiling(const pthread_mutex_t *mutex,
                                       int *prioceiling);
int pthread_mutex_init(pthread_mutex_t *mutex,
        const pthread_mutexattr_t *attr);
int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_setprioceiling(pthread_mutex_t *mutex,
                                       int prioceiling,
                                       int *old_prioceiling);
int pthread_mutex_trylock(pthread_mutex_t *mutex);
int pthread_mutex_unlock(pthread_mutex_t *mutex);
int pthread_mutexattr_destroy(pthread_mutexattr_t *attr);
int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *attr,
                                           int *prioceiling);
int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *attr,
                                        int *protocol);
int pthread_mutexattr_getpshared(const pthread_mutexattr_t *attr,
                                        int *pshared);
int pthread_mutexattr_gettype(const pthread_mutexattr_t *attr,
                                        int *type);
int pthread_mutexattr_init(pthread_mutexattr_t *attr);
int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *attr,
                                           int prioceiling);
int pthread_mutexattr_setprotocol(pthread_mutexattr_t *attr,
                                        int protocol);
int pthread_mutexattr_setpshared(pthread_mutexattr_t *attr,
                                        int pshared);
int pthread_mutexattr_settype(pthread_mutexattr_t *attr,
                                        int type);
int pthread_once(pthread_once_t *once_control,
         void (*init_routine)(void));
int pthread_rwlock_destroy(pthread_rwlock_t * rwlock);
int pthread_rwlock_init(pthread_rwlock_t * rwlock,
        const pthread_rwlockattr_t *attr);
int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
int pthread_rwlockattr_destroy(pthread_rwlockattr_t *attr);
int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *attr,
   int *pshared);
int pthread_rwlockattr_init(pthread_rwlockattr_t *attr);
int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *attr,
   int pshared);
pthread_t pthread_self(void);

int pthread_setcancelstate(int state, int *oldstate) ;
int pthread_setcanceltype(int type, int *oldtype) ;
int pthread_setconcurrency(int);
int pthread_setschedparam(pthread_t thread,
    int policy,
                                const struct sched_param *param);
int pthread_setspecific(pthread_key_t key,
         const void *value);
void pthread_testcancel(void) ;



int pthread_is_threaded_np(void);


int pthread_main_np(void);


mach_port_t pthread_mach_thread_np(pthread_t);
size_t pthread_get_stacksize_np(pthread_t);
void * pthread_get_stackaddr_np(pthread_t);


int pthread_cond_signal_thread_np(pthread_cond_t *, pthread_t);


int pthread_cond_timedwait_relative_np(pthread_cond_t *cond,
     pthread_mutex_t *mutex,
     const struct timespec *reltime);


int pthread_create_suspended_np(pthread_t *thread,
                         const pthread_attr_t *attr,
                         void *(*start_routine)(void *),
                         void *arg);
int pthread_kill(pthread_t, int);
int pthread_sigmask(int, const sigset_t *, sigset_t *);
void pthread_yield_np(void);


# 3077 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2

typedef pthread_t perl_os_thread;
typedef pthread_mutex_t perl_mutex;
typedef pthread_cond_t perl_cond;
typedef pthread_key_t perl_key;
# 3096 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define STATUS_UNIX PL_statusvalue
# 3283 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define STATUS_NATIVE PL_statusvalue_posix

#define STATUS_NATIVE_CHILD_SET(n) STMT_START { PL_statusvalue_posix = (n); if (PL_statusvalue_posix == -1) PL_statusvalue = -1; else { PL_statusvalue = (WIFEXITED(PL_statusvalue_posix) ? (WEXITSTATUS(PL_statusvalue_posix) << 8) : 0) | (WIFSIGNALED(PL_statusvalue_posix) ? (WTERMSIG(PL_statusvalue_posix) & 0x7F) : 0) | (WIFSIGNALED(PL_statusvalue_posix) && WCOREDUMP(PL_statusvalue_posix) ? 0x80 : 0); } } STMT_END
# 3321 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define STATUS_UNIX_SET(n) STMT_START { PL_statusvalue = (n); if (PL_statusvalue != -1) PL_statusvalue &= 0xFFFF; } STMT_END





#define STATUS_UNIX_EXIT_SET(n) STATUS_UNIX_SET(n)
#define STATUS_EXIT_SET(n) STATUS_UNIX_SET(n)
#define STATUS_CURRENT STATUS_UNIX
#define STATUS_EXIT STATUS_UNIX
#define STATUS_ALL_SUCCESS (PL_statusvalue = 0, PL_statusvalue_posix = 0)
#define STATUS_ALL_FAILURE (PL_statusvalue = 1, PL_statusvalue_posix = 1)



#define PERL_EXIT_EXPECTED 0x01
#define PERL_EXIT_DESTRUCT_END 0x02
#define PERL_EXIT_WARN 0x04
#define PERL_EXIT_ABORT 0x08







#define PERL_FS_VER_FMT "%d.%d.%d"




#define PERL_FS_VERSION PERL_VERSION_STRING
# 3362 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_FLUSHALL_FOR_CHILD PerlIO_flush((PerlIO*)NULL)
# 3373 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_WAIT_FOR_CHILDREN NOOP




#define PERL_SET_INTERP(i) (PL_curinterp = (PerlInterpreter*)(i))



#define PERL_GET_INTERP (PL_curinterp)




#define PERL_GET_THX ((PerlInterpreter *)PERL_GET_CONTEXT)

#define PERL_SET_THX(t) PERL_SET_CONTEXT(t)
# 3405 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define SVf_(n) "-" STRINGIFY(n) "p"



#define SVf "-p"



#define SVf32 SVf_(32)



#define SVf256 SVf_(256)


#define SVfARG(p) ((void*)(p))


#define HEKf "2p"





#define HEKf256 "3p"


#define HEKfARG(p) ((void*)(p))



#define UTF8f "d%" UVuf "%4p"

#define UTF8fARG(u,l,p) (int)cBOOL(u), (UV)(l), (void*)(p)

#define PNf UTF8f
#define PNfARG(pn) (int)1, (UV)PadnameLEN(pn), (void *)PadnamePV(pn)






#define UVf UVuf




#define __attribute__deprecated__ __attribute__((deprecated))


#define __attribute__format__(x,y,z) __attribute__((format(x,y,z)))


#define __attribute__malloc__ __attribute__((__malloc__))


#define __attribute__nonnull__(a) __attribute__((nonnull(a)))


#define __attribute__noreturn__ __attribute__((noreturn))


#define __attribute__pure__ __attribute__((pure))


#define __attribute__unused__ __attribute__((unused))


#define __attribute__warn_unused_result__ __attribute__((warn_unused_result))
# 3505 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define NDEBUG 1

# 1 "/usr/include/assert.h" 1 3 4
# 52 "/usr/include/assert.h" 3 4
#undef assert
#undef __assert


#define assert(e) ((void)0)
# 3508 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2






#define NORETURN_FUNCTION_END NOT_REACHED;






#define __attribute__format__null_ok__(x,y,z) __attribute__format__(x,y,z)





#define EXPECT(expr,val) __builtin_expect(expr,val)



#define LIKELY(cond) EXPECT(cBOOL(cond),TRUE)
#define UNLIKELY(cond) EXPECT(cBOOL(cond),FALSE)
# 3560 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define STATIC_ASSERT_2(COND,SUFFIX) typedef struct { unsigned int _static_assertion_failed_ ##SUFFIX : (COND) ? 1 : -1; } _static_assertion_failed_ ##SUFFIX PERL_UNUSED_DECL



#define STATIC_ASSERT_1(COND,SUFFIX) STATIC_ASSERT_2(COND, SUFFIX)
#define STATIC_ASSERT_GLOBAL(COND) STATIC_ASSERT_1(COND, __LINE__)




#define STATIC_ASSERT_STMT(COND) do { STATIC_ASSERT_GLOBAL(COND); } while (0)


#define __has_builtin(x) 0
# 3596 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define ASSUME(x) assert(x)





#define NOT_REACHED ASSUME(0)






#define Pause pause
# 3649 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
union any {
    void* any_ptr;
    I32 any_i32;
    U32 any_u32;
    IV any_iv;
    UV any_uv;
    long any_long;
    _Bool any_bool;
    void (*any_dptr) (void*);
    void (*any_dxptr) (PerlInterpreter* my_perl __attribute__((unused)), void*);
};


typedef I32 (*filter_t) (PerlInterpreter* my_perl __attribute__((unused)), int, SV *, int);

#define FILTER_READ(idx,sv,len) filter_read(idx, sv, len)
#define FILTER_DATA(idx) (PL_parser ? AvARRAY(PL_parser->rsfp_filters)[idx] : NULL)

#define FILTER_ISREADER(idx) (PL_parser && PL_parser->rsfp_filters && idx >= AvFILLp(PL_parser->rsfp_filters))


#define PERL_FILTER_EXISTS(i) (PL_parser && PL_parser->rsfp_filters && (i) <= av_tindex(PL_parser->rsfp_filters))
# 3691 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/iperlsys.h" 1
# 14 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/iperlsys.h"
#define __Inc__IPerl___ 
# 51 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/iperlsys.h"
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlio.h" 1
# 12 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlio.h"
#define _PERLIO_H 
# 59 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlio.h"
# 1 "/usr/include/stdio.h" 1 3 4
# 62 "/usr/include/stdio.h" 3 4
#define _STDIO_H_ 
# 84 "/usr/include/stdio.h" 3 4
typedef __darwin_off_t fpos_t;




#define _FSTDIO 
# 98 "/usr/include/stdio.h" 3 4
struct __sbuf {
 unsigned char *_base;
 int _size;
};


struct __sFILEX;
# 132 "/usr/include/stdio.h" 3 4
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;
 short _flags;
 short _file;
 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (*_close)(void *);
 int (*_read) (void *, char *, int);
 fpos_t (*_seek) (void *, fpos_t, int);
 int (*_write)(void *, const char *, int);


 struct __sbuf _ub;
 struct __sFILEX *_extra;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;







extern FILE __sF[];



#define __SLBF 0x0001
#define __SNBF 0x0002
#define __SRD 0x0004
#define __SWR 0x0008

#define __SRW 0x0010
#define __SEOF 0x0020
#define __SERR 0x0040
#define __SMBF 0x0080
#define __SAPP 0x0100
#define __SSTR 0x0200
#define __SOPT 0x0400
#define __SNPT 0x0800
#define __SOFF 0x1000
#define __SMOD 0x2000
#define __SALC 0x4000
#define __SIGN 0x8000
# 202 "/usr/include/stdio.h" 3 4
#define _IOFBF 0
#define _IOLBF 1
#define _IONBF 2

#define BUFSIZ 1024
#define EOF (-1)







#define FOPEN_MAX 20
#define FILENAME_MAX 1024



#define P_tmpdir "/var/tmp/"

#define L_tmpnam 1024
#define TMP_MAX 308915776
# 240 "/usr/include/stdio.h" 3 4
#define stdin (&__sF[0])
#define stdout (&__sF[1])
#define stderr (&__sF[2])






void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE * , fpos_t *);
char *fgets(char * , int, FILE *);
FILE *fopen(const char * , const char * );
int fprintf(FILE * , const char * , ...) __asm("_" "fprintf" "$LDBL128");
int fputc(int, FILE *);
int fputs(const char * , FILE * );
size_t fread(void * , size_t, size_t, FILE * );
FILE *freopen(const char * , const char * ,
     FILE * ) ;
int fscanf(FILE * , const char * , ...) __asm("_" "fscanf" "$LDBL128");
int fseek(FILE *, long, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
size_t fwrite(const void * , size_t, size_t, FILE * ) ;
int getc(FILE *);
int getchar(void);
char *gets(char *);

extern const int sys_nerr;
extern const char *const sys_errlist[];

void perror(const char *);
int printf(const char * , ...) __asm("_" "printf" "$LDBL128");
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
int rename (const char *, const char *);
void rewind(FILE *);
int scanf(const char * , ...) __asm("_" "scanf" "$LDBL128");
void setbuf(FILE * , char * );
int setvbuf(FILE * , char * , int, size_t);
int sprintf(char * , const char * , ...) __asm("_" "sprintf" "$LDBL128");
int sscanf(const char * , const char * , ...) __asm("_" "sscanf" "$LDBL128");
FILE *tmpfile(void);
char *tmpnam(char *);
int ungetc(int, FILE *);
int vfprintf(FILE * , const char * , va_list) __asm("_" "vfprintf" "$LDBL128");
int vprintf(const char * , va_list) __asm("_" "vprintf" "$LDBL128");
int vsprintf(char * , const char * , va_list) __asm("_" "vsprintf" "$LDBL128");

int asprintf(char **, const char *, ...) __asm("_" "asprintf" "$LDBL128");
int vasprintf(char **, const char *, va_list) __asm("_" "vasprintf" "$LDBL128");







#define L_cuserid 9
#define L_ctermid 1024


char *ctermid(char *);

char *ctermid_r(char *);

FILE *fdopen(int, const char *);

char *fgetln(FILE *, size_t *);

int fileno(FILE *);
void flockfile(FILE *);

const char
 *fmtcheck(const char *, const char *);
int fpurge(FILE *);

int fseeko(FILE *, fpos_t, int);
fpos_t ftello(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);

int getw(FILE *);

int pclose(FILE *);
FILE *popen(const char *, const char *);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);

int putw(int, FILE *);
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);

int snprintf(char * , size_t, const char * , ...) __asm("_" "snprintf" "$LDBL128");
char *tempnam(const char *, const char *);
int vfscanf(FILE * , const char * , va_list) __asm("_" "vfscanf" "$LDBL128");
int vscanf(const char * , va_list) __asm("_" "vscanf" "$LDBL128");
int vsnprintf(char * , size_t, const char * , va_list) __asm("_" "vsnprintf" "$LDBL128");
int vsscanf(const char * , const char * , va_list) __asm("_" "vsscanf" "$LDBL128");

FILE *zopen(const char *, const char *, int);








FILE *funopen(const void *,
  int (*)(void *, char *, int),
  int (*)(void *, const char *, int),
  fpos_t (*)(void *, fpos_t, int),
  int (*)(void *));

#define fropen(cookie,fn) funopen(cookie, fn, 0, 0, 0)
#define fwopen(cookie,fn) funopen(cookie, 0, fn, 0, 0)







int __srget(FILE *);
int __svfscanf(FILE *, const char *, va_list) __asm("_" "__svfscanf" "$LDBL128");
int __swbuf(int, FILE *);






#define __sgetc(p) (--(p)->_r < 0 ? __srget(p) : (int)(*(p)->_p++))

static __inline int __sputc(int _c, FILE *_p) {
 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf(_c, _p));
}
# 404 "/usr/include/stdio.h" 3 4
#define __sfeof(p) (((p)->_flags & __SEOF) != 0)
#define __sferror(p) (((p)->_flags & __SERR) != 0)
#define __sclearerr(p) ((void)((p)->_flags &= ~(__SERR|__SEOF)))
#define __sfileno(p) ((p)->_file)



#define feof_unlocked(p) __sfeof(p)
#define ferror_unlocked(p) __sferror(p)
#define clearerr_unlocked(p) __sclearerr(p)
#define fileno_unlocked(p) __sfileno(p)



#define getc_unlocked(fp) __sgetc(fp)
#define putc_unlocked(x,fp) __sputc(x, fp)


#define getchar_unlocked() getc_unlocked(stdin)
#define putchar_unlocked(x) putc_unlocked(x, stdout)
# 60 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlio.h" 2


#define ftell ftello



#define fseek fseeko
# 83 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlio.h"
typedef struct _PerlIO PerlIOl;
typedef struct _PerlIO_funcs PerlIO_funcs;
typedef PerlIOl *PerlIO;
#define PerlIO PerlIO
#define PERLIO_LAYERS 1




#define PERLIO_FUNCS_DECL(funcs) const PerlIO_funcs funcs
#define PERLIO_FUNCS_CAST(funcs) (PerlIO_funcs*)(funcs)





extern void PerlIO_define_layer(PerlInterpreter* my_perl __attribute__((unused)), PerlIO_funcs *tab);
extern PerlIO_funcs *PerlIO_find_layer(PerlInterpreter* my_perl __attribute__((unused)), const char *name,
                                              STRLEN len,
                  int load);
extern PerlIO *PerlIO_push(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, const PerlIO_funcs *tab,
             const char *mode, SV *arg);
extern void PerlIO_pop(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
extern AV* PerlIO_get_layers(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
extern void PerlIO_clone(PerlInterpreter* my_perl __attribute__((unused)), PerlInterpreter *proto,
                                CLONE_PARAMS *param);
# 133 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlio.h"
#define PERLIO_NOT_STDIO 0
# 176 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlio.h"
#define PERLIOBUF_DEFAULT_BUFSIZ (BUFSIZ > 8192 ? BUFSIZ : 8192)
# 191 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlio.h"
#define PERLIO_DUP_CLONE 1
#define PERLIO_DUP_FD 2




# 205 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlio.h"
extern void PerlIO_init(PerlInterpreter* my_perl __attribute__((unused)));


extern int PerlIO_stdoutf(const char *, ...)
    __attribute__((format(__printf__,1,2)));


extern int PerlIO_puts(PerlIO *, const char *);


extern PerlIO *PerlIO_open(const char *, const char *);


extern PerlIO *PerlIO_openn(PerlInterpreter* my_perl __attribute__((unused)), const char *layers, const char *mode,
       int fd, int imode, int perm, PerlIO *old,
       int narg, SV **arg);


extern int PerlIO_eof(PerlIO *);


extern int PerlIO_error(PerlIO *);


extern void PerlIO_clearerr(PerlIO *);


extern int PerlIO_getc(PerlIO *);


extern int PerlIO_putc(PerlIO *, int);


extern int PerlIO_ungetc(PerlIO *, int);


extern PerlIO *PerlIO_fdopen(int, const char *);


extern PerlIO *PerlIO_importFILE(FILE *, const char *);


extern FILE *PerlIO_exportFILE(PerlIO *, const char *);


extern FILE *PerlIO_findFILE(PerlIO *);


extern void PerlIO_releaseFILE(PerlIO *, FILE *);


extern ssize_t PerlIO_read(PerlIO *, void *, size_t);


extern ssize_t PerlIO_unread(PerlIO *, const void *, size_t);


extern ssize_t PerlIO_write(PerlIO *, const void *, size_t);


extern void PerlIO_setlinebuf(PerlIO *);


extern int PerlIO_printf(PerlIO *, const char *, ...)
    __attribute__((format(__printf__,2,3)));


extern int PerlIO_vprintf(PerlIO *, const char *, va_list);


extern off_t PerlIO_tell(PerlIO *);


extern int PerlIO_seek(PerlIO *, off_t, int);


extern void PerlIO_rewind(PerlIO *);


extern int PerlIO_has_base(PerlIO *);


extern int PerlIO_has_cntptr(PerlIO *);


extern int PerlIO_fast_gets(PerlIO *);


extern int PerlIO_canset_cnt(PerlIO *);


extern char *PerlIO_get_ptr(PerlIO *);


extern ssize_t PerlIO_get_cnt(PerlIO *);


extern void PerlIO_set_cnt(PerlIO *, ssize_t);


extern void PerlIO_set_ptrcnt(PerlIO *, char *, ssize_t);


extern char *PerlIO_get_base(PerlIO *);


extern ssize_t PerlIO_get_bufsiz(PerlIO *);


extern PerlIO *PerlIO_tmpfile(void);


extern PerlIO *PerlIO_stdin(void);


extern PerlIO *PerlIO_stdout(void);


extern PerlIO *PerlIO_stderr(void);


extern int PerlIO_getpos(PerlIO *, SV *);


extern int PerlIO_setpos(PerlIO *, SV *);


extern PerlIO *PerlIO_fdupopen(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *, CLONE_PARAMS *, int);


extern char *PerlIO_modestr(PerlIO *, char *buf);


extern int PerlIO_isutf8(PerlIO *);


extern int PerlIO_apply_layers(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, const char *mode,
          const char *names);


extern int PerlIO_binmode(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, int iotype, int omode,
       const char *names);


extern char *PerlIO_getname(PerlIO *, char *);


extern void PerlIO_destruct(PerlInterpreter* my_perl __attribute__((unused)));

extern int PerlIO_intmode2str(int rawmode, char *mode, int *writing);


extern void PerlIO_cleanup(PerlInterpreter* my_perl __attribute__((unused)));

extern void PerlIO_debug(const char *fmt, ...)
    __attribute__((format(__printf__,1,2)));
typedef struct PerlIO_list_s PerlIO_list_t;





# 52 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/iperlsys.h" 2



typedef void (*Sighandler_t) (int, siginfo_t*, void*);
# 284 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/iperlsys.h"
#define PerlSIO_stdin stdin
#define PerlSIO_stdout stdout
#define PerlSIO_stderr stderr
#define PerlSIO_fopen(x,y) fopen(x,y)






#define PerlSIO_fclose(f) fclose(f)
#define PerlSIO_feof(f) feof(f)
#define PerlSIO_ferror(f) ferror(f)

#define PerlSIO_clearerr(f) clearerr(f)
#define PerlSIO_fgetc(f) fgetc(f)

#define PerlSIO_get_base(f) FILE_base(f)
#define PerlSIO_get_bufsiz(f) FILE_bufsiz(f)





#define PerlSIO_get_cnt(f) FILE_cnt(f)
#define PerlSIO_get_ptr(f) FILE_ptr(f)




#define PerlSIO_fputc(c,f) fputc(c,f)
#define PerlSIO_fputs(s,f) fputs(s,f)
#define PerlSIO_fflush(f) Fflush(f)
#define PerlSIO_fgets(s,n,f) fgets(s,n,f)
# 329 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/iperlsys.h"
#define PerlSIO_ungetc(c,f) ungetc(c,f)

#define PerlSIO_fileno(f) fileno(f)
#define PerlSIO_fdopen(f,s) fdopen(f,s)
#define PerlSIO_freopen(p,m,f) freopen(p,m,f)
#define PerlSIO_fread(buf,sz,count,f) fread(buf,sz,count,f)
#define PerlSIO_fwrite(buf,sz,count,f) fwrite(buf,sz,count,f)
#define PerlSIO_setbuf(f,b) setbuf(f,b)
#define PerlSIO_setvbuf(f,b,t,s) setvbuf(f,b,t,s)

#define PerlSIO_set_cnt(f,c) FILE_cnt(f) = (c)




#define PerlSIO_set_ptr(f,p) (FILE_ptr(f) = (p))



#define PerlSIO_setlinebuf(f) setlinebuf(f)
#define PerlSIO_printf fprintf
#define PerlSIO_stdoutf printf
#define PerlSIO_vprintf(f,fmt,a) vfprintf(f,fmt,a)
#define PerlSIO_ftell(f) ftell(f)
#define PerlSIO_fseek(f,o,w) fseek(f,o,w)
#define PerlSIO_fgetpos(f,p) fgetpos(f,p)
#define PerlSIO_fsetpos(f,p) fsetpos(f,p)
#define PerlSIO_rewind(f) rewind(f)
#define PerlSIO_tmpfile() tmpfile()
#define PerlSIO_fdupopen(f) (f)
# 435 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/iperlsys.h"
#define PerlDir_mkdir(name,mode) Mkdir((name), (mode))



#define PerlDir_chdir(name) chdir((name))

#define PerlDir_rmdir(name) rmdir((name))
#define PerlDir_close(dir) closedir((dir))
#define PerlDir_open(name) opendir((name))
#define PerlDir_read(dir) readdir((dir))
#define PerlDir_rewind(dir) rewinddir((dir))
#define PerlDir_seek(dir,loc) seekdir((dir), (loc))
#define PerlDir_tell(dir) telldir((dir))
# 564 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/iperlsys.h"
#define PerlEnv_putenv(str) putenv((str))
#define PerlEnv_getenv(str) getenv((str))
#define PerlEnv_getenv_len(str,l) getenv_len((str), (l))




#define PerlEnv_ENVgetenv(str) PerlEnv_getenv((str))
#define PerlEnv_ENVgetenv_len(str,l) PerlEnv_getenv_len((str), (l))

#define PerlEnv_uname(name) uname((name))
# 588 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/iperlsys.h"
#define PerlEnv_clearenv() clearenv()
#define PerlEnv_get_childenv() get_childenv()
#define PerlEnv_free_childenv(e) free_childenv((e))
#define PerlEnv_get_childdir() get_childdir()
#define PerlEnv_free_childdir(d) free_childdir((d))
# 735 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/iperlsys.h"
#define PerlLIO_access(file,mode) access((file), (mode))
#define PerlLIO_chmod(file,mode) chmod((file), (mode))
#define PerlLIO_chown(file,owner,grp) chown((file), (owner), (grp))

#define PerlLIO_chsize(fd,size) ftruncate((fd), (size))





#define PerlLIO_close(fd) close((fd))
#define PerlLIO_dup(fd) dup((fd))
#define PerlLIO_dup2(fd1,fd2) dup2((fd1), (fd2))
#define PerlLIO_flock(fd,op) FLOCK((fd), (op))
#define PerlLIO_fstat(fd,buf) Fstat((fd), (buf))
#define PerlLIO_ioctl(fd,u,buf) ioctl((fd), (u), (buf))
#define PerlLIO_isatty(fd) isatty((fd))
#define PerlLIO_link(oldname,newname) link((oldname), (newname))
#define PerlLIO_lseek(fd,offset,mode) lseek((fd), (offset), (mode))
#define PerlLIO_stat(name,buf) Stat((name), (buf))

#define PerlLIO_lstat(name,buf) lstat((name), (buf))



#define PerlLIO_mktemp(file) mktemp((file))
#define PerlLIO_mkstemp(file) mkstemp((file))
#define PerlLIO_open(file,flag) open((file), (flag))
#define PerlLIO_open3(file,flag,perm) open((file), (flag), (perm))
#define PerlLIO_read(fd,buf,count) read((fd), (buf), (count))
#define PerlLIO_rename(old,new) rename((old), (new))
#define PerlLIO_setmode(fd,mode) setmode((fd), (mode))
#define PerlLIO_tmpnam(str) tmpnam((str))
#define PerlLIO_umask(mode) umask((mode))
#define PerlLIO_unlink(file) unlink((file))
#define PerlLIO_utime(file,time) utime((file), (time))
#define PerlLIO_write(fd,buf,count) write((fd), (buf), (count))
# 882 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/iperlsys.h"
#define PerlMem_malloc(size) malloc((size))
#define PerlMem_realloc(buf,size) realloc((buf), (size))
#define PerlMem_free(buf) free((buf))
#define PerlMem_calloc(num,size) calloc((num), (size))
#define PerlMem_get_lock() 
#define PerlMem_free_lock() 
#define PerlMem_is_locked() 0


#define PerlMemShared_malloc(size) malloc((size))
#define PerlMemShared_realloc(buf,size) realloc((buf), (size))
#define PerlMemShared_free(buf) free((buf))
#define PerlMemShared_calloc(num,size) calloc((num), (size))
#define PerlMemShared_get_lock() 
#define PerlMemShared_free_lock() 
#define PerlMemShared_is_locked() 0


#define PerlMemParse_malloc(size) malloc((size))
#define PerlMemParse_realloc(buf,size) realloc((buf), (size))
#define PerlMemParse_free(buf) free((buf))
#define PerlMemParse_calloc(num,size) calloc((num), (size))
#define PerlMemParse_get_lock() 
#define PerlMemParse_free_lock() 
#define PerlMemParse_is_locked() 0
# 1091 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/iperlsys.h"
#define PerlProc_abort() abort()
#define PerlProc_crypt(c,s) crypt((c), (s))
#define PerlProc_exit(s) exit((s))
#define PerlProc__exit(s) _exit((s))
#define PerlProc_execl(c,w,x,y,z) execl((c), (w), (x), (y), (z))

#define PerlProc_execv(c,a) execv((c), (a))
#define PerlProc_execvp(c,a) execvp((c), (a))
#define PerlProc_getuid() getuid()
#define PerlProc_geteuid() geteuid()
#define PerlProc_getgid() getgid()
#define PerlProc_getegid() getegid()
#define PerlProc_getlogin() getlogin()
#define PerlProc_kill(i,a) kill((i), (a))
#define PerlProc_killpg(i,a) killpg((i), (a))
#define PerlProc_pause() Pause()
#define PerlProc_popen(c,m) my_popen((c), (m))
#define PerlProc_popen_list(m,n,a) my_popen_list((m),(n),(a))
#define PerlProc_pclose(f) my_pclose((f))
#define PerlProc_pipe(fd) pipe((fd))
#define PerlProc_setuid(u) setuid((u))
#define PerlProc_setgid(g) setgid((g))
#define PerlProc_sleep(t) sleep((t))
#define PerlProc_times(t) times((t))
#define PerlProc_wait(t) wait((t))
#define PerlProc_waitpid(p,s,f) waitpid((p), (s), (f))
#define PerlProc_setjmp(b,n) Sigsetjmp((b), (n))
#define PerlProc_longjmp(b,n) Siglongjmp((b), (n))
#define PerlProc_signal(n,h) signal((n), (h))
#define PerlProc_fork() my_fork()
#define PerlProc_getpid() getpid()
#define PerlProc_gettimeofday(t,z) gettimeofday((t),(z))
# 1357 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/iperlsys.h"
#define PerlSock_htonl(x) htonl(x)
#define PerlSock_htons(x) htons(x)
#define PerlSock_ntohl(x) ntohl(x)
#define PerlSock_ntohs(x) ntohs(x)
#define PerlSock_accept(s,a,l) accept(s, a, l)
#define PerlSock_bind(s,n,l) bind(s, n, l)
#define PerlSock_connect(s,n,l) connect(s, n, l)

#define PerlSock_gethostbyaddr(a,l,t) gethostbyaddr(a, l, t)
#define PerlSock_gethostbyname(n) gethostbyname(n)
#define PerlSock_gethostent gethostent
#define PerlSock_endhostent endhostent
#define PerlSock_gethostname(n,l) gethostname(n, l)

#define PerlSock_getnetbyaddr(n,t) getnetbyaddr(n, t)
#define PerlSock_getnetbyname(n) getnetbyname(n)
#define PerlSock_getnetent getnetent
#define PerlSock_endnetent endnetent
#define PerlSock_getpeername(s,n,l) getpeername(s, n, l)

#define PerlSock_getprotobyname(n) getprotobyname(n)
#define PerlSock_getprotobynumber(n) getprotobynumber(n)
#define PerlSock_getprotoent getprotoent
#define PerlSock_endprotoent endprotoent

#define PerlSock_getservbyname(n,p) getservbyname(n, p)
#define PerlSock_getservbyport(port,p) getservbyport(port, p)
#define PerlSock_getservent getservent
#define PerlSock_endservent endservent

#define PerlSock_getsockname(s,n,l) getsockname(s, n, l)
#define PerlSock_getsockopt(s,l,n,v,i) getsockopt(s, l, n, v, i)
#define PerlSock_inet_addr(c) inet_addr(c)
#define PerlSock_inet_ntoa(i) inet_ntoa(i)
#define PerlSock_listen(s,b) listen(s, b)
#define PerlSock_recv(s,b,l,f) recv(s, b, l, f)
#define PerlSock_recvfrom(s,b,l,f,from,fromlen) recvfrom(s, b, l, f, from, fromlen)

#define PerlSock_select(n,r,w,e,t) select(n, r, w, e, t)
#define PerlSock_send(s,b,l,f) send(s, b, l, f)
#define PerlSock_sendto(s,b,l,f,t,tlen) sendto(s, b, l, f, t, tlen)

#define PerlSock_sethostent(f) sethostent(f)
#define PerlSock_setnetent(f) setnetent(f)
#define PerlSock_setprotoent(f) setprotoent(f)
#define PerlSock_setservent(f) setservent(f)
#define PerlSock_setsockopt(s,l,n,v,len) setsockopt(s, l, n, v, len)

#define PerlSock_shutdown(s,h) shutdown(s, h)
#define PerlSock_socket(a,t,p) socket(a, t, p)
#define PerlSock_socketpair(a,t,p,f) socketpair(a, t, p, f)
# 3692 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 3707 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define USE_HASH_SEED 
# 3717 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perly.h" 1
# 240 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perly.h"
typedef union YYSTYPE
{
    I32 ival;

    char *pval;
    OP *opval;
    GV *gvval;
}

 YYSTYPE;
#define yystype YYSTYPE
#define YYSTYPE_IS_DECLARED 1
#define YYSTYPE_IS_TRIVIAL 1
# 3718 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2




#define PERL_BITFIELD8 unsigned


#define PERL_BITFIELD16 unsigned


#define PERL_BITFIELD32 unsigned


# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h" 1
# 132 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
typedef enum {
 SVt_NULL,

 SVt_IV,
 SVt_NV,

 SVt_PV,
 SVt_INVLIST,
 SVt_PVIV,
 SVt_PVNV,
 SVt_PVMG,
 SVt_REGEXP,

 SVt_PVGV,
 SVt_PVLV,
 SVt_PVAV,
 SVt_PVHV,
 SVt_PVCV,
 SVt_PVFM,
 SVt_PVIO,
 SVt_LAST
} svtype;






#define SVt_MASK 0xf





#define SVt_PVBM SVt_PVMG


#define SVt_RV SVt_IV
# 183 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define PERL_ARENA_ROOTS_SIZE (SVt_LAST)


typedef struct he HE;
typedef struct hek HEK;




#define _SV_HEAD(ptrtype) ptrtype sv_any; U32 sv_refcnt; U32 sv_flags







#define _NV_BODYLESS_UNION 


#define _SV_HEAD_UNION union { char* svu_pv; IV svu_iv; UV svu_uv; _NV_BODYLESS_UNION SV* svu_rv; struct regexp* svu_rx; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u
# 218 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
struct sv {
    void* sv_any; U32 sv_refcnt; U32 sv_flags;
    union { char* svu_pv; IV svu_iv; UV svu_uv; SV* svu_rv; struct regexp* svu_rx; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u;
# 229 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
};

struct gv {
    XPVGV* sv_any; U32 sv_refcnt; U32 sv_flags;
    union { char* svu_pv; IV svu_iv; UV svu_uv; SV* svu_rv; struct regexp* svu_rx; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u;
};

struct cv {
    XPVCV* sv_any; U32 sv_refcnt; U32 sv_flags;
    union { char* svu_pv; IV svu_iv; UV svu_uv; SV* svu_rv; struct regexp* svu_rx; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u;
};

struct av {
    XPVAV* sv_any; U32 sv_refcnt; U32 sv_flags;
    union { char* svu_pv; IV svu_iv; UV svu_uv; SV* svu_rv; struct regexp* svu_rx; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u;
};

struct hv {
    XPVHV* sv_any; U32 sv_refcnt; U32 sv_flags;
    union { char* svu_pv; IV svu_iv; UV svu_uv; SV* svu_rv; struct regexp* svu_rx; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u;
};

struct io {
    XPVIO* sv_any; U32 sv_refcnt; U32 sv_flags;
    union { char* svu_pv; IV svu_iv; UV svu_uv; SV* svu_rv; struct regexp* svu_rx; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u;
};

struct p5rx {
    struct regexp* sv_any; U32 sv_refcnt; U32 sv_flags;
    union { char* svu_pv; IV svu_iv; UV svu_uv; SV* svu_rv; struct regexp* svu_rx; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u;
};

#undef _SV_HEAD
#undef _SV_HEAD_UNION
# 328 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SvANY(sv) (sv)->sv_any
#define SvFLAGS(sv) (sv)->sv_flags
#define SvREFCNT(sv) (sv)->sv_refcnt

#define SvREFCNT_inc(sv) S_SvREFCNT_inc(MUTABLE_SV(sv))
#define SvREFCNT_inc_simple(sv) SvREFCNT_inc(sv)
#define SvREFCNT_inc_NN(sv) S_SvREFCNT_inc_NN(MUTABLE_SV(sv))
#define SvREFCNT_inc_void(sv) S_SvREFCNT_inc_void(MUTABLE_SV(sv))


#define SvREFCNT_inc_simple_void(sv) STMT_START { if (sv) SvREFCNT(sv)++; } STMT_END
#define SvREFCNT_inc_simple_NN(sv) (++(SvREFCNT(sv)),MUTABLE_SV(sv))
#define SvREFCNT_inc_void_NN(sv) (void)(++SvREFCNT(MUTABLE_SV(sv)))
#define SvREFCNT_inc_simple_void_NN(sv) (void)(++SvREFCNT(MUTABLE_SV(sv)))

#define SvREFCNT_dec(sv) S_SvREFCNT_dec(aTHX_ MUTABLE_SV(sv))
#define SvREFCNT_dec_NN(sv) S_SvREFCNT_dec_NN(aTHX_ MUTABLE_SV(sv))

#define SVTYPEMASK 0xff
#define SvTYPE(sv) ((svtype)((sv)->sv_flags & SVTYPEMASK))




#define SvIS_FREED(sv) UNLIKELY(((sv)->sv_flags == SVTYPEMASK))



#define SvUPGRADE(sv,mt) ((void)(SvTYPE(sv) >= (mt) || (sv_upgrade(sv, mt),1)))


#define SVf_IOK 0x00000100
#define SVf_NOK 0x00000200
#define SVf_POK 0x00000400
#define SVf_ROK 0x00000800

#define SVp_IOK 0x00001000
#define SVp_NOK 0x00002000
#define SVp_POK 0x00004000
#define SVp_SCREAM 0x00008000
#define SVphv_CLONEABLE SVp_SCREAM
#define SVpgv_GP SVp_SCREAM
#define SVprv_PCS_IMPORTED SVp_SCREAM



#define SVf_PROTECT 0x00010000
#define SVs_PADTMP 0x00020000
#define SVs_PADSTALE 0x00040000

#define SVs_TEMP 0x00080000
#define SVs_OBJECT 0x00100000
#define SVs_GMG 0x00200000
#define SVs_SMG 0x00400000
#define SVs_RMG 0x00800000

#define SVf_FAKE 0x01000000






#define SVf_OOK 0x02000000


#define SVf_BREAK 0x04000000



#define SVf_READONLY 0x08000000




#define SVf_THINKFIRST (SVf_READONLY|SVf_PROTECT|SVf_ROK|SVf_FAKE |SVs_RMG|SVf_IsCOW)


#define SVf_OK (SVf_IOK|SVf_NOK|SVf_POK|SVf_ROK| SVp_IOK|SVp_NOK|SVp_POK|SVpgv_GP)


#define PRIVSHIFT 4


#define SVf_AMAGIC 0x10000000
#define SVf_IsCOW 0x10000000




#define SVf_UTF8 0x20000000




#define SVphv_SHAREKEYS 0x20000000
# 447 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SVpav_REAL 0x40000000

#define SVphv_LAZYDEL 0x40000000


#define SVpbm_VALID 0x40000000

#define SVrepl_EVAL 0x40000000


#define SVf_IVisUV 0x80000000

#define SVpav_REIFY 0x80000000

#define SVphv_HASKFLAGS 0x80000000

#define SVpbm_TAIL 0x80000000

#define SVprv_WEAKREF 0x80000000


#define _XPV_HEAD HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; char * xpvlenu_pv; } xpv_len_u
# 477 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define xpv_len xpv_len_u.xpvlenu_len

union _xnvu {
    NV xnv_nv;
    HV * xgv_stash;
    struct {
 U32 xlow;
 U32 xhigh;
    } xpad_cop_seq;
};

union _xivu {
    IV xivu_iv;
    UV xivu_uv;
    HEK * xivu_namehek;
};

union _xmgu {
    MAGIC* xmg_magic;
    STRLEN xmg_hash_index;
};

struct xpv {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; char * xpvlenu_pv; } xpv_len_u;
};

struct xpviv {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; char * xpvlenu_pv; } xpv_len_u;
    union _xivu xiv_u;
};

#define xiv_iv xiv_u.xivu_iv

struct xpvuv {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; char * xpvlenu_pv; } xpv_len_u;
    union _xivu xuv_u;
};

#define xuv_uv xuv_u.xivu_uv

struct xpvnv {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; char * xpvlenu_pv; } xpv_len_u;
    union _xivu xiv_u;
    union _xnvu xnv_u;
};


struct xpvmg {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; char * xpvlenu_pv; } xpv_len_u;
    union _xivu xiv_u;
    union _xnvu xnv_u;
};

struct xpvlv {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; char * xpvlenu_pv; } xpv_len_u;
    union _xivu xiv_u;
    union _xnvu xnv_u;
    union {
 STRLEN xlvu_targoff;
 ssize_t xlvu_stargoff;
    } xlv_targoff_u;
    STRLEN xlv_targlen;
    SV* xlv_targ;
    char xlv_type;

    char xlv_flags;
};

#define xlv_targoff xlv_targoff_u.xlvu_targoff

struct xpvinvlist {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; char * xpvlenu_pv; } xpv_len_u;
    IV prev_index;
    STRLEN iterator;
    _Bool is_offset;





};



struct xpvgv {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; char * xpvlenu_pv; } xpv_len_u;
    union _xivu xiv_u;
    union _xnvu xnv_u;
};

typedef U32 cv_flags_t;

#define _XPVCV_COMMON HV * xcv_stash; union { OP * xcv_start; ANY xcv_xsubany; } xcv_start_u; union { OP * xcv_root; void (*xcv_xsub) (pTHX_ CV*); } xcv_root_u; union { GV * xcv_gv; HEK * xcv_hek; } xcv_gv_u; char * xcv_file; union { PADLIST * xcv_padlist; void * xcv_hscxt; } xcv_padlist_u; CV * xcv_outside; U32 xcv_outside_seq; cv_flags_t xcv_flags; I32 xcv_depth
# 597 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
struct xpvfm {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; char * xpvlenu_pv; } xpv_len_u;
    HV * xcv_stash; union { OP * xcv_start; ANY xcv_xsubany; } xcv_start_u; union { OP * xcv_root; void (*xcv_xsub) (PerlInterpreter* my_perl __attribute__((unused)), CV*); } xcv_root_u; union { GV * xcv_gv; HEK * xcv_hek; } xcv_gv_u; char * xcv_file; union { PADLIST * xcv_padlist; void * xcv_hscxt; } xcv_padlist_u; CV * xcv_outside; U32 xcv_outside_seq; cv_flags_t xcv_flags; I32 xcv_depth;
};


struct xpvio {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; char * xpvlenu_pv; } xpv_len_u;
    union _xivu xiv_u;

    PerlIO * xio_ofp;
# 617 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
    union {
 DIR * xiou_dirp;
 void * xiou_any;
    } xio_dirpu;

    IV xio_page;
    IV xio_page_len;
    IV xio_lines_left;
    char * xio_top_name;
    GV * xio_top_gv;
    char * xio_fmt_name;
    GV * xio_fmt_gv;
    char * xio_bottom_name;
    GV * xio_bottom_gv;
    char xio_type;
    U8 xio_flags;
};

#define xio_dirp xio_dirpu.xiou_dirp
#define xio_any xio_dirpu.xiou_any

#define IOf_ARGV 1
#define IOf_START 2
#define IOf_FLUSH 4
#define IOf_DIDTOP 8
#define IOf_UNTAINT 16
#define IOf_NOLINE 32
#define IOf_FAKE_DIRP 64
# 839 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SvNIOK(sv) (SvFLAGS(sv) & (SVf_IOK|SVf_NOK))
#define SvNIOKp(sv) (SvFLAGS(sv) & (SVp_IOK|SVp_NOK))
#define SvNIOK_off(sv) (SvFLAGS(sv) &= ~(SVf_IOK|SVf_NOK| SVp_IOK|SVp_NOK|SVf_IVisUV))


#define assert_not_ROK(sv) assert_(!SvROK(sv) || !SvRV(sv))
#define assert_not_glob(sv) assert_(!isGV_with_GP(sv))

#define SvOK(sv) (SvFLAGS(sv) & SVf_OK || isREGEXP(sv))
#define SvOK_off(sv) (assert_not_ROK(sv) assert_not_glob(sv) SvFLAGS(sv) &= ~(SVf_OK| SVf_IVisUV|SVf_UTF8), SvOOK_off(sv))



#define SvOK_off_exc_UV(sv) (assert_not_ROK(sv) SvFLAGS(sv) &= ~(SVf_OK| SVf_UTF8), SvOOK_off(sv))




#define SvOKp(sv) (SvFLAGS(sv) & (SVp_IOK|SVp_NOK|SVp_POK))
#define SvIOKp(sv) (SvFLAGS(sv) & SVp_IOK)
#define SvIOKp_on(sv) (assert_not_glob(sv) SvRELEASE_IVX_(sv) SvFLAGS(sv) |= SVp_IOK)

#define SvNOKp(sv) (SvFLAGS(sv) & SVp_NOK)
#define SvNOKp_on(sv) (assert_not_glob(sv) SvFLAGS(sv) |= SVp_NOK)
#define SvPOKp(sv) (SvFLAGS(sv) & SVp_POK)
#define SvPOKp_on(sv) (assert_not_ROK(sv) assert_not_glob(sv) SvFLAGS(sv) |= SVp_POK)


#define SvIOK(sv) (SvFLAGS(sv) & SVf_IOK)
#define SvIOK_on(sv) (assert_not_glob(sv) SvRELEASE_IVX_(sv) SvFLAGS(sv) |= (SVf_IOK|SVp_IOK))

#define SvIOK_off(sv) (SvFLAGS(sv) &= ~(SVf_IOK|SVp_IOK|SVf_IVisUV))
#define SvIOK_only(sv) (SvOK_off(sv), SvFLAGS(sv) |= (SVf_IOK|SVp_IOK))

#define SvIOK_only_UV(sv) (assert_not_glob(sv) SvOK_off_exc_UV(sv), SvFLAGS(sv) |= (SVf_IOK|SVp_IOK))


#define SvIOK_UV(sv) ((SvFLAGS(sv) & (SVf_IOK|SVf_IVisUV)) == (SVf_IOK|SVf_IVisUV))

#define SvUOK(sv) SvIOK_UV(sv)
#define SvIOK_notUV(sv) ((SvFLAGS(sv) & (SVf_IOK|SVf_IVisUV)) == SVf_IOK)


#define SvIsUV(sv) (SvFLAGS(sv) & SVf_IVisUV)
#define SvIsUV_on(sv) (SvFLAGS(sv) |= SVf_IVisUV)
#define SvIsUV_off(sv) (SvFLAGS(sv) &= ~SVf_IVisUV)

#define SvNOK(sv) (SvFLAGS(sv) & SVf_NOK)
#define SvNOK_on(sv) (assert_not_glob(sv) SvFLAGS(sv) |= (SVf_NOK|SVp_NOK))

#define SvNOK_off(sv) (SvFLAGS(sv) &= ~(SVf_NOK|SVp_NOK))
#define SvNOK_only(sv) (SvOK_off(sv), SvFLAGS(sv) |= (SVf_NOK|SVp_NOK))
# 920 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SvUTF8(sv) (SvFLAGS(sv) & SVf_UTF8)
#define SvUTF8_on(sv) (SvFLAGS(sv) |= (SVf_UTF8))
#define SvUTF8_off(sv) (SvFLAGS(sv) &= ~(SVf_UTF8))

#define SvPOK(sv) (SvFLAGS(sv) & SVf_POK)
#define SvPOK_on(sv) (assert_not_ROK(sv) assert_not_glob(sv) SvFLAGS(sv) |= (SVf_POK|SVp_POK))

#define SvPOK_off(sv) (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
#define SvPOK_only(sv) (assert_not_ROK(sv) assert_not_glob(sv) SvFLAGS(sv) &= ~(SVf_OK| SVf_IVisUV|SVf_UTF8), SvFLAGS(sv) |= (SVf_POK|SVp_POK))



#define SvPOK_only_UTF8(sv) (assert_not_ROK(sv) assert_not_glob(sv) SvFLAGS(sv) &= ~(SVf_OK| SVf_IVisUV), SvFLAGS(sv) |= (SVf_POK|SVp_POK))




#define SvVOK(sv) (SvMAGICAL(sv) && mg_find(sv,PERL_MAGIC_vstring))


#define SvVSTRING_mg(sv) (SvMAGICAL(sv) ? mg_find(sv,PERL_MAGIC_vstring) : NULL)


#define SvOOK(sv) (SvFLAGS(sv) & SVf_OOK)
#define SvOOK_on(sv) (SvFLAGS(sv) |= SVf_OOK)
#define SvOOK_off(sv) ((void)(SvOOK(sv) && sv_backoff(sv)))

#define SvFAKE(sv) (SvFLAGS(sv) & SVf_FAKE)
#define SvFAKE_on(sv) (SvFLAGS(sv) |= SVf_FAKE)
#define SvFAKE_off(sv) (SvFLAGS(sv) &= ~SVf_FAKE)

#define SvROK(sv) (SvFLAGS(sv) & SVf_ROK)
#define SvROK_on(sv) (SvFLAGS(sv) |= SVf_ROK)
#define SvROK_off(sv) (SvFLAGS(sv) &= ~(SVf_ROK))

#define SvMAGICAL(sv) (SvFLAGS(sv) & (SVs_GMG|SVs_SMG|SVs_RMG))
#define SvMAGICAL_on(sv) (SvFLAGS(sv) |= (SVs_GMG|SVs_SMG|SVs_RMG))
#define SvMAGICAL_off(sv) (SvFLAGS(sv) &= ~(SVs_GMG|SVs_SMG|SVs_RMG))

#define SvGMAGICAL(sv) (SvFLAGS(sv) & SVs_GMG)
#define SvGMAGICAL_on(sv) (SvFLAGS(sv) |= SVs_GMG)
#define SvGMAGICAL_off(sv) (SvFLAGS(sv) &= ~SVs_GMG)

#define SvSMAGICAL(sv) (SvFLAGS(sv) & SVs_SMG)
#define SvSMAGICAL_on(sv) (SvFLAGS(sv) |= SVs_SMG)
#define SvSMAGICAL_off(sv) (SvFLAGS(sv) &= ~SVs_SMG)

#define SvRMAGICAL(sv) (SvFLAGS(sv) & SVs_RMG)
#define SvRMAGICAL_on(sv) (SvFLAGS(sv) |= SVs_RMG)
#define SvRMAGICAL_off(sv) (SvFLAGS(sv) &= ~SVs_RMG)

#define SvAMAGIC(sv) (SvROK(sv) && SvOBJECT(SvRV(sv)) && HvAMAGIC(SvSTASH(SvRV(sv))))



#define HvAMAGIC(hv) (SvFLAGS(hv) & SVf_AMAGIC)
#define HvAMAGIC_on(hv) (SvFLAGS(hv) |= SVf_AMAGIC)
#define HvAMAGIC_off(hv) (SvFLAGS(hv) &=~ SVf_AMAGIC)



#define SvPOK_nog(sv) ((SvFLAGS(sv) & (SVf_POK|SVs_GMG)) == SVf_POK)
#define SvIOK_nog(sv) ((SvFLAGS(sv) & (SVf_IOK|SVs_GMG)) == SVf_IOK)
#define SvUOK_nog(sv) ((SvFLAGS(sv) & (SVf_IOK|SVf_IVisUV|SVs_GMG)) == (SVf_IOK|SVf_IVisUV))
#define SvNOK_nog(sv) ((SvFLAGS(sv) & (SVf_NOK|SVs_GMG)) == SVf_NOK)
#define SvNIOK_nog(sv) (SvNIOK(sv) && !(SvFLAGS(sv) & SVs_GMG))

#define SvPOK_nogthink(sv) ((SvFLAGS(sv) & (SVf_POK|SVf_THINKFIRST|SVs_GMG)) == SVf_POK)
#define SvIOK_nogthink(sv) ((SvFLAGS(sv) & (SVf_IOK|SVf_THINKFIRST|SVs_GMG)) == SVf_IOK)
#define SvUOK_nogthink(sv) ((SvFLAGS(sv) & (SVf_IOK|SVf_IVisUV|SVf_THINKFIRST|SVs_GMG)) == (SVf_IOK|SVf_IVisUV))
#define SvNOK_nogthink(sv) ((SvFLAGS(sv) & (SVf_NOK|SVf_THINKFIRST|SVs_GMG)) == SVf_NOK)
#define SvNIOK_nogthink(sv) (SvNIOK(sv) && !(SvFLAGS(sv) & (SVf_THINKFIRST|SVs_GMG)))

#define SvPOK_utf8_nog(sv) ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8|SVs_GMG)) == (SVf_POK|SVf_UTF8))
#define SvPOK_utf8_nogthink(sv) ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8|SVf_THINKFIRST|SVs_GMG)) == (SVf_POK|SVf_UTF8))

#define SvPOK_byte_nog(sv) ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8|SVs_GMG)) == SVf_POK)
#define SvPOK_byte_nogthink(sv) ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8|SVf_THINKFIRST|SVs_GMG)) == SVf_POK)

#define SvPOK_pure_nogthink(sv) ((SvFLAGS(sv) & (SVf_POK|SVf_IOK|SVf_NOK|SVf_ROK|SVpgv_GP|SVf_THINKFIRST|SVs_GMG)) == SVf_POK)

#define SvPOK_utf8_pure_nogthink(sv) ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8|SVf_IOK|SVf_NOK|SVf_ROK|SVpgv_GP|SVf_THINKFIRST|SVs_GMG)) == (SVf_POK|SVf_UTF8))

#define SvPOK_byte_pure_nogthink(sv) ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8|SVf_IOK|SVf_NOK|SVf_ROK|SVpgv_GP|SVf_THINKFIRST|SVs_GMG)) == SVf_POK)
# 1020 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SvGAMAGIC(sv) (SvGMAGICAL(sv) || SvAMAGIC(sv))

#define Gv_AMG(stash) (HvNAME(stash) && Gv_AMupdate(stash,FALSE) ? 1 : (HvAMAGIC_off(stash), 0))




#define SvWEAKREF(sv) ((SvFLAGS(sv) & (SVf_ROK|SVprv_WEAKREF)) == (SVf_ROK|SVprv_WEAKREF))

#define SvWEAKREF_on(sv) (SvFLAGS(sv) |= (SVf_ROK|SVprv_WEAKREF))
#define SvWEAKREF_off(sv) (SvFLAGS(sv) &= ~(SVf_ROK|SVprv_WEAKREF))

#define SvPCS_IMPORTED(sv) ((SvFLAGS(sv) & (SVf_ROK|SVprv_PCS_IMPORTED)) == (SVf_ROK|SVprv_PCS_IMPORTED))

#define SvPCS_IMPORTED_on(sv) (SvFLAGS(sv) |= (SVf_ROK|SVprv_PCS_IMPORTED))
#define SvPCS_IMPORTED_off(sv) (SvFLAGS(sv) &= ~(SVf_ROK|SVprv_PCS_IMPORTED))
# 1061 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SvTHINKFIRST(sv) (SvFLAGS(sv) & SVf_THINKFIRST)

#define SVs_PADMY 0
#define SvPADMY(sv) !(SvFLAGS(sv) & SVs_PADTMP)

#define SvPADMY_on(sv) SvPADTMP_off(sv)


#define SvPADTMP(sv) (SvFLAGS(sv) & (SVs_PADTMP))
#define SvPADSTALE(sv) (SvFLAGS(sv) & (SVs_PADSTALE))

#define SvPADTMP_on(sv) (SvFLAGS(sv) |= SVs_PADTMP)
#define SvPADTMP_off(sv) (SvFLAGS(sv) &= ~SVs_PADTMP)
#define SvPADSTALE_on(sv) S_SvPADSTALE_on(MUTABLE_SV(sv))
#define SvPADSTALE_off(sv) S_SvPADSTALE_off(MUTABLE_SV(sv))

#define SvTEMP(sv) (SvFLAGS(sv) & SVs_TEMP)
#define SvTEMP_on(sv) (SvFLAGS(sv) |= SVs_TEMP)
#define SvTEMP_off(sv) (SvFLAGS(sv) &= ~SVs_TEMP)

#define SvOBJECT(sv) (SvFLAGS(sv) & SVs_OBJECT)
#define SvOBJECT_on(sv) (SvFLAGS(sv) |= SVs_OBJECT)
#define SvOBJECT_off(sv) (SvFLAGS(sv) &= ~SVs_OBJECT)

#define SvREADONLY(sv) (SvFLAGS(sv) & (SVf_READONLY|SVf_PROTECT))




#define SvREADONLY_on(sv) (SvFLAGS(sv) |= SVf_READONLY)
#define SvREADONLY_off(sv) (SvFLAGS(sv) &= ~SVf_READONLY)


#define SvSCREAM(sv) ((SvFLAGS(sv) & (SVp_SCREAM|SVp_POK)) == (SVp_SCREAM|SVp_POK))
#define SvSCREAM_on(sv) (SvFLAGS(sv) |= SVp_SCREAM)
#define SvSCREAM_off(sv) (SvFLAGS(sv) &= ~SVp_SCREAM)


#define SvCOMPILED(sv) 0
#define SvCOMPILED_on(sv) 
#define SvCOMPILED_off(sv) 


#define SvEVALED(sv) (SvFLAGS(sv) & SVrepl_EVAL)
#define SvEVALED_on(sv) (SvFLAGS(sv) |= SVrepl_EVAL)
#define SvEVALED_off(sv) (SvFLAGS(sv) &= ~SVrepl_EVAL)
# 1133 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SvVALID(sv) ((SvFLAGS(sv) & SVpbm_VALID) && !SvSCREAM(sv))
#define SvVALID_on(sv) (SvFLAGS(sv) |= SVpbm_VALID)
#define SvVALID_off(sv) (SvFLAGS(sv) &= ~SVpbm_VALID)
#define SvTAIL(sv) ((SvFLAGS(sv) & (SVpbm_TAIL|SVpbm_VALID)) == (SVpbm_TAIL|SVpbm_VALID))



#define SvTAIL_on(sv) (SvFLAGS(sv) |= SVpbm_TAIL)
#define SvTAIL_off(sv) (SvFLAGS(sv) &= ~SVpbm_TAIL)

#define SvRVx(sv) SvRV(sv)
# 1166 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SvLEN(sv) ((XPV*) SvANY(sv))->xpv_len
#define SvEND(sv) ((sv)->sv_u.svu_pv + ((XPV*)SvANY(sv))->xpv_cur)
# 1233 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SvPVX(sv) ((sv)->sv_u.svu_pv)
#define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
#define SvIVX(sv) ((XPVIV*) SvANY(sv))->xiv_iv
#define SvUVX(sv) ((XPVUV*) SvANY(sv))->xuv_uv
#define SvNVX(sv) ((XPVNV*) SvANY(sv))->xnv_u.xnv_nv
#define SvRV(sv) ((sv)->sv_u.svu_rv)
#define SvRV_const(sv) (0 + (sv)->sv_u.svu_rv)
#define SvMAGIC(sv) ((XPVMG*) SvANY(sv))->xmg_u.xmg_magic
#define SvSTASH(sv) ((XPVMG*) SvANY(sv))->xmg_stash






#define SvPVX_mutable(sv) (0 + (sv)->sv_u.svu_pv)
#define SvPVX_const(sv) ((const char*)(0 + (sv)->sv_u.svu_pv))







#define SvIVXx(sv) SvIVX(sv)
#define SvUVXx(sv) SvUVX(sv)
#define SvNVXx(sv) SvNVX(sv)
#define SvPVXx(sv) SvPVX(sv)
#define SvLENx(sv) SvLEN(sv)
#define SvENDx(sv) ((PL_Sv = (sv)), SvEND(PL_Sv))





#define SvIV_please(sv) STMT_START {if (!SvIOKp(sv) && (SvFLAGS(sv) & (SVf_NOK|SVf_POK))) (void) SvIV(sv); } STMT_END


#define SvIV_please_nomg(sv) (!(SvFLAGS(sv) & (SVf_IOK|SVp_IOK)) && (SvFLAGS(sv) & (SVf_NOK|SVf_POK)) ? (sv_2iv_flags(sv, 0), SvIOK(sv)) : SvIOK(sv))



#define SvIV_set(sv,val) STMT_START { assert(PL_valid_types_IV_set[SvTYPE(sv) & SVt_MASK]); assert(!isGV_with_GP(sv)); (((XPVIV*) SvANY(sv))->xiv_iv = (val)); } STMT_END




#define SvNV_set(sv,val) STMT_START { assert(PL_valid_types_NV_set[SvTYPE(sv) & SVt_MASK]); assert(!isGV_with_GP(sv)); (((XPVNV*)SvANY(sv))->xnv_u.xnv_nv = (val)); } STMT_END




#define SvPV_set(sv,val) STMT_START { assert(PL_valid_types_PVX[SvTYPE(sv) & SVt_MASK]); assert(!isGV_with_GP(sv)); assert(!(SvTYPE(sv) == SVt_PVIO && !(IoFLAGS(sv) & IOf_FAKE_DIRP))); ((sv)->sv_u.svu_pv = (val)); } STMT_END






#define SvUV_set(sv,val) STMT_START { assert(PL_valid_types_IV_set[SvTYPE(sv) & SVt_MASK]); assert(!isGV_with_GP(sv)); (((XPVUV*)SvANY(sv))->xuv_uv = (val)); } STMT_END




#define SvRV_set(sv,val) STMT_START { assert(PL_valid_types_RV[SvTYPE(sv) & SVt_MASK]); assert(!isGV_with_GP(sv)); assert(!(SvTYPE(sv) == SVt_PVIO && !(IoFLAGS(sv) & IOf_FAKE_DIRP))); ((sv)->sv_u.svu_rv = (val)); } STMT_END






#define SvMAGIC_set(sv,val) STMT_START { assert(SvTYPE(sv) >= SVt_PVMG); (((XPVMG*)SvANY(sv))->xmg_u.xmg_magic = (val)); } STMT_END


#define SvSTASH_set(sv,val) STMT_START { assert(SvTYPE(sv) >= SVt_PVMG); (((XPVMG*) SvANY(sv))->xmg_stash = (val)); } STMT_END


#define SvCUR_set(sv,val) STMT_START { assert(PL_valid_types_PVX[SvTYPE(sv) & SVt_MASK] || SvTYPE(sv) == SVt_REGEXP); assert(!isGV_with_GP(sv)); assert(!(SvTYPE(sv) == SVt_PVIO && !(IoFLAGS(sv) & IOf_FAKE_DIRP))); (((XPV*) SvANY(sv))->xpv_cur = (val)); } STMT_END







#define SvLEN_set(sv,val) STMT_START { assert(PL_valid_types_PVX[SvTYPE(sv) & SVt_MASK]); assert(!isGV_with_GP(sv)); assert(!(SvTYPE(sv) == SVt_PVIO && !(IoFLAGS(sv) & IOf_FAKE_DIRP))); (((XPV*) SvANY(sv))->xpv_len = (val)); } STMT_END






#define SvEND_set(sv,val) STMT_START { assert(SvTYPE(sv) >= SVt_PV); SvCUR_set(sv, (val) - SvPVX(sv)); } STMT_END



#define SvPV_renew(sv,n) STMT_START { SvLEN_set(sv, n); SvPV_set((sv), (MEM_WRAP_CHECK_(n,char) (char*)saferealloc((Malloc_t)SvPVX(sv), (MEM_SIZE)((n))))); } STMT_END






#define SvPV_shrink_to_cur(sv) STMT_START { const STRLEN _lEnGtH = SvCUR(sv) + 1; SvPV_renew(sv, _lEnGtH); } STMT_END




#define SvPV_free(sv) STMT_START { assert(SvTYPE(sv) >= SVt_PV); if (SvLEN(sv)) { assert(!SvROK(sv)); if(UNLIKELY(SvOOK(sv))) { STRLEN zok; SvOOK_offset(sv, zok); SvPV_set(sv, SvPVX_mutable(sv) - zok); SvFLAGS(sv) &= ~SVf_OOK; } Safefree(SvPVX(sv)); } } STMT_END
# 1372 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define BmFLAGS(sv) (SvTAIL(sv) ? FBMcf_TAIL : 0)
# 1384 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define BmUSEFUL(sv) ((XPVIV*) SvANY(sv))->xiv_u.xivu_iv




#define BmRARE(sv) 0
#define BmPREVIOUS(sv) 0


#define FmLINES(sv) ((XPVIV*) SvANY(sv))->xiv_iv

#define LvTYPE(sv) ((XPVLV*) SvANY(sv))->xlv_type
#define LvTARG(sv) ((XPVLV*) SvANY(sv))->xlv_targ
#define LvTARGOFF(sv) ((XPVLV*) SvANY(sv))->xlv_targoff
#define LvSTARGOFF(sv) ((XPVLV*) SvANY(sv))->xlv_targoff_u.xlvu_stargoff
#define LvTARGLEN(sv) ((XPVLV*) SvANY(sv))->xlv_targlen
#define LvFLAGS(sv) ((XPVLV*) SvANY(sv))->xlv_flags

#define IoIFP(sv) (sv)->sv_u.svu_fp
#define IoOFP(sv) ((XPVIO*) SvANY(sv))->xio_ofp
#define IoDIRP(sv) ((XPVIO*) SvANY(sv))->xio_dirp
#define IoANY(sv) ((XPVIO*) SvANY(sv))->xio_any
#define IoLINES(sv) ((XPVIO*) SvANY(sv))->xiv_u.xivu_iv
#define IoPAGE(sv) ((XPVIO*) SvANY(sv))->xio_page
#define IoPAGE_LEN(sv) ((XPVIO*) SvANY(sv))->xio_page_len
#define IoLINES_LEFT(sv) ((XPVIO*) SvANY(sv))->xio_lines_left
#define IoTOP_NAME(sv) ((XPVIO*) SvANY(sv))->xio_top_name
#define IoTOP_GV(sv) ((XPVIO*) SvANY(sv))->xio_top_gv
#define IoFMT_NAME(sv) ((XPVIO*) SvANY(sv))->xio_fmt_name
#define IoFMT_GV(sv) ((XPVIO*) SvANY(sv))->xio_fmt_gv
#define IoBOTTOM_NAME(sv) ((XPVIO*) SvANY(sv))->xio_bottom_name
#define IoBOTTOM_GV(sv) ((XPVIO*) SvANY(sv))->xio_bottom_gv
#define IoTYPE(sv) ((XPVIO*) SvANY(sv))->xio_type
#define IoFLAGS(sv) ((XPVIO*) SvANY(sv))->xio_flags


#define IoTYPE_RDONLY '<'
#define IoTYPE_WRONLY '>'
#define IoTYPE_RDWR '+'
#define IoTYPE_APPEND 'a'
#define IoTYPE_PIPE '|'
#define IoTYPE_STD '-'
#define IoTYPE_SOCKET 's'
#define IoTYPE_CLOSED ' '
#define IoTYPE_IMPLICIT 'I'
#define IoTYPE_NUMERIC '#'
# 1457 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define sv_taint(sv) sv_magic((sv), NULL, PERL_MAGIC_taint, NULL, 0)




#define SvTAINTED(sv) (SvMAGICAL(sv) && sv_tainted(sv))

#define SvTAINTED_on(sv) STMT_START{ if(UNLIKELY(TAINTING_get)){sv_taint(sv);} }STMT_END
#define SvTAINTED_off(sv) STMT_START{ if(UNLIKELY(TAINTING_get)){sv_untaint(sv);} }STMT_END

#define SvTAINT(sv) STMT_START { if (UNLIKELY(TAINTING_get)) { if (UNLIKELY(TAINT_get)) SvTAINTED_on(sv); } } STMT_END
# 1637 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
#define SvUV(sv) (SvUOK_nog(sv) ? SvUVX(sv) : sv_2uv(sv))
#define SvNV(sv) (SvNOK_nog(sv) ? SvNVX(sv) : sv_2nv(sv))

#define SvIV_nomg(sv) (SvIOK(sv) ? SvIVX(sv) : sv_2iv_flags(sv, 0))
#define SvUV_nomg(sv) (SvIOK(sv) ? SvUVX(sv) : sv_2uv_flags(sv, 0))
#define SvNV_nomg(sv) (SvNOK(sv) ? SvNVX(sv) : sv_2nv_flags(sv, 0))



#define SvPV(sv,lp) SvPV_flags(sv, lp, SV_GMAGIC)
#define SvPV_const(sv,lp) SvPV_flags_const(sv, lp, SV_GMAGIC)
#define SvPV_mutable(sv,lp) SvPV_flags_mutable(sv, lp, SV_GMAGIC)

#define SvPV_flags(sv,lp,flags) (SvPOK_nog(sv) ? ((lp = SvCUR(sv)), SvPVX(sv)) : sv_2pv_flags(sv, &lp, flags))


#define SvPV_flags_const(sv,lp,flags) (SvPOK_nog(sv) ? ((lp = SvCUR(sv)), SvPVX_const(sv)) : (const char*) sv_2pv_flags(sv, &lp, (flags|SV_CONST_RETURN)))



#define SvPV_flags_const_nolen(sv,flags) (SvPOK_nog(sv) ? SvPVX_const(sv) : (const char*) sv_2pv_flags(sv, 0, (flags|SV_CONST_RETURN)))



#define SvPV_flags_mutable(sv,lp,flags) (SvPOK_nog(sv) ? ((lp = SvCUR(sv)), SvPVX_mutable(sv)) : sv_2pv_flags(sv, &lp, (flags|SV_MUTABLE_RETURN)))




#define SvPV_force(sv,lp) SvPV_force_flags(sv, lp, SV_GMAGIC)
#define SvPV_force_nolen(sv) SvPV_force_flags_nolen(sv, SV_GMAGIC)
#define SvPV_force_mutable(sv,lp) SvPV_force_flags_mutable(sv, lp, SV_GMAGIC)

#define SvPV_force_nomg(sv,lp) SvPV_force_flags(sv, lp, 0)
#define SvPV_force_nomg_nolen(sv) SvPV_force_flags_nolen(sv, 0)

#define SvPV_force_flags(sv,lp,flags) (SvPOK_pure_nogthink(sv) ? ((lp = SvCUR(sv)), SvPVX(sv)) : sv_pvn_force_flags(sv, &lp, flags))



#define SvPV_force_flags_nolen(sv,flags) (SvPOK_pure_nogthink(sv) ? SvPVX(sv) : sv_pvn_force_flags(sv, 0, flags))



#define SvPV_force_flags_mutable(sv,lp,flags) (SvPOK_pure_nogthink(sv) ? ((lp = SvCUR(sv)), SvPVX_mutable(sv)) : sv_pvn_force_flags(sv, &lp, flags|SV_MUTABLE_RETURN))




#define SvPV_nolen(sv) (SvPOK_nog(sv) ? SvPVX(sv) : sv_2pv_flags(sv, 0, SV_GMAGIC))




#define SvPV_nomg_nolen(sv) (SvPOK_nog(sv) ? SvPVX(sv) : sv_2pv_flags(sv, 0, 0))



#define SvPV_nolen_const(sv) (SvPOK_nog(sv) ? SvPVX_const(sv) : sv_2pv_flags(sv, 0, SV_GMAGIC|SV_CONST_RETURN))



#define SvPV_nomg(sv,lp) SvPV_flags(sv, lp, 0)
#define SvPV_nomg_const(sv,lp) SvPV_flags_const(sv, lp, 0)
#define SvPV_nomg_const_nolen(sv) SvPV_flags_const_nolen(sv, 0)



#define SvPVutf8(sv,lp) (SvPOK_utf8_nog(sv) ? ((lp = SvCUR(sv)), SvPVX(sv)) : sv_2pvutf8(sv, &lp))



#define SvPVutf8_force(sv,lp) (SvPOK_utf8_pure_nogthink(sv) ? ((lp = SvCUR(sv)), SvPVX(sv)) : sv_pvutf8n_force(sv, &lp))



#define SvPVutf8_nolen(sv) (SvPOK_utf8_nog(sv) ? SvPVX(sv) : sv_2pvutf8(sv, 0))





#define SvPVbyte(sv,lp) (SvPOK_byte_nog(sv) ? ((lp = SvCUR(sv)), SvPVX(sv)) : sv_2pvbyte(sv, &lp))



#define SvPVbyte_force(sv,lp) (SvPOK_byte_pure_nogthink(sv) ? ((lp = SvCUR(sv)), SvPVX(sv)) : sv_pvbyten_force(sv, &lp))



#define SvPVbyte_nolen(sv) (SvPOK_byte_nog(sv) ? SvPVX(sv) : sv_2pvbyte(sv, 0))
# 1738 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SvPVx_force(sv,lp) sv_pvn_force(sv, &lp)
#define SvPVutf8x_force(sv,lp) sv_pvutf8n_force(sv, &lp)
#define SvPVbytex_force(sv,lp) sv_pvbyten_force(sv, &lp)

#define SvTRUE(sv) (LIKELY(sv) && (UNLIKELY(SvGMAGICAL(sv)) ? sv_2bool(sv) : SvTRUE_common(sv, sv_2bool_nomg(sv))))
#define SvTRUE_nomg(sv) (LIKELY(sv) && ( SvTRUE_common(sv, sv_2bool_nomg(sv))))
#define SvTRUE_NN(sv) (UNLIKELY(SvGMAGICAL(sv)) ? sv_2bool(sv) : SvTRUE_common(sv, sv_2bool_nomg(sv)))
#define SvTRUE_nomg_NN(sv) ( SvTRUE_common(sv, sv_2bool_nomg(sv)))
#define SvTRUE_common(sv,fallback) ( !SvOK(sv) ? 0 : SvPOK(sv) ? SvPVXtrue(sv) : (SvFLAGS(sv) & (SVf_IOK|SVf_NOK)) ? ( (SvIOK(sv) && SvIVX(sv) != 0) || (SvNOK(sv) && SvNVX(sv) != 0.0)) : (fallback))
# 1758 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SvIVx(sv) ({SV *_sv = MUTABLE_SV(sv); SvIV(_sv); })
#define SvUVx(sv) ({SV *_sv = MUTABLE_SV(sv); SvUV(_sv); })
#define SvNVx(sv) ({SV *_sv = MUTABLE_SV(sv); SvNV(_sv); })
#define SvPVx(sv,lp) ({SV *_sv = (sv); SvPV(_sv, lp); })
#define SvPVx_const(sv,lp) ({SV *_sv = (sv); SvPV_const(_sv, lp); })
#define SvPVx_nolen(sv) ({SV *_sv = (sv); SvPV_nolen(_sv); })
#define SvPVx_nolen_const(sv) ({SV *_sv = (sv); SvPV_nolen_const(_sv); })
#define SvPVutf8x(sv,lp) ({SV *_sv = (sv); SvPVutf8(_sv, lp); })
#define SvPVbytex(sv,lp) ({SV *_sv = (sv); SvPVbyte(_sv, lp); })
#define SvPVbytex_nolen(sv) ({SV *_sv = (sv); SvPVbyte_nolen(_sv); })
#define SvTRUEx(sv) ({SV *_sv = (sv); SvTRUE(_sv); })
#define SvTRUEx_nomg(sv) ({SV *_sv = (sv); SvTRUE_nomg(_sv); })
# 1790 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SvPVXtrue(sv) ( ((XPV*)SvANY((sv))) && ( ((XPV*)SvANY((sv)))->xpv_cur > 1 || ( ((XPV*)SvANY((sv)))->xpv_cur && *(sv)->sv_u.svu_pv != '0' ) ) )
# 1801 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SvIsCOW(sv) (SvFLAGS(sv) & SVf_IsCOW)
#define SvIsCOW_on(sv) (SvFLAGS(sv) |= SVf_IsCOW)
#define SvIsCOW_off(sv) (SvFLAGS(sv) &= ~SVf_IsCOW)
#define SvIsCOW_shared_hash(sv) (SvIsCOW(sv) && SvLEN(sv) == 0)

#define SvSHARED_HEK_FROM_PV(pvx) ((struct hek*)(pvx - STRUCT_OFFSET(struct hek, hek_key)))

#define SvSHARED_HASH(sv) (0 + SvSHARED_HEK_FROM_PV(SvPVX_const(sv))->hek_hash)


#define SV_IMMEDIATE_UNREF 1
#define SV_GMAGIC 2
#define SV_COW_DROP_PV 4
#define SV_UTF8_NO_ENCODING 8
#define SV_NOSTEAL 16
#define SV_CONST_RETURN 32
#define SV_MUTABLE_RETURN 64
#define SV_SMAGIC 128
#define SV_HAS_TRAILING_NUL 256
#define SV_COW_SHARED_HASH_KEYS 512

#define SV_COW_OTHER_PVS 1024

#define SV_UNDEF_RETURNS_NULL 2048



#define SV_FORCE_UTF8_UPGRADE 4096


#define SV_SKIP_OVERLOAD 8192
#define SV_CATBYTES 16384
#define SV_CATUTF8 32768
# 1845 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SV_DO_COW_SVSETSV 0



#define sv_unref(sv) sv_unref_flags(sv, 0)
#define sv_force_normal(sv) sv_force_normal_flags(sv, 0)
#define sv_usepvn(sv,p,l) sv_usepvn_flags(sv, p, l, 0)
#define sv_usepvn_mg(sv,p,l) sv_usepvn_flags(sv, p, l, SV_SMAGIC)







#define SV_CHECK_THINKFIRST_COW_DROP(sv) if (SvTHINKFIRST(sv)) sv_force_normal_flags(sv, SV_COW_DROP_PV)
# 1876 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SvRELEASE_IVX(sv) 0




#define SvRELEASE_IVX_(sv) 

#define SvCANCOW(sv) (SvIsCOW(sv) ? SvLEN(sv) ? CowREFCNT(sv) != SV_COW_REFCNT_MAX : 1 : (SvFLAGS(sv) & CAN_COW_MASK) == CAN_COW_FLAGS && SvCUR(sv)+1 < SvLEN(sv))





#define CowREFCNT(sv) (*(U8 *)(SvPVX(sv)+SvLEN(sv)-1))
#define SV_COW_REFCNT_MAX ((1 << sizeof(U8)*8) - 1)
#define CAN_COW_MASK (SVf_POK|SVf_ROK|SVp_POK|SVf_FAKE| SVf_OOK|SVf_BREAK|SVf_READONLY|SVf_PROTECT)




#define CAN_COW_FLAGS (SVp_POK|SVf_POK)

#define SV_CHECK_THINKFIRST(sv) if (SvTHINKFIRST(sv)) sv_force_normal_flags(sv, 0)





#define sv_pv(sv) SvPV_nolen(sv)
#define sv_pvutf8(sv) SvPVutf8_nolen(sv)
#define sv_pvbyte(sv) SvPVbyte_nolen(sv)

#define sv_pvn_force_nomg(sv,lp) sv_pvn_force_flags(sv, lp, 0)
#define sv_utf8_upgrade_flags(sv,flags) sv_utf8_upgrade_flags_grow(sv, flags, 0)
#define sv_utf8_upgrade_nomg(sv) sv_utf8_upgrade_flags(sv, 0)
#define sv_catpvn_nomg(dsv,sstr,slen) sv_catpvn_flags(dsv, sstr, slen, 0)
#define sv_catpv_nomg(dsv,sstr) sv_catpv_flags(dsv, sstr, 0)
#define sv_setsv(dsv,ssv) sv_setsv_flags(dsv, ssv, SV_GMAGIC|SV_DO_COW_SVSETSV)

#define sv_setsv_nomg(dsv,ssv) sv_setsv_flags(dsv, ssv, SV_DO_COW_SVSETSV)
#define sv_catsv(dsv,ssv) sv_catsv_flags(dsv, ssv, SV_GMAGIC)
#define sv_catsv_nomg(dsv,ssv) sv_catsv_flags(dsv, ssv, 0)
#define sv_catsv_mg(dsv,ssv) sv_catsv_flags(dsv, ssv, SV_GMAGIC|SV_SMAGIC)
#define sv_catpvn(dsv,sstr,slen) sv_catpvn_flags(dsv, sstr, slen, SV_GMAGIC)
#define sv_catpvn_mg(sv,sstr,slen) sv_catpvn_flags(sv, sstr, slen, SV_GMAGIC|SV_SMAGIC);
#define sv_copypv(dsv,ssv) sv_copypv_flags(dsv, ssv, SV_GMAGIC)
#define sv_copypv_nomg(dsv,ssv) sv_copypv_flags(dsv, ssv, 0)
#define sv_2pv(sv,lp) sv_2pv_flags(sv, lp, SV_GMAGIC)
#define sv_2pv_nolen(sv) sv_2pv(sv, 0)
#define sv_2pvbyte_nolen(sv) sv_2pvbyte(sv, 0)
#define sv_2pvutf8_nolen(sv) sv_2pvutf8(sv, 0)
#define sv_2pv_nomg(sv,lp) sv_2pv_flags(sv, lp, 0)
#define sv_pvn_force(sv,lp) sv_pvn_force_flags(sv, lp, SV_GMAGIC)
#define sv_utf8_upgrade(sv) sv_utf8_upgrade_flags(sv, SV_GMAGIC)
#define sv_2iv(sv) sv_2iv_flags(sv, SV_GMAGIC)
#define sv_2uv(sv) sv_2uv_flags(sv, SV_GMAGIC)
#define sv_2nv(sv) sv_2nv_flags(sv, SV_GMAGIC)
#define sv_eq(sv1,sv2) sv_eq_flags(sv1, sv2, SV_GMAGIC)
#define sv_cmp(sv1,sv2) sv_cmp_flags(sv1, sv2, SV_GMAGIC)
#define sv_cmp_locale(sv1,sv2) sv_cmp_locale_flags(sv1, sv2, SV_GMAGIC)
#define sv_collxfrm(sv,nxp) sv_cmp_flags(sv, nxp, SV_GMAGIC)
#define sv_2bool(sv) sv_2bool_flags(sv, SV_GMAGIC)
#define sv_2bool_nomg(sv) sv_2bool_flags(sv, 0)
#define sv_insert(bigstr,offset,len,little,littlelen) Perl_sv_insert_flags(aTHX_ (bigstr),(offset), (len), (little), (littlelen), SV_GMAGIC)


#define sv_mortalcopy(sv) Perl_sv_mortalcopy_flags(aTHX_ sv, SV_GMAGIC|SV_DO_COW_SVSETSV)

#define sv_cathek(sv,hek) STMT_START { HEK * const bmxk = hek; sv_catpvn_flags(sv, HEK_KEY(bmxk), HEK_LEN(bmxk), HEK_UTF8(bmxk) ? SV_CATUTF8 : SV_CATBYTES); } STMT_END







#define sv_catpvn_nomg_utf8_upgrade(dsv,sstr,slen,nsv) STMT_START { if (!(nsv)) nsv = newSVpvn_flags(sstr, slen, SVs_TEMP); else sv_setpvn(nsv, sstr, slen); SvUTF8_off(nsv); sv_utf8_upgrade(nsv); sv_catsv_nomg(dsv, nsv); } STMT_END
# 1962 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define sv_catpvn_nomg_maybeutf8(dsv,sstr,slen,is_utf8) sv_catpvn_flags(dsv, sstr, slen, (is_utf8)?SV_CATUTF8:SV_CATBYTES)
# 1981 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define newRV_inc(sv) newRV(sv)
# 2038 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SvSHARE(sv) PL_sharehook(aTHX_ sv)
#define SvLOCK(sv) PL_lockhook(aTHX_ sv)
#define SvUNLOCK(sv) PL_unlockhook(aTHX_ sv)
#define SvDESTROYABLE(sv) PL_destroyhook(aTHX_ sv)

#define SvGETMAGIC(x) ((void)(UNLIKELY(SvGMAGICAL(x)) && mg_get(x)))
#define SvSETMAGIC(x) STMT_START { if (UNLIKELY(SvSMAGICAL(x))) mg_set(x); } STMT_END

#define SvSetSV_and(dst,src,finally) STMT_START { if (LIKELY((dst) != (src))) { sv_setsv(dst, src); finally; } } STMT_END






#define SvSetSV_nosteal_and(dst,src,finally) STMT_START { if (LIKELY((dst) != (src))) { sv_setsv_flags(dst, src, SV_GMAGIC | SV_NOSTEAL | SV_DO_COW_SVSETSV); finally; } } STMT_END







#define SvSetSV(dst,src) SvSetSV_and(dst,src, ;)

#define SvSetSV_nosteal(dst,src) SvSetSV_nosteal_and(dst,src, ;)


#define SvSetMagicSV(dst,src) SvSetSV_and(dst,src,SvSETMAGIC(dst))

#define SvSetMagicSV_nosteal(dst,src) SvSetSV_nosteal_and(dst,src,SvSETMAGIC(dst))




#define SvPEEK(sv) sv_peek(sv)




#define SvIMMORTAL(sv) (SvREADONLY(sv) && ((sv)==&PL_sv_undef || (sv)==&PL_sv_yes || (sv)==&PL_sv_no || (sv)==&PL_sv_placeholder))





#define SvREFCNT_IMMORTAL ((~(U32)0)/2)
# 2097 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define boolSV(b) ((b) ? &PL_sv_yes : &PL_sv_no)

#define isGV(sv) (SvTYPE(sv) == SVt_PVGV)


#define isGV_with_GP(pwadak) (((SvFLAGS(pwadak) & (SVp_POK|SVpgv_GP)) == SVpgv_GP) && (SvTYPE(pwadak) == SVt_PVGV || SvTYPE(pwadak) == SVt_PVLV))


#define isGV_with_GP_on(sv) STMT_START { assert (SvTYPE(sv) == SVt_PVGV || SvTYPE(sv) == SVt_PVLV); assert (!SvPOKp(sv)); assert (!SvIOKp(sv)); (SvFLAGS(sv) |= SVpgv_GP); } STMT_END





#define isGV_with_GP_off(sv) STMT_START { assert (SvTYPE(sv) == SVt_PVGV || SvTYPE(sv) == SVt_PVLV); assert (!SvPOKp(sv)); assert (!SvIOKp(sv)); (SvFLAGS(sv) &= ~SVpgv_GP); } STMT_END





#define isREGEXP(sv) (SvTYPE(sv) == SVt_REGEXP || (SvFLAGS(sv) & (SVTYPEMASK|SVp_POK|SVpgv_GP|SVf_FAKE)) == (SVt_PVLV|SVf_FAKE))






#define SvGROW(sv,len) (SvIsCOW(sv) || SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX(sv))




#define SvGROW_mutable(sv,len) (SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX_mutable(sv))

#define Sv_Grow sv_grow

#define CLONEf_COPY_STACKS 1
#define CLONEf_KEEP_PTR_TABLE 2
#define CLONEf_CLONE_HOST 4
#define CLONEf_JOIN_IN 8

struct clone_params {
  AV* stashes;
  UV flags;
  PerlInterpreter *proto_perl;
  PerlInterpreter *new_perl;
  AV *unreferenced;
};
# 2156 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define newSVpvn_utf8(s,len,u) newSVpvn_flags((s), (len), (u) ? SVf_UTF8 : 0)
# 2166 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define newSVpadname(pn) newSVpvn_utf8(PadnamePV(pn), PadnameLEN(pn), TRUE)
# 2209 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define SvOOK_offset(sv,offset) STMT_START { assert(sizeof(offset) == sizeof(STRLEN)); if (SvOOK(sv)) { (offset) = ((U8*)SvPVX_const(sv))[-1]; if (!(offset)) { Copy(SvPVX_const(sv) - 1 - sizeof(STRLEN), (U8*)&(offset), sizeof(STRLEN), U8); } } else { (offset) = 0; } } STMT_END
# 2223 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/sv.h"
#define newIO() MUTABLE_IO(newSV_type(SVt_PVIO))

#define SV_CONST(name) PL_sv_consts[SV_CONST_ ##name] ? PL_sv_consts[SV_CONST_ ##name] : (PL_sv_consts[SV_CONST_ ##name] = newSVpv_share(#name, 0))




#define SV_CONST_TIESCALAR 0
#define SV_CONST_TIEARRAY 1
#define SV_CONST_TIEHASH 2
#define SV_CONST_TIEHANDLE 3

#define SV_CONST_FETCH 4
#define SV_CONST_FETCHSIZE 5
#define SV_CONST_STORE 6
#define SV_CONST_STORESIZE 7
#define SV_CONST_EXISTS 8

#define SV_CONST_PUSH 9
#define SV_CONST_POP 10
#define SV_CONST_SHIFT 11
#define SV_CONST_UNSHIFT 12
#define SV_CONST_SPLICE 13
#define SV_CONST_EXTEND 14

#define SV_CONST_FIRSTKEY 15
#define SV_CONST_NEXTKEY 16
#define SV_CONST_SCALAR 17

#define SV_CONST_OPEN 18
#define SV_CONST_WRITE 19
#define SV_CONST_PRINT 20
#define SV_CONST_PRINTF 21
#define SV_CONST_READ 22
#define SV_CONST_READLINE 23
#define SV_CONST_GETC 24
#define SV_CONST_SEEK 25
#define SV_CONST_TELL 26
#define SV_CONST_EOF 27
#define SV_CONST_BINMODE 28
#define SV_CONST_FILENO 29
#define SV_CONST_CLOSE 30

#define SV_CONST_DELETE 31
#define SV_CONST_CLEAR 32
#define SV_CONST_UNTIE 33
#define SV_CONST_DESTROY 34

#define SV_CONSTS_COUNT 35
# 3732 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h" 1
# 21 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h"
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h" 1
# 18 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define H_UTF8 1







#define USE_UTF8_IN_NAMES (PL_hints & HINT_UTF8)


# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h" 1
# 19 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define H_REGCHARCLASS 1
# 29 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_LNBREAK_safe(s,e,is_utf8) ( ((e)-(s) > 2) ? ( ( 0x0A <= ((U8*)s)[0] && ((U8*)s)[0] <= 0x0C ) ? 1 : ( 0x0D == ((U8*)s)[0] ) ? ( ( 0x0A == ((U8*)s)[1] ) ? 2 : 1 ) : ( is_utf8 ) ? ( ( 0xC2 == ((U8*)s)[0] ) ? ( ( 0x85 == ((U8*)s)[1] ) ? 2 : 0 ) : ( ( ( 0xE2 == ((U8*)s)[0] ) && ( 0x80 == ((U8*)s)[1] ) ) && ( ( ((U8*)s)[2] & 0xFE ) == 0xA8 ) ) ? 3 : 0 ) : ( 0x85 == ((U8*)s)[0] ) ) : ((e)-(s) > 1) ? ( ( 0x0A <= ((U8*)s)[0] && ((U8*)s)[0] <= 0x0C ) ? 1 : ( 0x0D == ((U8*)s)[0] ) ? ( ( 0x0A == ((U8*)s)[1] ) ? 2 : 1 ) : ( is_utf8 ) ? ( ( ( 0xC2 == ((U8*)s)[0] ) && ( 0x85 == ((U8*)s)[1] ) ) ? 2 : 0 ) : ( 0x85 == ((U8*)s)[0] ) ) : ((e)-(s) > 0) ? ( ( 0x0A <= ((U8*)s)[0] && ((U8*)s)[0] <= 0x0D ) ? 1 : ( !( is_utf8 ) ) ? ( 0x85 == ((U8*)s)[0] ) : 0 ) : 0 )
# 54 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_LNBREAK_utf8_safe(s,e) ( ((e)-(s) > 2) ? ( ( 0x0A <= ((U8*)s)[0] && ((U8*)s)[0] <= 0x0C ) ? 1 : ( 0x0D == ((U8*)s)[0] ) ? ( ( 0x0A == ((U8*)s)[1] ) ? 2 : 1 ) : ( 0xC2 == ((U8*)s)[0] ) ? ( ( 0x85 == ((U8*)s)[1] ) ? 2 : 0 ) : ( ( ( 0xE2 == ((U8*)s)[0] ) && ( 0x80 == ((U8*)s)[1] ) ) && ( ( ((U8*)s)[2] & 0xFE ) == 0xA8 ) ) ? 3 : 0 ): ((e)-(s) > 1) ? ( ( 0x0A <= ((U8*)s)[0] && ((U8*)s)[0] <= 0x0C ) ? 1 : ( 0x0D == ((U8*)s)[0] ) ? ( ( 0x0A == ((U8*)s)[1] ) ? 2 : 1 ) : ( ( 0xC2 == ((U8*)s)[0] ) && ( 0x85 == ((U8*)s)[1] ) ) ? 2 : 0 ) : ((e)-(s) > 0) ? ( 0x0A <= ((U8*)s)[0] && ((U8*)s)[0] <= 0x0D ) : 0 )
# 72 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_LNBREAK_latin1_safe(s,e) ( ((e)-(s) > 1) ? ( ( ( 0x0A <= ((U8*)s)[0] && ((U8*)s)[0] <= 0x0C ) || 0x85 == ((U8*)s)[0] ) ? 1 : ( 0x0D == ((U8*)s)[0] ) ? ( ( 0x0A == ((U8*)s)[1] ) ? 2 : 1 ) : 0 ) : ((e)-(s) > 0) ? ( ( 0x0A <= ((U8*)s)[0] && ((U8*)s)[0] <= 0x0D ) || 0x85 == ((U8*)s)[0] ): 0 )
# 88 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_HORIZWS_high(s) ( ( 0xE1 == ((U8*)s)[0] ) ? ( ( ( 0x9A == ((U8*)s)[1] ) && ( 0x80 == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0xE2 == ((U8*)s)[0] ) ? ( ( 0x80 == ((U8*)s)[1] ) ? ( ( ( ((U8*)s)[2] <= 0x8A ) || 0xAF == ((U8*)s)[2] ) ? 3 : 0 ) : ( ( 0x81 == ((U8*)s)[1] ) && ( 0x9F == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ( 0xE3 == ((U8*)s)[0] ) && ( 0x80 == ((U8*)s)[1] ) ) && ( 0x80 == ((U8*)s)[2] ) ) ? 3 : 0 )
# 98 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_HORIZWS_cp_high(cp) ( 0x1680 == cp || ( 0x1680 < cp && ( ( 0x2000 <= cp && cp <= 0x200A ) || ( 0x200A < cp && ( 0x202F == cp || ( 0x202F < cp && ( 0x205F == cp || 0x3000 == cp ) ) ) ) ) ) )
# 110 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_VERTWS_high(s) ( ( ( ( 0xE2 == ((U8*)s)[0] ) && ( 0x80 == ((U8*)s)[1] ) ) && ( ( ((U8*)s)[2] & 0xFE ) == 0xA8 ) ) ? 3 : 0 )



#define is_VERTWS_cp_high(cp) ( 0x2028 == cp || 0x2029 == cp )
# 123 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_XDIGIT_high(s) ( ( 0xEF == ((U8*)s)[0] ) ? ( ( 0xBC == ((U8*)s)[1] ) ? ( ( ( 0x90 <= ((U8*)s)[2] && ((U8*)s)[2] <= 0x99 ) || ( 0xA1 <= ((U8*)s)[2] && ((U8*)s)[2] <= 0xA6 ) ) ? 3 : 0 ) : ( ( 0xBD == ((U8*)s)[1] ) && ( 0x81 <= ((U8*)s)[2] && ((U8*)s)[2] <= 0x86 ) ) ? 3 : 0 ): 0 )







#define is_XDIGIT_cp_high(cp) ( ( 0xFF10 <= cp && cp <= 0xFF19 ) || ( 0xFF19 < cp && ( ( 0xFF21 <= cp && cp <= 0xFF26 ) || ( 0xFF41 <= cp && cp <= 0xFF46 ) ) ) )
# 141 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_XPERLSPACE_high(s) ( ( 0xE1 == ((U8*)s)[0] ) ? ( ( ( 0x9A == ((U8*)s)[1] ) && ( 0x80 == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0xE2 == ((U8*)s)[0] ) ? ( ( 0x80 == ((U8*)s)[1] ) ? ( ( ( ((U8*)s)[2] <= 0x8A ) || ( ((U8*)s)[2] & 0xFE ) == 0xA8 || 0xAF == ((U8*)s)[2] ) ? 3 : 0 ) : ( ( 0x81 == ((U8*)s)[1] ) && ( 0x9F == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ( 0xE3 == ((U8*)s)[0] ) && ( 0x80 == ((U8*)s)[1] ) ) && ( 0x80 == ((U8*)s)[2] ) ) ? 3 : 0 )
# 151 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_XPERLSPACE_cp_high(cp) ( 0x1680 == cp || ( 0x1680 < cp && ( ( 0x2000 <= cp && cp <= 0x200A ) || ( 0x200A < cp && ( 0x2028 == cp || ( 0x2028 < cp && ( 0x2029 == cp || ( 0x2029 < cp && ( 0x202F == cp || ( 0x202F < cp && ( 0x205F == cp || 0x3000 == cp ) ) ) ) ) ) ) ) ) ) )
# 165 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_REPLACEMENT_utf8_safe(s,e) ( ( ( ( ( ((e) - (s)) >= 3 ) && ( 0xEF == ((U8*)s)[0] ) ) && ( 0xBF == ((U8*)s)[1] ) ) && ( 0xBD == ((U8*)s)[2] ) ) ? 3 : 0 )
# 174 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_NONCHAR_utf8(s) ( ( 0xEF == ((U8*)s)[0] ) ? ( ( 0xB7 == ((U8*)s)[1] ) ? ( ( 0x90 <= ((U8*)s)[2] && ((U8*)s)[2] <= 0xAF ) ? 3 : 0 ) : ( ( 0xBF == ((U8*)s)[1] ) && ( ((U8*)s)[2] >= 0xBE ) ) ? 3 : 0 ) : ( 0xF0 == ((U8*)s)[0] ) ? ( ( ( ( ((U8*)s)[1] == 0x9F || ( ( ((U8*)s)[1] & 0xEF ) == 0xAF ) ) && ( 0xBF == ((U8*)s)[2] ) ) && ( ((U8*)s)[3] >= 0xBE ) ) ? 4 : 0 ): ( 0xF1 <= ((U8*)s)[0] && ((U8*)s)[0] <= 0xF3 ) ? ( ( ( ( ( ((U8*)s)[1] & 0xCF ) == 0x8F ) && ( 0xBF == ((U8*)s)[2] ) ) && ( ((U8*)s)[3] >= 0xBE ) ) ? 4 : 0 ): ( ( ( ( 0xF4 == ((U8*)s)[0] ) && ( 0x8F == ((U8*)s)[1] ) ) && ( 0xBF == ((U8*)s)[2] ) ) && ( ((U8*)s)[3] >= 0xBE ) ) ? 4 : 0 )
# 191 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_SURROGATE_utf8(s) ( ( ( 0xED == ((U8*)s)[0] ) && ( ((U8*)s)[1] >= 0xA0 ) ) ? 3 : 0 )
# 200 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_QUOTEMETA_high(s) ( ( 0xCD == ((U8*)s)[0] ) ? ( ( 0x8F == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0xD8 == ((U8*)s)[0] ) ? ( ( 0x9C == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0xE1 == ((U8*)s)[0] ) ? ( ( 0x85 == ((U8*)s)[1] ) ? ( ( 0x9F == ((U8*)s)[2] || 0xA0 == ((U8*)s)[2] ) ? 3 : 0 ) : ( 0x9A == ((U8*)s)[1] ) ? ( ( 0x80 == ((U8*)s)[2] ) ? 3 : 0 ) : ( 0x9E == ((U8*)s)[1] ) ? ( ( ( ((U8*)s)[2] & 0xFE ) == 0xB4 ) ? 3 : 0 ) : ( ( 0xA0 == ((U8*)s)[1] ) && ( 0x8B <= ((U8*)s)[2] && ((U8*)s)[2] <= 0x8E ) ) ? 3 : 0 ): ( 0xE2 == ((U8*)s)[0] ) ? ( ( 0x80 == ((U8*)s)[1] ) ? ( ( ((U8*)s)[2] <= 0xBE ) ? 3 : 0 ) : ( 0x81 == ((U8*)s)[1] ) ? ( ( ( 0x81 <= ((U8*)s)[2] && ((U8*)s)[2] <= 0x93 ) || ( 0x95 <= ((U8*)s)[2] && ((U8*)s)[2] <= 0xAF ) ) ? 3 : 0 ) : ( 0x86 == ((U8*)s)[1] ) ? ( ( ((U8*)s)[2] >= 0x90 ) ? 3 : 0 ) : ( ( 0x87 <= ((U8*)s)[1] && ((U8*)s)[1] <= 0x90 ) || ( 0x94 <= ((U8*)s)[1] && ((U8*)s)[1] <= 0x9C ) || ( 0x9F <= ((U8*)s)[1] && ((U8*)s)[1] <= 0xAF ) || ( ((U8*)s)[1] & 0xFE ) == 0xB8 ) ? 3 : ( 0x91 == ((U8*)s)[1] ) ? ( ( ((U8*)s)[2] <= 0x9F ) ? 3 : 0 ) : ( 0x9D == ((U8*)s)[1] ) ? ( ( ((U8*)s)[2] <= 0xB5 ) ? 3 : 0 ) : ( ( 0x9E == ((U8*)s)[1] ) && ( ((U8*)s)[2] >= 0x94 ) ) ? 3 : 0 ) : ( 0xE3 == ((U8*)s)[0] ) ? ( ( 0x80 == ((U8*)s)[1] ) ? ( ( ( ((U8*)s)[2] <= 0x83 ) || ( 0x88 <= ((U8*)s)[2] && ((U8*)s)[2] <= 0xA0 ) || 0xB0 == ((U8*)s)[2] ) ? 3 : 0 ) : ( ( 0x85 == ((U8*)s)[1] ) && ( 0xA4 == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0xEF == ((U8*)s)[0] ) ? ( ( 0xB4 == ((U8*)s)[1] ) ? ( ( ((U8*)s)[2] >= 0xBE ) ? 3 : 0 ) : ( 0xB8 == ((U8*)s)[1] ) ? ( ( ((U8*)s)[2] <= 0x8F ) ? 3 : 0 ) : ( 0xB9 == ((U8*)s)[1] ) ? ( ( 0x85 == ((U8*)s)[2] || 0x86 == ((U8*)s)[2] ) ? 3 : 0 ) : ( 0xBB == ((U8*)s)[1] ) ? ( ( 0xBF == ((U8*)s)[2] ) ? 3 : 0 ) : ( 0xBE == ((U8*)s)[1] ) ? ( ( 0xA0 == ((U8*)s)[2] ) ? 3 : 0 ) : ( ( 0xBF == ((U8*)s)[1] ) && ( 0xB0 <= ((U8*)s)[2] && ((U8*)s)[2] <= 0xB8 ) ) ? 3 : 0 ): ( 0xF0 == ((U8*)s)[0] ) ? ( ( 0x9B == ((U8*)s)[1] ) ? ( ( ( 0xB2 == ((U8*)s)[2] ) && ( ( ((U8*)s)[3] & 0xFC ) == 0xA0 ) ) ? 4 : 0 ) : ( ( ( 0x9D == ((U8*)s)[1] ) && ( 0x85 == ((U8*)s)[2] ) ) && ( 0xB3 <= ((U8*)s)[3] && ((U8*)s)[3] <= 0xBA ) ) ? 4 : 0 ): ( ( 0xF3 == ((U8*)s)[0] ) && ( 0xA0 == ((U8*)s)[1] ) ) ? 4 : 0 )
# 255 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_MULTI_CHAR_FOLD_utf8_safe_part0(s,e) ( ( 0x61 == ((U8*)s)[0] ) ? ( ( ( 0xCA == ((U8*)s)[1] ) && ( 0xBE == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x66 == ((U8*)s)[0] ) ? ( ( 0x66 == ((U8*)s)[1] ) ? ( ( 0x69 == ((U8*)s)[2] || 0x6C == ((U8*)s)[2] ) ? 3 : 2 ) : ( 0x69 == ((U8*)s)[1] || 0x6C == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0x68 == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0xB1 == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x69 == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0x87 == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x6A == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0x8C == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x73 == ((U8*)s)[0] ) ? ( ( 0x73 == ((U8*)s)[1] || 0x74 == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0x74 == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0x88 == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x77 == ((U8*)s)[0] || 0x79 == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0x8A == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0xC5 == ((U8*)s)[0] ) ? ( ( ( ( 0xBF == ((U8*)s)[1] ) && ( 0xC5 == ((U8*)s)[2] ) ) && ( 0xBF == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xCA == ((U8*)s)[0] ) ? ( ( ( 0xBC == ((U8*)s)[1] ) && ( 0x6E == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0xCE == ((U8*)s)[0] ) ? ( ( ( ((U8*)s)[1] & 0xFD ) == 0xAC ) ? ( ( ( 0xCE == ((U8*)s)[2] ) && ( 0xB9 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xB1 == ((U8*)s)[1] || 0xB7 == ((U8*)s)[1] ) ? ( ( 0xCD == ((U8*)s)[2] ) ? ( ( 0x82 == ((U8*)s)[3] ) ? 4 : 0 ) : ( ( 0xCE == ((U8*)s)[2] ) && ( 0xB9 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( ( ( 0xB9 == ((U8*)s)[1] ) && ( 0xCD == ((U8*)s)[2] ) ) && ( 0x82 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xCF == ((U8*)s)[0] ) ? ( ( 0x81 == ((U8*)s)[1] ) ? ( ( ( 0xCC == ((U8*)s)[2] ) && ( 0x93 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0x85 == ((U8*)s)[1] ) ? ( ( 0xCC == ((U8*)s)[2] ) ? ( ( 0x93 == ((U8*)s)[3] ) ? 4 : 0 ) : ( ( 0xCD == ((U8*)s)[2] ) && ( 0x82 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0x89 == ((U8*)s)[1] ) ? ( ( 0xCD == ((U8*)s)[2] ) ? ( ( 0x82 == ((U8*)s)[3] ) ? 4 : 0 ) : ( ( 0xCE == ((U8*)s)[2] ) && ( 0xB9 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( ( ( 0x8E == ((U8*)s)[1] ) && ( 0xCE == ((U8*)s)[2] ) ) && ( 0xB9 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xD5 == ((U8*)s)[0] ) ? ( ( 0xA5 == ((U8*)s)[1] ) ? ( ( ( 0xD6 == ((U8*)s)[2] ) && ( 0x82 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xB4 == ((U8*)s)[1] ) ? ( ( ( 0xD5 == ((U8*)s)[2] ) && ( ( ( ((U8*)s)[3] & 0xF7 ) == 0xA5 ) || ((U8*)s)[3] == 0xAB || ((U8*)s)[3] == 0xB6 ) ) ? 4 : 0 ) : ( ( ( 0xBE == ((U8*)s)[1] ) && ( 0xD5 == ((U8*)s)[2] ) ) && ( 0xB6 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xE1 == ((U8*)s)[0] ) ? ( ( 0xBC == ((U8*)s)[1] ) ? ( ( ( ( ( ((U8*)s)[2] & 0xD8 ) == 0x80 ) && ( 0xCE == ((U8*)s)[3] ) ) && ( 0xB9 == ((U8*)s)[4] ) ) ? 5 : 0 ) : ( ( ( ( 0xBD == ((U8*)s)[1] ) && ( ( ( ((U8*)s)[2] & 0xF8 ) == 0xA0 ) || ( ( ((U8*)s)[2] & 0xFB ) == 0xB0 ) || ((U8*)s)[2] == 0xBC ) ) && ( 0xCE == ((U8*)s)[3] ) ) && ( 0xB9 == ((U8*)s)[4] ) ) ? 5 : 0 ) : 0 )
# 312 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_MULTI_CHAR_FOLD_utf8_safe_part1(s,e) ( ((e)-(s) > 3) ? ( ( 0x61 == ((U8*)s)[0] ) ? ( ( ( 0xCA == ((U8*)s)[1] ) && ( 0xBE == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x66 == ((U8*)s)[0] ) ? ( ( 0x66 == ((U8*)s)[1] ) ? ( ( 0x69 == ((U8*)s)[2] || 0x6C == ((U8*)s)[2] ) ? 3 : 2 ) : ( 0x69 == ((U8*)s)[1] || 0x6C == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0x68 == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0xB1 == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x69 == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0x87 == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x6A == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0x8C == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x73 == ((U8*)s)[0] ) ? ( ( 0x73 == ((U8*)s)[1] || 0x74 == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0x74 == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0x88 == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x77 == ((U8*)s)[0] || 0x79 == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0x8A == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0xC5 == ((U8*)s)[0] ) ? ( ( ( ( 0xBF == ((U8*)s)[1] ) && ( 0xC5 == ((U8*)s)[2] ) ) && ( 0xBF == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xCA == ((U8*)s)[0] ) ? ( ( ( 0xBC == ((U8*)s)[1] ) && ( 0x6E == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0xCE == ((U8*)s)[0] ) ? ( ( ( ((U8*)s)[1] & 0xFD ) == 0xAC ) ? ( ( ( 0xCE == ((U8*)s)[2] ) && ( 0xB9 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xB1 == ((U8*)s)[1] || 0xB7 == ((U8*)s)[1] ) ? ( ( 0xCD == ((U8*)s)[2] ) ? ( ( 0x82 == ((U8*)s)[3] ) ? 4 : 0 ) : ( ( 0xCE == ((U8*)s)[2] ) && ( 0xB9 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( ( ( 0xB9 == ((U8*)s)[1] ) && ( 0xCD == ((U8*)s)[2] ) ) && ( 0x82 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xCF == ((U8*)s)[0] ) ? ( ( 0x81 == ((U8*)s)[1] ) ? ( ( ( 0xCC == ((U8*)s)[2] ) && ( 0x93 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0x85 == ((U8*)s)[1] ) ? ( ( 0xCC == ((U8*)s)[2] ) ? ( ( 0x93 == ((U8*)s)[3] ) ? 4 : 0 ) : ( ( 0xCD == ((U8*)s)[2] ) && ( 0x82 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0x89 == ((U8*)s)[1] ) ? ( ( 0xCD == ((U8*)s)[2] ) ? ( ( 0x82 == ((U8*)s)[3] ) ? 4 : 0 ) : ( ( 0xCE == ((U8*)s)[2] ) && ( 0xB9 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( ( ( 0x8E == ((U8*)s)[1] ) && ( 0xCE == ((U8*)s)[2] ) ) && ( 0xB9 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xD5 == ((U8*)s)[0] ) ? ( ( 0xA5 == ((U8*)s)[1] ) ? ( ( ( 0xD6 == ((U8*)s)[2] ) && ( 0x82 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xB4 == ((U8*)s)[1] ) ? ( ( ( 0xD5 == ((U8*)s)[2] ) && ( ( ( ((U8*)s)[3] & 0xF7 ) == 0xA5 ) || ((U8*)s)[3] == 0xAB || ((U8*)s)[3] == 0xB6 ) ) ? 4 : 0 ) : ( ( ( 0xBE == ((U8*)s)[1] ) && ( 0xD5 == ((U8*)s)[2] ) ) && ( 0xB6 == ((U8*)s)[3] ) ) ? 4 : 0 ) : 0 ) : ((e)-(s) > 2) ? ( ( 0x61 == ((U8*)s)[0] ) ? ( ( ( 0xCA == ((U8*)s)[1] ) && ( 0xBE == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x66 == ((U8*)s)[0] ) ? ( ( 0x66 == ((U8*)s)[1] ) ? ( ( 0x69 == ((U8*)s)[2] || 0x6C == ((U8*)s)[2] ) ? 3 : 2 ) : ( 0x69 == ((U8*)s)[1] || 0x6C == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0x68 == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0xB1 == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x69 == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0x87 == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x6A == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0x8C == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x73 == ((U8*)s)[0] ) ? ( ( 0x73 == ((U8*)s)[1] || 0x74 == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0x74 == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0x88 == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x77 == ((U8*)s)[0] || 0x79 == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0x8A == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ( 0xCA == ((U8*)s)[0] ) && ( 0xBC == ((U8*)s)[1] ) ) && ( 0x6E == ((U8*)s)[2] ) ) ? 3 : 0 ): ((e)-(s) > 1) ? ( ( 0x66 == ((U8*)s)[0] ) ? ( ( 0x66 == ((U8*)s)[1] || 0x69 == ((U8*)s)[1] || 0x6C == ((U8*)s)[1] ) ? 2 : 0 ) : ( ( 0x73 == ((U8*)s)[0] ) && ( 0x73 == ((U8*)s)[1] || 0x74 == ((U8*)s)[1] ) ) ? 2 : 0 ): 0 )
# 391 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_MULTI_CHAR_FOLD_utf8_safe(s,e) ( ((e)-(s) > 5) ? ( ( 0x61 == ((U8*)s)[0] ) ? ( ( ( 0xCA == ((U8*)s)[1] ) && ( 0xBE == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x66 == ((U8*)s)[0] ) ? ( ( 0x66 == ((U8*)s)[1] ) ? ( ( 0x69 == ((U8*)s)[2] || 0x6C == ((U8*)s)[2] ) ? 3 : 2 ) : ( 0x69 == ((U8*)s)[1] || 0x6C == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0x68 == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0xB1 == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x69 == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0x87 == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x6A == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0x8C == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x73 == ((U8*)s)[0] ) ? ( ( 0x73 == ((U8*)s)[1] || 0x74 == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0x74 == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0x88 == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0x77 == ((U8*)s)[0] || 0x79 == ((U8*)s)[0] ) ? ( ( ( 0xCC == ((U8*)s)[1] ) && ( 0x8A == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0xC5 == ((U8*)s)[0] ) ? ( ( ( ( 0xBF == ((U8*)s)[1] ) && ( 0xC5 == ((U8*)s)[2] ) ) && ( 0xBF == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xCA == ((U8*)s)[0] ) ? ( ( ( 0xBC == ((U8*)s)[1] ) && ( 0x6E == ((U8*)s)[2] ) ) ? 3 : 0 ) : ( 0xCE == ((U8*)s)[0] ) ? ( ( ( ((U8*)s)[1] & 0xFD ) == 0xAC ) ? ( ( ( 0xCE == ((U8*)s)[2] ) && ( 0xB9 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xB1 == ((U8*)s)[1] || 0xB7 == ((U8*)s)[1] ) ? ( ( 0xCD == ((U8*)s)[2] ) ? ( ( 0x82 == ((U8*)s)[3] ) ? ( ( ( 0xCE == ((U8*)s)[4] ) && ( 0xB9 == ((U8*)s)[5] ) ) ? 6 : 4 ) : 0 ) : ( ( 0xCE == ((U8*)s)[2] ) && ( 0xB9 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xB9 == ((U8*)s)[1] ) ? ( ( 0xCC == ((U8*)s)[2] ) ? ( ( 0x88 == ((U8*)s)[3] ) ? ( ( 0xCC == ((U8*)s)[4] ) ? ( ( ( ((U8*)s)[5] & 0xFE ) == 0x80 ) ? 6 : 0 ) : ( ( 0xCD == ((U8*)s)[4] ) && ( 0x82 == ((U8*)s)[5] ) ) ? 6 : 0 ) : 0 ) : ( ( 0xCD == ((U8*)s)[2] ) && ( 0x82 == ((U8*)s)[3] ) ) ? 4 : 0 ) : 0 ) : ( 0xCF == ((U8*)s)[0] ) ? ( ( 0x81 == ((U8*)s)[1] ) ? ( ( ( 0xCC == ((U8*)s)[2] ) && ( 0x93 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0x85 == ((U8*)s)[1] ) ? ( ( 0xCC == ((U8*)s)[2] ) ? ( ( 0x88 == ((U8*)s)[3] ) ? ( ( 0xCC == ((U8*)s)[4] ) ? ( ( ( ((U8*)s)[5] & 0xFE ) == 0x80 ) ? 6 : 0 ) : ( ( 0xCD == ((U8*)s)[4] ) && ( 0x82 == ((U8*)s)[5] ) ) ? 6 : 0 ) : ( 0x93 == ((U8*)s)[3] ) ? ( ( 0xCC == ((U8*)s)[4] ) ? ( ( ( ((U8*)s)[5] & 0xFE ) == 0x80 ) ? 6 : 4 ) : ( ( 0xCD == ((U8*)s)[4] ) && ( 0x82 == ((U8*)s)[5] ) ) ? 6 : 4 ) : 0 ) : ( ( 0xCD == ((U8*)s)[2] ) && ( 0x82 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0x89 == ((U8*)s)[1] ) ? ( ( 0xCD == ((U8*)s)[2] ) ? ( ( 0x82 == ((U8*)s)[3] ) ? ( ( ( 0xCE == ((U8*)s)[4] ) && ( 0xB9 == ((U8*)s)[5] ) ) ? 6 : 4 ) : 0 ) : ( ( 0xCE == ((U8*)s)[2] ) && ( 0xB9 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( ( ( 0x8E == ((U8*)s)[1] ) && ( 0xCE == ((U8*)s)[2] ) ) && ( 0xB9 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xD5 == ((U8*)s)[0] ) ? ( ( 0xA5 == ((U8*)s)[1] ) ? ( ( ( 0xD6 == ((U8*)s)[2] ) && ( 0x82 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xB4 == ((U8*)s)[1] ) ? ( ( ( 0xD5 == ((U8*)s)[2] ) && ( ( ( ((U8*)s)[3] & 0xF7 ) == 0xA5 ) || ((U8*)s)[3] == 0xAB || ((U8*)s)[3] == 0xB6 ) ) ? 4 : 0 ) : ( ( ( 0xBE == ((U8*)s)[1] ) && ( 0xD5 == ((U8*)s)[2] ) ) && ( 0xB6 == ((U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xE1 == ((U8*)s)[0] ) ? ( ( 0xBC == ((U8*)s)[1] ) ? ( ( ( ( ( ((U8*)s)[2] & 0xD8 ) == 0x80 ) && ( 0xCE == ((U8*)s)[3] ) ) && ( 0xB9 == ((U8*)s)[4] ) ) ? 5 : 0 ) : ( ( ( ( 0xBD == ((U8*)s)[1] ) && ( ( ( ((U8*)s)[2] & 0xF8 ) == 0xA0 ) || ( ( ((U8*)s)[2] & 0xFB ) == 0xB0 ) || ((U8*)s)[2] == 0xBC ) ) && ( 0xCE == ((U8*)s)[3] ) ) && ( 0xB9 == ((U8*)s)[4] ) ) ? 5 : 0 ) : 0 ) : ((e)-(s) > 4) ? is_MULTI_CHAR_FOLD_utf8_safe_part0(s,e) : is_MULTI_CHAR_FOLD_utf8_safe_part1(s,e) )
# 474 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_MULTI_CHAR_FOLD_latin1_safe(s,e) ( ((e)-(s) > 2) ? ( ( ( ((U8*)s)[0] & 0xDF ) == 0x46 ) ? ( ( ( ((U8*)s)[1] & 0xDF ) == 0x46 ) ? ( ( ( ( ((U8*)s)[2] & 0xDF ) == 0x49 ) || ( ( ((U8*)s)[2] & 0xDF ) == 0x4C ) ) ? 3 : 2 ) : ( ( ( ((U8*)s)[1] & 0xDF ) == 0x49 ) || ( ( ((U8*)s)[1] & 0xDF ) == 0x4C ) ) ? 2 : 0 ) : ( ( ( ((U8*)s)[0] & 0xDF ) == 0x53 ) && ( ( ( ((U8*)s)[1] & 0xDF ) == 0x53 ) || ( ( ((U8*)s)[1] & 0xDF ) == 0x54 ) ) ) ? 2 : 0 ): ((e)-(s) > 1) ? ( ( ( ((U8*)s)[0] & 0xDF ) == 0x46 ) ? ( ( ( ( ((U8*)s)[1] & 0xDF ) == 0x46 ) || ( ( ((U8*)s)[1] & 0xDF ) == 0x49 ) || ( ( ((U8*)s)[1] & 0xDF ) == 0x4C ) ) ? 2 : 0 ) : ( ( ( ((U8*)s)[0] & 0xDF ) == 0x53 ) && ( ( ( ((U8*)s)[1] & 0xDF ) == 0x53 ) || ( ( ((U8*)s)[1] & 0xDF ) == 0x54 ) ) ) ? 2 : 0 ): 0 )
# 493 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_FOLDS_TO_MULTI_utf8(s) ( ( 0xC3 == ((U8*)s)[0] ) ? ( ( 0x9F == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0xC4 == ((U8*)s)[0] || 0xC7 == ((U8*)s)[0] ) ? ( ( 0xB0 == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0xC5 == ((U8*)s)[0] ) ? ( ( 0x89 == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0xCE == ((U8*)s)[0] ) ? ( ( ( ((U8*)s)[1] & 0xDF ) == 0x90 ) ? 2 : 0 ) : ( 0xD6 == ((U8*)s)[0] ) ? ( ( 0x87 == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0xE1 == ((U8*)s)[0] ) ? ( ( 0xBA == ((U8*)s)[1] ) ? ( ( ( 0x96 <= ((U8*)s)[2] && ((U8*)s)[2] <= 0x9A ) || 0x9E == ((U8*)s)[2] ) ? 3 : 0 ) : ( 0xBD == ((U8*)s)[1] ) ? ( ( ( ((U8*)s)[2] & 0xF9 ) == 0x90 ) ? 3 : 0 ) : ( 0xBE == ((U8*)s)[1] ) ? ( ( ( ( ((U8*)s)[2] & 0xE0 ) == 0x80 ) || ( ( ((U8*)s)[2] & 0xF0 ) == 0xA0 ) || ( ( ((U8*)s)[2] & 0xFA ) == 0xB2 ) || ( ( ((U8*)s)[2] & 0xF7 ) == 0xB4 ) ) ? 3 : 0 ) : ( ( 0xBF == ((U8*)s)[1] ) && ( ( ( ((U8*)s)[2] & 0xCA ) == 0x82 ) || ( ( ((U8*)s)[2] & 0xF7 ) == 0x84 ) || ((U8*)s)[2] == 0xA4 || ( ( ((U8*)s)[2] & 0xF7 ) == 0xB4 ) ) ) ? 3 : 0 ): ( ( ( 0xEF == ((U8*)s)[0] ) && ( 0xAC == ((U8*)s)[1] ) ) && ( ( ((U8*)s)[2] <= 0x86 ) || ( 0x93 <= ((U8*)s)[2] && ((U8*)s)[2] <= 0x97 ) ) ) ? 3 : 0 )
# 520 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_PROBLEMATIC_LOCALE_FOLD_utf8(s) ( ( ((U8*)s)[0] <= 0x7F ) ? 1 : ( ( ((U8*)s)[0] & 0xFE ) == 0xC2 ) ? 2 : ( 0xC4 == ((U8*)s)[0] || 0xC7 == ((U8*)s)[0] ) ? ( ( 0xB0 == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0xC5 == ((U8*)s)[0] ) ? ( ( 0x89 == ((U8*)s)[1] || 0xB8 == ((U8*)s)[1] || 0xBF == ((U8*)s)[1] ) ? 2 : 0 ): ( 0xCE == ((U8*)s)[0] ) ? ( ( ( ((U8*)s)[1] & 0xDF ) == 0x9C ) ? 2 : 0 ) : ( 0xE1 == ((U8*)s)[0] ) ? ( ( ( 0xBA == ((U8*)s)[1] ) && ( ( 0x96 <= ((U8*)s)[2] && ((U8*)s)[2] <= 0x9A ) || 0x9E == ((U8*)s)[2] ) ) ? 3 : 0 ): ( 0xE2 == ((U8*)s)[0] ) ? ( ( ( 0x84 == ((U8*)s)[1] ) && ( ( ((U8*)s)[2] & 0xFE ) == 0xAA ) ) ? 3 : 0 ): ( ( ( 0xEF == ((U8*)s)[0] ) && ( 0xAC == ((U8*)s)[1] ) ) && ( ((U8*)s)[2] <= 0x86 ) ) ? 3 : 0 )
# 537 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_PROBLEMATIC_LOCALE_FOLD_cp(cp) ( cp <= 0xFF || ( 0xFF < cp && ( 0x130 == cp || ( 0x130 < cp && ( 0x149 == cp || ( 0x149 < cp && ( 0x178 == cp || ( 0x178 < cp && ( 0x17F == cp || ( 0x17F < cp && ( 0x1F0 == cp || ( 0x1F0 < cp && ( 0x39C == cp || ( 0x39C < cp && ( 0x3BC == cp || ( 0x3BC < cp && ( ( 0x1E96 <= cp && cp <= 0x1E9A ) || ( 0x1E9A < cp && ( 0x1E9E == cp || ( 0x1E9E < cp && ( 0x212A == cp || ( 0x212A < cp && ( 0x212B == cp || ( 0xFB00 <= cp && cp <= 0xFB06 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
# 557 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_PROBLEMATIC_LOCALE_FOLDEDS_START_utf8(s) ( ( ((U8*)s)[0] <= 0x7F ) ? 1 : ( ( ((U8*)s)[0] & 0xFE ) == 0xC2 ) ? 2 : ( 0xC4 == ((U8*)s)[0] || 0xC7 == ((U8*)s)[0] ) ? ( ( 0xB0 == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0xC5 == ((U8*)s)[0] ) ? ( ( 0x89 == ((U8*)s)[1] || 0xB8 == ((U8*)s)[1] || 0xBF == ((U8*)s)[1] ) ? 2 : 0 ): ( 0xCA == ((U8*)s)[0] ) ? ( ( 0xBC == ((U8*)s)[1] ) ? 2 : 0 ) : ( 0xCE == ((U8*)s)[0] ) ? ( ( ( ((U8*)s)[1] & 0xDF ) == 0x9C ) ? 2 : 0 ) : ( 0xE1 == ((U8*)s)[0] ) ? ( ( ( 0xBA == ((U8*)s)[1] ) && ( ( 0x96 <= ((U8*)s)[2] && ((U8*)s)[2] <= 0x9A ) || 0x9E == ((U8*)s)[2] ) ) ? 3 : 0 ): ( 0xE2 == ((U8*)s)[0] ) ? ( ( ( 0x84 == ((U8*)s)[1] ) && ( ( ((U8*)s)[2] & 0xFE ) == 0xAA ) ) ? 3 : 0 ): ( ( ( 0xEF == ((U8*)s)[0] ) && ( 0xAC == ((U8*)s)[1] ) ) && ( ((U8*)s)[2] <= 0x86 ) ) ? 3 : 0 )
# 576 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_PROBLEMATIC_LOCALE_FOLDEDS_START_cp(cp) ( cp <= 0xFF || ( 0xFF < cp && ( 0x130 == cp || ( 0x130 < cp && ( 0x149 == cp || ( 0x149 < cp && ( 0x178 == cp || ( 0x178 < cp && ( 0x17F == cp || ( 0x17F < cp && ( 0x1F0 == cp || ( 0x1F0 < cp && ( 0x2BC == cp || ( 0x2BC < cp && ( 0x39C == cp || ( 0x39C < cp && ( 0x3BC == cp || ( 0x3BC < cp && ( ( 0x1E96 <= cp && cp <= 0x1E9A ) || ( 0x1E9A < cp && ( 0x1E9E == cp || ( 0x1E9E < cp && ( 0x212A == cp || ( 0x212A < cp && ( 0x212B == cp || ( 0xFB00 <= cp && cp <= 0xFB06 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
# 597 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_PATWS_safe(s,e,is_utf8) ( ( LIKELY((e) > (s)) ) ? ( ( ( 0x09 <= ((U8*)s)[0] && ((U8*)s)[0] <= 0x0D ) || 0x20 == ((U8*)s)[0] ) ? 1 : (! is_utf8 ) ? ( 0x85 == ((U8*)s)[0] ) : ( LIKELY(((e) - (s)) >= UTF8SKIP(s)) ) ? ( ( 0xC2 == ((U8*)s)[0] ) ? ( ( 0x85 == ((U8*)s)[1] ) ? 2 : 0 ) : ( ( ( 0xE2 == ((U8*)s)[0] ) && ( 0x80 == ((U8*)s)[1] ) ) && ( ( ((U8*)s)[2] & 0xFE ) == 0x8E || ( ((U8*)s)[2] & 0xFE ) == 0xA8 ) ) ? 3 : 0 ) : 0 ) : 0 )
# 610 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regcharclass.h"
#define is_PATWS_cp(cp) ( ( 0x09 <= cp && cp <= 0x0D ) || ( 0x0D < cp && ( 0x20 == cp || ( 0x20 < cp && ( 0x85 == cp || ( 0x85 < cp && ( 0x200E == cp || ( 0x200E < cp && ( 0x200F == cp || ( 0x200F < cp && ( 0x2028 == cp || 0x2029 == cp ) ) ) ) ) ) ) ) ) ) )
# 30 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/unicode_constants.h" 1
# 9 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/unicode_constants.h"
#define H_UNICODE_CONSTANTS 1
# 25 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/unicode_constants.h"
#define LATIN_SMALL_LETTER_LONG_S_UTF8 "\xC5\xBF"

#define COMBINING_GRAVE_ACCENT_UTF8 "\xCC\x80"

#define GREEK_CAPITAL_LETTER_IOTA_UTF8 "\xCE\x99"
#define GREEK_SMALL_LETTER_MU_UTF8 "\xCE\xBC"

#define LATIN_CAPITAL_LETTER_SHARP_S_UTF8 "\xE1\xBA\x9E"

#define LATIN_SMALL_LIGATURE_LONG_S_T_UTF8 "\xEF\xAC\x85"
#define LATIN_SMALL_LIGATURE_ST_UTF8 "\xEF\xAC\x86"

#define HYPHEN_UTF8 "\xE2\x80\x90"
#define FIRST_SURROGATE_UTF8_FIRST_BYTE 0xED
#define BOM_UTF8_FIRST_BYTE 0xEF
#define BOM_UTF8_TAIL "\xBB\xBF"

#define NBSP_NATIVE 0xA0
#define NBSP_UTF8 "\xC2\xA0"

#define DEL_NATIVE 0x7F
#define CR_NATIVE 0x0D
#define LF_NATIVE 0x0A
#define VT_NATIVE 0x0B
#define ESC_NATIVE 0x1B
#define LATIN_SMALL_LETTER_SHARP_S_NATIVE 0xDF
#define LATIN_SMALL_LETTER_A_WITH_RING_ABOVE_NATIVE 0xE5
#define LATIN_CAPITAL_LETTER_A_WITH_RING_ABOVE_NATIVE 0xC5
#define LATIN_SMALL_LETTER_Y_WITH_DIAERESIS_NATIVE 0xFF
#define MICRO_SIGN_NATIVE 0xB5
#define MAX_PRINT_A_FOR_USE_ONLY_BY_REGCOMP_DOT_C 0x7E
# 174 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/unicode_constants.h"
#define NON_OTHER_COUNT_FOR_USE_ONLY_BY_REGCOMP_DOT_C 112806
# 31 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h" 2


#define FOLD_FLAGS_LOCALE 0x1
#define FOLD_FLAGS_FULL 0x2
#define FOLD_FLAGS_NOMIX_ASCII 0x4


#define _CORE_SWASH_INIT_USER_DEFINED_PROPERTY 0x1
#define _CORE_SWASH_INIT_RETURN_IF_UNDEF 0x2
#define _CORE_SWASH_INIT_ACCEPT_INVLIST 0x4
# 60 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define is_ascii_string(s,len) is_invariant_string(s, len)

#define uvchr_to_utf8(a,b) uvchr_to_utf8_flags(a,b,0)
#define uvchr_to_utf8_flags(d,uv,flags) uvoffuni_to_utf8_flags(d,NATIVE_TO_UNI(uv),flags)

#define utf8_to_uvchr_buf(s,e,lenp) utf8n_to_uvchr(s, (U8*)(e) - (U8*)(s), lenp, ckWARN_d(WARN_UTF8) ? 0 : UTF8_ALLOW_ANY)



#define to_uni_fold(c,p,lenp) _to_uni_fold_flags(c, p, lenp, FOLD_FLAGS_FULL)
#define to_utf8_fold(c,p,lenp) _to_utf8_fold_flags(c, p, lenp, FOLD_FLAGS_FULL)
#define to_utf8_lower(a,b,c) _to_utf8_lower_flags(a,b,c,0)
#define to_utf8_upper(a,b,c) _to_utf8_upper_flags(a,b,c,0)
#define to_utf8_title(a,b,c) _to_utf8_title_flags(a,b,c,0)


#define is_utf8_string_loc(s,len,ep) is_utf8_string_loclen(s, len, ep, 0)

#define foldEQ_utf8(s1,pe1,l1,u1,s2,pe2,l2,u2) foldEQ_utf8_flags(s1, pe1, l1, u1, s2, pe2, l2, u2, 0)

#define FOLDEQ_UTF8_NOMIX_ASCII (1 << 0)
#define FOLDEQ_LOCALE (1 << 1)
#define FOLDEQ_S1_ALREADY_FOLDED (1 << 2)
#define FOLDEQ_S2_ALREADY_FOLDED (1 << 3)
#define FOLDEQ_S1_FOLDS_SANE (1 << 4)
#define FOLDEQ_S2_FOLDS_SANE (1 << 5)

#define ibcmp_utf8(s1,pe1,l1,u1,s2,pe2,l2,u2) cBOOL(! foldEQ_utf8(s1, pe1, l1, u1, s2, pe2, l2, u2))
# 98 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"

# 123 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
extern const unsigned char PL_utf8skip[];






#define NATIVE_TO_LATIN1(ch) (ch)
#define LATIN1_TO_NATIVE(ch) (ch)







#define NATIVE_UTF8_TO_I8(ch) (ch)
#define I8_TO_NATIVE_UTF8(ch) (ch)


#define UNI_TO_NATIVE(ch) (ch)
#define NATIVE_TO_UNI(ch) (ch)
# 195 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define UNI_IS_INVARIANT(c) (((UV)c) < 0x80)



#define UTF8_IS_CONTINUED(c) (((U8)c) & 0x80)




#define UTF8_IS_START(c) (((U8)c) >= 0xc2)



#define UTF8_IS_CONTINUATION(c) ((((U8)c) & 0xC0) == 0x80)





#define UTF8_IS_DOWNGRADEABLE_START(c) (((U8)(c) & 0xfe) == 0xc2)



#define UTF8_IS_ABOVE_LATIN1(c) ((U8)(c) >= 0xc4)




#define UTF_START_MARK(len) (((len) > 7) ? 0xFF : (0xFF & (0xFE << (7-(len)))))




#define UTF_START_MASK(len) (((len) >= 7) ? 0x00 : (0x1F >> ((len)-2)))



#define UTF_CONTINUATION_MARK 0x80





#define UTF_ACCUMULATION_SHIFT 6


#define UTF_CONTINUATION_MASK ((U8)0x3f)




#define UTF_ACCUMULATION_OVERFLOW_MASK (((UV) UTF_CONTINUATION_MASK) << ((sizeof(UV) * CHARBITS) - UTF_ACCUMULATION_SHIFT))
# 263 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define OFFUNISKIP(uv) ( (uv) < 0x80 ? 1 : (uv) < 0x800 ? 2 : (uv) < 0x10000 ? 3 : (uv) < 0x200000 ? 4 : (uv) < 0x4000000 ? 5 : (uv) < 0x80000000 ? 6 : 7 )
# 276 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define UTF8_MAXBYTES 13
# 290 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define QUESTION_MARK_CTRL DEL_NATIVE

#define MAX_UTF8_TWO_BYTE 0x7FF

#define UTF8_MAXBYTES_CASE UTF8_MAXBYTES
# 305 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define NATIVE_TO_ASCII(ch) NATIVE_TO_LATIN1(ch)
#define ASCII_TO_NATIVE(ch) LATIN1_TO_NATIVE(ch)


#define NATIVE_TO_UTF(ch) NATIVE_UTF8_TO_I8(ch)
#define NATIVE_TO_I8(ch) NATIVE_UTF8_TO_I8(ch)
#define UTF_TO_NATIVE(ch) I8_TO_NATIVE_UTF8(ch)
#define I8_TO_NATIVE(ch) I8_TO_NATIVE_UTF8(ch)
#define NATIVE8_TO_UNI(ch) NATIVE_TO_LATIN1(ch)







#define UTF8_ACCUMULATE(old,new) (((old) << UTF_ACCUMULATION_SHIFT) | ((NATIVE_UTF8_TO_I8((U8)new)) & UTF_CONTINUATION_MASK))




#define UTF8_IS_NEXT_CHAR_DOWNGRADEABLE(s,e) (UTF8_IS_DOWNGRADEABLE_START(*s) && ( (e) - (s) > 1) && UTF8_IS_CONTINUATION(*((s)+1)))




#define NATIVE_SKIP(uv) OFFUNISKIP(NATIVE_TO_UNI(uv))
# 347 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define UNISKIP(uv) NATIVE_SKIP(uv)
#define UVCHR_SKIP(uv) NATIVE_SKIP(uv)






#define TWO_BYTE_UTF8_TO_NATIVE(HI,LO) UNI_TO_NATIVE(UTF8_ACCUMULATE((NATIVE_UTF8_TO_I8(HI) & UTF_START_MASK(2)), (LO)))




#define TWO_BYTE_UTF8_TO_UNI(HI,LO) NATIVE_TO_UNI(TWO_BYTE_UTF8_TO_NATIVE(HI, LO))
# 370 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define UTF8SKIP(s) PL_utf8skip[*(const U8*)(s)]





#define UTF8_IS_INVARIANT(c) UNI_IS_INVARIANT(NATIVE_UTF8_TO_I8(c))



#define NATIVE_BYTE_IS_INVARIANT(c) UNI_IS_INVARIANT(NATIVE_TO_LATIN1(c))


#define UVCHR_IS_INVARIANT(uv) UNI_IS_INVARIANT(NATIVE_TO_UNI(uv))

#define MAX_PORTABLE_UTF8_TWO_BYTE 0x3FF
# 395 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define __BASE_TWO_BYTE_HI(c,translate_function) I8_TO_NATIVE_UTF8((translate_function(c) >> UTF_ACCUMULATION_SHIFT) | UTF_START_MARK(2))


#define __BASE_TWO_BYTE_LO(c,translate_function) I8_TO_NATIVE_UTF8((translate_function(c) & UTF_CONTINUATION_MASK) | UTF_CONTINUATION_MARK)






#define UTF8_TWO_BYTE_HI_nocast(c) __BASE_TWO_BYTE_HI(c, NATIVE_TO_UNI)
#define UTF8_TWO_BYTE_LO_nocast(c) __BASE_TWO_BYTE_LO(c, NATIVE_TO_UNI)



#define UTF8_EIGHT_BIT_HI(c) (__ASSERT_(FITS_IN_8_BITS(c)) ((U8) __BASE_TWO_BYTE_HI(c, NATIVE_TO_LATIN1)))

#define UTF8_EIGHT_BIT_LO(c) (__ASSERT_(FITS_IN_8_BITS(c)) ((U8) __BASE_TWO_BYTE_LO(c, NATIVE_TO_LATIN1)))
# 421 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define UTF8_TWO_BYTE_HI(c) (__ASSERT_((sizeof(c) == 1) || !(((WIDEST_UTYPE)(c)) & ~MAX_UTF8_TWO_BYTE)) ((U8) __BASE_TWO_BYTE_HI(c, NATIVE_TO_UNI)))



#define UTF8_TWO_BYTE_LO(c) (__ASSERT_((sizeof(c) == 1) || !(((WIDEST_UTYPE)(c)) & ~MAX_UTF8_TWO_BYTE)) ((U8) __BASE_TWO_BYTE_LO(c, NATIVE_TO_UNI)))






#define ILLEGAL_UTF8_BYTE I8_TO_NATIVE_UTF8(0xC1)
# 441 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define isIDFIRST_lazy_if(p,UTF) ((IN_BYTES || !UTF ) ? isIDFIRST(*(p)) : isIDFIRST_utf8((const U8*)p))


#define isWORDCHAR_lazy_if(p,UTF) ((IN_BYTES || (!UTF )) ? isWORDCHAR(*(p)) : isWORDCHAR_utf8((const U8*)p))


#define isALNUM_lazy_if(p,UTF) isWORDCHAR_lazy_if(p,UTF)

#define UTF8_MAXLEN UTF8_MAXBYTES


#define UTF8_MAX_FOLD_CHAR_EXPAND 3

#define IN_BYTES (CopHINTS_get(PL_curcop) & HINT_BYTES)
# 467 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define DO_UTF8(sv) (SvUTF8(sv) && !IN_BYTES)
#define IN_UNI_8_BIT (((CopHINTS_get(PL_curcop) & (HINT_UNI_8_BIT)) || (CopHINTS_get(PL_curcop) & HINT_LOCALE_PARTIAL && _is_in_locale_category(FALSE, -1))) && ! IN_BYTES)







#define UTF8_ALLOW_EMPTY 0x0001


#define UTF8_ALLOW_CONTINUATION 0x0002


#define UTF8_ALLOW_NON_CONTINUATION 0x0004


#define UTF8_ALLOW_SHORT 0x0008


#define UTF8_ALLOW_LONG 0x0010

#define UTF8_DISALLOW_SURROGATE 0x0020
#define UTF8_WARN_SURROGATE 0x0040

#define UTF8_DISALLOW_NONCHAR 0x0080
#define UTF8_WARN_NONCHAR 0x0100

#define UTF8_DISALLOW_SUPER 0x0200
#define UTF8_WARN_SUPER 0x0400





#define UTF8_DISALLOW_FE_FF 0x0800
#define UTF8_WARN_FE_FF 0x1000

#define UTF8_CHECK_ONLY 0x2000




#define UTF8_ALLOW_FFFF 0
#define UTF8_ALLOW_SURROGATE 0

#define UTF8_DISALLOW_ILLEGAL_INTERCHANGE (UTF8_DISALLOW_SUPER|UTF8_DISALLOW_NONCHAR|UTF8_DISALLOW_SURROGATE|UTF8_DISALLOW_FE_FF)
#define UTF8_WARN_ILLEGAL_INTERCHANGE (UTF8_WARN_SUPER|UTF8_WARN_NONCHAR|UTF8_WARN_SURROGATE|UTF8_WARN_FE_FF)

#define UTF8_ALLOW_ANY (~(UTF8_DISALLOW_ILLEGAL_INTERCHANGE|UTF8_WARN_ILLEGAL_INTERCHANGE))

#define UTF8_ALLOW_ANYUV (UTF8_ALLOW_EMPTY & ~(UTF8_DISALLOW_ILLEGAL_INTERCHANGE|UTF8_WARN_ILLEGAL_INTERCHANGE))


#define UTF8_ALLOW_DEFAULT (ckWARN(WARN_UTF8) ? 0 : UTF8_ALLOW_ANYUV)






#define UTF8_FIRST_PROBLEMATIC_CODE_POINT_FIRST_BYTE FIRST_SURROGATE_UTF8_FIRST_BYTE


#define UTF8_IS_SURROGATE(s) cBOOL(is_SURROGATE_utf8(s))
#define UTF8_IS_REPLACEMENT(s,send) cBOOL(is_REPLACEMENT_utf8_safe(s,send))
# 547 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define UTF8_IS_SUPER(s) (*(U8*) (s) >= 0xF4 && (*(U8*) (s) > 0xF4 || (*((U8*) (s) + 1) >= 0x90)))





#define UTF8_IS_NONCHAR_GIVEN_THAT_NON_SUPER_AND_GE_PROBLEMATIC(s) cBOOL(is_NONCHAR_utf8(s))

#define UTF8_IS_NONCHAR_(s) UTF8_IS_NONCHAR_GIVEN_THAT_NON_SUPER_AND_GE_PROBLEMATIC(s)


#define UNICODE_SURROGATE_FIRST 0xD800
#define UNICODE_SURROGATE_LAST 0xDFFF
#define UNICODE_REPLACEMENT 0xFFFD
#define UNICODE_BYTE_ORDER_MARK 0xFEFF



#define PERL_UNICODE_MAX 0x10FFFF

#define UNICODE_WARN_SURROGATE 0x0001
#define UNICODE_WARN_NONCHAR 0x0002
#define UNICODE_WARN_SUPER 0x0004
#define UNICODE_WARN_FE_FF 0x0008
#define UNICODE_DISALLOW_SURROGATE 0x0010
#define UNICODE_DISALLOW_NONCHAR 0x0020
#define UNICODE_DISALLOW_SUPER 0x0040
#define UNICODE_DISALLOW_FE_FF 0x0080
#define UNICODE_WARN_ILLEGAL_INTERCHANGE (UNICODE_WARN_SURROGATE|UNICODE_WARN_NONCHAR|UNICODE_WARN_SUPER)

#define UNICODE_DISALLOW_ILLEGAL_INTERCHANGE (UNICODE_DISALLOW_SURROGATE|UNICODE_DISALLOW_NONCHAR|UNICODE_DISALLOW_SUPER)



#define UNICODE_ALLOW_SURROGATE 0
#define UNICODE_ALLOW_SUPER 0
#define UNICODE_ALLOW_ANY 0

#define UNICODE_IS_SURROGATE(c) ((c) >= UNICODE_SURROGATE_FIRST && (c) <= UNICODE_SURROGATE_LAST)

#define UNICODE_IS_REPLACEMENT(c) ((c) == UNICODE_REPLACEMENT)
#define UNICODE_IS_BYTE_ORDER_MARK(c) ((c) == UNICODE_BYTE_ORDER_MARK)
#define UNICODE_IS_NONCHAR(c) ((c >= 0xFDD0 && c <= 0xFDEF) || ((((c & 0xFFFE) == 0xFFFE)) && ! UNICODE_IS_SUPER(c)))






#define UNICODE_IS_SUPER(c) ((c) > PERL_UNICODE_MAX)
#define UNICODE_IS_FE_FF(c) ((c) > 0x7FFFFFFF)

#define LATIN_SMALL_LETTER_SHARP_S LATIN_SMALL_LETTER_SHARP_S_NATIVE
#define LATIN_SMALL_LETTER_Y_WITH_DIAERESIS LATIN_SMALL_LETTER_Y_WITH_DIAERESIS_NATIVE

#define MICRO_SIGN MICRO_SIGN_NATIVE
#define LATIN_CAPITAL_LETTER_A_WITH_RING_ABOVE LATIN_CAPITAL_LETTER_A_WITH_RING_ABOVE_NATIVE

#define LATIN_SMALL_LETTER_A_WITH_RING_ABOVE LATIN_SMALL_LETTER_A_WITH_RING_ABOVE_NATIVE

#define UNICODE_GREEK_CAPITAL_LETTER_SIGMA 0x03A3
#define UNICODE_GREEK_SMALL_LETTER_FINAL_SIGMA 0x03C2
#define UNICODE_GREEK_SMALL_LETTER_SIGMA 0x03C3
#define GREEK_SMALL_LETTER_MU 0x03BC
#define GREEK_CAPITAL_LETTER_MU 0x039C

#define LATIN_CAPITAL_LETTER_Y_WITH_DIAERESIS 0x0178
#define LATIN_CAPITAL_LETTER_SHARP_S 0x1E9E
#define LATIN_SMALL_LETTER_LONG_S 0x017F
#define LATIN_SMALL_LIGATURE_LONG_S_T 0xFB05
#define LATIN_SMALL_LIGATURE_ST 0xFB06
#define KELVIN_SIGN 0x212A
#define ANGSTROM_SIGN 0x212B

#define UNI_DISPLAY_ISPRINT 0x0001
#define UNI_DISPLAY_BACKSLASH 0x0002
#define UNI_DISPLAY_QQ (UNI_DISPLAY_ISPRINT|UNI_DISPLAY_BACKSLASH)
#define UNI_DISPLAY_REGEX (UNI_DISPLAY_ISPRINT|UNI_DISPLAY_BACKSLASH)

#define ANYOF_FOLD_SHARP_S(node,input,end) (ANYOF_BITMAP_TEST(node, LATIN_SMALL_LETTER_SHARP_S) && (ANYOF_NONBITMAP(node)) && (ANYOF_FLAGS(node) & ANYOF_LOC_NONBITMAP_FOLD) && ((end) > (input) + 1) && isALPHA_FOLD_EQ((input)[0], 's'))






#define SHARP_S_SKIP 2
# 647 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define IS_UTF8_CHAR_FAST(n) ((n) <= 4)
# 666 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define is_UTF8_CHAR_utf8_no_length_checks(s) ( ( 0xC2 <= ((U8*)s)[0] && ((U8*)s)[0] <= 0xDF ) ? ( ( ( ((U8*)s)[1] & 0xC0 ) == 0x80 ) ? 2 : 0 ) : ( 0xE0 == ((U8*)s)[0] ) ? ( ( ( ( ((U8*)s)[1] & 0xE0 ) == 0xA0 ) && ( ( ((U8*)s)[2] & 0xC0 ) == 0x80 ) ) ? 3 : 0 ): ( 0xE1 <= ((U8*)s)[0] && ((U8*)s)[0] <= 0xEF ) ? ( ( ( ( ((U8*)s)[1] & 0xC0 ) == 0x80 ) && ( ( ((U8*)s)[2] & 0xC0 ) == 0x80 ) ) ? 3 : 0 ): ( 0xF0 == ((U8*)s)[0] ) ? ( ( ( ( 0x90 <= ((U8*)s)[1] && ((U8*)s)[1] <= 0xBF ) && ( ( ((U8*)s)[2] & 0xC0 ) == 0x80 ) ) && ( ( ((U8*)s)[3] & 0xC0 ) == 0x80 ) ) ? 4 : 0 ): ( ( ( ( 0xF1 <= ((U8*)s)[0] && ((U8*)s)[0] <= 0xF7 ) && ( ( ((U8*)s)[1] & 0xC0 ) == 0x80 ) ) && ( ( ((U8*)s)[2] & 0xC0 ) == 0x80 ) ) && ( ( ((U8*)s)[3] & 0xC0 ) == 0x80 ) ) ? 4 : 0 )
# 693 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define isUTF8_CHAR(s,e) (UNLIKELY((e) <= (s)) ? 0 : (UTF8_IS_INVARIANT(*s)) ? 1 : UNLIKELY(((e) - (s)) < UTF8SKIP(s)) ? 0 : LIKELY(IS_UTF8_CHAR_FAST(UTF8SKIP(s))) ? is_UTF8_CHAR_utf8_no_length_checks(s) : _is_utf8_char_slow(s, e))
# 703 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/utf8.h"
#define is_utf8_char_buf(buf,buf_end) isUTF8_CHAR(buf, buf_end)



#define IS_UTF8_CHAR(p,n) (isUTF8_CHAR(p, (p) + (n)) == n)
# 22 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h" 2

struct regnode {
    U8 flags;
    U8 type;
    U16 next_off;
};

typedef struct regnode regnode;

struct reg_substr_data;

struct reg_data;

struct regexp_engine;
struct regexp;

struct reg_substr_datum {
    ssize_t min_offset;
    ssize_t max_offset ;
    SV *substr;
    SV *utf8_substr;
    ssize_t end_shift;
};
struct reg_substr_data {
    U8 check_ix;
    struct reg_substr_datum data[3];
};


#define SV_SAVED_COPY SV *saved_copy;






typedef struct regexp_paren_pair {
    ssize_t start;
    ssize_t end;






    ssize_t start_tmp;
} regexp_paren_pair;
# 81 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h"
struct reg_code_block {
    STRLEN start;
    STRLEN end;
    OP *block;
    REGEXP *src_regex;
};
# 100 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h"
#define _REGEXP_COMMON const struct regexp_engine* engine; REGEXP *mother_re; HV *paren_names; U32 extflags; SSize_t minlen; SSize_t minlenret; STRLEN gofs; struct reg_substr_data *substrs; U32 nparens; U32 intflags; void *pprivate; U32 lastparen; U32 lastcloseparen; regexp_paren_pair *offs; char *subbeg; SV_SAVED_COPY SSize_t sublen; SSize_t suboffset; SSize_t subcoffset; SSize_t maxlen; PERL_BITFIELD32 pre_prefix:4; PERL_BITFIELD32 compflags:9; CV *qr_anoncv
# 140 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h"
typedef struct regexp {
 HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; char * xpvlenu_pv; } xpv_len_u;
 const struct regexp_engine* engine; REGEXP *mother_re; HV *paren_names; U32 extflags; ssize_t minlen; ssize_t minlenret; STRLEN gofs; struct reg_substr_data *substrs; U32 nparens; U32 intflags; void *pprivate; U32 lastparen; U32 lastcloseparen; regexp_paren_pair *offs; char *subbeg; SV *saved_copy; ssize_t sublen; ssize_t suboffset; ssize_t subcoffset; ssize_t maxlen; unsigned pre_prefix:4; unsigned compflags:9; CV *qr_anoncv;
} regexp;

#define RXp_PAREN_NAMES(rx) ((rx)->paren_names)


typedef struct re_scream_pos_data_s
{
    char **scream_olds;
    ssize_t *scream_pos;
} re_scream_pos_data;




typedef struct regexp_engine {
    REGEXP* (*comp) (PerlInterpreter* my_perl __attribute__((unused)), SV * const pattern, U32 flags);
    I32 (*exec) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, char* stringarg, char* strend,
                     char* strbeg, ssize_t minend, SV* sv,
                     void* data, U32 flags);
    char* (*intuit) (PerlInterpreter* my_perl __attribute__((unused)),
                        REGEXP * const rx,
                        SV *sv,
                        const char * const strbeg,
                        char *strpos,
                        char *strend,
                        const U32 flags,
                       re_scream_pos_data *data);
    SV* (*checkstr) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx);
    void (*free) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx);
    void (*numbered_buff_FETCH) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const I32 paren,
                                    SV * const sv);
    void (*numbered_buff_STORE) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const I32 paren,
                                   SV const * const value);
    I32 (*numbered_buff_LENGTH) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const SV * const sv,
                                    const I32 paren);
    SV* (*named_buff) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, SV * const key,
                           SV * const value, const U32 flags);
    SV* (*named_buff_iter) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const SV * const lastkey,
                                const U32 flags);
    SV* (*qr_package)(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx);

    void* (*dupe) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, CLONE_PARAMS *param);

    REGEXP* (*op_comp) (PerlInterpreter* my_perl __attribute__((unused)), SV ** const patternp, int pat_count,
      OP *expr, const struct regexp_engine* eng,
      REGEXP *old_re,
      _Bool *is_bare_re, U32 orig_rx_flags, U32 pm_flags);
} regexp_engine;






#define RX_BUFF_IDX_CARET_PREMATCH -5
#define RX_BUFF_IDX_CARET_POSTMATCH -4
#define RX_BUFF_IDX_CARET_FULLMATCH -3
#define RX_BUFF_IDX_PREMATCH -2
#define RX_BUFF_IDX_POSTMATCH -1
#define RX_BUFF_IDX_FULLMATCH 0
# 212 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h"
#define RXapif_FETCH 0x0001
#define RXapif_STORE 0x0002
#define RXapif_DELETE 0x0004
#define RXapif_CLEAR 0x0008
#define RXapif_EXISTS 0x0010
#define RXapif_SCALAR 0x0020
#define RXapif_FIRSTKEY 0x0040
#define RXapif_NEXTKEY 0x0080


#define RXapif_ONE 0x0100
#define RXapif_ALL 0x0200


#define RXapif_REGNAME 0x0400
#define RXapif_REGNAMES 0x0800
#define RXapif_REGNAMES_COUNT 0x1000
# 258 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h"
#define SvRX(sv) (Perl_get_re_arg(aTHX_ sv))
#define SvRXOK(sv) (Perl_get_re_arg(aTHX_ sv) ? TRUE : FALSE)
# 273 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h"
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op_reg_common.h" 1
# 24 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op_reg_common.h"
#define RXf_PMf_STD_PMMOD_SHIFT 0






#define RXf_PMf_MULTILINE (1U << (RXf_PMf_STD_PMMOD_SHIFT+0))
#define RXf_PMf_SINGLELINE (1U << (RXf_PMf_STD_PMMOD_SHIFT+1))
#define RXf_PMf_FOLD (1U << (RXf_PMf_STD_PMMOD_SHIFT+2))
#define RXf_PMf_EXTENDED (1U << (RXf_PMf_STD_PMMOD_SHIFT+3))
#define RXf_PMf_EXTENDED_MORE (1U << (RXf_PMf_STD_PMMOD_SHIFT+4))
#define RXf_PMf_NOCAPTURE (1U << (RXf_PMf_STD_PMMOD_SHIFT+5))

#define RXf_PMf_KEEPCOPY (1U << (RXf_PMf_STD_PMMOD_SHIFT+6))







typedef enum {
    REGEX_DEPENDS_CHARSET = 0,
    REGEX_LOCALE_CHARSET,
    REGEX_UNICODE_CHARSET,
    REGEX_ASCII_RESTRICTED_CHARSET,
    REGEX_ASCII_MORE_RESTRICTED_CHARSET
} regex_charset;

#define _RXf_PMf_CHARSET_SHIFT ((RXf_PMf_STD_PMMOD_SHIFT)+7)
#define RXf_PMf_CHARSET (7U << (_RXf_PMf_CHARSET_SHIFT))




static __inline__ void
set_regex_charset(U32 * const flags, const regex_charset cs)
    __attribute__((nonnull(1)));

static __inline__ void
set_regex_charset(U32 * const flags, const regex_charset cs)
{



    *flags &= ~(7U << (((0)+7)));
    *flags |= (cs << ((0)+7));
}

static __inline__ regex_charset
get_regex_charset(const U32 flags)
    __attribute__((warn_unused_result));

static __inline__ regex_charset
get_regex_charset(const U32 flags)
{


    return (regex_charset) ((flags & (7U << (((0)+7)))) >> ((0)+7));
}

#define RXf_PMf_STRICT (1U<<(RXf_PMf_STD_PMMOD_SHIFT+10))

#define _RXf_PMf_SHIFT_COMPILETIME (RXf_PMf_STD_PMMOD_SHIFT+11)







#define RXf_PMf_SPLIT (1U<<(RXf_PMf_STD_PMMOD_SHIFT+11))



#define _RXf_PMf_SHIFT_NEXT (RXf_PMf_STD_PMMOD_SHIFT+12)



#define RXf_PMf_COMPILETIME (RXf_PMf_MULTILINE|RXf_PMf_SINGLELINE|RXf_PMf_FOLD|RXf_PMf_EXTENDED|RXf_PMf_EXTENDED_MORE|RXf_PMf_KEEPCOPY|RXf_PMf_NOCAPTURE|RXf_PMf_CHARSET|RXf_PMf_STRICT)
#define RXf_PMf_FLAGCOPYMASK (RXf_PMf_COMPILETIME|RXf_PMf_SPLIT)
# 119 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op_reg_common.h"
#define PMf_MULTILINE (1U<<0)
#define PMf_SINGLELINE (1U<<1)
#define PMf_FOLD (1U<<2)
#define PMf_EXTENDED (1U<<3)
#define PMf_EXTENDED_MORE (1U<<4)
#define PMf_NOCAPTURE (1U<<5)
#define PMf_KEEPCOPY (1U<<6)
#define PMf_CHARSET (7U<<7)
#define PMf_STRICT (1U<<10)
#define PMf_SPLIT (1U<<11)
# 274 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h" 2

#define RXf_PMf_STD_PMMOD (RXf_PMf_MULTILINE|RXf_PMf_SINGLELINE|RXf_PMf_FOLD|RXf_PMf_EXTENDED|RXf_PMf_NOCAPTURE)

#define CASE_STD_PMMOD_FLAGS_PARSE_SET(pmfl,x_count) case IGNORE_PAT_MOD: *(pmfl) |= RXf_PMf_FOLD; break; case MULTILINE_PAT_MOD: *(pmfl) |= RXf_PMf_MULTILINE; break; case SINGLE_PAT_MOD: *(pmfl) |= RXf_PMf_SINGLELINE; break; case XTENDED_PAT_MOD: *(pmfl) |= RXf_PMf_EXTENDED; (x_count)++; break; case NOCAPTURE_PAT_MOD: *(pmfl) |= RXf_PMf_NOCAPTURE; break;






#define STD_PMMOD_FLAGS_PARSE_X_WARN(x_count) if (UNLIKELY((x_count) > 1)) { Perl_ck_warner_d(aTHX_ packWARN2(WARN_DEPRECATED, WARN_REGEXP), "Having more than one /%c regexp modifier is deprecated", XTENDED_PAT_MOD); }







#define STD_PMMOD_FLAGS_CLEAR(pmfl) *(pmfl) &= ~(RXf_PMf_FOLD|RXf_PMf_MULTILINE|RXf_PMf_SINGLELINE|RXf_PMf_EXTENDED|RXf_PMf_CHARSET|RXf_PMf_NOCAPTURE)
# 302 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h"
#define DEFAULT_PAT_MOD '^'
#define EXEC_PAT_MOD 'e'
#define KEEPCOPY_PAT_MOD 'p'
#define NOCAPTURE_PAT_MOD 'n'
#define ONCE_PAT_MOD 'o'
#define GLOBAL_PAT_MOD 'g'
#define CONTINUE_PAT_MOD 'c'
#define MULTILINE_PAT_MOD 'm'
#define SINGLE_PAT_MOD 's'
#define IGNORE_PAT_MOD 'i'
#define XTENDED_PAT_MOD 'x'
#define NONDESTRUCT_PAT_MOD 'r'
#define LOCALE_PAT_MOD 'l'
#define UNICODE_PAT_MOD 'u'
#define DEPENDS_PAT_MOD 'd'
#define ASCII_RESTRICT_PAT_MOD 'a'

#define ONCE_PAT_MODS "o"
#define KEEPCOPY_PAT_MODS "p"
#define NOCAPTURE_PAT_MODS "n"
#define EXEC_PAT_MODS "e"
#define LOOP_PAT_MODS "gc"
#define NONDESTRUCT_PAT_MODS "r"
#define LOCALE_PAT_MODS "l"
#define UNICODE_PAT_MODS "u"
#define DEPENDS_PAT_MODS "d"
#define ASCII_RESTRICT_PAT_MODS "a"
#define ASCII_MORE_RESTRICT_PAT_MODS "aa"




#define STD_PAT_MODS "msixxn"

#define CHARSET_PAT_MODS ASCII_RESTRICT_PAT_MODS DEPENDS_PAT_MODS LOCALE_PAT_MODS UNICODE_PAT_MODS




#define INT_PAT_MODS STD_PAT_MODS KEEPCOPY_PAT_MODS

#define EXT_PAT_MODS ONCE_PAT_MODS KEEPCOPY_PAT_MODS NOCAPTURE_PAT_MODS
#define QR_PAT_MODS STD_PAT_MODS EXT_PAT_MODS CHARSET_PAT_MODS
#define M_PAT_MODS QR_PAT_MODS LOOP_PAT_MODS
#define S_PAT_MODS M_PAT_MODS EXEC_PAT_MODS NONDESTRUCT_PAT_MODS
# 359 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h"
#define RXf_SPLIT RXf_PMf_SPLIT
# 394 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h"
#define RXf_BASE_SHIFT (_RXf_PMf_SHIFT_NEXT + 2)


#define RXf_NO_INPLACE_SUBST (1U<<(RXf_BASE_SHIFT+2))
#define RXf_EVAL_SEEN (1U<<(RXf_BASE_SHIFT+3))


#define RXf_UNBOUNDED_QUANTIFIER_SEEN (1U<<(RXf_BASE_SHIFT+4))
#define RXf_CHECK_ALL (1U<<(RXf_BASE_SHIFT+5))


#define RXf_MATCH_UTF8 (1U<<(RXf_BASE_SHIFT+6))


#define RXf_USE_INTUIT_NOML (1U<<(RXf_BASE_SHIFT+7))
#define RXf_USE_INTUIT_ML (1U<<(RXf_BASE_SHIFT+8))
#define RXf_INTUIT_TAIL (1U<<(RXf_BASE_SHIFT+9))
#define RXf_USE_INTUIT (RXf_USE_INTUIT_NOML|RXf_USE_INTUIT_ML)


#define RXf_IS_ANCHORED (1U<<(RXf_BASE_SHIFT+10))


#define RXf_COPY_DONE (1U<<(RXf_BASE_SHIFT+11))


#define RXf_TAINTED_SEEN (1U<<(RXf_BASE_SHIFT+12))

#define RXf_TAINTED (1U<<(RXf_BASE_SHIFT+13))


#define RXf_START_ONLY (1U<<(RXf_BASE_SHIFT+14))
#define RXf_SKIPWHITE (1U<<(RXf_BASE_SHIFT+15))

#define RXf_WHITE (1U<<(RXf_BASE_SHIFT+16))
#define RXf_NULL (1U<<(RXf_BASE_SHIFT+17))
# 454 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h"
#define RX_ISTAINTED(prog) (RX_EXTFLAGS(prog) & RXf_TAINTED)
#define RX_TAINT_on(prog) (RX_EXTFLAGS(prog) |= RXf_TAINTED)
#define RXp_MATCH_TAINTED(prog) (RXp_EXTFLAGS(prog) & RXf_TAINTED_SEEN)
#define RX_MATCH_TAINTED(prog) (RX_EXTFLAGS(prog) & RXf_TAINTED_SEEN)
#define RXp_MATCH_TAINTED_on(prog) (RXp_EXTFLAGS(prog) |= RXf_TAINTED_SEEN)
#define RX_MATCH_TAINTED_on(prog) (RX_EXTFLAGS(prog) |= RXf_TAINTED_SEEN)
#define RX_MATCH_TAINTED_off(prog) (RX_EXTFLAGS(prog) &= ~RXf_TAINTED_SEEN)


#define RX_HAS_CUTGROUP(prog) ((prog)->intflags & PREGf_CUTGROUP_SEEN)
#define RX_MATCH_TAINTED_set(prog,t) ((t) ? RX_MATCH_TAINTED_on(prog) : RX_MATCH_TAINTED_off(prog))



#define RXp_MATCH_COPIED(prog) (RXp_EXTFLAGS(prog) & RXf_COPY_DONE)
#define RX_MATCH_COPIED(prog) (RX_EXTFLAGS(prog) & RXf_COPY_DONE)
#define RXp_MATCH_COPIED_on(prog) (RXp_EXTFLAGS(prog) |= RXf_COPY_DONE)
#define RX_MATCH_COPIED_on(prog) (RX_EXTFLAGS(prog) |= RXf_COPY_DONE)
#define RXp_MATCH_COPIED_off(prog) (RXp_EXTFLAGS(prog) &= ~RXf_COPY_DONE)
#define RX_MATCH_COPIED_off(prog) (RX_EXTFLAGS(prog) &= ~RXf_COPY_DONE)
#define RX_MATCH_COPIED_set(prog,t) ((t) ? RX_MATCH_COPIED_on(prog) : RX_MATCH_COPIED_off(prog))



#define RXp_EXTFLAGS(rx) ((rx)->extflags)
#define RXp_COMPFLAGS(rx) ((rx)->compflags)


#define RX_PRECOMP(prog) (RX_WRAPPED(prog) + ReANY(prog)->pre_prefix)
#define RX_PRECOMP_const(prog) (RX_WRAPPED_const(prog) + ReANY(prog)->pre_prefix)



#define RX_PRELEN(prog) (RX_WRAPLEN(prog) - ReANY(prog)->pre_prefix - 1)
#define RX_WRAPPED(prog) ReANY(prog)->xpv_len_u.xpvlenu_pv
#define RX_WRAPPED_const(prog) ((const char *)RX_WRAPPED(prog))
#define RX_WRAPLEN(prog) SvCUR(prog)
#define RX_CHECK_SUBSTR(prog) (ReANY(prog)->check_substr)
#define RX_REFCNT(prog) SvREFCNT(prog)
#define RX_EXTFLAGS(prog) RXp_EXTFLAGS(ReANY(prog))
#define RX_COMPFLAGS(prog) RXp_COMPFLAGS(ReANY(prog))
#define RX_ENGINE(prog) (ReANY(prog)->engine)
#define RX_SUBBEG(prog) (ReANY(prog)->subbeg)
#define RX_SUBOFFSET(prog) (ReANY(prog)->suboffset)
#define RX_SUBCOFFSET(prog) (ReANY(prog)->subcoffset)
#define RX_OFFS(prog) (ReANY(prog)->offs)
#define RX_NPARENS(prog) (ReANY(prog)->nparens)
#define RX_SUBLEN(prog) (ReANY(prog)->sublen)
#define RX_MINLEN(prog) (ReANY(prog)->minlen)
#define RX_MINLENRET(prog) (ReANY(prog)->minlenret)
#define RX_GOFS(prog) (ReANY(prog)->gofs)
#define RX_LASTPAREN(prog) (ReANY(prog)->lastparen)
#define RX_LASTCLOSEPAREN(prog) (ReANY(prog)->lastcloseparen)
#define RX_SAVED_COPY(prog) (ReANY(prog)->saved_copy)

#define RX_ZERO_LEN(prog) (RX_OFFS(prog)[0].start + (SSize_t)RX_GOFS(prog) == RX_OFFS(prog)[0].end)
# 518 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h"
#define RX_MATCH_COPY_FREE(rx) STMT_START {if (RX_SAVED_COPY(rx)) { SV_CHECK_THINKFIRST_COW_DROP(RX_SAVED_COPY(rx)); } if (RX_MATCH_COPIED(rx)) { Safefree(RX_SUBBEG(rx)); RX_MATCH_COPIED_off(rx); }} STMT_END
# 534 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h"
#define RXp_MATCH_UTF8(prog) (RXp_EXTFLAGS(prog) & RXf_MATCH_UTF8)
#define RX_MATCH_UTF8(prog) (RX_EXTFLAGS(prog) & RXf_MATCH_UTF8)
#define RX_MATCH_UTF8_on(prog) (RX_EXTFLAGS(prog) |= RXf_MATCH_UTF8)
#define RX_MATCH_UTF8_off(prog) (RX_EXTFLAGS(prog) &= ~RXf_MATCH_UTF8)
#define RX_MATCH_UTF8_set(prog,t) ((t) ? RX_MATCH_UTF8_on(prog) : RX_MATCH_UTF8_off(prog))




#define RX_UTF8(prog) SvUTF8(prog)




#define REXEC_COPY_STR 0x01
#define REXEC_CHECKED 0x02
#define REXEC_SCREAM 0x04
#define REXEC_IGNOREPOS 0x08
#define REXEC_NOT_FIRST 0x10





#define REXEC_COPY_SKIP_PRE 0x20
#define REXEC_COPY_SKIP_POST 0x40
#define REXEC_FAIL_ON_UNDERFLOW 0x80




#define ReREFCNT_inc(re) ({ REGEXP *const _rerefcnt_inc = (re); assert(SvTYPE(_rerefcnt_inc) == SVt_REGEXP); SvREFCNT_inc(_rerefcnt_inc); _rerefcnt_inc; })







#define ReREFCNT_dec(re) ({ REGEXP *const _rerefcnt_dec = (re); SvREFCNT_dec(_rerefcnt_dec); })
# 583 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h"
#define ReANY(re) S_ReANY((const REGEXP *)(re))



#define FBMcf_TAIL_DOLLAR 1
#define FBMcf_TAIL_DOLLARM 2
#define FBMcf_TAIL_Z 4
#define FBMcf_TAIL_z 8
#define FBMcf_TAIL (FBMcf_TAIL_DOLLAR|FBMcf_TAIL_DOLLARM|FBMcf_TAIL_Z|FBMcf_TAIL_z)

#define FBMrf_MULTILINE 1

struct regmatch_state;
struct regmatch_slab;





typedef struct {
    regexp *rex;
    PMOP *curpm;

    SV *saved_copy;

    char *subbeg;
    STRLEN sublen;
    STRLEN suboffset;
    STRLEN subcoffset;
    MAGIC *pos_magic;
    ssize_t pos;
    U8 pos_flags;
} regmatch_info_aux_eval;






typedef struct {
    regmatch_info_aux_eval *info_aux_eval;
    struct regmatch_state *old_regmatch_state;
    struct regmatch_slab *old_regmatch_slab;
    char *poscache;
} regmatch_info_aux;
# 637 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h"
typedef struct {
    REGEXP *prog;
    const char * strbeg;
    char *strend;
    char *till;
    SV *sv;
    char *ganch;
    char *cutpoint;
    regmatch_info_aux *info_aux;
    regmatch_info_aux_eval *info_aux_eval;
    I32 poscache_maxiter;
    I32 poscache_iter;
    STRLEN poscache_size;
    _Bool intuit;
    _Bool is_utf8_pat;
    _Bool is_utf8_target;
    _Bool warned;
} regmatch_info;





#define MAX_RECURSE_EVAL_NOCHANGE_DEPTH 1000


typedef I32 CHECKPOINT;

typedef struct regmatch_state {
    int resume_state;
    char *locinput;

    union {
# 690 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/regexp.h"
        regmatch_info_aux info_aux;

        regmatch_info_aux_eval info_aux_eval;




 struct {
     struct regmatch_state *prev_yes_state;
 } yes;




        struct {

     struct regmatch_state *prev_yes_state;
     U32 lastparen;
     U32 lastcloseparen;
     CHECKPOINT cp;

        } branchlike;

 struct {

     struct regmatch_state *prev_yes_state;
     U32 lastparen;
     U32 lastcloseparen;
     CHECKPOINT cp;

     regnode *next_branch;
 } branch;

 struct {

     struct regmatch_state *prev_yes_state;
     U32 lastparen;
     U32 lastcloseparen;
     CHECKPOINT cp;

     U32 accepted;
     _Bool longfold;
     U16 *jump;
     regnode *me;
     U8 *firstpos;
     U32 firstchars;
     U16 nextword;
     U16 topword;
 } trie;



 struct {

     struct regmatch_state *prev_yes_state;
     struct regmatch_state *prev_eval;
     struct regmatch_state *prev_curlyx;
     REGEXP *prev_rex;
     CHECKPOINT cp;
     CHECKPOINT lastcp;
     U32 close_paren;
     regnode *B;
 } eval;

 struct {

     struct regmatch_state *prev_yes_state;
     I32 wanted;
     I32 logical;
     regnode *me;
 } ifmatch;

 struct {

     struct regmatch_state *prev_yes_state;
     struct regmatch_state *prev_mark;
     SV* mark_name;
     char *mark_loc;
 } mark;

 struct {
     int val;
 } keeper;



 struct {

     struct regmatch_state *prev_yes_state;
     struct regmatch_state *prev_curlyx;
     regnode *me;
     regnode *B;
     CHECKPOINT cp;
     _Bool minmod;
     int parenfloor;


     int count;
     char *lastloc;
 } curlyx;

 struct {

     struct regmatch_state *prev_yes_state;
     struct regmatch_state *save_curlyx;
     CHECKPOINT cp;
     CHECKPOINT lastcp;
     char *save_lastloc;
     I32 cache_offset;
     I32 cache_mask;
 } whilem;

 struct {

     struct regmatch_state *prev_yes_state;
     int c1, c2;
     CHECKPOINT cp;
     U32 lastparen;
     U32 lastcloseparen;
     I32 alen;
     I32 count;
     _Bool minmod;
     regnode *A, *B;
     regnode *me;
            U8 c1_utf8[13 +1];
            U8 c2_utf8[13 +1];
 } curlym;

 struct {
     U32 paren;
     CHECKPOINT cp;
     U32 lastparen;
     U32 lastcloseparen;
     int c1, c2;
     char *maxpos;
     char *oldloc;
     int count;
     int min, max;
     regnode *A, *B;
            U8 c1_utf8[13 +1];
            U8 c2_utf8[13 +1];
 } curly;

    } u;
} regmatch_state;





#define PERL_REGMATCH_SLAB_SLOTS ((4096 - 3 * sizeof (void*)) / sizeof(regmatch_state))


typedef struct regmatch_slab {
    regmatch_state states[((4096 - 3 * sizeof (void*)) / sizeof(regmatch_state))];
    struct regmatch_slab *prev, *next;
} regmatch_slab;
# 3733 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/util.h" 1
# 35 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/util.h"
#define PERL_FILE_IS_ABSOLUTE(f) (*(f) == '/')
# 54 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/util.h"
#define ibcmp(s1,s2,len) cBOOL(! foldEQ(s1, s2, len))
#define ibcmp_locale(s1,s2,len) cBOOL(! foldEQ_locale(s1, s2, len))







#define PERL_DRAND48_QUAD 







typedef unsigned long long perl_drand48_t;
# 83 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/util.h"
#define PL_RANDOM_STATE_TYPE perl_drand48_t

#define Perl_drand48_init(seed) (Perl_drand48_init_r(&PL_random_state, (seed)))
#define Perl_drand48() (Perl_drand48_r(&PL_random_state))
# 176 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/util.h"
#define HSm_APIVERLEN 0x0000001F
#define HS_APIVERLEN_MAX HSm_APIVERLEN
#define HSm_XSVERLEN 0x0000FF00
#define HS_XSVERLEN_MAX 0xFF

#define HSf_SETXSUBFN 0x00000020
#define HSf_POPMARK 0x00000040
#define HSf_IMP_CXT 0x00000080
#define HSm_INTRPSIZE 0xFFFF0000




#define HSm_KEY_MATCH (HSm_INTRPSIZE|HSf_IMP_CXT)
#define HSf_NOCHK HSm_KEY_MATCH


#define HS_GETINTERPSIZE(key) ((key) >> 16)



#define HS_GETXSVERLEN(key) ((key) >> 8 & 0xFF)
#define HS_GETAPIVERLEN(key) ((key) & HSm_APIVERLEN)




#define HS_KEYp(interpsize,cxt,setxsubfn,popmark,apiverlen,xsverlen) (((interpsize) << 16) | ((xsverlen) > HS_XSVERLEN_MAX ? (Perl_croak_nocontext("panic: handshake overflow"), HS_XSVERLEN_MAX) : (xsverlen) << 8) | (cBOOL(setxsubfn) ? HSf_SETXSUBFN : 0) | (cBOOL(cxt) ? HSf_IMP_CXT : 0) | (cBOOL(popmark) ? HSf_POPMARK : 0) | ((apiverlen) > HS_APIVERLEN_MAX ? (Perl_croak_nocontext("panic: handshake overflow"), HS_APIVERLEN_MAX) : (apiverlen)))
# 221 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/util.h"
#define HS_KEY(setxsubfn,popmark,apiver,xsver) HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, sizeof("" apiver "")-1, sizeof("" xsver "")-1)


#define HS_CXT aTHX
# 3734 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/form.h" 1
# 10 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/form.h"
#define FF_END 0
#define FF_LINEMARK 1
#define FF_LITERAL 2
#define FF_SKIP 3
#define FF_FETCH 4
#define FF_CHECKNL 5
#define FF_CHECKCHOP 6
#define FF_SPACE 7
#define FF_HALFSPACE 8
#define FF_ITEM 9
#define FF_CHOP 10
#define FF_LINEGLOB 11
#define FF_DECIMAL 12
#define FF_NEWLINE 13
#define FF_BLANK 14
#define FF_MORE 15
#define FF_0DECIMAL 16
#define FF_LINESNGL 17
# 3735 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/gv.h" 1
# 11 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/gv.h"
struct gp {
    SV * gp_sv;
    struct io * gp_io;
    CV * gp_cv;
    U32 gp_cvgen;
    U32 gp_refcnt;
    HV * gp_hv;
    AV * gp_av;
    CV * gp_form;
    GV * gp_egv;
    unsigned gp_line:31;
    unsigned gp_flags:1;
    HEK * gp_file_hek;
};

#define GvXPVGV(gv) ((XPVGV*)SvANY(gv))
# 62 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/gv.h"
#define GvGP(gv) (0+(gv)->sv_u.svu_gp)
#define GvGP_set(gv,gp) ((gv)->sv_u.svu_gp = (gp))
#define GvFLAGS(gv) (GvXPVGV(gv)->xpv_cur)
#define GvSTASH(gv) (GvXPVGV(gv)->xnv_u.xgv_stash)
#define GvNAME_HEK(gv) (GvXPVGV(gv)->xiv_u.xivu_namehek)
#define GvNAME_get(gv) HEK_KEY(GvNAME_HEK(gv))
#define GvNAMELEN_get(gv) HEK_LEN(GvNAME_HEK(gv))
#define GvNAMEUTF8(gv) HEK_UTF8(GvNAME_HEK(gv))


#define GvNAME(gv) GvNAME_get(gv)
#define GvNAMELEN(gv) GvNAMELEN_get(gv)

#define GvASSIGN_GENERATION(gv) (0 + ((XPV*) SvANY(gv))->xpv_len)
#define GvASSIGN_GENERATION_set(gv,val) STMT_START { assert(SvTYPE(gv) == SVt_PVGV); (((XPV*) SvANY(gv))->xpv_len = (val)); } STMT_END
# 102 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/gv.h"
#define GvSV(gv) (GvGP(gv)->gp_sv)

#define GvSVn(gv) (*(GvGP(gv)->gp_sv ? &(GvGP(gv)->gp_sv) : &(GvGP(gv_SVadd(gv))->gp_sv)))






#define GvREFCNT(gv) (GvGP(gv)->gp_refcnt)
#define GvIO(gv) ( (gv) && ( SvTYPE((const SV*)(gv)) == SVt_PVGV || SvTYPE((const SV*)(gv)) == SVt_PVLV ) && GvGP(gv) ? GvIOp(gv) : NULL )
# 123 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/gv.h"
#define GvIOp(gv) (GvGP(gv)->gp_io)
#define GvIOn(gv) (GvIO(gv) ? GvIOp(gv) : GvIOp(gv_IOadd(gv)))

#define GvFORM(gv) (GvGP(gv)->gp_form)
#define GvAV(gv) (GvGP(gv)->gp_av)

#define GvAVn(gv) (GvGP(gv)->gp_av ? GvGP(gv)->gp_av : GvGP(gv_AVadd(gv))->gp_av)


#define GvHV(gv) ((GvGP(gv))->gp_hv)

#define GvHVn(gv) (GvGP(gv)->gp_hv ? GvGP(gv)->gp_hv : GvGP(gv_HVadd(gv))->gp_hv)



#define GvCV(gv) (0+GvGP(gv)->gp_cv)
#define GvCV_set(gv,cv) (GvGP(gv)->gp_cv = (cv))
#define GvCVGEN(gv) (GvGP(gv)->gp_cvgen)
#define GvCVu(gv) (GvGP(gv)->gp_cvgen ? NULL : GvGP(gv)->gp_cv)

#define GvGPFLAGS(gv) (GvGP(gv)->gp_flags)

#define GvLINE(gv) (GvGP(gv)->gp_line)
#define GvFILE_HEK(gv) (GvGP(gv)->gp_file_hek)
#define GvFILEx(gv) HEK_KEY(GvFILE_HEK(gv))
#define GvFILE(gv) (GvFILE_HEK(gv) ? GvFILEx(gv) : NULL)
#define GvFILEGV(gv) (GvFILE_HEK(gv) ? gv_fetchfile(GvFILEx(gv)) : NULL)

#define GvEGV(gv) (GvGP(gv)->gp_egv)
#define GvEGVx(gv) (isGV_with_GP(gv) ? GvEGV(gv) : NULL)
#define GvENAME(gv) GvNAME(GvEGV(gv) ? GvEGV(gv) : gv)
#define GvENAMELEN(gv) GvNAMELEN(GvEGV(gv) ? GvEGV(gv) : gv)
#define GvENAMEUTF8(gv) GvNAMEUTF8(GvEGV(gv) ? GvEGV(gv) : gv)
#define GvENAME_HEK(gv) GvNAME_HEK(GvEGV(gv) ? GvEGV(gv) : gv)
#define GvESTASH(gv) GvSTASH(GvEGV(gv) ? GvEGV(gv) : gv)

#define GVf_INTRO 0x01
#define GVf_MULTI 0x02
#define GVf_ASSUMECV 0x04

#define GVf_IMPORTED 0xF0
#define GVf_IMPORTED_SV 0x10
#define GVf_IMPORTED_AV 0x20
#define GVf_IMPORTED_HV 0x40
#define GVf_IMPORTED_CV 0x80

#define GvINTRO(gv) (GvFLAGS(gv) & GVf_INTRO)
#define GvINTRO_on(gv) (GvFLAGS(gv) |= GVf_INTRO)
#define GvINTRO_off(gv) (GvFLAGS(gv) &= ~GVf_INTRO)

#define GvMULTI(gv) (GvFLAGS(gv) & GVf_MULTI)
#define GvMULTI_on(gv) (GvFLAGS(gv) |= GVf_MULTI)
#define GvMULTI_off(gv) (GvFLAGS(gv) &= ~GVf_MULTI)

#define GvASSUMECV(gv) (GvFLAGS(gv) & GVf_ASSUMECV)
#define GvASSUMECV_on(gv) (GvFLAGS(gv) |= GVf_ASSUMECV)
#define GvASSUMECV_off(gv) (GvFLAGS(gv) &= ~GVf_ASSUMECV)

#define GvIMPORTED(gv) (GvFLAGS(gv) & GVf_IMPORTED)
#define GvIMPORTED_on(gv) (GvFLAGS(gv) |= GVf_IMPORTED)
#define GvIMPORTED_off(gv) (GvFLAGS(gv) &= ~GVf_IMPORTED)

#define GvIMPORTED_SV(gv) (GvFLAGS(gv) & GVf_IMPORTED_SV)
#define GvIMPORTED_SV_on(gv) (GvFLAGS(gv) |= GVf_IMPORTED_SV)
#define GvIMPORTED_SV_off(gv) (GvFLAGS(gv) &= ~GVf_IMPORTED_SV)

#define GvIMPORTED_AV(gv) (GvFLAGS(gv) & GVf_IMPORTED_AV)
#define GvIMPORTED_AV_on(gv) (GvFLAGS(gv) |= GVf_IMPORTED_AV)
#define GvIMPORTED_AV_off(gv) (GvFLAGS(gv) &= ~GVf_IMPORTED_AV)

#define GvIMPORTED_HV(gv) (GvFLAGS(gv) & GVf_IMPORTED_HV)
#define GvIMPORTED_HV_on(gv) (GvFLAGS(gv) |= GVf_IMPORTED_HV)
#define GvIMPORTED_HV_off(gv) (GvFLAGS(gv) &= ~GVf_IMPORTED_HV)

#define GvIMPORTED_CV(gv) (GvFLAGS(gv) & GVf_IMPORTED_CV)
#define GvIMPORTED_CV_on(gv) (GvFLAGS(gv) |= GVf_IMPORTED_CV)
#define GvIMPORTED_CV_off(gv) (GvFLAGS(gv) &= ~GVf_IMPORTED_CV)

#define GPf_ALIASED_SV 1

#define GvALIASED_SV(gv) (GvGPFLAGS(gv) & GPf_ALIASED_SV)
#define GvALIASED_SV_on(gv) (GvGPFLAGS(gv) |= GPf_ALIASED_SV)
#define GvALIASED_SV_off(gv) (GvGPFLAGS(gv) &= ~GPf_ALIASED_SV)


#define GvIN_PAD(gv) 0
#define GvIN_PAD_on(gv) NOOP
#define GvIN_PAD_off(gv) NOOP
#define Nullgv Null(GV*)


#define DM_RUID 0x001
#define DM_EUID 0x002
#define DM_UID (DM_RUID|DM_EUID)
#define DM_ARRAY_ISA 0x004
#define DM_RGID 0x010
#define DM_EGID 0x020
#define DM_GID (DM_RGID|DM_EGID)
#define DM_DELAY 0x100




#define GV_ADD 0x01


#define GV_ADDMULTI 0x02

#define GV_ADDWARN 0x04

#define GV_NOINIT 0x10


#define GV_NOADD_NOINIT 0x20

#define GV_NOEXPAND 0x40
#define GV_NOTQUAL 0x80

#define GV_AUTOLOAD 0x100
#define GV_CROAK 0x200
#define GV_ADDMG 0x400
#define GV_NO_SVGMAGIC 0x800

#define GV_CACHE_ONLY 0x1000



#define GV_SUPER 0x1000


#define GV_AUTOLOAD_ISMETHOD 1






#define GV_NOADD_MASK (SVf_UTF8|GV_NOADD_NOINIT|GV_NOEXPAND|GV_NOTQUAL|GV_ADDMG|GV_NO_SVGMAGIC)





#define gv_fullname3(sv,gv,prefix) gv_fullname4(sv,gv,prefix,TRUE)
#define gv_efullname3(sv,gv,prefix) gv_efullname4(sv,gv,prefix,TRUE)
#define gv_fetchmethod(stash,name) gv_fetchmethod_autoload(stash, name, TRUE)
#define gv_fetchsv_nomg(n,f,t) gv_fetchsv(n,(f)|GV_NO_SVGMAGIC,t)
#define gv_init(gv,stash,name,len,multi) gv_init_pvn(gv,stash,name,len,GV_ADDMULTI*!!(multi))

#define gv_fetchmeth(stash,name,len,level) gv_fetchmeth_pvn(stash, name, len, level, 0)
#define gv_fetchmeth_autoload(stash,name,len,level) gv_fetchmeth_pvn_autoload(stash, name, len, level, 0)
#define gv_fetchmethod_flags(stash,name,flags) gv_fetchmethod_pv_flags(stash, name, flags)
#define gv_autoload4(stash,name,len,method) gv_autoload_pvn(stash, name, len, !!(method))

#define newGVgen(pack) newGVgen_flags(pack, 0)
#define gv_method_changed(gv) ( assert_(isGV_with_GP(gv)) GvREFCNT(gv) > 1 ? (void)++PL_sub_generation : mro_method_changed_in(GvSTASH(gv)) )







#define gv_AVadd(gv) gv_add_by_type((gv), SVt_PVAV)
#define gv_HVadd(gv) gv_add_by_type((gv), SVt_PVHV)
#define gv_IOadd(gv) gv_add_by_type((gv), SVt_PVIO)
#define gv_SVadd(gv) gv_add_by_type((gv), SVt_NULL)
# 3736 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pad.h" 1
# 22 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pad.h"
typedef unsigned long PADOFFSET;





#define NOT_IN_PAD ((PADOFFSET) -1)





struct padlist {
    ssize_t xpadl_max;
    PAD ** xpadl_alloc;
    U32 xpadl_id;
    U32 xpadl_outid;
};

struct padnamelist {
    ssize_t xpadnl_fill;
    PADNAME ** xpadnl_alloc;
    ssize_t xpadnl_max;
    PADOFFSET xpadnl_max_named;
    U32 xpadnl_refcnt;
};
# 57 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pad.h"
#define PERL_PADNAME_MINIMAL 


#define _PADNAME_BASE char * xpadn_pv; HV * xpadn_ourstash; union { HV * xpadn_typestash; CV * xpadn_protocv; } xpadn_type_u; U32 xpadn_low; U32 xpadn_high; U32 xpadn_refcnt; int xpadn_gen; U8 xpadn_len; U8 xpadn_flags
# 74 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pad.h"
struct padname {
    char * xpadn_pv; HV * xpadn_ourstash; union { HV * xpadn_typestash; CV * xpadn_protocv; } xpadn_type_u; U32 xpadn_low; U32 xpadn_high; U32 xpadn_refcnt; int xpadn_gen; U8 xpadn_len; U8 xpadn_flags;
};

struct padname_with_str {

    char * xpadn_pv; HV * xpadn_ourstash; union { HV * xpadn_typestash; CV * xpadn_protocv; } xpadn_type_u; U32 xpadn_low; U32 xpadn_high; U32 xpadn_refcnt; int xpadn_gen; U8 xpadn_len; U8 xpadn_flags;



    char xpadn_str[1];
};

#undef _PADNAME_BASE

#define PADNAME_FROM_PV(s) ((PADNAME *)((s) - STRUCT_OFFSET(struct padname_with_str, xpadn_str)))






#define PERL_PADSEQ_INTRO U32_MAX
#define COP_SEQMAX_INC (PL_cop_seqmax++, (void)(PL_cop_seqmax == PERL_PADSEQ_INTRO && PL_cop_seqmax++))
# 106 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pad.h"
#define COP_SEQ_RANGE_LOW(pn) (pn)->xpadn_low
#define COP_SEQ_RANGE_HIGH(pn) (pn)->xpadn_high
#define PARENT_PAD_INDEX(pn) (pn)->xpadn_low
#define PARENT_FAKELEX_FLAGS(pn) (pn)->xpadn_high



#define PAD_FAKELEX_ANON 1
#define PAD_FAKELEX_MULTI 2



#define padnew_CLONE 1
#define padnew_SAVE 2
#define padnew_SAVESUB 4



typedef enum {
 padtidy_SUB,
 padtidy_SUBCLONE,
 padtidy_FORMAT
} padtidy_type;



#define padadd_OUR 0x01
#define padadd_STATE 0x02
#define padadd_NO_DUP_CHECK 0x04
#define padadd_STALEOK 0x08






#define pad_peg(label) 
# 158 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pad.h"
#define ASSERT_CURPAD_LEGAL(label) 
#define ASSERT_CURPAD_ACTIVE(label) 
# 296 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pad.h"
#define PadlistARRAY(pl) (pl)->xpadl_alloc
#define PadlistMAX(pl) (pl)->xpadl_max
#define PadlistNAMES(pl) ((PADNAMELIST *)*PadlistARRAY(pl))
#define PadlistNAMESARRAY(pl) PadnamelistARRAY(PadlistNAMES(pl))
#define PadlistNAMESMAX(pl) PadnamelistMAX(PadlistNAMES(pl))
#define PadlistREFCNT(pl) 1

#define PadnamelistARRAY(pnl) (pnl)->xpadnl_alloc
#define PadnamelistMAX(pnl) (pnl)->xpadnl_fill
#define PadnamelistMAXNAMED(pnl) (pnl)->xpadnl_max_named
#define PadnamelistREFCNT(pnl) (pnl)->xpadnl_refcnt
#define PadnamelistREFCNT_dec(pnl) Perl_padnamelist_free(aTHX_ pnl)

#define PadARRAY(pad) AvARRAY(pad)
#define PadMAX(pad) AvFILLp(pad)

#define PadnamePV(pn) (pn)->xpadn_pv
#define PadnameLEN(pn) (pn)->xpadn_len
#define PadnameUTF8(pn) 1
#define PadnameSV(pn) newSVpvn_flags(PadnamePV(pn), PadnameLEN(pn), SVs_TEMP|SVf_UTF8)

#define PadnameFLAGS(pn) (pn)->xpadn_flags
#define PadnameIsOUR(pn) (!!(pn)->xpadn_ourstash)
#define PadnameOURSTASH(pn) (pn)->xpadn_ourstash
#define PadnameTYPE(pn) (pn)->xpadn_type_u.xpadn_typestash
#define PadnamePROTOCV(pn) (pn)->xpadn_type_u.xpadn_protocv
#define PadnameREFCNT(pn) (pn)->xpadn_refcnt
#define PadnameREFCNT_dec(pn) Perl_padname_free(aTHX_ pn)
#define PadnameOURSTASH_set(pn,s) (PadnameOURSTASH(pn) = (s))
#define PadnameTYPE_set(pn,s) (PadnameTYPE(pn) = (s))
#define PadnameOUTER(pn) (PadnameFLAGS(pn) & PADNAMEt_OUTER)
#define PadnameIsSTATE(pn) (PadnameFLAGS(pn) & PADNAMEt_STATE)
#define PadnameLVALUE(pn) (PadnameFLAGS(pn) & PADNAMEt_LVALUE)

#define PadnameLVALUE_on(pn) (PadnameFLAGS(pn) |= PADNAMEt_LVALUE)
#define PadnameIsSTATE_on(pn) (PadnameFLAGS(pn) |= PADNAMEt_STATE)

#define PADNAMEt_OUTER 1
#define PADNAMEt_STATE 2
#define PADNAMEt_LVALUE 4
#define PADNAMEt_TYPED 8
#define PADNAMEt_OUR 16


#define SvPAD_STATE PadnameIsSTATE
#define SvPAD_TYPED(pn) (!!PadnameTYPE(pn))
#define SvPAD_OUR(pn) (!!PadnameOURSTASH(pn))
#define SvPAD_STATE_on PadnameIsSTATE_on
#define SvPAD_TYPED_on(pn) (PadnameFLAGS(pn) |= PADNAMEt_TYPED)
#define SvPAD_OUR_on(pn) (PadnameFLAGS(pn) |= PADNAMEt_OUR)
#define SvOURSTASH PadnameOURSTASH
#define SvOURSTASH_set PadnameOURSTASH_set
#define SVpad_STATE PADNAMEt_STATE
#define SVpad_TYPED PADNAMEt_TYPED
#define SVpad_OUR PADNAMEt_OUR





#define PAD_SV(po) (PL_curpad[po])
#define PAD_SETSV(po,sv) PL_curpad[po] = (sv)


#define PAD_SVl(po) (PL_curpad[po])

#define PAD_BASE_SV(padlist,po) (PadlistARRAY(padlist)[1]) ? AvARRAY(MUTABLE_AV((PadlistARRAY(padlist)[1])))[po] : NULL;





#define PAD_SET_CUR_NOSAVE(padlist,nth) PL_comppad = (PAD*) (PadlistARRAY(padlist)[nth]); PL_curpad = AvARRAY(PL_comppad); DEBUG_Xv(PerlIO_printf(Perl_debug_log, "Pad 0x%" UVxf "[0x%" UVxf "] set_cur    depth=%d\n", PTR2UV(PL_comppad), PTR2UV(PL_curpad), (int)(nth)));







#define PAD_SET_CUR(padlist,nth) SAVECOMPPAD(); PAD_SET_CUR_NOSAVE(padlist,nth);




#define PAD_SAVE_SETNULLPAD() SAVECOMPPAD(); PL_comppad = NULL; PL_curpad = NULL; DEBUG_Xv(PerlIO_printf(Perl_debug_log, "Pad set_null\n"));



#define PAD_SAVE_LOCAL(opad,npad) opad = PL_comppad; PL_comppad = (npad); PL_curpad = PL_comppad ? AvARRAY(PL_comppad) : NULL; DEBUG_Xv(PerlIO_printf(Perl_debug_log, "Pad 0x%" UVxf "[0x%" UVxf "] save_local\n", PTR2UV(PL_comppad), PTR2UV(PL_curpad)));







#define PAD_RESTORE_LOCAL(opad) assert(!opad || !SvIS_FREED(opad)); PL_comppad = opad; PL_curpad = PL_comppad ? AvARRAY(PL_comppad) : NULL; DEBUG_Xv(PerlIO_printf(Perl_debug_log, "Pad 0x%" UVxf "[0x%" UVxf "] restore_local\n", PTR2UV(PL_comppad), PTR2UV(PL_curpad)));
# 413 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pad.h"
#define CX_CURPAD_SAVE(block) (block).oldcomppad = PL_comppad
#define CX_CURPAD_SV(block,po) (AvARRAY(MUTABLE_AV(((block).oldcomppad)))[po])
# 446 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pad.h"
#define PAD_COMPNAME(po) PAD_COMPNAME_SV(po)
#define PAD_COMPNAME_SV(po) (PadnamelistARRAY(PL_comppad_name)[(po)])
#define PAD_COMPNAME_FLAGS(po) PadnameFLAGS(PAD_COMPNAME(po))
#define PAD_COMPNAME_FLAGS_isOUR(po) SvPAD_OUR(PAD_COMPNAME_SV(po))
#define PAD_COMPNAME_PV(po) PadnamePV(PAD_COMPNAME(po))

#define PAD_COMPNAME_TYPE(po) PadnameTYPE(PAD_COMPNAME(po))

#define PAD_COMPNAME_OURSTASH(po) (SvOURSTASH(PAD_COMPNAME_SV(po)))


#define PAD_COMPNAME_GEN(po) ((STRLEN)PadnamelistARRAY(PL_comppad_name)[po]->xpadn_gen)


#define PAD_COMPNAME_GEN_set(po,gen) (PadnamelistARRAY(PL_comppad_name)[po]->xpadn_gen = (gen))
# 479 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pad.h"
#define PAD_CLONE_VARS(proto_perl,param) PL_comppad = av_dup(proto_perl->Icomppad, param); PL_curpad = PL_comppad ? AvARRAY(PL_comppad) : NULL; PL_comppad_name = padnamelist_dup(proto_perl->Icomppad_name, param); PL_comppad_name_fill = proto_perl->Icomppad_name_fill; PL_comppad_name_floor = proto_perl->Icomppad_name_floor; PL_min_intro_pending = proto_perl->Imin_intro_pending; PL_max_intro_pending = proto_perl->Imax_intro_pending; PL_padix = proto_perl->Ipadix; PL_padix_floor = proto_perl->Ipadix_floor; PL_pad_reset_pending = proto_perl->Ipad_reset_pending; PL_cop_seqmax = proto_perl->Icop_seqmax;
# 502 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pad.h"
#define pad_add_name_pvs(name,flags,typestash,ourstash) Perl_pad_add_name_pvn(aTHX_ STR_WITH_LEN(name), flags, typestash, ourstash)
# 514 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pad.h"
#define pad_findmy_pvs(name,flags) Perl_pad_findmy_pvn(aTHX_ STR_WITH_LEN(name), flags)
# 3737 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cv.h" 1
# 13 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cv.h"
struct xpvcv {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; char * xpvlenu_pv; } xpv_len_u;
    HV * xcv_stash; union { OP * xcv_start; ANY xcv_xsubany; } xcv_start_u; union { OP * xcv_root; void (*xcv_xsub) (PerlInterpreter* my_perl __attribute__((unused)), CV*); } xcv_root_u; union { GV * xcv_gv; HEK * xcv_hek; } xcv_gv_u; char * xcv_file; union { PADLIST * xcv_padlist; void * xcv_hscxt; } xcv_padlist_u; CV * xcv_outside; U32 xcv_outside_seq; cv_flags_t xcv_flags; I32 xcv_depth;
};
# 43 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cv.h"
#define Nullcv Null(CV*)


#define CvSTASH(sv) (0+((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_stash)
#define CvSTASH_set(cv,st) Perl_cvstash_set(aTHX_ cv, st)
#define CvSTART(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_start_u.xcv_start
#define CvROOT(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_root_u.xcv_root
#define CvXSUB(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_root_u.xcv_xsub
#define CvXSUBANY(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_start_u.xcv_xsubany
#define CvGV(sv) S_CvGV(aTHX_ (CV *)(sv))
#define CvGV_set(cv,gv) Perl_cvgv_set(aTHX_ cv, gv)
#define CvHASGV(cv) cBOOL(SvANY(cv)->xcv_gv_u.xcv_gv)
#define CvFILE(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_file

#define CvFILE_set_from_cop(sv,cop) (CvFILE(sv) = savepv(CopFILE(cop)), CvDYNFILE_on(sv))





#define CvFILEGV(sv) (gv_fetchfile(CvFILE(sv)))
#define CvDEPTH(sv) (*S_CvDEPTHp((const CV *)sv))


#define CvDEPTHunsafe(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_depth


#define CvPADLIST(sv) (*(assert_(!CvISXSUB((CV*)(sv))) &(((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_padlist_u.xcv_padlist)))





#define CvPADLIST_set(sv,padlist) (CvPADLIST(sv) = (padlist))

#define CvHSCXT(sv) *(assert_(CvISXSUB((CV*)(sv))) &(((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_padlist_u.xcv_hscxt))
# 91 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cv.h"
#define PoisonPADLIST(sv) NOOP


#define CvOUTSIDE(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_outside
#define CvOUTSIDE_SEQ(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_outside_seq
#define CvFLAGS(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_flags


#define CvPROTO(sv) ( SvPOK(sv) ? SvTYPE(sv) == SVt_PVCV && CvAUTOLOAD(sv) ? SvEND(sv)+1 : SvPVX_const(sv) : NULL )






#define CvPROTOLEN(sv) ( SvPOK(sv) ? SvTYPE(sv) == SVt_PVCV && CvAUTOLOAD(sv) ? SvLEN(sv)-SvCUR(sv)-2 : SvCUR(sv) : 0 )
# 115 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cv.h"
#define CVf_METHOD 0x0001
#define CVf_LVALUE 0x0002
#define CVf_CONST 0x0004
#define CVf_ISXSUB 0x0008

#define CVf_WEAKOUTSIDE 0x0010
#define CVf_CLONE 0x0020
#define CVf_CLONED 0x0040
#define CVf_ANON 0x0080
#define CVf_UNIQUE 0x0100

#define CVf_NODEBUG 0x0200

#define CVf_CVGV_RC 0x0400



#define CVf_DYNFILE 0x1000
#define CVf_AUTOLOAD 0x2000
#define CVf_HASEVAL 0x4000
#define CVf_NAMED 0x8000
#define CVf_LEXICAL 0x10000
#define CVf_ANONCONST 0x20000


#define CVf_BUILTIN_ATTRS (CVf_METHOD|CVf_LVALUE|CVf_ANONCONST)

#define CvCLONE(cv) (CvFLAGS(cv) & CVf_CLONE)
#define CvCLONE_on(cv) (CvFLAGS(cv) |= CVf_CLONE)
#define CvCLONE_off(cv) (CvFLAGS(cv) &= ~CVf_CLONE)

#define CvCLONED(cv) (CvFLAGS(cv) & CVf_CLONED)
#define CvCLONED_on(cv) (CvFLAGS(cv) |= CVf_CLONED)
#define CvCLONED_off(cv) (CvFLAGS(cv) &= ~CVf_CLONED)

#define CvANON(cv) (CvFLAGS(cv) & CVf_ANON)
#define CvANON_on(cv) (CvFLAGS(cv) |= CVf_ANON)
#define CvANON_off(cv) (CvFLAGS(cv) &= ~CVf_ANON)


#define CvUNIQUE(cv) (CvFLAGS(cv) & CVf_UNIQUE)
#define CvUNIQUE_on(cv) (CvFLAGS(cv) |= CVf_UNIQUE)
#define CvUNIQUE_off(cv) (CvFLAGS(cv) &= ~CVf_UNIQUE)

#define CvNODEBUG(cv) (CvFLAGS(cv) & CVf_NODEBUG)
#define CvNODEBUG_on(cv) (CvFLAGS(cv) |= CVf_NODEBUG)
#define CvNODEBUG_off(cv) (CvFLAGS(cv) &= ~CVf_NODEBUG)

#define CvMETHOD(cv) (CvFLAGS(cv) & CVf_METHOD)
#define CvMETHOD_on(cv) (CvFLAGS(cv) |= CVf_METHOD)
#define CvMETHOD_off(cv) (CvFLAGS(cv) &= ~CVf_METHOD)

#define CvLVALUE(cv) (CvFLAGS(cv) & CVf_LVALUE)
#define CvLVALUE_on(cv) (CvFLAGS(cv) |= CVf_LVALUE)
#define CvLVALUE_off(cv) (CvFLAGS(cv) &= ~CVf_LVALUE)


#define CvEVAL(cv) (CvUNIQUE(cv) && !SvFAKE(cv))
#define CvEVAL_on(cv) (CvUNIQUE_on(cv),SvFAKE_off(cv))
#define CvEVAL_off(cv) CvUNIQUE_off(cv)


#define CvSPECIAL(cv) (CvUNIQUE(cv) && SvFAKE(cv))
#define CvSPECIAL_on(cv) (CvUNIQUE_on(cv),SvFAKE_on(cv))
#define CvSPECIAL_off(cv) (CvUNIQUE_off(cv),SvFAKE_off(cv))

#define CvCONST(cv) (CvFLAGS(cv) & CVf_CONST)
#define CvCONST_on(cv) (CvFLAGS(cv) |= CVf_CONST)
#define CvCONST_off(cv) (CvFLAGS(cv) &= ~CVf_CONST)

#define CvWEAKOUTSIDE(cv) (CvFLAGS(cv) & CVf_WEAKOUTSIDE)
#define CvWEAKOUTSIDE_on(cv) (CvFLAGS(cv) |= CVf_WEAKOUTSIDE)
#define CvWEAKOUTSIDE_off(cv) (CvFLAGS(cv) &= ~CVf_WEAKOUTSIDE)

#define CvISXSUB(cv) (CvFLAGS(cv) & CVf_ISXSUB)
#define CvISXSUB_on(cv) (CvFLAGS(cv) |= CVf_ISXSUB)
#define CvISXSUB_off(cv) (CvFLAGS(cv) &= ~CVf_ISXSUB)

#define CvCVGV_RC(cv) (CvFLAGS(cv) & CVf_CVGV_RC)
#define CvCVGV_RC_on(cv) (CvFLAGS(cv) |= CVf_CVGV_RC)
#define CvCVGV_RC_off(cv) (CvFLAGS(cv) &= ~CVf_CVGV_RC)







#define CvDYNFILE(cv) (CvFLAGS(cv) & CVf_DYNFILE)
#define CvDYNFILE_on(cv) (CvFLAGS(cv) |= CVf_DYNFILE)
#define CvDYNFILE_off(cv) (CvFLAGS(cv) &= ~CVf_DYNFILE)

#define CvAUTOLOAD(cv) (CvFLAGS(cv) & CVf_AUTOLOAD)
#define CvAUTOLOAD_on(cv) (CvFLAGS(cv) |= CVf_AUTOLOAD)
#define CvAUTOLOAD_off(cv) (CvFLAGS(cv) &= ~CVf_AUTOLOAD)

#define CvHASEVAL(cv) (CvFLAGS(cv) & CVf_HASEVAL)
#define CvHASEVAL_on(cv) (CvFLAGS(cv) |= CVf_HASEVAL)
#define CvHASEVAL_off(cv) (CvFLAGS(cv) &= ~CVf_HASEVAL)

#define CvNAMED(cv) (CvFLAGS(cv) & CVf_NAMED)
#define CvNAMED_on(cv) (CvFLAGS(cv) |= CVf_NAMED)
#define CvNAMED_off(cv) (CvFLAGS(cv) &= ~CVf_NAMED)

#define CvLEXICAL(cv) (CvFLAGS(cv) & CVf_LEXICAL)
#define CvLEXICAL_on(cv) (CvFLAGS(cv) |= CVf_LEXICAL)
#define CvLEXICAL_off(cv) (CvFLAGS(cv) &= ~CVf_LEXICAL)

#define CvANONCONST(cv) (CvFLAGS(cv) & CVf_ANONCONST)
#define CvANONCONST_on(cv) (CvFLAGS(cv) |= CVf_ANONCONST)
#define CvANONCONST_off(cv) (CvFLAGS(cv) &= ~CVf_ANONCONST)


#define XS_DYNAMIC_FILENAME 0x01

static __inline__ HEK *
CvNAME_HEK(CV *sv)
{
    return (((XPVCV*)({ void *_p = ((sv)->sv_any); _p; }))->xcv_flags & 0x8000)
 ? ((XPVCV*)({ void *_p = ((sv)->sv_any); _p; }))->xcv_gv_u.xcv_hek
 : 0;
}


#define CvNAME_HEK_set(cv,hek) ( CvNAME_HEK((CV *)(cv)) ? unshare_hek(SvANY((CV *)(cv))->xcv_gv_u.xcv_hek) : (void)0, ((XPVCV*)MUTABLE_PTR(SvANY(cv)))->xcv_gv_u.xcv_hek = (hek), CvNAMED_on(cv) )
# 302 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cv.h"
typedef OP *(*Perl_call_checker)(PerlInterpreter* my_perl __attribute__((unused)), OP *, GV *, SV *);

#define CALL_CHECKER_REQUIRE_GV MGf_REQUIRE_GV

#define CV_NAME_NOTQUAL 1
# 3738 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/opnames.h" 1
# 16 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/opnames.h"
typedef enum opcode {
 OP_NULL = 0,
 OP_STUB = 1,
 OP_SCALAR = 2,
 OP_PUSHMARK = 3,
 OP_WANTARRAY = 4,
 OP_CONST = 5,
 OP_GVSV = 6,
 OP_GV = 7,
 OP_GELEM = 8,
 OP_PADSV = 9,
 OP_PADAV = 10,
 OP_PADHV = 11,
 OP_PADANY = 12,
 OP_PUSHRE = 13,
 OP_RV2GV = 14,
 OP_RV2SV = 15,
 OP_AV2ARYLEN = 16,
 OP_RV2CV = 17,
 OP_ANONCODE = 18,
 OP_PROTOTYPE = 19,
 OP_REFGEN = 20,
 OP_SREFGEN = 21,
 OP_REF = 22,
 OP_BLESS = 23,
 OP_BACKTICK = 24,
 OP_GLOB = 25,
 OP_READLINE = 26,
 OP_RCATLINE = 27,
 OP_REGCMAYBE = 28,
 OP_REGCRESET = 29,
 OP_REGCOMP = 30,
 OP_MATCH = 31,
 OP_QR = 32,
 OP_SUBST = 33,
 OP_SUBSTCONT = 34,
 OP_TRANS = 35,
 OP_TRANSR = 36,
 OP_SASSIGN = 37,
 OP_AASSIGN = 38,
 OP_CHOP = 39,
 OP_SCHOP = 40,
 OP_CHOMP = 41,
 OP_SCHOMP = 42,
 OP_DEFINED = 43,
 OP_UNDEF = 44,
 OP_STUDY = 45,
 OP_POS = 46,
 OP_PREINC = 47,
 OP_I_PREINC = 48,
 OP_PREDEC = 49,
 OP_I_PREDEC = 50,
 OP_POSTINC = 51,
 OP_I_POSTINC = 52,
 OP_POSTDEC = 53,
 OP_I_POSTDEC = 54,
 OP_POW = 55,
 OP_MULTIPLY = 56,
 OP_I_MULTIPLY = 57,
 OP_DIVIDE = 58,
 OP_I_DIVIDE = 59,
 OP_MODULO = 60,
 OP_I_MODULO = 61,
 OP_REPEAT = 62,
 OP_ADD = 63,
 OP_I_ADD = 64,
 OP_SUBTRACT = 65,
 OP_I_SUBTRACT = 66,
 OP_CONCAT = 67,
 OP_STRINGIFY = 68,
 OP_LEFT_SHIFT = 69,
 OP_RIGHT_SHIFT = 70,
 OP_LT = 71,
 OP_I_LT = 72,
 OP_GT = 73,
 OP_I_GT = 74,
 OP_LE = 75,
 OP_I_LE = 76,
 OP_GE = 77,
 OP_I_GE = 78,
 OP_EQ = 79,
 OP_I_EQ = 80,
 OP_NE = 81,
 OP_I_NE = 82,
 OP_NCMP = 83,
 OP_I_NCMP = 84,
 OP_SLT = 85,
 OP_SGT = 86,
 OP_SLE = 87,
 OP_SGE = 88,
 OP_SEQ = 89,
 OP_SNE = 90,
 OP_SCMP = 91,
 OP_BIT_AND = 92,
 OP_BIT_XOR = 93,
 OP_BIT_OR = 94,
 OP_NBIT_AND = 95,
 OP_NBIT_XOR = 96,
 OP_NBIT_OR = 97,
 OP_SBIT_AND = 98,
 OP_SBIT_XOR = 99,
 OP_SBIT_OR = 100,
 OP_NEGATE = 101,
 OP_I_NEGATE = 102,
 OP_NOT = 103,
 OP_COMPLEMENT = 104,
 OP_NCOMPLEMENT = 105,
 OP_SCOMPLEMENT = 106,
 OP_SMARTMATCH = 107,
 OP_ATAN2 = 108,
 OP_SIN = 109,
 OP_COS = 110,
 OP_RAND = 111,
 OP_SRAND = 112,
 OP_EXP = 113,
 OP_LOG = 114,
 OP_SQRT = 115,
 OP_INT = 116,
 OP_HEX = 117,
 OP_OCT = 118,
 OP_ABS = 119,
 OP_LENGTH = 120,
 OP_SUBSTR = 121,
 OP_VEC = 122,
 OP_INDEX = 123,
 OP_RINDEX = 124,
 OP_SPRINTF = 125,
 OP_FORMLINE = 126,
 OP_ORD = 127,
 OP_CHR = 128,
 OP_CRYPT = 129,
 OP_UCFIRST = 130,
 OP_LCFIRST = 131,
 OP_UC = 132,
 OP_LC = 133,
 OP_QUOTEMETA = 134,
 OP_RV2AV = 135,
 OP_AELEMFAST = 136,
 OP_AELEMFAST_LEX = 137,
 OP_AELEM = 138,
 OP_ASLICE = 139,
 OP_KVASLICE = 140,
 OP_AEACH = 141,
 OP_AKEYS = 142,
 OP_AVALUES = 143,
 OP_EACH = 144,
 OP_VALUES = 145,
 OP_KEYS = 146,
 OP_DELETE = 147,
 OP_EXISTS = 148,
 OP_RV2HV = 149,
 OP_HELEM = 150,
 OP_HSLICE = 151,
 OP_KVHSLICE = 152,
 OP_MULTIDEREF = 153,
 OP_UNPACK = 154,
 OP_PACK = 155,
 OP_SPLIT = 156,
 OP_JOIN = 157,
 OP_LIST = 158,
 OP_LSLICE = 159,
 OP_ANONLIST = 160,
 OP_ANONHASH = 161,
 OP_SPLICE = 162,
 OP_PUSH = 163,
 OP_POP = 164,
 OP_SHIFT = 165,
 OP_UNSHIFT = 166,
 OP_SORT = 167,
 OP_REVERSE = 168,
 OP_GREPSTART = 169,
 OP_GREPWHILE = 170,
 OP_MAPSTART = 171,
 OP_MAPWHILE = 172,
 OP_RANGE = 173,
 OP_FLIP = 174,
 OP_FLOP = 175,
 OP_AND = 176,
 OP_OR = 177,
 OP_XOR = 178,
 OP_DOR = 179,
 OP_COND_EXPR = 180,
 OP_ANDASSIGN = 181,
 OP_ORASSIGN = 182,
 OP_DORASSIGN = 183,
 OP_METHOD = 184,
 OP_ENTERSUB = 185,
 OP_LEAVESUB = 186,
 OP_LEAVESUBLV = 187,
 OP_CALLER = 188,
 OP_WARN = 189,
 OP_DIE = 190,
 OP_RESET = 191,
 OP_LINESEQ = 192,
 OP_NEXTSTATE = 193,
 OP_DBSTATE = 194,
 OP_UNSTACK = 195,
 OP_ENTER = 196,
 OP_LEAVE = 197,
 OP_SCOPE = 198,
 OP_ENTERITER = 199,
 OP_ITER = 200,
 OP_ENTERLOOP = 201,
 OP_LEAVELOOP = 202,
 OP_RETURN = 203,
 OP_LAST = 204,
 OP_NEXT = 205,
 OP_REDO = 206,
 OP_DUMP = 207,
 OP_GOTO = 208,
 OP_EXIT = 209,
 OP_METHOD_NAMED = 210,
 OP_METHOD_SUPER = 211,
 OP_METHOD_REDIR = 212,
 OP_METHOD_REDIR_SUPER = 213,
 OP_ENTERGIVEN = 214,
 OP_LEAVEGIVEN = 215,
 OP_ENTERWHEN = 216,
 OP_LEAVEWHEN = 217,
 OP_BREAK = 218,
 OP_CONTINUE = 219,
 OP_OPEN = 220,
 OP_CLOSE = 221,
 OP_PIPE_OP = 222,
 OP_FILENO = 223,
 OP_UMASK = 224,
 OP_BINMODE = 225,
 OP_TIE = 226,
 OP_UNTIE = 227,
 OP_TIED = 228,
 OP_DBMOPEN = 229,
 OP_DBMCLOSE = 230,
 OP_SSELECT = 231,
 OP_SELECT = 232,
 OP_GETC = 233,
 OP_READ = 234,
 OP_ENTERWRITE = 235,
 OP_LEAVEWRITE = 236,
 OP_PRTF = 237,
 OP_PRINT = 238,
 OP_SAY = 239,
 OP_SYSOPEN = 240,
 OP_SYSSEEK = 241,
 OP_SYSREAD = 242,
 OP_SYSWRITE = 243,
 OP_EOF = 244,
 OP_TELL = 245,
 OP_SEEK = 246,
 OP_TRUNCATE = 247,
 OP_FCNTL = 248,
 OP_IOCTL = 249,
 OP_FLOCK = 250,
 OP_SEND = 251,
 OP_RECV = 252,
 OP_SOCKET = 253,
 OP_SOCKPAIR = 254,
 OP_BIND = 255,
 OP_CONNECT = 256,
 OP_LISTEN = 257,
 OP_ACCEPT = 258,
 OP_SHUTDOWN = 259,
 OP_GSOCKOPT = 260,
 OP_SSOCKOPT = 261,
 OP_GETSOCKNAME = 262,
 OP_GETPEERNAME = 263,
 OP_LSTAT = 264,
 OP_STAT = 265,
 OP_FTRREAD = 266,
 OP_FTRWRITE = 267,
 OP_FTREXEC = 268,
 OP_FTEREAD = 269,
 OP_FTEWRITE = 270,
 OP_FTEEXEC = 271,
 OP_FTIS = 272,
 OP_FTSIZE = 273,
 OP_FTMTIME = 274,
 OP_FTATIME = 275,
 OP_FTCTIME = 276,
 OP_FTROWNED = 277,
 OP_FTEOWNED = 278,
 OP_FTZERO = 279,
 OP_FTSOCK = 280,
 OP_FTCHR = 281,
 OP_FTBLK = 282,
 OP_FTFILE = 283,
 OP_FTDIR = 284,
 OP_FTPIPE = 285,
 OP_FTSUID = 286,
 OP_FTSGID = 287,
 OP_FTSVTX = 288,
 OP_FTLINK = 289,
 OP_FTTTY = 290,
 OP_FTTEXT = 291,
 OP_FTBINARY = 292,
 OP_CHDIR = 293,
 OP_CHOWN = 294,
 OP_CHROOT = 295,
 OP_UNLINK = 296,
 OP_CHMOD = 297,
 OP_UTIME = 298,
 OP_RENAME = 299,
 OP_LINK = 300,
 OP_SYMLINK = 301,
 OP_READLINK = 302,
 OP_MKDIR = 303,
 OP_RMDIR = 304,
 OP_OPEN_DIR = 305,
 OP_READDIR = 306,
 OP_TELLDIR = 307,
 OP_SEEKDIR = 308,
 OP_REWINDDIR = 309,
 OP_CLOSEDIR = 310,
 OP_FORK = 311,
 OP_WAIT = 312,
 OP_WAITPID = 313,
 OP_SYSTEM = 314,
 OP_EXEC = 315,
 OP_KILL = 316,
 OP_GETPPID = 317,
 OP_GETPGRP = 318,
 OP_SETPGRP = 319,
 OP_GETPRIORITY = 320,
 OP_SETPRIORITY = 321,
 OP_TIME = 322,
 OP_TMS = 323,
 OP_LOCALTIME = 324,
 OP_GMTIME = 325,
 OP_ALARM = 326,
 OP_SLEEP = 327,
 OP_SHMGET = 328,
 OP_SHMCTL = 329,
 OP_SHMREAD = 330,
 OP_SHMWRITE = 331,
 OP_MSGGET = 332,
 OP_MSGCTL = 333,
 OP_MSGSND = 334,
 OP_MSGRCV = 335,
 OP_SEMOP = 336,
 OP_SEMGET = 337,
 OP_SEMCTL = 338,
 OP_REQUIRE = 339,
 OP_DOFILE = 340,
 OP_HINTSEVAL = 341,
 OP_ENTEREVAL = 342,
 OP_LEAVEEVAL = 343,
 OP_ENTERTRY = 344,
 OP_LEAVETRY = 345,
 OP_GHBYNAME = 346,
 OP_GHBYADDR = 347,
 OP_GHOSTENT = 348,
 OP_GNBYNAME = 349,
 OP_GNBYADDR = 350,
 OP_GNETENT = 351,
 OP_GPBYNAME = 352,
 OP_GPBYNUMBER = 353,
 OP_GPROTOENT = 354,
 OP_GSBYNAME = 355,
 OP_GSBYPORT = 356,
 OP_GSERVENT = 357,
 OP_SHOSTENT = 358,
 OP_SNETENT = 359,
 OP_SPROTOENT = 360,
 OP_SSERVENT = 361,
 OP_EHOSTENT = 362,
 OP_ENETENT = 363,
 OP_EPROTOENT = 364,
 OP_ESERVENT = 365,
 OP_GPWNAM = 366,
 OP_GPWUID = 367,
 OP_GPWENT = 368,
 OP_SPWENT = 369,
 OP_EPWENT = 370,
 OP_GGRNAM = 371,
 OP_GGRGID = 372,
 OP_GGRENT = 373,
 OP_SGRENT = 374,
 OP_EGRENT = 375,
 OP_GETLOGIN = 376,
 OP_SYSCALL = 377,
 OP_LOCK = 378,
 OP_ONCE = 379,
 OP_CUSTOM = 380,
 OP_REACH = 381,
 OP_RKEYS = 382,
 OP_RVALUES = 383,
 OP_COREARGS = 384,
 OP_RUNCV = 385,
 OP_FC = 386,
 OP_PADCV = 387,
 OP_INTROCV = 388,
 OP_CLONECV = 389,
 OP_PADRANGE = 390,
 OP_REFASSIGN = 391,
 OP_LVREF = 392,
 OP_LVREFSLICE = 393,
 OP_LVAVREF = 394,
 OP_ANONCONST = 395,
 OP_max
} opcode;

#define MAXO 396
#define OP_FREED MAXO






#define OP_IS_SOCKET(op) ((op) >= OP_SEND && (op) <= OP_GETPEERNAME)


#define OP_IS_FILETEST(op) ((op) >= OP_FTRREAD && (op) <= OP_FTBINARY)


#define OP_IS_FILETEST_ACCESS(op) ((op) >= OP_FTRREAD && (op) <= OP_FTEEXEC)


#define OP_IS_NUMCOMPARE(op) ((op) >= OP_LT && (op) <= OP_I_NCMP)


#define OP_IS_DIRHOP(op) ((op) >= OP_READDIR && (op) <= OP_CLOSEDIR)


#define OP_IS_INFIX_BIT(op) ((op) >= OP_BIT_AND && (op) <= OP_SBIT_OR)
# 3739 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h" 1
# 37 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define OPCODE U16

typedef unsigned Optype;







#define _OP_SIBPARENT_FIELDNAME op_sibling





#define BASEOP OP* op_next; OP* _OP_SIBPARENT_FIELDNAME; OP* (*op_ppaddr)(pTHX); PADOFFSET op_targ; PERL_BITFIELD16 op_type:9; PERL_BITFIELD16 op_opt:1; PERL_BITFIELD16 op_slabbed:1; PERL_BITFIELD16 op_savefree:1; PERL_BITFIELD16 op_static:1; PERL_BITFIELD16 op_folded:1; PERL_BITFIELD16 op_moresib:1; PERL_BITFIELD16 op_spare:1; U8 op_flags; U8 op_private;
# 76 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define OP_GIMME(op,dfl) (((op)->op_flags & OPf_WANT) ? ((op)->op_flags & OPf_WANT) : dfl)


#define OP_GIMME_REVERSE(flags) ((flags) & G_WANT)
# 97 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define GIMME_V OP_GIMME(PL_op, block_gimme())



#define OPf_WANT 3
#define OPf_WANT_VOID 1
#define OPf_WANT_SCALAR 2
#define OPf_WANT_LIST 3
#define OPf_KIDS 4
#define OPf_PARENS 8

#define OPf_REF 16

#define OPf_MOD 32
#define OPf_STACKED 64
#define OPf_SPECIAL 128
# 156 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define OPf_FOLDED 1<<16


#define OPf_LIST OPf_WANT_LIST
#define OPf_KNOW OPf_WANT


#define GIMME (PL_op->op_flags & OPf_WANT ? ((PL_op->op_flags & OPf_WANT) == OPf_WANT_LIST ? G_ARRAY : G_SCALAR) : dowantarray())
# 176 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define OPpTRANS_ALL (OPpTRANS_FROM_UTF|OPpTRANS_TO_UTF|OPpTRANS_IDENTICAL|OPpTRANS_SQUASH|OPpTRANS_COMPLEMENT|OPpTRANS_GROWS|OPpTRANS_DELETE)





#define OPpENTERSUB_LVAL_MASK (OPpLVAL_INTRO|OPpENTERSUB_INARGS)



typedef union {
    PADOFFSET pad_offset;
    SV *sv;
    IV iv;
    UV uv;
} UNOP_AUX_item;


#define UNOP_AUX_item_sv(item) PAD_SVl((item)->pad_offset);







struct op {
    OP* op_next; OP* op_sibling; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; unsigned op_type:9; unsigned op_opt:1; unsigned op_slabbed:1; unsigned op_savefree:1; unsigned op_static:1; unsigned op_folded:1; unsigned op_moresib:1; unsigned op_spare:1; U8 op_flags; U8 op_private;
};

struct unop {
    OP* op_next; OP* op_sibling; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; unsigned op_type:9; unsigned op_opt:1; unsigned op_slabbed:1; unsigned op_savefree:1; unsigned op_static:1; unsigned op_folded:1; unsigned op_moresib:1; unsigned op_spare:1; U8 op_flags; U8 op_private;
    OP * op_first;
};

struct unop_aux {
    OP* op_next; OP* op_sibling; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; unsigned op_type:9; unsigned op_opt:1; unsigned op_slabbed:1; unsigned op_savefree:1; unsigned op_static:1; unsigned op_folded:1; unsigned op_moresib:1; unsigned op_spare:1; U8 op_flags; U8 op_private;
    OP *op_first;
    UNOP_AUX_item *op_aux;
};

struct binop {
    OP* op_next; OP* op_sibling; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; unsigned op_type:9; unsigned op_opt:1; unsigned op_slabbed:1; unsigned op_savefree:1; unsigned op_static:1; unsigned op_folded:1; unsigned op_moresib:1; unsigned op_spare:1; U8 op_flags; U8 op_private;
    OP * op_first;
    OP * op_last;
};

struct logop {
    OP* op_next; OP* op_sibling; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; unsigned op_type:9; unsigned op_opt:1; unsigned op_slabbed:1; unsigned op_savefree:1; unsigned op_static:1; unsigned op_folded:1; unsigned op_moresib:1; unsigned op_spare:1; U8 op_flags; U8 op_private;
    OP * op_first;
    OP * op_other;
};

struct listop {
    OP* op_next; OP* op_sibling; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; unsigned op_type:9; unsigned op_opt:1; unsigned op_slabbed:1; unsigned op_savefree:1; unsigned op_static:1; unsigned op_folded:1; unsigned op_moresib:1; unsigned op_spare:1; U8 op_flags; U8 op_private;
    OP * op_first;
    OP * op_last;
};

struct methop {
    OP* op_next; OP* op_sibling; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; unsigned op_type:9; unsigned op_opt:1; unsigned op_slabbed:1; unsigned op_savefree:1; unsigned op_static:1; unsigned op_folded:1; unsigned op_moresib:1; unsigned op_spare:1; U8 op_flags; U8 op_private;
    union {



        OP* op_first;
        SV* op_meth_sv;
    } op_u;

    PADOFFSET op_rclass_targ;



};

struct pmop {
    OP* op_next; OP* op_sibling; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; unsigned op_type:9; unsigned op_opt:1; unsigned op_slabbed:1; unsigned op_savefree:1; unsigned op_static:1; unsigned op_folded:1; unsigned op_moresib:1; unsigned op_spare:1; U8 op_flags; U8 op_private;
    OP * op_first;
    OP * op_last;

    PADOFFSET op_pmoffset;



    U32 op_pmflags;
    union {
 OP * op_pmreplroot;

 PADOFFSET op_pmtargetoff;



    } op_pmreplrootu;
    union {
 OP * op_pmreplstart;

 PADOFFSET op_pmstashoff;



    } op_pmstashstartu;
    OP * op_code_list;
};


#define PM_GETRE(o) (SvTYPE(PL_regex_pad[(o)->op_pmoffset]) == SVt_REGEXP ? (REGEXP*)(PL_regex_pad[(o)->op_pmoffset]) : NULL)
# 291 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define PM_SETRE(o,r) STMT_START { REGEXP *const _pm_setre = (r); assert(_pm_setre); PL_regex_pad[(o)->op_pmoffset] = MUTABLE_SV(_pm_setre); } STMT_END
# 331 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define PMf_BASE_SHIFT (_RXf_PMf_SHIFT_NEXT+2)


#define PMf_RETAINT (1U<<(PMf_BASE_SHIFT+5))




#define PMf_ONCE (1U<<(PMf_BASE_SHIFT+6))


#define PMf_USED (1U<<(PMf_BASE_SHIFT+7))


#define PMf_CONST (1U<<(PMf_BASE_SHIFT+8))


#define PMf_KEEP (1U<<(PMf_BASE_SHIFT+9))

#define PMf_GLOBAL (1U<<(PMf_BASE_SHIFT+10))


#define PMf_CONTINUE (1U<<(PMf_BASE_SHIFT+11))


#define PMf_EVAL (1U<<(PMf_BASE_SHIFT+12))


#define PMf_NONDESTRUCT (1U<<(PMf_BASE_SHIFT+13))


#define PMf_HAS_CV (1U<<(PMf_BASE_SHIFT+14))



#define PMf_CODELIST_PRIVATE (1U<<(PMf_BASE_SHIFT+15))




#define PMf_IS_QR (1U<<(PMf_BASE_SHIFT+16))
#define PMf_USE_RE_EVAL (1U<<(PMf_BASE_SHIFT+17))
# 384 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define PmopSTASH(o) ((o)->op_pmflags & PMf_ONCE ? PL_stashpad[(o)->op_pmstashstartu.op_pmstashoff] : NULL)


#define PmopSTASH_set(o,hv) (assert_((o)->op_pmflags & PMf_ONCE) (o)->op_pmstashstartu.op_pmstashoff = (hv) ? alloccopstash(hv) : 0)
# 403 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define PmopSTASHPV(o) (PmopSTASH(o) ? HvNAME_get(PmopSTASH(o)) : NULL)

#define PmopSTASHPV_set(o,pv) PmopSTASH_set((o), gv_stashpv(pv,GV_ADD))

struct svop {
    OP* op_next; OP* op_sibling; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; unsigned op_type:9; unsigned op_opt:1; unsigned op_slabbed:1; unsigned op_savefree:1; unsigned op_static:1; unsigned op_folded:1; unsigned op_moresib:1; unsigned op_spare:1; U8 op_flags; U8 op_private;
    SV * op_sv;
};

struct padop {
    OP* op_next; OP* op_sibling; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; unsigned op_type:9; unsigned op_opt:1; unsigned op_slabbed:1; unsigned op_savefree:1; unsigned op_static:1; unsigned op_folded:1; unsigned op_moresib:1; unsigned op_spare:1; U8 op_flags; U8 op_private;
    PADOFFSET op_padix;
};

struct pvop {
    OP* op_next; OP* op_sibling; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; unsigned op_type:9; unsigned op_opt:1; unsigned op_slabbed:1; unsigned op_savefree:1; unsigned op_static:1; unsigned op_folded:1; unsigned op_moresib:1; unsigned op_spare:1; U8 op_flags; U8 op_private;
    char * op_pv;
};

struct loop {
    OP* op_next; OP* op_sibling; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; unsigned op_type:9; unsigned op_opt:1; unsigned op_slabbed:1; unsigned op_savefree:1; unsigned op_static:1; unsigned op_folded:1; unsigned op_moresib:1; unsigned op_spare:1; U8 op_flags; U8 op_private;
    OP * op_first;
    OP * op_last;
    OP * op_redoop;
    OP * op_nextop;
    OP * op_lastop;
};

#define cUNOPx(o) ((UNOP*)(o))
#define cUNOP_AUXx(o) ((UNOP_AUX*)(o))
#define cBINOPx(o) ((BINOP*)(o))
#define cLISTOPx(o) ((LISTOP*)(o))
#define cLOGOPx(o) ((LOGOP*)(o))
#define cPMOPx(o) ((PMOP*)(o))
#define cSVOPx(o) ((SVOP*)(o))
#define cPADOPx(o) ((PADOP*)(o))
#define cPVOPx(o) ((PVOP*)(o))
#define cCOPx(o) ((COP*)(o))
#define cLOOPx(o) ((LOOP*)(o))
#define cMETHOPx(o) ((METHOP*)(o))

#define cUNOP cUNOPx(PL_op)
#define cUNOP_AUX cUNOP_AUXx(PL_op)
#define cBINOP cBINOPx(PL_op)
#define cLISTOP cLISTOPx(PL_op)
#define cLOGOP cLOGOPx(PL_op)
#define cPMOP cPMOPx(PL_op)
#define cSVOP cSVOPx(PL_op)
#define cPADOP cPADOPx(PL_op)
#define cPVOP cPVOPx(PL_op)
#define cCOP cCOPx(PL_op)
#define cLOOP cLOOPx(PL_op)

#define cUNOPo cUNOPx(o)
#define cUNOP_AUXo cUNOP_AUXx(o)
#define cBINOPo cBINOPx(o)
#define cLISTOPo cLISTOPx(o)
#define cLOGOPo cLOGOPx(o)
#define cPMOPo cPMOPx(o)
#define cSVOPo cSVOPx(o)
#define cPADOPo cPADOPx(o)
#define cPVOPo cPVOPx(o)
#define cCOPo cCOPx(o)
#define cLOOPo cLOOPx(o)

#define kUNOP cUNOPx(kid)
#define kUNOP_AUX cUNOP_AUXx(kid)
#define kBINOP cBINOPx(kid)
#define kLISTOP cLISTOPx(kid)
#define kLOGOP cLOGOPx(kid)
#define kPMOP cPMOPx(kid)
#define kSVOP cSVOPx(kid)
#define kPADOP cPADOPx(kid)
#define kPVOP cPVOPx(kid)
#define kCOP cCOPx(kid)
#define kLOOP cLOOPx(kid)



#define cGVOPx_gv(o) ((GV*)PAD_SVl(cPADOPx(o)->op_padix))

#define IS_PADGV(v) (v && isGV(v))
#define IS_PADCONST(v) (v && (SvREADONLY(v) || (SvIsCOW(v) && !SvLEN(v))))


#define cSVOPx_sv(v) (cSVOPx(v)->op_sv ? cSVOPx(v)->op_sv : PAD_SVl((v)->op_targ))

#define cSVOPx_svp(v) (cSVOPx(v)->op_sv ? &cSVOPx(v)->op_sv : &PAD_SVl((v)->op_targ))

#define cMETHOPx_rclass(v) PAD_SVl(cMETHOPx(v)->op_rclass_targ)
# 504 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define cMETHOPx_meth(v) cSVOPx_sv(v)

#define cGVOP_gv cGVOPx_gv(PL_op)
#define cGVOPo_gv cGVOPx_gv(o)
#define kGVOP_gv cGVOPx_gv(kid)
#define cSVOP_sv cSVOPx_sv(PL_op)
#define cSVOPo_sv cSVOPx_sv(o)
#define kSVOP_sv cSVOPx_sv(kid)


#define Nullop ((OP*)NULL)



#define OA_MARK 1
#define OA_FOLDCONST 2
#define OA_RETSCALAR 4
#define OA_TARGET 8
#define OA_TARGLEX 16
#define OA_OTHERINT 32
#define OA_DANGEROUS 64
#define OA_DEFGV 128


#define OCSHIFT 8

#define OA_CLASS_MASK (15 << OCSHIFT)

#define OA_BASEOP (0 << OCSHIFT)
#define OA_UNOP (1 << OCSHIFT)
#define OA_BINOP (2 << OCSHIFT)
#define OA_LOGOP (3 << OCSHIFT)
#define OA_LISTOP (4 << OCSHIFT)
#define OA_PMOP (5 << OCSHIFT)
#define OA_SVOP (6 << OCSHIFT)
#define OA_PADOP (7 << OCSHIFT)
#define OA_PVOP_OR_SVOP (8 << OCSHIFT)
#define OA_LOOP (9 << OCSHIFT)
#define OA_COP (10 << OCSHIFT)
#define OA_BASEOP_OR_UNOP (11 << OCSHIFT)
#define OA_FILESTATOP (12 << OCSHIFT)
#define OA_LOOPEXOP (13 << OCSHIFT)
#define OA_METHOP (14 << OCSHIFT)
#define OA_UNOP_AUX (15 << OCSHIFT)



#define OASHIFT 12

#define OA_SCALAR 1
#define OA_LIST 2
#define OA_AVREF 3
#define OA_HVREF 4
#define OA_CVREF 5
#define OA_FILEREF 6
#define OA_SCALARREF 7
#define OA_OPTIONAL 8
# 572 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define OP_REFCNT_INIT MUTEX_INIT(&PL_op_mutex)




#define OP_REFCNT_LOCK op_refcnt_lock()
#define OP_REFCNT_UNLOCK op_refcnt_unlock()

#define OP_REFCNT_TERM MUTEX_DESTROY(&PL_op_mutex)







#define OpREFCNT_set(o,n) ((o)->op_targ = (n))




#define OpREFCNT_inc(o) ((o) ? (++(o)->op_targ, (o)) : NULL)
#define OpREFCNT_dec(o) (--(o)->op_targ)



#define PERL_LOADMOD_DENY 0x1
#define PERL_LOADMOD_NOIMPORT 0x2
#define PERL_LOADMOD_IMPORT_OPS 0x4
# 622 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define LINKLIST(o) ((o)->op_next ? (o)->op_next : op_linklist((OP*)o))



#define cv_ckproto(cv,gv,p) cv_ckproto_len_flags((cv), (gv), (p), (p) ? strlen(p) : 0, 0)
# 635 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h" 1
# 16 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h"
#define REENTR_H 
# 29 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h"
#define PERL_REENTR_API 0
# 67 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h"
#define REENTR_MEMZERO(a,b) 0
# 94 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h"
# 1 "/usr/include/pwd.h" 1 3 4
# 67 "/usr/include/pwd.h" 3 4
#define _PWD_H_ 
# 87 "/usr/include/pwd.h" 3 4
#define _PATH_PWD "/etc"
#define _PATH_PASSWD "/etc/passwd"
#define _PASSWD "passwd"
#define _PATH_MASTERPASSWD "/etc/master.passwd"
#define _PATH_MASTERPASSWD_LOCK "/etc/ptmp"
#define _MASTERPASSWD "master.passwd"

#define _PATH_MP_DB "/etc/pwd.db"
#define _MP_DB "pwd.db"
#define _PATH_SMP_DB "/etc/spwd.db"
#define _SMP_DB "spwd.db"

#define _PATH_PWD_MKDB "/usr/sbin/pwd_mkdb"

#define _PW_KEYBYNAME '1'
#define _PW_KEYBYNUM '2'
#define _PW_KEYBYUID '3'

#define _PASSWORD_EFMT1 '_'

#define _PASSWORD_LEN 128

#define _PASSWORD_NOUID 0x01
#define _PASSWORD_NOGID 0x02
#define _PASSWORD_NOCHG 0x04
#define _PASSWORD_NOEXP 0x08

#define _PASSWORD_WARNDAYS 14
#define _PASSWORD_CHGNOW -1



struct passwd {
 char *pw_name;
 char *pw_passwd;
 uid_t pw_uid;
 gid_t pw_gid;
 __darwin_time_t pw_change;
 char *pw_class;
 char *pw_gecos;
 char *pw_dir;
 char *pw_shell;
 __darwin_time_t pw_expire;
};




struct passwd *getpwuid(uid_t);
struct passwd *getpwnam(const char *);
int getpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **);
int getpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **);
struct passwd *getpwent(void);

int setpassent(int);
char *user_from_uid(uid_t, int);

int setpwent(void);
void endpwent(void);

# 95 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h" 2


# 1 "/usr/include/grp.h" 1 3 4
# 64 "/usr/include/grp.h" 3 4
#define _GRP_H_ 
# 84 "/usr/include/grp.h" 3 4
#define _PATH_GROUP "/etc/group"


struct group {
 char *gr_name;
 char *gr_passwd;
 gid_t gr_gid;
 char **gr_mem;
};





struct group *getgrgid(gid_t);
struct group *getgrnam(const char *);

int getgrgid_r(gid_t, struct group *, char *, size_t, struct group **);
int getgrnam_r(const char *, struct group *, char *, size_t, struct group **);

struct group *getgrent(void);
int setgrent(void);
void endgrent(void);



char *group_from_gid(gid_t, int);

void setgrfile(const char *);
int setgroupent(int);


# 98 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h" 2
# 113 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h"
#define REENTRANT_PROTO_B_B 1
#define REENTRANT_PROTO_B_BI 2
#define REENTRANT_PROTO_B_BW 3
#define REENTRANT_PROTO_B_CCD 4
#define REENTRANT_PROTO_B_CCS 5
#define REENTRANT_PROTO_B_IBI 6
#define REENTRANT_PROTO_B_IBW 7
#define REENTRANT_PROTO_B_SB 8
#define REENTRANT_PROTO_B_SBI 9
#define REENTRANT_PROTO_I_BI 10
#define REENTRANT_PROTO_I_BW 11
#define REENTRANT_PROTO_I_CCSBWR 12
#define REENTRANT_PROTO_I_CCSD 13
#define REENTRANT_PROTO_I_CII 14
#define REENTRANT_PROTO_I_CIISD 15
#define REENTRANT_PROTO_I_CSBI 16
#define REENTRANT_PROTO_I_CSBIR 17
#define REENTRANT_PROTO_I_CSBWR 18
#define REENTRANT_PROTO_I_CSBWRE 19
#define REENTRANT_PROTO_I_CSD 20
#define REENTRANT_PROTO_I_CWISBWRE 21
#define REENTRANT_PROTO_I_CWISD 22
#define REENTRANT_PROTO_I_D 23
#define REENTRANT_PROTO_I_H 24
#define REENTRANT_PROTO_I_IBI 25
#define REENTRANT_PROTO_I_IBW 26
#define REENTRANT_PROTO_I_ICBI 27
#define REENTRANT_PROTO_I_ICSBWR 28
#define REENTRANT_PROTO_I_ICSD 29
#define REENTRANT_PROTO_I_ID 30
#define REENTRANT_PROTO_I_IISD 31
#define REENTRANT_PROTO_I_ISBWR 32
#define REENTRANT_PROTO_I_ISD 33
#define REENTRANT_PROTO_I_LISBI 34
#define REENTRANT_PROTO_I_LISD 35
#define REENTRANT_PROTO_I_SB 36
#define REENTRANT_PROTO_I_SBI 37
#define REENTRANT_PROTO_I_SBIE 38
#define REENTRANT_PROTO_I_SBIH 39
#define REENTRANT_PROTO_I_SBIR 40
#define REENTRANT_PROTO_I_SBWR 41
#define REENTRANT_PROTO_I_SBWRE 42
#define REENTRANT_PROTO_I_SD 43
#define REENTRANT_PROTO_I_TISD 44
#define REENTRANT_PROTO_I_TS 45
#define REENTRANT_PROTO_I_TSBI 46
#define REENTRANT_PROTO_I_TSBIR 47
#define REENTRANT_PROTO_I_TSBWR 48
#define REENTRANT_PROTO_I_TSR 49
#define REENTRANT_PROTO_I_TsISBWRE 50
#define REENTRANT_PROTO_I_UISBWRE 51
#define REENTRANT_PROTO_I_uISBWRE 52
#define REENTRANT_PROTO_S_CBI 53
#define REENTRANT_PROTO_S_CCSBI 54
#define REENTRANT_PROTO_S_CIISBIE 55
#define REENTRANT_PROTO_S_CSBI 56
#define REENTRANT_PROTO_S_CSBIE 57
#define REENTRANT_PROTO_S_CWISBIE 58
#define REENTRANT_PROTO_S_CWISBWIE 59
#define REENTRANT_PROTO_S_ICSBI 60
#define REENTRANT_PROTO_S_ISBI 61
#define REENTRANT_PROTO_S_LISBI 62
#define REENTRANT_PROTO_S_SBI 63
#define REENTRANT_PROTO_S_SBIE 64
#define REENTRANT_PROTO_S_SBW 65
#define REENTRANT_PROTO_S_TISBI 66
#define REENTRANT_PROTO_S_TSBI 67
#define REENTRANT_PROTO_S_TSBIE 68
#define REENTRANT_PROTO_S_TWISBIE 69
#define REENTRANT_PROTO_V_D 70
#define REENTRANT_PROTO_V_H 71
#define REENTRANT_PROTO_V_ID 72
# 193 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h"
#undef GETGRENT_R_HAS_BUFFER


#define GETGRGID_R_HAS_BUFFER 




#define GETGRNAM_R_HAS_BUFFER 







#define USE_GRENT_BUFFER 
# 219 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h"
#undef GETGRENT_R_HAS_PTR


#define GETGRGID_R_HAS_PTR 




#define GETGRNAM_R_HAS_PTR 







#define USE_GRENT_PTR 
# 245 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h"
#undef GETPWENT_R_HAS_PTR


#define GETPWNAM_R_HAS_PTR 




#define GETPWUID_R_HAS_PTR 







#define USE_PWENT_PTR 
# 271 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h"
#undef GETSPNAM_R_HAS_PTR







#undef USE_SPENT_PTR







#undef GETGRENT_R_HAS_FPTR




#undef SETGRENT_R_HAS_FPTR




#undef ENDGRENT_R_HAS_FPTR







#undef USE_GRENT_FPTR







#undef GETPWENT_R_HAS_FPTR




#undef SETPWENT_R_HAS_FPTR




#undef ENDPWENT_R_HAS_FPTR







#undef USE_PWENT_FPTR







#undef GETPWENT_R_HAS_BUFFER


#define GETPWNAM_R_HAS_BUFFER 







#define USE_PWENT_BUFFER 
# 360 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h"
#undef GETHOSTENT_R_HAS_PTR




#undef GETHOSTBYADDR_R_HAS_PTR




#undef GETHOSTBYNAME_R_HAS_PTR







#undef USE_HOSTENT_PTR







#undef GETNETENT_R_HAS_PTR




#undef GETNETBYADDR_R_HAS_PTR




#undef GETNETBYNAME_R_HAS_PTR







#undef USE_NETENT_PTR







#undef GETPROTOENT_R_HAS_PTR




#undef GETPROTOBYNAME_R_HAS_PTR




#undef GETPROTOBYNUMBER_R_HAS_PTR







#undef USE_PROTOENT_PTR







#undef GETSERVENT_R_HAS_PTR




#undef GETSERVBYNAME_R_HAS_PTR




#undef GETSERVBYPORT_R_HAS_PTR







#undef USE_SERVENT_PTR







#undef GETHOSTENT_R_HAS_BUFFER




#undef GETHOSTBYADDR_R_HAS_BUFFER




#undef GETHOSTBYNAME_R_HAS_BUFFER







#undef USE_HOSTENT_BUFFER







#undef GETNETENT_R_HAS_BUFFER




#undef GETNETBYADDR_R_HAS_BUFFER




#undef GETNETBYNAME_R_HAS_BUFFER







#undef USE_NETENT_BUFFER







#undef GETPROTOENT_R_HAS_BUFFER




#undef GETPROTOBYNAME_R_HAS_BUFFER




#undef GETPROTOBYNUMBER_R_HAS_BUFFER







#undef USE_PROTOENT_BUFFER







#undef GETSERVENT_R_HAS_BUFFER




#undef GETSERVBYNAME_R_HAS_BUFFER




#undef GETSERVBYPORT_R_HAS_BUFFER







#undef USE_SERVENT_BUFFER







#undef GETHOSTENT_R_HAS_ERRNO




#undef GETHOSTBYADDR_R_HAS_ERRNO




#undef GETHOSTBYNAME_R_HAS_ERRNO







#undef USE_HOSTENT_ERRNO







#undef GETNETENT_R_HAS_ERRNO




#undef GETNETBYADDR_R_HAS_ERRNO




#undef GETNETBYNAME_R_HAS_ERRNO







#undef USE_NETENT_ERRNO



typedef struct {

 char* _asctime_buffer;
 size_t _asctime_size;
# 629 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h"
 char* _ctime_buffer;
 size_t _ctime_size;


 struct group _grent_struct;
 char* _grent_buffer;
 size_t _grent_size;

 struct group* _grent_ptr;
# 659 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h"
 char* _getlogin_buffer;
 size_t _getlogin_size;
# 693 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h"
 struct passwd _pwent_struct;
 char* _pwent_buffer;
 size_t _pwent_size;

 struct passwd* _pwent_ptr;
# 730 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h"
 struct dirent* _readdir_struct;
 size_t _readdir_size;

 struct dirent* _readdir_ptr;
# 748 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/reentr.h"
 char* _strerror_buffer;
 size_t _strerror_size;






    int dummy;
} REENTR;
# 636 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h" 2


#define NewOp(m,var,c,type) (var = (type *) Perl_Slab_Alloc(aTHX_ c*sizeof(type)))

#define NewOpSz(m,var,size) (var = (OP *) Perl_Slab_Alloc(aTHX_ size))

#define FreeOp(p) Perl_Slab_Free(aTHX_ p)
# 700 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
struct block_hooks {
    U32 bhk_flags;
    void (*bhk_start) (PerlInterpreter* my_perl __attribute__((unused)), int full);
    void (*bhk_pre_end) (PerlInterpreter* my_perl __attribute__((unused)), OP **seq);
    void (*bhk_post_end) (PerlInterpreter* my_perl __attribute__((unused)), OP **seq);
    void (*bhk_eval) (PerlInterpreter* my_perl __attribute__((unused)), OP *const saveop);
};
# 743 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define BhkFLAGS(hk) ((hk)->bhk_flags)

#define BHKf_bhk_start 0x01
#define BHKf_bhk_pre_end 0x02
#define BHKf_bhk_post_end 0x04
#define BHKf_bhk_eval 0x08

#define BhkENTRY(hk,which) ((BhkFLAGS(hk) & BHKf_ ## which) ? ((hk)->which) : NULL)


#define BhkENABLE(hk,which) STMT_START { BhkFLAGS(hk) |= BHKf_ ## which; assert(BhkENTRY(hk, which)); } STMT_END





#define BhkDISABLE(hk,which) STMT_START { BhkFLAGS(hk) &= ~(BHKf_ ## which); } STMT_END




#define BhkENTRY_set(hk,which,ptr) STMT_START { (hk)->which = ptr; BhkENABLE(hk, which); } STMT_END





#define CALL_BLOCK_HOOKS(which,arg) STMT_START { if (PL_blockhooks) { SSize_t i; for (i = av_tindex(PL_blockhooks); i >= 0; i--) { SV *sv = AvARRAY(PL_blockhooks)[i]; BHK *hk; assert(SvIOK(sv)); if (SvUOK(sv)) hk = INT2PTR(BHK *, SvUVX(sv)); else hk = INT2PTR(BHK *, SvIVX(sv)); if (BhkENTRY(hk, which)) BhkENTRY(hk, which)(aTHX_ arg); } } } STMT_END
# 792 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define RV2CVOPCV_MARK_EARLY 0x00000001
#define RV2CVOPCV_RETURN_NAME_GV 0x00000002
#define RV2CVOPCV_RETURN_STUB 0x00000004



#define RV2CVOPCV_FLAG_MASK 0x0000000f

#define op_lvalue(op,t) Perl_op_lvalue_flags(aTHX_ op,t,0)



#define OP_LVALUE_NO_CROAK 1
# 840 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
struct custom_op {
    U32 xop_flags;
    const char *xop_name;
    const char *xop_desc;
    U32 xop_class;
    void (*xop_peep)(PerlInterpreter* my_perl __attribute__((unused)), OP *o, OP *oldop);
};




typedef union {
    const char *xop_name;
    const char *xop_desc;
    U32 xop_class;
    void (*xop_peep)(PerlInterpreter* my_perl __attribute__((unused)), OP *o, OP *oldop);
    XOP *xop_ptr;
} XOPRETANY;

#define XopFLAGS(xop) ((xop)->xop_flags)

#define XOPf_xop_name 0x01
#define XOPf_xop_desc 0x02
#define XOPf_xop_class 0x04
#define XOPf_xop_peep 0x08


typedef enum {
    XOPe_xop_ptr = 0,
    XOPe_xop_name = 0x01,
    XOPe_xop_desc = 0x02,
    XOPe_xop_class = 0x04,
    XOPe_xop_peep = 0x08
} xop_flags_enum;

#define XOPd_xop_name PL_op_name[OP_CUSTOM]
#define XOPd_xop_desc PL_op_desc[OP_CUSTOM]
#define XOPd_xop_class OA_BASEOP
#define XOPd_xop_peep ((Perl_cpeep_t)0)

#define XopENTRY_set(xop,which,to) STMT_START { (xop)->which = (to); (xop)->xop_flags |= XOPf_ ## which; } STMT_END





#define XopENTRY(xop,which) ((XopFLAGS(xop) & XOPf_ ## which) ? (xop)->which : XOPd_ ## which)


#define XopENTRYCUSTOM(o,which) (Perl_custom_op_get_field(aTHX_ o, XOPe_ ## which).which)


#define XopDISABLE(xop,which) ((xop)->xop_flags &= ~XOPf_ ## which)
#define XopENABLE(xop,which) STMT_START { (xop)->xop_flags |= XOPf_ ## which; assert(XopENTRY(xop, which)); } STMT_END





#define Perl_custom_op_xop(x) (Perl_custom_op_get_field(x, XOPe_xop_ptr).xop_ptr)
# 962 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define OP_NAME(o) ((o)->op_type == OP_CUSTOM ? XopENTRYCUSTOM(o, xop_name) : PL_op_name[(o)->op_type])


#define OP_DESC(o) ((o)->op_type == OP_CUSTOM ? XopENTRYCUSTOM(o, xop_desc) : PL_op_desc[(o)->op_type])


#define OP_CLASS(o) ((o)->op_type == OP_CUSTOM ? XopENTRYCUSTOM(o, xop_class) : (PL_opargs[(o)->op_type] & OA_CLASS_MASK))



#define OP_TYPE_IS(o,type) ((o) && (o)->op_type == (type))
#define OP_TYPE_IS_NN(o,type) ((o)->op_type == (type))
#define OP_TYPE_ISNT(o,type) ((o) && (o)->op_type != (type))
#define OP_TYPE_ISNT_NN(o,type) ((o)->op_type != (type))

#define OP_TYPE_IS_OR_WAS_NN(o,type) ( ((o)->op_type == OP_NULL ? (o)->op_targ : (o)->op_type) == (type) )





#define OP_TYPE_IS_OR_WAS(o,type) ( (o) && OP_TYPE_IS_OR_WAS_NN(o, type) )


#define OP_TYPE_ISNT_AND_WASNT_NN(o,type) ( ((o)->op_type == OP_NULL ? (o)->op_targ : (o)->op_type) != (type) )





#define OP_TYPE_ISNT_AND_WASNT(o,type) ( (o) && OP_TYPE_ISNT_AND_WASNT_NN(o, type) )
# 1005 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define OpHAS_SIBLING(o) (cBOOL((o)->op_sibling))
#define OpSIBLING(o) (0 + (o)->op_sibling)
#define OpMORESIB_set(o,sib) ((o)->op_moresib = 1, (o)->op_sibling = (sib))
#define OpLASTSIB_set(o,parent) ((o)->op_moresib = 0, (o)->op_sibling = NULL)

#define OpMAYBESIB_set(o,sib,parent) ((o)->op_moresib = cBOOL(sib), (o)->op_sibling = (sib))





#define OP_SIBLING(o) OpSIBLING(o)


#define newATTRSUB(f,o,p,a,b) Perl_newATTRSUB_x(aTHX_ f, o, p, a, b, FALSE)
#define newSUB(f,o,p,b) newATTRSUB((f), (o), (p), NULL, (b))






#define OP_CHECK_MUTEX_INIT MUTEX_INIT(&PL_check_mutex)
#define OP_CHECK_MUTEX_LOCK MUTEX_LOCK(&PL_check_mutex)
#define OP_CHECK_MUTEX_UNLOCK MUTEX_UNLOCK(&PL_check_mutex)
#define OP_CHECK_MUTEX_TERM MUTEX_DESTROY(&PL_check_mutex)
# 1044 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/op.h"
#define MDEREF_reload 0

#define MDEREF_AV_pop_rv2av_aelem 1
#define MDEREF_AV_gvsv_vivify_rv2av_aelem 2
#define MDEREF_AV_padsv_vivify_rv2av_aelem 3
#define MDEREF_AV_vivify_rv2av_aelem 4
#define MDEREF_AV_padav_aelem 5
#define MDEREF_AV_gvav_aelem 6

#define MDEREF_HV_pop_rv2hv_helem 8
#define MDEREF_HV_gvsv_vivify_rv2hv_helem 9
#define MDEREF_HV_padsv_vivify_rv2hv_helem 10
#define MDEREF_HV_vivify_rv2hv_helem 11
#define MDEREF_HV_padhv_helem 12
#define MDEREF_HV_gvhv_helem 13

#define MDEREF_ACTION_MASK 0xf



#define MDEREF_INDEX_none 0x00
#define MDEREF_INDEX_const 0x10
#define MDEREF_INDEX_padsv 0x20
#define MDEREF_INDEX_gvsv 0x30

#define MDEREF_INDEX_MASK 0x30



#define MDEREF_FLAG_last 0x40

#define MDEREF_MASK 0x7F
#define MDEREF_SHIFT 7
# 3740 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv.h" 1
# 19 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv.h"
#define PERL_HASH_RANDOMIZE_KEYS 1





#define USE_PERL_PERTURB_KEYS 1
#define PL_HASH_RAND_BITS_ENABLED PL_hash_rand_bits_enabled

#define PERL_HASH_ITER_BUCKET(iter) (((iter)->xhv_riter) ^ ((iter)->xhv_rand))



struct he {



    HE *hent_next;
    HEK *hent_hek;
    union {
 SV *hent_val;
 size_t hent_refcount;
    } he_valu;
};


struct hek {
    U32 hek_hash;
    I32 hek_len;
    char hek_key[1];



};

struct shared_he {
    struct he shared_he_he;
    struct hek shared_he_hek;
};






struct mro_alg {
    AV *(*resolve)(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, U32 level);
    const char *name;
    U16 length;
    U16 kflags;
    U32 hash;
};

struct mro_meta {

    HV *mro_linear_all;



    SV *mro_linear_current;
    HV *mro_nextmethod;
    U32 cache_gen;
    U32 pkg_gen;
    const struct mro_alg *mro_which;
    HV *isa;
    HV *super;
    U32 destroy_gen;
};

#define MRO_GET_PRIVATE_DATA(smeta,which) (((smeta)->mro_which && (which) == (smeta)->mro_which) ? (smeta)->mro_linear_current : Perl_mro_get_private_data(aTHX_ (smeta), (which)))
# 97 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv.h"
union _xhvnameu {
    HEK *xhvnameu_name;
    HEK **xhvnameu_names;
};

struct xpvhv_aux {
    union _xhvnameu xhv_name_u;
    AV *xhv_backreferences;
    HE *xhv_eiter;
    I32 xhv_riter;







    I32 xhv_name_count;
    struct mro_meta *xhv_mro_meta;

    U32 xhv_rand;
    U32 xhv_last_rand;


    U32 xhv_fill_lazy;
    U32 xhv_aux_flags;
};

#define HvAUXf_SCAN_STASH 0x1
#define HvAUXf_NO_DEREF 0x2



struct xpvhv {
    HV* xmg_stash;
    union _xmgu xmg_u;
    STRLEN xhv_keys;
    STRLEN xhv_max;
};
# 240 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv.h"
#define PERL_HASH_DEFAULT_HvMAX 7
# 252 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv.h"
#define PERL_HV_ALLOC_AUX_SIZE (1 << 9)


#define HEf_SVKEY -2


#define Nullhv Null(HV*)

#define HvARRAY(hv) ((hv)->sv_u.svu_hash)
#define HvFILL(hv) Perl_hv_fill(aTHX_ MUTABLE_HV(hv))
#define HvMAX(hv) ((XPVHV*) SvANY(hv))->xhv_max


#define HvAUX(hv) ((struct xpvhv_aux*)&(HvARRAY(hv)[HvMAX(hv)+1]))
#define HvRITER(hv) (*Perl_hv_riter_p(aTHX_ MUTABLE_HV(hv)))
#define HvEITER(hv) (*Perl_hv_eiter_p(aTHX_ MUTABLE_HV(hv)))
#define HvRITER_set(hv,r) Perl_hv_riter_set(aTHX_ MUTABLE_HV(hv), r)
#define HvEITER_set(hv,e) Perl_hv_eiter_set(aTHX_ MUTABLE_HV(hv), e)
#define HvRITER_get(hv) (SvOOK(hv) ? HvAUX(hv)->xhv_riter : -1)
#define HvEITER_get(hv) (SvOOK(hv) ? HvAUX(hv)->xhv_eiter : NULL)
#define HvRAND_get(hv) (SvOOK(hv) ? HvAUX(hv)->xhv_rand : 0)
#define HvLASTRAND_get(hv) (SvOOK(hv) ? HvAUX(hv)->xhv_last_rand : 0)

#define HvNAME(hv) HvNAME_get(hv)
#define HvNAMELEN(hv) HvNAMELEN_get(hv)
#define HvENAME(hv) HvENAME_get(hv)
#define HvENAMELEN(hv) HvENAMELEN_get(hv)



#define HvMROMETA(hv) (HvAUX(hv)->xhv_mro_meta ? HvAUX(hv)->xhv_mro_meta : Perl_mro_meta_init(aTHX_ hv))



#define HvNAME_HEK_NN(hv) ( HvAUX(hv)->xhv_name_count ? *HvAUX(hv)->xhv_name_u.xhvnameu_names : HvAUX(hv)->xhv_name_u.xhvnameu_name )






#define HvNAME_HEK(hv) (SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name ? HvNAME_HEK_NN(hv) : NULL)

#define HvNAME_get(hv) ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvNAME_HEK_NN(hv)) ? HEK_KEY(HvNAME_HEK_NN(hv)) : NULL)


#define HvNAMELEN_get(hv) ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvNAME_HEK_NN(hv)) ? HEK_LEN(HvNAME_HEK_NN(hv)) : 0)


#define HvNAMEUTF8(hv) ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvNAME_HEK_NN(hv)) ? HEK_UTF8(HvNAME_HEK_NN(hv)) : 0)


#define HvENAME_HEK_NN(hv) ( HvAUX(hv)->xhv_name_count > 0 ? HvAUX(hv)->xhv_name_u.xhvnameu_names[0] : HvAUX(hv)->xhv_name_count < -1 ? HvAUX(hv)->xhv_name_u.xhvnameu_names[1] : HvAUX(hv)->xhv_name_count == -1 ? NULL : HvAUX(hv)->xhv_name_u.xhvnameu_name )






#define HvENAME_HEK(hv) (SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name ? HvENAME_HEK_NN(hv) : NULL)

#define HvENAME_get(hv) ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvAUX(hv)->xhv_name_count != -1) ? HEK_KEY(HvENAME_HEK_NN(hv)) : NULL)


#define HvENAMELEN_get(hv) ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvAUX(hv)->xhv_name_count != -1) ? HEK_LEN(HvENAME_HEK_NN(hv)) : 0)


#define HvENAMEUTF8(hv) ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvAUX(hv)->xhv_name_count != -1) ? HEK_UTF8(HvENAME_HEK_NN(hv)) : 0)




#define XHvTOTALKEYS(xhv) ((xhv)->xhv_keys)






#define HvKEYS(hv) HvUSEDKEYS(hv)
#define HvUSEDKEYS(hv) (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
#define HvTOTALKEYS(hv) XHvTOTALKEYS((XPVHV*) SvANY(hv))
#define HvPLACEHOLDERS(hv) (*Perl_hv_placeholders_p(aTHX_ MUTABLE_HV(hv)))
#define HvPLACEHOLDERS_get(hv) (SvMAGIC(hv) ? Perl_hv_placeholders_get(aTHX_ (const HV *)hv) : 0)
#define HvPLACEHOLDERS_set(hv,p) Perl_hv_placeholders_set(aTHX_ MUTABLE_HV(hv), p)

#define HvSHAREKEYS(hv) (SvFLAGS(hv) & SVphv_SHAREKEYS)
#define HvSHAREKEYS_on(hv) (SvFLAGS(hv) |= SVphv_SHAREKEYS)
#define HvSHAREKEYS_off(hv) (SvFLAGS(hv) &= ~SVphv_SHAREKEYS)
# 350 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv.h"
#define HvHASKFLAGS(hv) (SvFLAGS(hv) & SVphv_HASKFLAGS)
#define HvHASKFLAGS_on(hv) (SvFLAGS(hv) |= SVphv_HASKFLAGS)
#define HvHASKFLAGS_off(hv) (SvFLAGS(hv) &= ~SVphv_HASKFLAGS)

#define HvLAZYDEL(hv) (SvFLAGS(hv) & SVphv_LAZYDEL)
#define HvLAZYDEL_on(hv) (SvFLAGS(hv) |= SVphv_LAZYDEL)
#define HvLAZYDEL_off(hv) (SvFLAGS(hv) &= ~SVphv_LAZYDEL)


#define Nullhe Null(HE*)

#define HeNEXT(he) (he)->hent_next
#define HeKEY_hek(he) (he)->hent_hek
#define HeKEY(he) HEK_KEY(HeKEY_hek(he))
#define HeKEY_sv(he) (*(SV**)HeKEY(he))
#define HeKLEN(he) HEK_LEN(HeKEY_hek(he))
#define HeKUTF8(he) HEK_UTF8(HeKEY_hek(he))
#define HeKWASUTF8(he) HEK_WASUTF8(HeKEY_hek(he))
#define HeKLEN_UTF8(he) (HeKUTF8(he) ? -HeKLEN(he) : HeKLEN(he))
#define HeKFLAGS(he) HEK_FLAGS(HeKEY_hek(he))
#define HeVAL(he) (he)->he_valu.hent_val
#define HeHASH(he) HEK_HASH(HeKEY_hek(he))
#define HePV(he,lp) ((HeKLEN(he) == HEf_SVKEY) ? SvPV(HeKEY_sv(he),lp) : ((lp = HeKLEN(he)), HeKEY(he)))


#define HeUTF8(he) ((HeKLEN(he) == HEf_SVKEY) ? SvUTF8(HeKEY_sv(he)) : (U32)HeKUTF8(he))



#define HeSVKEY(he) ((HeKEY(he) && HeKLEN(he) == HEf_SVKEY) ? HeKEY_sv(he) : NULL)



#define HeSVKEY_force(he) (HeKEY(he) ? ((HeKLEN(he) == HEf_SVKEY) ? HeKEY_sv(he) : newSVpvn_flags(HeKEY(he), HeKLEN(he), SVs_TEMP | ( HeKUTF8(he) ? SVf_UTF8 : 0 ))) : &PL_sv_undef)







#define HeSVKEY_set(he,sv) ((HeKLEN(he) = HEf_SVKEY), (HeKEY_sv(he) = sv))


#define Nullhek Null(HEK*)

#define HEK_BASESIZE STRUCT_OFFSET(HEK, hek_key[0])
#define HEK_HASH(hek) (hek)->hek_hash
#define HEK_LEN(hek) (hek)->hek_len
#define HEK_KEY(hek) (hek)->hek_key
#define HEK_FLAGS(hek) (*((unsigned char *)(HEK_KEY(hek))+HEK_LEN(hek)+1))

#define HVhek_UTF8 0x01
#define HVhek_WASUTF8 0x02
#define HVhek_UNSHARED 0x08
#define HVhek_FREEKEY 0x100
#define HVhek_PLACEHOLD 0x200

#define HVhek_KEYCANONICAL 0x400


#define HVhek_MASK 0xFF

#define HVhek_ENABLEHVKFLAGS (HVhek_MASK & ~(HVhek_UNSHARED))

#define HEK_UTF8(hek) (HEK_FLAGS(hek) & HVhek_UTF8)
#define HEK_UTF8_on(hek) (HEK_FLAGS(hek) |= HVhek_UTF8)
#define HEK_UTF8_off(hek) (HEK_FLAGS(hek) &= ~HVhek_UTF8)
#define HEK_WASUTF8(hek) (HEK_FLAGS(hek) & HVhek_WASUTF8)
#define HEK_WASUTF8_on(hek) (HEK_FLAGS(hek) |= HVhek_WASUTF8)
#define HEK_WASUTF8_off(hek) (HEK_FLAGS(hek) &= ~HVhek_WASUTF8)






#define PERL_HV_ARRAY_ALLOC_BYTES(size) ((size) * sizeof(HE*))
# 437 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv.h"
#define HV_ITERNEXT_WANTPLACEHOLDERS 0x01

#define hv_iternext(hv) hv_iternext_flags(hv, 0)
#define hv_magic(hv,gv,how) sv_magic(MUTABLE_SV(hv), MUTABLE_SV(gv), how, NULL, 0)
#define hv_undef(hv) Perl_hv_undef_flags(aTHX_ hv, 0)

#define Perl_sharepvn(pv,len,hash) HEK_KEY(share_hek(pv, len, hash))
#define sharepvn(pv,len,hash) Perl_sharepvn(pv, len, hash)

#define share_hek_hek(hek) (++(((struct shared_he *)(((char *)hek) - STRUCT_OFFSET(struct shared_he, shared_he_hek))) ->shared_he_he.he_valu.hent_refcount), hek)






#define hv_store_ent(hv,keysv,val,hash) ((HE *) hv_common((hv), (keysv), NULL, 0, 0, HV_FETCH_ISSTORE, (val), (hash)))



#define hv_exists_ent(hv,keysv,hash) (hv_common((hv), (keysv), NULL, 0, 0, HV_FETCH_ISEXISTS, 0, (hash)) ? TRUE : FALSE)


#define hv_fetch_ent(hv,keysv,lval,hash) ((HE *) hv_common((hv), (keysv), NULL, 0, 0, ((lval) ? HV_FETCH_LVALUE : 0), NULL, (hash)))


#define hv_delete_ent(hv,key,flags,hash) (MUTABLE_SV(hv_common((hv), (key), NULL, 0, 0, (flags) | HV_DELETE, NULL, (hash))))



#define hv_store_flags(hv,key,klen,val,hash,flags) ((SV**) hv_common((hv), NULL, (key), (klen), (flags), (HV_FETCH_ISSTORE|HV_FETCH_JUST_SV), (val), (hash)))




#define hv_store(hv,key,klen,val,hash) ((SV**) hv_common_key_len((hv), (key), (klen), (HV_FETCH_ISSTORE|HV_FETCH_JUST_SV), (val), (hash)))




#define hv_exists(hv,key,klen) (hv_common_key_len((hv), (key), (klen), HV_FETCH_ISEXISTS, NULL, 0) ? TRUE : FALSE)



#define hv_fetch(hv,key,klen,lval) ((SV**) hv_common_key_len((hv), (key), (klen), (lval) ? (HV_FETCH_JUST_SV | HV_FETCH_LVALUE) : HV_FETCH_JUST_SV, NULL, 0))




#define hv_delete(hv,key,klen,flags) (MUTABLE_SV(hv_common_key_len((hv), (key), (klen), (flags) | HV_DELETE, NULL, 0)))
# 512 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv.h"
struct refcounted_he;


#define REFCOUNTED_HE_KEY_UTF8 0x00000001
# 596 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv.h"
#define HINTS_REFCNT_INIT MUTEX_INIT(&PL_hints_mutex)
#define HINTS_REFCNT_TERM MUTEX_DESTROY(&PL_hints_mutex)
# 606 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv.h"
#define HV_DISABLE_UVAR_XKEY 0x01


#define HV_FETCH_ISSTORE 0x04
#define HV_FETCH_ISEXISTS 0x08
#define HV_FETCH_LVALUE 0x10
#define HV_FETCH_JUST_SV 0x20
#define HV_DELETE 0x40
#define HV_FETCH_EMPTY_HE 0x80


#define HV_NAME_SETALL 0x02
# 627 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv.h"
#define newHV() MUTABLE_HV(newSV_type(SVt_PVHV))

# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h" 1
# 13 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h"
#define PERL_SEEN_HV_FUNC_H 
# 27 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h"
#define PERL_HASH_FUNC_ONE_AT_A_TIME_HARD 
# 51 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h"
#define PERL_HASH_FUNC "ONE_AT_A_TIME_HARD"
#define PERL_HASH_SEED_BYTES 8
#define PERL_HASH_WITH_SEED(seed,hash,str,len) (hash)= S_perl_hash_one_at_a_time_hard((seed),(U8*)(str),(len))
# 84 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h"
#define PERL_HASH_SEED PL_hash_seed
# 96 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h"
#define PERL_HASH(hash,str,len) PERL_HASH_WITH_SEED(PERL_HASH_SEED,hash,str,len)
# 115 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h"
#define U8TO16_LE(d) ((((const U8 *)(d))[1] << 8) +((const U8 *)(d))[0])
# 128 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h"
#define U8TO32_LE(ptr) (ptr[0]|ptr[1]<<8|ptr[2]<<16|ptr[3]<<24)
#define UNALIGNED_SAFE 
# 155 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h"
#define ROTL32(x,r) (((U32)x << r) | ((U32)x >> (32 - r)))
# 165 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h"
#define ROTL_UV(x,r) ROTL32(x,r)
# 270 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h"
static __inline__ U32
S_perl_hash_superfast(const unsigned char * const seed, const unsigned char *str, STRLEN len) {
    U32 hash = *((U32*)seed) + (U32)len;
    U32 tmp;
    int rem= len & 3;
    len >>= 2;

    for (;len > 0; len--) {
        hash += ((((const U8 *)(str))[1] << 8) +((const U8 *)(str))[0]);
        tmp = (((((const U8 *)(str+2))[1] << 8) +((const U8 *)(str+2))[0]) << 11) ^ hash;
        hash = (hash << 16) ^ tmp;
        str += 2 * sizeof (U16);
        hash += hash >> 11;
    }


    switch (rem) { case 3: hash += ((((const U8 *)(str))[1] << 8) +((const U8 *)(str))[0]);

                hash ^= hash << 16;
                hash ^= str[sizeof (U16)] << 18;
                hash += hash >> 11;
                break;
        case 2: hash += ((((const U8 *)(str))[1] << 8) +((const U8 *)(str))[0]);
                hash ^= hash << 11;
                hash += hash >> 17;
                break;
        case 1: hash += *str;
                hash ^= hash << 10;
                hash += hash >> 1;
    }

    hash ^= hash << 3;
    hash += hash >> 5;
    hash ^= hash << 4;
    hash += hash >> 17;
    hash ^= hash << 25;
    return (hash + (hash >> 6));
}
# 339 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h"
#define MURMUR_C1 (0xcc9e2d51)
#define MURMUR_C2 (0x1b873593)
#define MURMUR_C3 (0xe6546b64)
#define MURMUR_C4 (0x85ebca6b)
#define MURMUR_C5 (0xc2b2ae35)



#define MURMUR_DOBLOCK(h1,k1) STMT_START { k1 *= MURMUR_C1; k1 = ROTL32(k1,15); k1 *= MURMUR_C2; h1 ^= k1; h1 = ROTL32(h1,13); h1 = h1 * 5 + MURMUR_C3; } STMT_END
# 360 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h"
#define MURMUR_DOBYTES(cnt,h1,c,n,ptr,len) STMT_START { int MURMUR_DOBYTES_i = cnt; while(MURMUR_DOBYTES_i--) { c = c>>8 | *ptr++<<24; n++; len--; if(n==4) { MURMUR_DOBLOCK(h1, c); n = 0; } } } STMT_END
# 374 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h"
static __inline__ U32
S_perl_hash_murmur3(const unsigned char * const seed, const unsigned char *ptr, STRLEN len) {
    U32 h1 = *((U32*)seed);
    U32 k1;
    U32 carry = 0;

    const unsigned char *end;
    int bytes_in_carry = 0;
    I32 total_length= (I32)len;
# 394 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h"
    end = ptr + len/4*4;
    for( ; ptr < end ; ptr+=4) {
        k1 = (ptr[0]|ptr[1]<<8|ptr[2]<<16|ptr[3]<<24);
        (void)( { k1 *= (0xcc9e2d51); k1 = (((U32)k1 << 15) | ((U32)k1 >> (32 - 15))); k1 *= (0x1b873593); h1 ^= k1; h1 = (((U32)h1 << 13) | ((U32)h1 >> (32 - 13))); h1 = h1 * 5 + (0xe6546b64); } );
    }
# 443 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h"
    len -= len/4*4;


    (void)( { int MURMUR_DOBYTES_i = (int)len; while(MURMUR_DOBYTES_i--) { carry = carry>>8 | *ptr++<<24; bytes_in_carry++; len--; if(bytes_in_carry==4) { (void)( { carry *= (0xcc9e2d51); carry = (((U32)carry << 15) | ((U32)carry >> (32 - 15))); carry *= (0x1b873593); h1 ^= carry; h1 = (((U32)h1 << 13) | ((U32)h1 >> (32 - 13))); h1 = h1 * 5 + (0xe6546b64); } ); bytes_in_carry = 0; } } } );

    if (bytes_in_carry) {
        k1 = carry >> ( 4 - bytes_in_carry ) * 8;
        k1 *= (0xcc9e2d51);
        k1 = (((U32)k1 << 15) | ((U32)k1 >> (32 - 15)));
        k1 *= (0x1b873593);
        h1 ^= k1;
    }
    h1 ^= total_length;


    h1 ^= h1 >> 16;
    h1 *= (0x85ebca6b);
    h1 ^= h1 >> 13;
    h1 *= (0xc2b2ae35);
    h1 ^= h1 >> 16;
    return h1;
}


static __inline__ U32
S_perl_hash_djb2(const unsigned char * const seed, const unsigned char *str, const STRLEN len) {
    const unsigned char * const end = (const unsigned char *)str + len;
    U32 hash = *((U32*)seed) + (U32)len;
    while (str < end) {
        hash = ((hash << 5) + hash) + *str++;
    }
    return hash;
}

static __inline__ U32
S_perl_hash_sdbm(const unsigned char * const seed, const unsigned char *str, const STRLEN len) {
    const unsigned char * const end = (const unsigned char *)str + len;
    U32 hash = *((U32*)seed) + (U32)len;
    while (str < end) {
        hash = (hash << 6) + (hash << 16) - hash + *str++;
    }
    return hash;
}
# 503 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv_func.h"
static __inline__ U32
S_perl_hash_one_at_a_time(const unsigned char * const seed, const unsigned char *str, const STRLEN len) {
    const unsigned char * const end = (const unsigned char *)str + len;
    U32 hash = *((U32*)seed) + (U32)len;
    while (str < end) {
        hash += *str++;
        hash += (hash << 10);
        hash ^= (hash >> 6);
    }
    hash += (hash << 3);
    hash ^= (hash >> 11);
    return (hash + (hash << 15));
}


static __inline__ U32
S_perl_hash_one_at_a_time_hard(const unsigned char * const seed, const unsigned char *str, const STRLEN len) {
    const unsigned char * const end = (const unsigned char *)str + len;
    U32 hash = *((U32*)seed) + (U32)len;

    while (str < end) {
        hash += (hash << 10);
        hash ^= (hash >> 6);
        hash += *str++;
    }

    hash += (hash << 10);
    hash ^= (hash >> 6);
    hash += seed[4];

    hash += (hash << 10);
    hash ^= (hash >> 6);
    hash += seed[5];

    hash += (hash << 10);
    hash ^= (hash >> 6);
    hash += seed[6];

    hash += (hash << 10);
    hash ^= (hash >> 6);
    hash += seed[7];

    hash += (hash << 10);
    hash ^= (hash >> 6);

    hash += (hash << 3);
    hash ^= (hash >> 11);
    return (hash + (hash << 15));
}

static __inline__ U32
S_perl_hash_old_one_at_a_time(const unsigned char * const seed, const unsigned char *str, const STRLEN len) {
    const unsigned char * const end = (const unsigned char *)str + len;
    U32 hash = *((U32*)seed);
    while (str < end) {
        hash += *str++;
        hash += (hash << 10);
        hash ^= (hash >> 6);
    }
    hash += (hash << 3);
    hash ^= (hash >> 11);
    return (hash + (hash << 15));
}
# 630 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/hv.h" 2
# 3741 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h" 1
# 32 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
struct jmpenv {
    struct jmpenv * je_prev;
    sigjmp_buf je_buf;
    int je_ret;
    _Bool je_mustcatch;
};

typedef struct jmpenv JMPENV;
# 51 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define JMPENV_BOOTSTRAP STMT_START { PERL_POISON_EXPR(PoisonNew(&PL_start_env, 1, JMPENV)); PL_top_env = &PL_start_env; PL_start_env.je_prev = NULL; PL_start_env.je_ret = -1; PL_start_env.je_mustcatch = TRUE; } STMT_END
# 93 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define dJMPENV JMPENV cur_env

#define JMPENV_PUSH(v) STMT_START { DEBUG_l({ int i = 0; JMPENV *p = PL_top_env; while (p) { i++; p = p->je_prev; } Perl_deb(aTHX_ "JUMPENV_PUSH level=%d at %s:%d\n", i, __FILE__, __LINE__);}) cur_env.je_prev = PL_top_env; cur_env.je_ret = PerlProc_setjmp(cur_env.je_buf, SCOPE_SAVES_SIGNAL_MASK); PL_top_env = &cur_env; cur_env.je_mustcatch = FALSE; (v) = cur_env.je_ret; } STMT_END
# 109 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define JMPENV_POP STMT_START { DEBUG_l({ int i = -1; JMPENV *p = PL_top_env; while (p) { i++; p = p->je_prev; } Perl_deb(aTHX_ "JUMPENV_POP level=%d at %s:%d\n", i, __FILE__, __LINE__);}) assert(PL_top_env == &cur_env); PL_top_env = cur_env.je_prev; } STMT_END
# 120 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define JMPENV_JUMP(v) STMT_START { DEBUG_l({ int i = -1; JMPENV *p = PL_top_env; while (p) { i++; p = p->je_prev; } Perl_deb(aTHX_ "JUMPENV_JUMP(%d) level=%d at %s:%d\n", (int)v, i, __FILE__, __LINE__);}) if (PL_top_env->je_prev) PerlProc_longjmp(PL_top_env->je_buf, (v)); if ((v) == 2) PerlProc_exit(STATUS_EXIT); PerlIO_printf(PerlIO_stderr(), "panic: top_env, v=%d\n", (int)v); PerlProc_exit(1); } STMT_END
# 135 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define CATCH_GET (PL_top_env->je_mustcatch)
#define CATCH_SET(v) STMT_START { DEBUG_l( Perl_deb(aTHX_ "JUMPLEVEL set catch %d => %d (for %p) at %s:%d\n", PL_top_env->je_mustcatch, v, (void*)PL_top_env, __FILE__, __LINE__);) PL_top_env->je_mustcatch = (v); } STMT_END
# 150 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
typedef struct refcounted_he COPHH;

#define COPHH_KEY_UTF8 REFCOUNTED_HE_KEY_UTF8
# 168 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cophh_fetch_pvn(cophh,keypv,keylen,hash,flags) Perl_refcounted_he_fetch_pvn(aTHX_ cophh, keypv, keylen, hash, flags)
# 180 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cophh_fetch_pvs(cophh,key,flags) Perl_refcounted_he_fetch_pvn(aTHX_ cophh, STR_WITH_LEN(key), 0, flags)
# 192 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cophh_fetch_pv(cophh,key,hash,flags) Perl_refcounted_he_fetch_pv(aTHX_ cophh, key, hash, flags)
# 204 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cophh_fetch_sv(cophh,key,hash,flags) Perl_refcounted_he_fetch_sv(aTHX_ cophh, key, hash, flags)
# 217 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cophh_2hv(cophh,flags) Perl_refcounted_he_chain_2hv(aTHX_ cophh, flags)
# 228 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cophh_copy(cophh) Perl_refcounted_he_inc(aTHX_ cophh)
# 239 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cophh_free(cophh) Perl_refcounted_he_free(aTHX_ cophh)
# 249 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cophh_new_empty() ((COPHH *)NULL)
# 274 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cophh_store_pvn(cophh,keypv,keylen,hash,value,flags) Perl_refcounted_he_new_pvn(aTHX_ cophh, keypv, keylen, hash, value, flags)
# 286 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cophh_store_pvs(cophh,key,value,flags) Perl_refcounted_he_new_pvn(aTHX_ cophh, STR_WITH_LEN(key), 0, value, flags)
# 298 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cophh_store_pv(cophh,key,hash,value,flags) Perl_refcounted_he_new_pv(aTHX_ cophh, key, hash, value, flags)
# 310 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cophh_store_sv(cophh,key,hash,value,flags) Perl_refcounted_he_new_sv(aTHX_ cophh, key, hash, value, flags)
# 330 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cophh_delete_pvn(cophh,keypv,keylen,hash,flags) Perl_refcounted_he_new_pvn(aTHX_ cophh, keypv, keylen, hash, (SV *)NULL, flags)
# 343 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cophh_delete_pvs(cophh,key,flags) Perl_refcounted_he_new_pvn(aTHX_ cophh, STR_WITH_LEN(key), 0, (SV *)NULL, flags)
# 356 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cophh_delete_pv(cophh,key,hash,flags) Perl_refcounted_he_new_pv(aTHX_ cophh, key, hash, (SV *)NULL, flags)
# 368 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cophh_delete_sv(cophh,key,hash,flags) Perl_refcounted_he_new_sv(aTHX_ cophh, key, hash, (SV *)NULL, flags)


# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/mydtrace.h" 1
# 84 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/mydtrace.h"
#define ENTRY_PROBE(func,file,line,stash) 
#define RETURN_PROBE(func,file,line,stash) 
#define PHASE_CHANGE_PROBE(new_phase,old_phase) 
#define OP_ENTRY_PROBE(name) 
#define LOADING_FILE_PROBE(name) 
#define LOADED_FILE_PROBE(name) 
# 372 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h" 2

struct cop {
    OP* op_next; OP* op_sibling; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; unsigned op_type:9; unsigned op_opt:1; unsigned op_slabbed:1; unsigned op_savefree:1; unsigned op_static:1; unsigned op_folded:1; unsigned op_moresib:1; unsigned op_spare:1; U8 op_flags; U8 op_private;


    line_t cop_line;


    PADOFFSET cop_stashoff;

    char * cop_file;




    U32 cop_hints;
    U32 cop_seq;

    STRLEN * cop_warnings;


    COPHH * cop_hints_hash;
};


#define CopFILE(c) ((c)->cop_file)
#define CopFILEGV(c) (CopFILE(c) ? gv_fetchfile(CopFILE(c)) : NULL)






#define CopFILE_set(c,pv) ((c)->cop_file = savesharedpv(pv))
#define CopFILE_setn(c,pv,l) ((c)->cop_file = savesharedpvn((pv),(l)))


#define CopFILESV(c) (CopFILE(c) ? GvSV(gv_fetchfile(CopFILE(c))) : NULL)

#define CopFILEAV(c) (CopFILE(c) ? GvAV(gv_fetchfile(CopFILE(c))) : NULL)

#define CopFILEAVx(c) (assert_(CopFILE(c)) GvAV(gv_fetchfile(CopFILE(c))))


#define CopSTASH(c) PL_stashpad[(c)->cop_stashoff]
#define CopSTASH_set(c,hv) ((c)->cop_stashoff = (hv) ? alloccopstash(hv) : 0)





#define CopFILE_free(c) (PerlMemShared_free(CopFILE(c)),(CopFILE(c) = NULL))
# 445 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define CopSTASHPV(c) (CopSTASH(c) ? HvNAME_get(CopSTASH(c)) : NULL)

#define CopSTASHPV_set(c,pv) CopSTASH_set((c), gv_stashpv(pv,GV_ADD))
#define CopSTASH_eq(c,hv) (CopSTASH(c) == (hv))

#define CopHINTHASH_get(c) ((COPHH*)((c)->cop_hints_hash))
#define CopHINTHASH_set(c,h) ((c)->cop_hints_hash = (h))
# 471 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cop_hints_fetch_pvn(cop,keypv,keylen,hash,flags) cophh_fetch_pvn(CopHINTHASH_get(cop), keypv, keylen, hash, flags)
# 483 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cop_hints_fetch_pvs(cop,key,flags) cophh_fetch_pvs(CopHINTHASH_get(cop), key, flags)
# 495 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cop_hints_fetch_pv(cop,key,hash,flags) cophh_fetch_pv(CopHINTHASH_get(cop), key, hash, flags)
# 507 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cop_hints_fetch_sv(cop,key,hash,flags) cophh_fetch_sv(CopHINTHASH_get(cop), key, hash, flags)
# 520 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define cop_hints_2hv(cop,flags) cophh_2hv(CopHINTHASH_get(cop), flags)


#define CopLABEL(c) Perl_cop_fetch_label(aTHX_ (c), NULL, NULL)
#define CopLABEL_len(c,len) Perl_cop_fetch_label(aTHX_ (c), len, NULL)
#define CopLABEL_len_flags(c,len,flags) Perl_cop_fetch_label(aTHX_ (c), len, flags)
#define CopLABEL_alloc(pv) ((pv)?savepv(pv):NULL)

#define CopSTASH_ne(c,hv) (!CopSTASH_eq(c,hv))
#define CopLINE(c) ((c)->cop_line)
#define CopLINE_inc(c) (++CopLINE(c))
#define CopLINE_dec(c) (--CopLINE(c))
#define CopLINE_set(c,l) (CopLINE(c) = (l))


#define OutCopFILE(c) CopFILE(c)

#define CopHINTS_get(c) ((c)->cop_hints + 0)
#define CopHINTS_set(c,h) STMT_START { (c)->cop_hints = (h); } STMT_END
# 547 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
struct block_sub {
    OP * retop;

    CV * cv;

    AV * savearray;
    AV * argarray;
    I32 olddepth;
    PAD *oldcomppad;
};



struct block_format {
    OP * retop;

    CV * cv;

    GV * gv;
    GV * dfoutgv;
};





#define PUSHSUB_BASE(cx) ENTRY_PROBE(CvNAMED(cv) ? HEK_KEY(CvNAME_HEK(cv)) : GvENAME(CvGV(cv)), CopFILE((const COP *)CvSTART(cv)), CopLINE((const COP *)CvSTART(cv)), CopSTASHPV((const COP *)CvSTART(cv))); cx->blk_sub.cv = cv; cx->blk_sub.olddepth = CvDEPTH(cv); cx->cx_type |= (hasargs) ? CXp_HASARGS : 0; cx->blk_sub.retop = NULL; if (!CvDEPTH(cv)) { SvREFCNT_inc_simple_void_NN(cv); SvREFCNT_inc_simple_void_NN(cv); SAVEFREESV(cv); }
# 591 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define PUSHSUB_GET_LVALUE_MASK(func) ( (PL_op->op_flags & OPf_WANT) ? OPpENTERSUB_LVAL_MASK : !(PL_op->op_private & OPpENTERSUB_LVAL_MASK) ? 0 : (U8)func(aTHX) )
# 601 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define PUSHSUB(cx) { U8 phlags = PUSHSUB_GET_LVALUE_MASK(Perl_was_lvalue_sub); PUSHSUB_BASE(cx) cx->blk_u16 = PL_op->op_private & (phlags|OPpDEREF); }
# 610 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define PUSHSUB_DB(cx) PUSHSUB_BASE(cx) cx->blk_u16 = 0;




#define PUSHFORMAT(cx,retop) cx->blk_format.cv = cv; cx->blk_format.gv = gv; cx->blk_format.retop = (retop); cx->blk_format.dfoutgv = PL_defoutgv; cx->blk_u16 = 0; if (!CvDEPTH(cv)) SvREFCNT_inc_simple_void_NN(cv); CvDEPTH(cv)++; SvREFCNT_inc_void(cx->blk_format.dfoutgv)
# 625 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define POP_SAVEARRAY() STMT_START { SvREFCNT_dec(GvAV(PL_defgv)); GvAV(PL_defgv) = cx->blk_sub.savearray; } STMT_END







#define CLEAR_ARGARRAY(ary) STMT_START { AvMAX(ary) += AvARRAY(ary) - AvALLOC(ary); AvARRAY(ary) = AvALLOC(ary); AvFILLp(ary) = -1; } STMT_END






#define POPSUB(cx,sv) STMT_START { const I32 olddepth = cx->blk_sub.olddepth; if (!(cx->blk_u16 & CxPOPSUB_DONE)) { cx->blk_u16 |= CxPOPSUB_DONE; RETURN_PROBE(CvNAMED(cx->blk_sub.cv) ? HEK_KEY(CvNAME_HEK(cx->blk_sub.cv)) : GvENAME(CvGV(cx->blk_sub.cv)), CopFILE((COP*)CvSTART((const CV*)cx->blk_sub.cv)), CopLINE((COP*)CvSTART((const CV*)cx->blk_sub.cv)), CopSTASHPV((COP*)CvSTART((const CV*)cx->blk_sub.cv))); if (CxHASARGS(cx)) { POP_SAVEARRAY(); if (AvREAL(cx->blk_sub.argarray)) { const SSize_t fill = AvFILLp(cx->blk_sub.argarray); SvREFCNT_dec_NN(cx->blk_sub.argarray); cx->blk_sub.argarray = newAV(); av_extend(cx->blk_sub.argarray, fill); AvREIFY_only(cx->blk_sub.argarray); CX_CURPAD_SV(cx->blk_sub, 0) = MUTABLE_SV(cx->blk_sub.argarray); } else { CLEAR_ARGARRAY(cx->blk_sub.argarray); } } } sv = MUTABLE_SV(cx->blk_sub.cv); LEAVE_SCOPE(PL_scopestack[cx->blk_oldscopesp-1]); if (sv && (CvDEPTH((const CV*)sv) = olddepth)) sv = NULL; } STMT_END
# 674 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define LEAVESUB(sv) STMT_START { SvREFCNT_dec(sv); } STMT_END




#define POPFORMAT(cx) STMT_START { if (!(cx->blk_u16 & CxPOPSUB_DONE)) { CV * const cv = cx->blk_format.cv; GV * const dfuot = cx->blk_format.dfoutgv; cx->blk_u16 |= CxPOPSUB_DONE; setdefout(dfuot); LEAVE_SCOPE(PL_scopestack[cx->blk_oldscopesp-1]); if (!--CvDEPTH(cv)) SvREFCNT_dec_NN(cx->blk_format.cv); SvREFCNT_dec_NN(dfuot); } } STMT_END
# 694 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
struct block_eval {
    OP * retop;

    SV * old_namesv;
    OP * old_eval_root;
    SV * cur_text;
    CV * cv;
    JMPENV * cur_top_env;
};





#define CxOLD_IN_EVAL(cx) (((cx)->blk_u16) & 0x7F)
#define CxOLD_OP_TYPE(cx) (((cx)->blk_u16) >> 7)

#define PUSHEVAL(cx,n) STMT_START { assert(!(PL_in_eval & ~0x7F)); assert(!(PL_op->op_type & ~0x1FF)); cx->blk_u16 = (PL_in_eval & 0x7F) | ((U16)PL_op->op_type << 7); cx->blk_eval.old_namesv = (n ? newSVpv(n,0) : NULL); cx->blk_eval.old_eval_root = PL_eval_root; cx->blk_eval.cur_text = PL_parser ? PL_parser->linestr : NULL; cx->blk_eval.cv = NULL; cx->blk_eval.retop = NULL; cx->blk_eval.cur_top_env = PL_top_env; } STMT_END
# 724 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define POPEVAL(cx) STMT_START { PL_in_eval = CxOLD_IN_EVAL(cx); optype = CxOLD_OP_TYPE(cx); PL_eval_root = cx->blk_eval.old_eval_root; if (cx->blk_eval.cur_text && SvSCREAM(cx->blk_eval.cur_text)) SvREFCNT_dec_NN(cx->blk_eval.cur_text); if (cx->blk_eval.old_namesv) sv_2mortal(cx->blk_eval.old_namesv); } STMT_END
# 736 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
struct block_loop {
    I32 resetsp;
    LOOP * my_op;
    union {
 SV **svp;
 GV *gv;
 PAD *oldcomppad;
    } itervar_u;
    union {
 struct {
     AV * ary;
     IV ix;
 } ary;
 struct {
     IV cur;
     IV end;
 } lazyiv;
 struct {
     SV * cur;
     SV * end;
 } lazysv;
    } state_u;
};


#define CxITERVAR_PADSV(c) &CX_CURPAD_SV( (c)->blk_loop.itervar_u, (c)->blk_loop.my_op->op_targ)





#define CxITERVAR(c) ((c)->blk_loop.itervar_u.oldcomppad ? (CxPADLOOP(c) ? CxITERVAR_PADSV(c) : isGV((c)->blk_loop.itervar_u.gv) ? &GvSV((c)->blk_loop.itervar_u.gv) : (SV **)&(c)->blk_loop.itervar_u.gv) : (SV**)NULL)
# 776 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define CxLABEL(c) (0 + CopLABEL((c)->blk_oldcop))
#define CxLABEL_len(c,len) (0 + CopLABEL_len((c)->blk_oldcop, len))
#define CxLABEL_len_flags(c,len,flags) (0 + CopLABEL_len_flags((c)->blk_oldcop, len, flags))
#define CxHASARGS(c) (((c)->cx_type & CXp_HASARGS) == CXp_HASARGS)
#define CxLVAL(c) (0 + ((c)->blk_u16 & 0xff))

#define CxPOPSUB_DONE 0x100


#define PUSHLOOP_PLAIN(cx,s) cx->blk_loop.resetsp = s - PL_stack_base; cx->blk_loop.my_op = cLOOP; cx->blk_loop.state_u.ary.ary = NULL; cx->blk_loop.state_u.ary.ix = 0; cx->blk_loop.itervar_u.svp = NULL;






#define PUSHLOOP_FOR(cx,ivar,s) cx->blk_loop.resetsp = s - PL_stack_base; cx->blk_loop.my_op = cLOOP; cx->blk_loop.state_u.ary.ary = NULL; cx->blk_loop.state_u.ary.ix = 0; cx->blk_loop.itervar_u.svp = (SV**)(ivar);






#define POPLOOP(cx) if (CxTYPE(cx) == CXt_LOOP_LAZYSV) { SvREFCNT_dec_NN(cx->blk_loop.state_u.lazysv.cur); SvREFCNT_dec_NN(cx->blk_loop.state_u.lazysv.end); } if (CxTYPE(cx) == CXt_LOOP_FOR) SvREFCNT_dec(cx->blk_loop.state_u.ary.ary);
# 808 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
struct block_givwhen {
 OP *leave_op;
};

#define PUSHGIVEN(cx) cx->blk_givwhen.leave_op = cLOGOP->op_other;


#define PUSHWHEN PUSHGIVEN


struct block {
    U8 blku_type;
    U8 blku_gimme;
    U16 blku_u16;
    I32 blku_oldsp;
    COP * blku_oldcop;
    I32 blku_oldmarksp;
    I32 blku_oldscopesp;
    PMOP * blku_oldpm;

    union {
 struct block_sub blku_sub;
 struct block_format blku_format;
 struct block_eval blku_eval;
 struct block_loop blku_loop;
 struct block_givwhen blku_givwhen;
    } blk_u;
};
#define blk_oldsp cx_u.cx_blk.blku_oldsp
#define blk_oldcop cx_u.cx_blk.blku_oldcop
#define blk_oldmarksp cx_u.cx_blk.blku_oldmarksp
#define blk_oldscopesp cx_u.cx_blk.blku_oldscopesp
#define blk_oldpm cx_u.cx_blk.blku_oldpm
#define blk_gimme cx_u.cx_blk.blku_gimme
#define blk_u16 cx_u.cx_blk.blku_u16
#define blk_sub cx_u.cx_blk.blk_u.blku_sub
#define blk_format cx_u.cx_blk.blk_u.blku_format
#define blk_eval cx_u.cx_blk.blk_u.blku_eval
#define blk_loop cx_u.cx_blk.blk_u.blku_loop
#define blk_givwhen cx_u.cx_blk.blk_u.blku_givwhen

#define DEBUG_CX(action) DEBUG_l( Perl_deb(aTHX_ "CX %ld %s %s (scope %ld,%ld) at %s:%d\n", (long)cxstack_ix, action, PL_block_type[CxTYPE(&cxstack[cxstack_ix])], (long)PL_scopestack_ix, (long)(cxstack[cxstack_ix].blk_oldscopesp), __FILE__, __LINE__));
# 860 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define PUSHBLOCK(cx,t,sp) CXINC, cx = &cxstack[cxstack_ix], cx->cx_type = t, cx->blk_oldsp = sp - PL_stack_base, cx->blk_oldcop = PL_curcop, cx->blk_oldmarksp = PL_markstack_ptr - PL_markstack, cx->blk_oldscopesp = PL_scopestack_ix, cx->blk_oldpm = PL_curpm, cx->blk_gimme = (U8)gimme; DEBUG_CX("PUSH");
# 871 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define POPBLOCK(cx,pm) DEBUG_CX("POP"); cx = &cxstack[cxstack_ix--], newsp = PL_stack_base + cx->blk_oldsp, PL_curcop = cx->blk_oldcop, PL_markstack_ptr = PL_markstack + cx->blk_oldmarksp, PL_scopestack_ix = cx->blk_oldscopesp, pm = cx->blk_oldpm, gimme = cx->blk_gimme;
# 882 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define TOPBLOCK(cx) DEBUG_CX("TOP"); cx = &cxstack[cxstack_ix], PL_stack_sp = PL_stack_base + cx->blk_oldsp, PL_markstack_ptr = PL_markstack + cx->blk_oldmarksp, PL_scopestack_ix = cx->blk_oldscopesp, PL_curpm = cx->blk_oldpm;
# 891 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
struct subst {
    U8 sbu_type;
    U8 sbu_rflags;
    U16 sbu_rxtainted;
    I32 sbu_oldsave;
    ssize_t sbu_iters;
    ssize_t sbu_maxiters;
    char * sbu_orig;
    SV * sbu_dstr;
    SV * sbu_targ;
    char * sbu_s;
    char * sbu_m;
    char * sbu_strend;
    void * sbu_rxres;
    REGEXP * sbu_rx;
};
#define sb_iters cx_u.cx_subst.sbu_iters
#define sb_maxiters cx_u.cx_subst.sbu_maxiters
#define sb_rflags cx_u.cx_subst.sbu_rflags
#define sb_oldsave cx_u.cx_subst.sbu_oldsave
#define sb_rxtainted cx_u.cx_subst.sbu_rxtainted
#define sb_orig cx_u.cx_subst.sbu_orig
#define sb_dstr cx_u.cx_subst.sbu_dstr
#define sb_targ cx_u.cx_subst.sbu_targ
#define sb_s cx_u.cx_subst.sbu_s
#define sb_m cx_u.cx_subst.sbu_m
#define sb_strend cx_u.cx_subst.sbu_strend
#define sb_rxres cx_u.cx_subst.sbu_rxres
#define sb_rx cx_u.cx_subst.sbu_rx
# 945 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define CxONCE(cx) ((cx)->cx_type & CXp_ONCE)

struct context {
    union {
 struct block cx_blk;
 struct subst cx_subst;
    } cx_u;
};
#define cx_type cx_u.cx_subst.sbu_type



#define CXTYPEMASK 0xf
#define CXt_NULL 0
#define CXt_WHEN 1
#define CXt_BLOCK 2




#define CXt_GIVEN 3

#define CXt_LOOP_FOR 4
#define CXt_LOOP_PLAIN 5
#define CXt_LOOP_LAZYSV 6
#define CXt_LOOP_LAZYIV 7
#define CXt_SUB 8
#define CXt_FORMAT 9
#define CXt_EVAL 10
#define CXt_SUBST 11






#define CXp_MULTICALL 0x10



#define CXp_HASARGS 0x20
#define CXp_SUB_RE 0x40
#define CXp_SUB_RE_FAKE 0x80


#define CXp_REAL 0x20
#define CXp_TRYBLOCK 0x40


#define CXp_FOR_DEF 0x10
#define CXp_FOR_LVREF 0x20
#define CxPADLOOP(c) ((c)->blk_loop.my_op->op_targ)


#define CXp_ONCE 0x10

#define CxTYPE(c) ((c)->cx_type & CXTYPEMASK)
#define CxTYPE_is_LOOP(c) (((c)->cx_type & 0xC) == 0x4)
#define CxMULTICALL(c) (((c)->cx_type & CXp_MULTICALL) == CXp_MULTICALL)

#define CxREALEVAL(c) (((c)->cx_type & (CXTYPEMASK|CXp_REAL)) == (CXt_EVAL|CXp_REAL))

#define CxTRYBLOCK(c) (((c)->cx_type & (CXTYPEMASK|CXp_TRYBLOCK)) == (CXt_EVAL|CXp_TRYBLOCK))

#define CxFOREACH(c) (CxTYPE_is_LOOP(c) && CxTYPE(c) != CXt_LOOP_PLAIN)
#define CxFOREACHDEF(c) ((CxTYPE_is_LOOP(c) && CxTYPE(c) != CXt_LOOP_PLAIN) && ((c)->cx_type & CXp_FOR_DEF))


#define CXINC (cxstack_ix < cxstack_max ? ++cxstack_ix : (cxstack_ix = cxinc()))
# 1048 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define G_SCALAR 2
#define G_ARRAY 3
#define G_VOID 1
#define G_WANT 3


#define G_DISCARD 4


#define G_EVAL 8
#define G_NOARGS 16
#define G_KEEPERR 32
#define G_NODEBUG 64
#define G_METHOD 128
#define G_FAKINGEVAL 256

#define G_UNDEF_FILL 512


#define G_WRITING_TO_STDERR 1024

#define G_RE_REPARSING 0x800
#define G_METHOD_NAMED 4096


#define EVAL_NULL 0
#define EVAL_INEVAL 1
#define EVAL_WARNONLY 2
#define EVAL_KEEPERR 4
#define EVAL_INREQUIRE 8
#define EVAL_RE_REPARSING 0x10





#define PERLSI_UNKNOWN -1
#define PERLSI_UNDEF 0
#define PERLSI_MAIN 1
#define PERLSI_MAGIC 2
#define PERLSI_SORT 3
#define PERLSI_SIGNAL 4
#define PERLSI_OVERLOAD 5
#define PERLSI_DESTROY 6
#define PERLSI_WARNHOOK 7
#define PERLSI_DIEHOOK 8
#define PERLSI_REQUIRE 9

struct stackinfo {
    AV * si_stack;
    PERL_CONTEXT * si_cxstack;
    struct stackinfo * si_prev;
    struct stackinfo * si_next;
    I32 si_cxix;
    I32 si_cxmax;
    I32 si_type;
    I32 si_markoff;


};

typedef struct stackinfo PERL_SI;

#define cxstack (PL_curstackinfo->si_cxstack)
#define cxstack_ix (PL_curstackinfo->si_cxix)
#define cxstack_max (PL_curstackinfo->si_cxmax)





#define SET_MARK_OFFSET NOOP


#define PUSHSTACKi(type) STMT_START { PERL_SI *next = PL_curstackinfo->si_next; DEBUG_l({ int i = 0; PERL_SI *p = PL_curstackinfo; while (p) { i++; p = p->si_prev; } Perl_deb(aTHX_ "push STACKINFO %d at %s:%d\n", i, __FILE__, __LINE__);}) if (!next) { next = new_stackinfo(32, 2048/sizeof(PERL_CONTEXT) - 1); next->si_prev = PL_curstackinfo; PL_curstackinfo->si_next = next; } next->si_type = type; next->si_cxix = -1; AvFILLp(next->si_stack) = 0; SWITCHSTACK(PL_curstack,next->si_stack); PL_curstackinfo = next; SET_MARK_OFFSET; } STMT_END
# 1143 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define PUSHSTACK PUSHSTACKi(PERLSI_UNKNOWN)



#define POPSTACK STMT_START { dSP; PERL_SI * const prev = PL_curstackinfo->si_prev; DEBUG_l({ int i = -1; PERL_SI *p = PL_curstackinfo; while (p) { i++; p = p->si_prev; } Perl_deb(aTHX_ "pop  STACKINFO %d at %s:%d\n", i, __FILE__, __LINE__);}) if (!prev) { Perl_croak_popstack(); } SWITCHSTACK(PL_curstack,prev->si_stack); PL_curstackinfo = prev; } STMT_END
# 1164 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define POPSTACK_TO(s) STMT_START { while (PL_curstack != s) { dounwind(-1); POPSTACK; } } STMT_END







#define IN_PERL_COMPILETIME (PL_curcop == &PL_compiling)
#define IN_PERL_RUNTIME (PL_curcop != &PL_compiling)
# 1195 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define dMULTICALL SV **newsp; PERL_CONTEXT *cx; CV *multicall_cv; OP *multicall_cop; bool multicall_oldcatch; U8 hasargs = 0







#define PUSH_MULTICALL(the_cv) PUSH_MULTICALL_FLAGS(the_cv, 0)





#define PUSH_MULTICALL_FLAGS(the_cv,flags) STMT_START { CV * const _nOnclAshIngNamE_ = the_cv; CV * const cv = _nOnclAshIngNamE_; PADLIST * const padlist = CvPADLIST(cv); ENTER; multicall_oldcatch = CATCH_GET; SAVETMPS; SAVEVPTR(PL_op); CATCH_SET(TRUE); PUSHSTACKi(PERLSI_SORT); PUSHBLOCK(cx, (CXt_SUB|CXp_MULTICALL|flags), PL_stack_sp); PUSHSUB(cx); if (!(flags & CXp_SUB_RE_FAKE)) CvDEPTH(cv)++; if (CvDEPTH(cv) >= 2) { PERL_STACK_OVERFLOW_CHECK(); Perl_pad_push(aTHX_ padlist, CvDEPTH(cv)); } SAVECOMPPAD(); PAD_SET_CUR_NOSAVE(padlist, CvDEPTH(cv)); multicall_cv = cv; multicall_cop = CvSTART(cv); } STMT_END
# 1233 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define MULTICALL STMT_START { PL_op = multicall_cop; CALLRUNOPS(aTHX); } STMT_END





#define POP_MULTICALL STMT_START { cx = &cxstack[cxstack_ix]; if (! ((CvDEPTH(multicall_cv) = cx->blk_sub.olddepth)) ) { LEAVESUB(multicall_cv); } POPBLOCK(cx,PL_curpm); POPSTACK; CATCH_SET(multicall_oldcatch); LEAVE; SPAGAIN; } STMT_END
# 1255 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/cop.h"
#define CHANGE_MULTICALL_FLAGS(the_cv,flags) STMT_START { CV * const _nOnclAshIngNamE_ = the_cv; CV * const cv = _nOnclAshIngNamE_; PADLIST * const padlist = CvPADLIST(cv); cx = &cxstack[cxstack_ix]; assert(cx->cx_type & CXp_MULTICALL); if (! ((CvDEPTH(multicall_cv) = cx->blk_sub.olddepth)) ) { LEAVESUB(multicall_cv); } cx->cx_type = (CXt_SUB|CXp_MULTICALL|flags); PUSHSUB(cx); if (!(flags & CXp_SUB_RE_FAKE)) CvDEPTH(cv)++; if (CvDEPTH(cv) >= 2) { PERL_STACK_OVERFLOW_CHECK(); Perl_pad_push(aTHX_ padlist, CvDEPTH(cv)); } SAVECOMPPAD(); PAD_SET_CUR_NOSAVE(padlist, CvDEPTH(cv)); multicall_cv = cv; multicall_cop = CvSTART(cv); } STMT_END
# 3742 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/av.h" 1
# 11 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/av.h"
struct xpvav {
    HV* xmg_stash;
    union _xmgu xmg_u;
    ssize_t xav_fill;
    ssize_t xav_max;
    SV** xav_alloc;
};
# 59 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/av.h"
#define Nullav Null(AV*)


#define AvARRAY(av) ((av)->sv_u.svu_array)
#define AvALLOC(av) ((XPVAV*) SvANY(av))->xav_alloc
#define AvMAX(av) ((XPVAV*) SvANY(av))->xav_max
#define AvFILLp(av) ((XPVAV*) SvANY(av))->xav_fill
#define AvARYLEN(av) (*Perl_av_arylen_p(aTHX_ MUTABLE_AV(av)))

#define AvREAL(av) (SvFLAGS(av) & SVpav_REAL)
#define AvREAL_on(av) (SvFLAGS(av) |= SVpav_REAL)
#define AvREAL_off(av) (SvFLAGS(av) &= ~SVpav_REAL)
#define AvREAL_only(av) (AvREIFY_off(av), SvFLAGS(av) |= SVpav_REAL)
#define AvREIFY(av) (SvFLAGS(av) & SVpav_REIFY)
#define AvREIFY_on(av) (SvFLAGS(av) |= SVpav_REIFY)
#define AvREIFY_off(av) (SvFLAGS(av) &= ~SVpav_REIFY)
#define AvREIFY_only(av) (AvREAL_off(av), SvFLAGS(av) |= SVpav_REIFY)


#define AvREALISH(av) (SvFLAGS(av) & (SVpav_REAL|SVpav_REIFY))

#define AvFILL(av) ((SvRMAGICAL((const SV *) (av))) ? mg_size(MUTABLE_SV(av)) : AvFILLp(av))

#define av_tindex(av) av_top_index(av)

#define NEGATIVE_INDICES_VAR "NEGATIVE_INDICES"
# 96 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/av.h"
#define newAV() MUTABLE_AV(newSV_type(SVt_PVAV))
# 3743 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/mg.h" 1
# 11 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/mg.h"
struct mgvtbl {
    int (*svt_get) (PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC* mg);
    int (*svt_set) (PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC* mg);
    U32 (*svt_len) (PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC* mg);
    int (*svt_clear)(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC* mg);
    int (*svt_free) (PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC* mg);
    int (*svt_copy) (PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC* mg,
         SV *nsv, const char *name, I32 namlen);
    int (*svt_dup) (PerlInterpreter* my_perl __attribute__((unused)), MAGIC *mg, CLONE_PARAMS *param);
    int (*svt_local)(PerlInterpreter* my_perl __attribute__((unused)), SV *nsv, MAGIC *mg);
};

struct magic {
    MAGIC* mg_moremagic;
    MGVTBL* mg_virtual;
    U16 mg_private;
    char mg_type;
    U8 mg_flags;
    ssize_t mg_len;
    SV* mg_obj;
    char* mg_ptr;
};

#define MGf_TAINTEDDIR 1
#define MGf_MINMATCH 1
#define MGf_REQUIRE_GV 1
#define MGf_REFCOUNTED 2
#define MGf_GSKIP 4
#define MGf_COPY 8
#define MGf_DUP 0x10
#define MGf_LOCAL 0x20
#define MGf_BYTES 0x40
#define MGf_PERSIST 0x80

#define MgTAINTEDDIR(mg) (mg->mg_flags & MGf_TAINTEDDIR)
#define MgTAINTEDDIR_on(mg) (mg->mg_flags |= MGf_TAINTEDDIR)
#define MgTAINTEDDIR_off(mg) (mg->mg_flags &= ~MGf_TAINTEDDIR)

#define MgPV(mg,lp) ((((int)(lp = (mg)->mg_len)) == HEf_SVKEY) ? SvPV(MUTABLE_SV((mg)->mg_ptr),lp) : (mg)->mg_ptr)


#define MgPV_const(mg,lp) ((((int)(lp = (mg)->mg_len)) == HEf_SVKEY) ? SvPV_const(MUTABLE_SV((mg)->mg_ptr),lp) : (const char*)(mg)->mg_ptr)


#define MgPV_nolen_const(mg) (((((int)(mg)->mg_len)) == HEf_SVKEY) ? SvPV_nolen_const(MUTABLE_SV((mg)->mg_ptr)) : (const char*)(mg)->mg_ptr)



#define SvTIED_mg(sv,how) (SvRMAGICAL(sv) ? mg_find((sv),(how)) : NULL)
#define SvTIED_obj(sv,mg) ((mg)->mg_obj ? (mg)->mg_obj : sv_2mortal(newRV(sv)))
# 76 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/mg.h"
#define whichsig(pv) whichsig_pv(pv)
# 3744 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/scope.h" 1
# 15 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/scope.h"
#define SAVEt_ALLOC 0
#define SAVEt_CLEARPADRANGE 1
#define SAVEt_CLEARSV 2
#define SAVEt_REGCONTEXT 3

#define SAVEt_ARG0_MAX 3



#define SAVEt_GP_ALIASED_SV 4
#define SAVEt_BOOL 5
#define SAVEt_COMPILE_WARNINGS 6
#define SAVEt_COMPPAD 7
#define SAVEt_FREECOPHH 8
#define SAVEt_FREEOP 9
#define SAVEt_FREEPV 10
#define SAVEt_FREESV 11
#define SAVEt_I16 12
#define SAVEt_I32_SMALL 13
#define SAVEt_I8 14
#define SAVEt_INT_SMALL 15
#define SAVEt_MORTALIZESV 16
#define SAVEt_NSTAB 17
#define SAVEt_OP 18
#define SAVEt_PARSER 19
#define SAVEt_STACK_POS 20
#define SAVEt_READONLY_OFF 21
#define SAVEt_FREEPADNAME 22

#define SAVEt_ARG1_MAX 22



#define SAVEt_AV 23
#define SAVEt_DESTRUCTOR 24
#define SAVEt_DESTRUCTOR_X 25
#define SAVEt_GENERIC_PVREF 26
#define SAVEt_GENERIC_SVREF 27
#define SAVEt_GP 28
#define SAVEt_GVSV 29
#define SAVEt_HINTS 30
#define SAVEt_HPTR 31
#define SAVEt_HV 32
#define SAVEt_I32 33
#define SAVEt_INT 34
#define SAVEt_ITEM 35
#define SAVEt_IV 36
#define SAVEt_LONG 37
#define SAVEt_PPTR 38
#define SAVEt_SAVESWITCHSTACK 39
#define SAVEt_SHARED_PVREF 40
#define SAVEt_SPTR 41
#define SAVEt_STRLEN 42
#define SAVEt_SV 43
#define SAVEt_SVREF 44
#define SAVEt_VPTR 45
#define SAVEt_ADELETE 46
#define SAVEt_APTR 47

#define SAVEt_ARG2_MAX 47



#define SAVEt_HELEM 48
#define SAVEt_PADSV_AND_MORTALIZE 49
#define SAVEt_SET_SVFLAGS 50
#define SAVEt_GVSLOT 51
#define SAVEt_AELEM 52
#define SAVEt_DELETE 53


#define SAVEf_SETMAGIC 1
#define SAVEf_KEEPOLDELEM 2

#define SAVE_TIGHT_SHIFT 6
#define SAVE_MASK 0x3F

#define save_aelem(av,idx,sptr) save_aelem_flags(av,idx,sptr,SAVEf_SETMAGIC)
#define save_helem(hv,key,sptr) save_helem_flags(hv,key,sptr,SAVEf_SETMAGIC)


#define SCOPE_SAVES_SIGNAL_MASK 0




#define SS_MAXPUSH 4

#define SSCHECK(need) if (UNLIKELY(PL_savestack_ix + (I32)(need) + SS_MAXPUSH > PL_savestack_max)) savestack_grow()
#define SSGROW(need) if (UNLIKELY(PL_savestack_ix + (I32)(need) + SS_MAXPUSH > PL_savestack_max)) savestack_grow_cnt(need + SS_MAXPUSH)
#define SSPUSHINT(i) (PL_savestack[PL_savestack_ix++].any_i32 = (I32)(i))
#define SSPUSHLONG(i) (PL_savestack[PL_savestack_ix++].any_long = (long)(i))
#define SSPUSHBOOL(p) (PL_savestack[PL_savestack_ix++].any_bool = (p))
#define SSPUSHIV(i) (PL_savestack[PL_savestack_ix++].any_iv = (IV)(i))
#define SSPUSHUV(u) (PL_savestack[PL_savestack_ix++].any_uv = (UV)(u))
#define SSPUSHPTR(p) (PL_savestack[PL_savestack_ix++].any_ptr = (void*)(p))
#define SSPUSHDPTR(p) (PL_savestack[PL_savestack_ix++].any_dptr = (p))
#define SSPUSHDXPTR(p) (PL_savestack[PL_savestack_ix++].any_dxptr = (p))
# 126 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/scope.h"
#define dSS_ADD I32 ix = PL_savestack_ix; ANY *ssp = &PL_savestack[ix]



#define SS_ADD_END(need) assert((need) <= SS_MAXPUSH); ix += (need); PL_savestack_ix = ix; assert(ix <= PL_savestack_max); if (UNLIKELY((ix + SS_MAXPUSH) > PL_savestack_max)) savestack_grow(); assert(PL_savestack_ix + SS_MAXPUSH <= PL_savestack_max);







#define SS_ADD_INT(i) ((ssp++)->any_i32 = (I32)(i))
#define SS_ADD_LONG(i) ((ssp++)->any_long = (long)(i))
#define SS_ADD_BOOL(p) ((ssp++)->any_bool = (p))
#define SS_ADD_IV(i) ((ssp++)->any_iv = (IV)(i))
#define SS_ADD_UV(u) ((ssp++)->any_uv = (UV)(u))
#define SS_ADD_PTR(p) ((ssp++)->any_ptr = (void*)(p))
#define SS_ADD_DPTR(p) ((ssp++)->any_dptr = (p))
#define SS_ADD_DXPTR(p) ((ssp++)->any_dxptr = (p))

#define SSPOPINT (PL_savestack[--PL_savestack_ix].any_i32)
#define SSPOPLONG (PL_savestack[--PL_savestack_ix].any_long)
#define SSPOPBOOL (PL_savestack[--PL_savestack_ix].any_bool)
#define SSPOPIV (PL_savestack[--PL_savestack_ix].any_iv)
#define SSPOPUV (PL_savestack[--PL_savestack_ix].any_uv)
#define SSPOPPTR (PL_savestack[--PL_savestack_ix].any_ptr)
#define SSPOPDPTR (PL_savestack[--PL_savestack_ix].any_dptr)
#define SSPOPDXPTR (PL_savestack[--PL_savestack_ix].any_dxptr)
# 191 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/scope.h"
#define SAVETMPS Perl_save_strlen(aTHX_ (STRLEN *)&PL_tmps_floor), PL_tmps_floor = PL_tmps_ix

#define FREETMPS if (PL_tmps_ix > PL_tmps_floor) free_tmps()
# 224 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/scope.h"
#define ENTER push_scope()
#define LEAVE pop_scope()
#define ENTER_with_name(name) ENTER
#define LEAVE_with_name(name) LEAVE

#define LEAVE_SCOPE(old) STMT_START { if (PL_savestack_ix > old) leave_scope(old); } STMT_END



#define SAVEI8(i) save_I8((I8*)&(i))
#define SAVEI16(i) save_I16((I16*)&(i))
#define SAVEI32(i) save_I32((I32*)&(i))
#define SAVEINT(i) save_int((int*)&(i))
#define SAVEIV(i) save_iv((IV*)&(i))
#define SAVELONG(l) save_long((long*)&(l))
#define SAVEBOOL(b) save_bool(&(b))
#define SAVESPTR(s) save_sptr((SV**)&(s))
#define SAVEPPTR(s) save_pptr((char**)&(s))
#define SAVEVPTR(s) save_vptr((void*)&(s))
#define SAVEPADSVANDMORTALIZE(s) save_padsv_and_mortalize(s)
#define SAVEFREESV(s) save_freesv(MUTABLE_SV(s))
#define SAVEFREEPADNAME(s) save_pushptr((void *)(s), SAVEt_FREEPADNAME)
#define SAVEMORTALIZESV(s) save_mortalizesv(MUTABLE_SV(s))
#define SAVEFREEOP(o) save_freeop((OP*)(o))
#define SAVEFREEPV(p) save_freepv((char*)(p))
#define SAVECLEARSV(sv) save_clearsv((SV**)&(sv))
#define SAVEGENERICSV(s) save_generic_svref((SV**)&(s))
#define SAVEGENERICPV(s) save_generic_pvref((char**)&(s))
#define SAVESHAREDPV(s) save_shared_pvref((char**)&(s))
#define SAVESETSVFLAGS(sv,mask,val) save_set_svflags(sv,mask,val)
#define SAVEFREECOPHH(h) save_pushptr((void *)(h), SAVEt_FREECOPHH)
#define SAVEDELETE(h,k,l) save_delete(MUTABLE_HV(h), (char*)(k), (I32)(l))

#define SAVEHDELETE(h,s) save_hdelete(MUTABLE_HV(h), (s))

#define SAVEADELETE(a,k) save_adelete(MUTABLE_AV(a), (SSize_t)(k))

#define SAVEDESTRUCTOR(f,p) save_destructor((DESTRUCTORFUNC_NOCONTEXT_t)(f), (void*)(p))


#define SAVEDESTRUCTOR_X(f,p) save_destructor_x((DESTRUCTORFUNC_t)(f), (void*)(p))


#define SAVESTACK_POS() STMT_START { dSS_ADD; SS_ADD_INT(PL_stack_sp - PL_stack_base); SS_ADD_UV(SAVEt_STACK_POS); SS_ADD_END(2); } STMT_END







#define SAVEOP() save_op()

#define SAVEHINTS() save_hints()

#define SAVECOMPPAD() save_pushptr(MUTABLE_SV(PL_comppad), SAVEt_COMPPAD)

#define SAVESWITCHSTACK(f,t) STMT_START { save_pushptrptr(MUTABLE_SV(f), MUTABLE_SV(t), SAVEt_SAVESWITCHSTACK); SWITCHSTACK((f),(t)); PL_curstackinfo->si_stack = (t); } STMT_END
# 293 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/scope.h"
#define SAVECOMPILEWARNINGS() save_pushptr(PL_compiling.cop_warnings, SAVEt_COMPILE_WARNINGS)

#define SAVEPARSER(p) save_pushptr((p), SAVEt_PARSER)


#define SAVECOPSTASH_FREE(c) SAVEIV((c)->cop_stashoff)
#define SAVECOPFILE(c) SAVEPPTR(CopFILE(c))
#define SAVECOPFILE_FREE(c) SAVESHAREDPV(CopFILE(c))







#define SAVECOPLINE(c) SAVEI32(CopLINE(c))
# 321 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/scope.h"
#define SSNEW(size) Perl_save_alloc(aTHX_ (size), 0)
#define SSNEWt(n,t) SSNEW((n)*sizeof(t))
#define SSNEWa(size,align) Perl_save_alloc(aTHX_ (size), (I32)(align - ((size_t)((caddr_t)&PL_savestack[PL_savestack_ix]) % align)) % align)

#define SSNEWat(n,t,align) SSNEWa((n)*sizeof(t), align)

#define SSPTR(off,type) ((type) ((char*)PL_savestack + off))
#define SSPTRt(off,type) ((type*) ((char*)PL_savestack + off))

#define save_freesv(op) save_pushptr((void *)(op), SAVEt_FREESV)
#define save_mortalizesv(op) save_pushptr((void *)(op), SAVEt_MORTALIZESV)

#define save_freeop(op) STMT_START { OP * const _o = (OP *)(op); assert(!_o->op_savefree); _o->op_savefree = 1; save_pushptr((void *)(_o), SAVEt_FREEOP); } STMT_END






#define save_freepv(pv) save_pushptr((void *)(pv), SAVEt_FREEPV)
#define save_op() save_pushptr((void *)(PL_op), SAVEt_OP)
# 3745 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/warnings.h" 1







#define Off(x) ((x) / 8)
#define Bit(x) (1 << ((x) % 8))
#define IsSet(a,x) ((a)[Off(x)] & Bit(x))


#define G_WARN_OFF 0
#define G_WARN_ON 1
#define G_WARN_ALL_ON 2
#define G_WARN_ALL_OFF 4
#define G_WARN_ONCE 8
#define G_WARN_ALL_MASK (G_WARN_ALL_ON|G_WARN_ALL_OFF)

#define pWARN_STD NULL
#define pWARN_ALL (((STRLEN*)0)+1)
#define pWARN_NONE (((STRLEN*)0)+2)

#define specialWARN(x) ((x) == pWARN_STD || (x) == pWARN_ALL || (x) == pWARN_NONE)



#define PERL_WARNHOOK_FATAL (&PL_sv_placeholder)



#define WARN_ALL 0
#define WARN_CLOSURE 1
#define WARN_DEPRECATED 2
#define WARN_EXITING 3
#define WARN_GLOB 4
#define WARN_IO 5
#define WARN_CLOSED 6
#define WARN_EXEC 7
#define WARN_LAYER 8
#define WARN_NEWLINE 9
#define WARN_PIPE 10
#define WARN_UNOPENED 11
#define WARN_MISC 12
#define WARN_NUMERIC 13
#define WARN_ONCE 14
#define WARN_OVERFLOW 15
#define WARN_PACK 16
#define WARN_PORTABLE 17
#define WARN_RECURSION 18
#define WARN_REDEFINE 19
#define WARN_REGEXP 20
#define WARN_SEVERE 21
#define WARN_DEBUGGING 22
#define WARN_INPLACE 23
#define WARN_INTERNAL 24
#define WARN_MALLOC 25
#define WARN_SIGNAL 26
#define WARN_SUBSTR 27
#define WARN_SYNTAX 28
#define WARN_AMBIGUOUS 29
#define WARN_BAREWORD 30
#define WARN_DIGIT 31
#define WARN_PARENTHESIS 32
#define WARN_PRECEDENCE 33
#define WARN_PRINTF 34
#define WARN_PROTOTYPE 35
#define WARN_QW 36
#define WARN_RESERVED 37
#define WARN_SEMICOLON 38
#define WARN_TAINT 39
#define WARN_THREADS 40
#define WARN_UNINITIALIZED 41
#define WARN_UNPACK 42
#define WARN_UNTIE 43
#define WARN_UTF8 44
#define WARN_VOID 45



#define WARN_IMPRECISION 46
#define WARN_ILLEGALPROTO 47



#define WARN_NON_UNICODE 48
#define WARN_NONCHAR 49
#define WARN_SURROGATE 50



#define WARN_EXPERIMENTAL 51
#define WARN_EXPERIMENTAL__LEXICAL_SUBS 52
#define WARN_EXPERIMENTAL__LEXICAL_TOPIC 53
#define WARN_EXPERIMENTAL__REGEX_SETS 54
#define WARN_EXPERIMENTAL__SMARTMATCH 55



#define WARN_EXPERIMENTAL__AUTODEREF 56
#define WARN_EXPERIMENTAL__POSTDEREF 57
#define WARN_EXPERIMENTAL__SIGNATURES 58
#define WARN_SYSCALLS 59



#define WARN_EXPERIMENTAL__BITWISE 60
#define WARN_EXPERIMENTAL__CONST_ATTR 61
#define WARN_EXPERIMENTAL__RE_STRICT 62
#define WARN_EXPERIMENTAL__REFALIASING 63
#define WARN_EXPERIMENTAL__WIN32_PERLIO 64
#define WARN_LOCALE 65
#define WARN_MISSING 66
#define WARN_REDUNDANT 67

#define WARNsize 17
#define WARN_ALLstring "\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125"
#define WARN_NONEstring "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"

#define isLEXWARN_on (PL_curcop->cop_warnings != pWARN_STD)
#define isLEXWARN_off (PL_curcop->cop_warnings == pWARN_STD)
#define isWARN_ONCE (PL_dowarn & (G_WARN_ON|G_WARN_ONCE))
#define isWARN_on(c,x) (IsSet((U8 *)(c + 1), 2*(x)))
#define isWARNf_on(c,x) (IsSet((U8 *)(c + 1), 2*(x)+1))

#define DUP_WARNINGS(p) (specialWARN(p) ? (STRLEN*)(p) : (STRLEN*)CopyD(p, PerlMemShared_malloc(sizeof(*p)+*p), sizeof(*p)+*p, char))




#define ckWARN(w) Perl_ckwarn(aTHX_ packWARN(w))




#define ckWARN2(w1,w2) Perl_ckwarn(aTHX_ packWARN2(w1,w2))
#define ckWARN3(w1,w2,w3) Perl_ckwarn(aTHX_ packWARN3(w1,w2,w3))
#define ckWARN4(w1,w2,w3,w4) Perl_ckwarn(aTHX_ packWARN4(w1,w2,w3,w4))

#define ckWARN_d(w) Perl_ckwarn_d(aTHX_ packWARN(w))
#define ckWARN2_d(w1,w2) Perl_ckwarn_d(aTHX_ packWARN2(w1,w2))
#define ckWARN3_d(w1,w2,w3) Perl_ckwarn_d(aTHX_ packWARN3(w1,w2,w3))
#define ckWARN4_d(w1,w2,w3,w4) Perl_ckwarn_d(aTHX_ packWARN4(w1,w2,w3,w4))

#define WARNshift 8

#define packWARN(a) (a )




#define packWARN2(a,b) ((a) | ((b)<<8) )
#define packWARN3(a,b,c) ((a) | ((b)<<8) | ((c)<<16) )
#define packWARN4(a,b,c,d) ((a) | ((b)<<8) | ((c)<<16) | ((d) <<24))

#define unpackWARN1(x) ((x) & 0xFF)
#define unpackWARN2(x) (((x) >>8) & 0xFF)
#define unpackWARN3(x) (((x) >>16) & 0xFF)
#define unpackWARN4(x) (((x) >>24) & 0xFF)

#define ckDEAD(x) ( ! specialWARN(PL_curcop->cop_warnings) && ( isWARNf_on(PL_curcop->cop_warnings, WARN_ALL) || isWARNf_on(PL_curcop->cop_warnings, unpackWARN1(x)) || isWARNf_on(PL_curcop->cop_warnings, unpackWARN2(x)) || isWARNf_on(PL_curcop->cop_warnings, unpackWARN3(x)) || isWARNf_on(PL_curcop->cop_warnings, unpackWARN4(x))))
# 3746 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2



#define my_stat() my_stat_flags(SV_GMAGIC)
#define my_lstat() my_lstat_flags(SV_GMAGIC)


#undef _XPV_HEAD
#undef _XPVMG_HEAD
#undef _XPVCV_COMMON

typedef struct _sublex_info SUBLEXINFO;
struct _sublex_info {
    U8 super_state;
    U16 sub_inwhat;
    OP *sub_op;
    SV *repl;
};

# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/parser.h" 1
# 12 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/parser.h"
#define YYEMPTY (-2)

typedef struct {
    YYSTYPE val;
    short state;
    I32 savestack_ix;
    CV *compcv;



} yy_stack_frame;



typedef struct yy_lexshared {
    struct yy_lexshared *ls_prev;
    SV *ls_linestr;
    char *ls_bufptr;
    char *re_eval_start;
    SV *re_eval_str;
} LEXSHARED;

typedef struct yy_parser {



    struct yy_parser *old_parser;
    YYSTYPE yylval;
    int yychar;


    int yyerrstatus;

    int stack_size;
    int yylen;
    yy_stack_frame *stack;
    yy_stack_frame *ps;



    I32 lex_brackets;
    I32 lex_casemods;
    char *lex_brackstack;
    char *lex_casestack;
    U8 lex_defer;
    U8 lex_dojoin;

    U8 lex_expect;
    U8 expect;
    I32 lex_formbrack;
    OP *lex_inpat;
    OP *lex_op;
    SV *lex_repl;
    U16 lex_inwhat;
    U16 last_lop_op;
    I32 lex_starts;
    SV *lex_stuff;
    I32 multi_start;
    I32 multi_end;
    char multi_open;
    char multi_close;
    _Bool preambled;
    _Bool lex_re_reparsing;
    I32 lex_allbrackets;
    SUBLEXINFO sublex_info;
    LEXSHARED *lex_shared;
    SV *linestr;
    char *bufptr;


    char *oldbufptr;
    char *oldoldbufptr;
    char *bufend;
    char *linestart;
    char *last_uni;
    char *last_lop;




    line_t copline;
    U16 in_my;
    U8 lex_state;
    U8 error_count;
    HV *in_my_stash;
    PerlIO *rsfp;
    AV *rsfp_filters;
    U8 form_lex_state;

    YYSTYPE nextval[5];
    I32 nexttype[5];
    U32 nexttoke;

    COP *saved_curcop;
    char tokenbuf[256];
    line_t herelines;
    line_t preambling;
    U8 lex_fakeeof;
    U8 lex_flags;
    unsigned in_pod:1;
    unsigned filtered:1;
    unsigned saw_infix_sigil:1;
    unsigned parsed_sub:1;
} yy_parser;


#define LEX_STUFF_UTF8 0x00000001
#define LEX_KEEP_PREVIOUS 0x00000002
# 133 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/parser.h"
#define PARSE_OPTIONAL 0x00000001


enum {
    LEX_FAKEEOF_NEVER,
    LEX_FAKEEOF_CLOSING,
    LEX_FAKEEOF_NONEXPR,
    LEX_FAKEEOF_LOWLOGIC,
    LEX_FAKEEOF_COMMA,
    LEX_FAKEEOF_ASSIGN,
    LEX_FAKEEOF_IFELSE,
    LEX_FAKEEOF_RANGE,
    LEX_FAKEEOF_LOGIC,
    LEX_FAKEEOF_BITWISE,
    LEX_FAKEEOF_COMPARE,
    LEX_FAKEEOF_MAX
};
# 3766 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2

typedef struct magic_state MGS;
# 3789 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
struct ptr_tbl_ent {
    struct ptr_tbl_ent* next;
    const void* oldval;
    void* newval;
};

struct ptr_tbl {
    struct ptr_tbl_ent** tbl_ary;
    UV tbl_max;
    UV tbl_items;
    struct ptr_tbl_arena *tbl_arena;
    struct ptr_tbl_ent *tbl_arena_next;
    struct ptr_tbl_ent *tbl_arena_end;
};
# 3881 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define vtohl(x) ((((x)&0xFF)<<24) +(((x)>>24)&0xFF) +(((x)&0x0000FF00)<<8) +(((x)&0x00FF0000)>>8) )



#define vtohs(x) ((((x)&0xFF)<<8) + (((x)>>8)&0xFF))
#define htovl(x) vtohl(x)
#define htovs(x) vtohs(x)
# 3902 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define I32_MAX_P1 (2.0 * (1 + (((U32)I32_MAX) >> 1)))
#define U32_MAX_P1 (4.0 * (1 + ((U32_MAX) >> 2)))




#define U32_MAX_P1_HALF (2.0 * (1 + ((U32_MAX) >> 2)))

#define UV_MAX_P1 (4.0 * (1 + ((UV_MAX) >> 2)))
#define IV_MAX_P1 (2.0 * (1 + (((UV)IV_MAX) >> 1)))
#define UV_MAX_P1_HALF (2.0 * (1 + ((UV_MAX) >> 2)))






#define I_32(what) (cast_i32((NV)(what)))
#define U_32(what) (cast_ulong((NV)(what)))
#define I_V(what) (cast_iv((NV)(what)))
#define U_V(what) (cast_uv((NV)(what)))
# 3938 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define U_S(what) ((U16)U_32(what))
#define U_I(what) ((unsigned int)U_32(what))
#define U_L(what) U_32(what)


#define Perl_signbit signbit



#define NV_WITHIN_IV(nv) (I_V(nv) >= IV_MIN && I_V(nv) <= IV_MAX)
#define NV_WITHIN_UV(nv) ((nv)>=0.0 && U_V(nv) >= UV_MIN && U_V(nv) <= UV_MAX)



#define CLUMP_2UV(iv) ((iv) < 0 ? 0 : (UV)(iv))
#define CLUMP_2IV(uv) ((uv) > (UV)IV_MAX ? IV_MAX : (IV)(uv))


#define MAXSYSFD 2




uid_t getuid (void);
uid_t geteuid (void);
gid_t getgid (void);
gid_t getegid (void);




#define Perl_debug_log PerlIO_stderr()



#define Perl_error_log (PL_stderrgv && isGV(PL_stderrgv) && GvIOp(PL_stderrgv) && IoOFP(GvIOp(PL_stderrgv)) ? IoOFP(GvIOp(PL_stderrgv)) : PerlIO_stderr())
# 3982 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define DEBUG_p_FLAG 0x00000001
#define DEBUG_s_FLAG 0x00000002
#define DEBUG_l_FLAG 0x00000004
#define DEBUG_t_FLAG 0x00000008
#define DEBUG_o_FLAG 0x00000010
#define DEBUG_c_FLAG 0x00000020
#define DEBUG_P_FLAG 0x00000040
#define DEBUG_m_FLAG 0x00000080
#define DEBUG_f_FLAG 0x00000100
#define DEBUG_r_FLAG 0x00000200
#define DEBUG_x_FLAG 0x00000400
#define DEBUG_u_FLAG 0x00000800

#define DEBUG_U_FLAG 0x00001000
#define DEBUG_H_FLAG 0x00002000
#define DEBUG_X_FLAG 0x00004000
#define DEBUG_D_FLAG 0x00008000
#define DEBUG_S_FLAG 0x00010000
#define DEBUG_T_FLAG 0x00020000
#define DEBUG_R_FLAG 0x00040000
#define DEBUG_J_FLAG 0x00080000
#define DEBUG_v_FLAG 0x00100000
#define DEBUG_C_FLAG 0x00200000
#define DEBUG_A_FLAG 0x00400000
#define DEBUG_q_FLAG 0x00800000
#define DEBUG_M_FLAG 0x01000000
#define DEBUG_B_FLAG 0x02000000
#define DEBUG_L_FLAG 0x04000000
#define DEBUG_MASK 0x07FFEFFF

#define DEBUG_DB_RECURSE_FLAG 0x40000000
#define DEBUG_TOP_FLAG 0x80000000


#define DEBUG_p_TEST_ (PL_debug & DEBUG_p_FLAG)
#define DEBUG_s_TEST_ (PL_debug & DEBUG_s_FLAG)
#define DEBUG_l_TEST_ (PL_debug & DEBUG_l_FLAG)
#define DEBUG_t_TEST_ (PL_debug & DEBUG_t_FLAG)
#define DEBUG_o_TEST_ (PL_debug & DEBUG_o_FLAG)
#define DEBUG_c_TEST_ (PL_debug & DEBUG_c_FLAG)
#define DEBUG_P_TEST_ (PL_debug & DEBUG_P_FLAG)
#define DEBUG_m_TEST_ (PL_debug & DEBUG_m_FLAG)
#define DEBUG_f_TEST_ (PL_debug & DEBUG_f_FLAG)
#define DEBUG_r_TEST_ (PL_debug & DEBUG_r_FLAG)
#define DEBUG_x_TEST_ (PL_debug & DEBUG_x_FLAG)
#define DEBUG_u_TEST_ (PL_debug & DEBUG_u_FLAG)
#define DEBUG_U_TEST_ (PL_debug & DEBUG_U_FLAG)
#define DEBUG_H_TEST_ (PL_debug & DEBUG_H_FLAG)
#define DEBUG_X_TEST_ (PL_debug & DEBUG_X_FLAG)
#define DEBUG_D_TEST_ (PL_debug & DEBUG_D_FLAG)
#define DEBUG_S_TEST_ (PL_debug & DEBUG_S_FLAG)
#define DEBUG_T_TEST_ (PL_debug & DEBUG_T_FLAG)
#define DEBUG_R_TEST_ (PL_debug & DEBUG_R_FLAG)
#define DEBUG_J_TEST_ (PL_debug & DEBUG_J_FLAG)
#define DEBUG_v_TEST_ (PL_debug & DEBUG_v_FLAG)
#define DEBUG_C_TEST_ (PL_debug & DEBUG_C_FLAG)
#define DEBUG_A_TEST_ (PL_debug & DEBUG_A_FLAG)
#define DEBUG_q_TEST_ (PL_debug & DEBUG_q_FLAG)
#define DEBUG_M_TEST_ (PL_debug & DEBUG_M_FLAG)
#define DEBUG_B_TEST_ (PL_debug & DEBUG_B_FLAG)
#define DEBUG_L_TEST_ (PL_debug & DEBUG_L_FLAG)
#define DEBUG_Xv_TEST_ (DEBUG_X_TEST_ && DEBUG_v_TEST_)
#define DEBUG_Uv_TEST_ (DEBUG_U_TEST_ && DEBUG_v_TEST_)
#define DEBUG_Pv_TEST_ (DEBUG_P_TEST_ && DEBUG_v_TEST_)
# 4132 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define DEBUG_p_TEST (0)
#define DEBUG_s_TEST (0)
#define DEBUG_l_TEST (0)
#define DEBUG_t_TEST (0)
#define DEBUG_o_TEST (0)
#define DEBUG_c_TEST (0)
#define DEBUG_P_TEST (0)
#define DEBUG_m_TEST (0)
#define DEBUG_f_TEST (0)
#define DEBUG_r_TEST (0)
#define DEBUG_x_TEST (0)
#define DEBUG_u_TEST (0)
#define DEBUG_U_TEST (0)
#define DEBUG_H_TEST (0)
#define DEBUG_X_TEST (0)
#define DEBUG_D_TEST (0)
#define DEBUG_S_TEST (0)
#define DEBUG_T_TEST (0)
#define DEBUG_R_TEST (0)
#define DEBUG_J_TEST (0)
#define DEBUG_v_TEST (0)
#define DEBUG_C_TEST (0)
#define DEBUG_A_TEST (0)
#define DEBUG_q_TEST (0)
#define DEBUG_M_TEST (0)
#define DEBUG_B_TEST (0)
#define DEBUG_L_TEST (0)
#define DEBUG_Xv_TEST (0)
#define DEBUG_Uv_TEST (0)
#define DEBUG_Pv_TEST (0)

#define PERL_DEB(a) 
#define PERL_DEB2(a,b) b
#define PERL_DEBUG(a) 
#define DEBUG_p(a) 
#define DEBUG_s(a) 
#define DEBUG_l(a) 
#define DEBUG_t(a) 
#define DEBUG_o(a) 
#define DEBUG_c(a) 
#define DEBUG_P(a) 
#define DEBUG_m(a) 
#define DEBUG_f(a) 
#define DEBUG_r(a) 
#define DEBUG_x(a) 
#define DEBUG_u(a) 
#define DEBUG_U(a) 
#define DEBUG_H(a) 
#define DEBUG_X(a) 
#define DEBUG_D(a) 
#define DEBUG_S(a) 
#define DEBUG_T(a) 
#define DEBUG_R(a) 
#define DEBUG_v(a) 
#define DEBUG_C(a) 
#define DEBUG_A(a) 
#define DEBUG_q(a) 
#define DEBUG_M(a) 
#define DEBUG_B(a) 
#define DEBUG_L(a) 
#define DEBUG_Xv(a) 
#define DEBUG_Uv(a) 
#define DEBUG_Pv(a) 



#define DEBUG_SCOPE(where) DEBUG_l( Perl_deb(aTHX_ "%s scope %ld (savestack=%ld) at %s:%d\n", where, (long)PL_scopestack_ix, (long)PL_savestack_ix, __FILE__, __LINE__));
# 4207 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define Perl_assert(what) PERL_DEB2( ((what) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" __FILE__ "\", line %d", STRINGIFY(what), __LINE__), (void) 0)), ((void)0))
# 4221 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define assert_(what) 


struct ufuncs {
    I32 (*uf_val)(PerlInterpreter* my_perl __attribute__((unused)), IV, SV*);
    I32 (*uf_set)(PerlInterpreter* my_perl __attribute__((unused)), IV, SV*);
    IV uf_index;
};
# 4249 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_MG_UFUNC(name,ix,sv) I32 name(pTHX_ IV ix, SV *sv)




char *mktemp (char*);

double atof (const char*);
# 4314 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define NV_INF (NV)INFINITY
# 4364 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define NV_NAN (NV)NAN
# 4391 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
char *crypt (const char*, const char*);




char *getenv (const char*);
# 4408 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
char *getlogin (void);
# 4419 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define UNLINK PerlLIO_unlink
# 4447 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
typedef struct sigaction Sigsave_t;




#define SCAN_DEF 0
#define SCAN_TR 1
#define SCAN_REPL 2







#define RUNOPS_DEFAULT Perl_runops_standard



extern void PerlIO_teardown(void);

#define PERLIO_INIT MUTEX_INIT(&PL_perlio_mutex)
#define PERLIO_TERM STMT_START { PerlIO_teardown(); MUTEX_DESTROY(&PL_perlio_mutex); } STMT_END
# 4501 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define MALLOC_INIT 
#define MALLOC_TERM 




struct perl_memory_debug_header;
struct perl_memory_debug_header {
  PerlInterpreter* interpreter;



  struct perl_memory_debug_header *prev;
  struct perl_memory_debug_header *next;



};
# 4537 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_MEMORY_DEBUG_HEADER_SIZE 0
# 4556 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define INIT_TRACK_MEMPOOL(header,interp) 




# 1 "/usr/include/malloc/malloc.h" 1 3 4
# 25 "/usr/include/malloc/malloc.h" 3 4
#define _MALLOC_MALLOC_H_ 

# 1 "/opt/local/lib/apple-gcc42/gcc/powerpc-apple-darwin8/4.2.4/include/stddef.h" 1 3 4
# 28 "/usr/include/malloc/malloc.h" 2 3 4
# 1 "/usr/include/mach/mach_types.h" 1 3 4
# 62 "/usr/include/mach/mach_types.h" 3 4
#define _MACH_MACH_TYPES_H_ 





# 1 "/usr/include/mach/host_info.h" 1 3 4
# 60 "/usr/include/mach/host_info.h" 3 4
#define _MACH_HOST_INFO_H_ 

# 1 "/usr/include/mach/message.h" 1 3 4
# 59 "/usr/include/mach/message.h" 3 4
#define _MACH_MESSAGE_H_ 


# 1 "/usr/include/mach/port.h" 1 3 4
# 75 "/usr/include/mach/port.h" 3 4
#define _MACH_PORT_H_ 


# 1 "/usr/include/mach/boolean.h" 1 3 4
# 60 "/usr/include/mach/boolean.h" 3 4
#define _MACH_BOOLEAN_H_ 






# 1 "/usr/include/mach/machine/boolean.h" 1 3 4
# 24 "/usr/include/mach/machine/boolean.h" 3 4
#define _MACH_MACHINE_BOOLEAN_H_ 


# 1 "/usr/include/mach/ppc/boolean.h" 1 3 4
# 60 "/usr/include/mach/ppc/boolean.h" 3 4
#define _MACH_PPC_BOOLEAN_H_ 




typedef int boolean_t;
# 28 "/usr/include/mach/machine/boolean.h" 2 3 4
# 68 "/usr/include/mach/boolean.h" 2 3 4
# 79 "/usr/include/mach/port.h" 2 3 4
# 1 "/usr/include/mach/machine/vm_types.h" 1 3 4
# 24 "/usr/include/mach/machine/vm_types.h" 3 4
#define _MACH_MACHINE_VM_TYPES_H_ 


# 1 "/usr/include/mach/ppc/vm_types.h" 1 3 4
# 62 "/usr/include/mach/ppc/vm_types.h" 3 4
#define _MACH_PPC_VM_TYPES_H_ 




# 1 "/usr/include/ppc/vmparam.h" 1 3 4
# 24 "/usr/include/ppc/vmparam.h" 3 4
#define _BSD_PPC_VMPARAM_H_ 1



#define USRSTACK (0xc0000000)





#define USRSTACK64 (MACH_VM_MAX_ADDRESS - VM_MAX_ADDRESS)





#define DFLDSIZ (6*1024*1024)


#define MAXDSIZ (RLIM_INFINITY)


#define DFLSSIZ (8*1024*1024)


#define MAXSSIZ (64*1024*1024)


#define DFLCSIZ (0)


#define MAXCSIZ (RLIM_INFINITY)
# 68 "/usr/include/mach/ppc/vm_types.h" 2 3 4
# 87 "/usr/include/mach/ppc/vm_types.h" 3 4
typedef __darwin_natural_t natural_t;
typedef int integer_t;
# 98 "/usr/include/mach/ppc/vm_types.h" 3 4
typedef natural_t vm_offset_t;
typedef natural_t vm_size_t;
# 120 "/usr/include/mach/ppc/vm_types.h" 3 4
typedef uint64_t mach_vm_address_t;
typedef uint64_t mach_vm_offset_t;
typedef uint64_t mach_vm_size_t;



typedef uint64_t vm_map_offset_t;
typedef uint64_t vm_map_address_t;
typedef uint64_t vm_map_size_t;
# 141 "/usr/include/mach/ppc/vm_types.h" 3 4
#define MACH_MSG_TYPE_INTEGER_T MACH_MSG_TYPE_INTEGER_32
# 28 "/usr/include/mach/machine/vm_types.h" 2 3 4
# 80 "/usr/include/mach/port.h" 2 3 4
# 93 "/usr/include/mach/port.h" 3 4
typedef natural_t mach_port_name_t;
typedef mach_port_name_t *mach_port_name_array_t;
# 119 "/usr/include/mach/port.h" 3 4
typedef mach_port_t *mach_port_array_t;
# 130 "/usr/include/mach/port.h" 3 4
#define MACH_PORT_NULL 0
#define MACH_PORT_DEAD ((mach_port_name_t) ~0)
#define MACH_PORT_VALID(name) (((name) != MACH_PORT_NULL) && ((name) != MACH_PORT_DEAD))
# 153 "/usr/include/mach/port.h" 3 4
#define MACH_PORT_INDEX(name) ((name) >> 8)
#define MACH_PORT_GEN(name) (((name) & 0xff) << 24)
#define MACH_PORT_MAKE(index,gen) (((index) << 8) | (gen) >> 24)
# 177 "/usr/include/mach/port.h" 3 4
typedef natural_t mach_port_right_t;

#define MACH_PORT_RIGHT_SEND ((mach_port_right_t) 0)
#define MACH_PORT_RIGHT_RECEIVE ((mach_port_right_t) 1)
#define MACH_PORT_RIGHT_SEND_ONCE ((mach_port_right_t) 2)
#define MACH_PORT_RIGHT_PORT_SET ((mach_port_right_t) 3)
#define MACH_PORT_RIGHT_DEAD_NAME ((mach_port_right_t) 4)
#define MACH_PORT_RIGHT_NUMBER ((mach_port_right_t) 5)

typedef natural_t mach_port_type_t;
typedef mach_port_type_t *mach_port_type_array_t;

#define MACH_PORT_TYPE(right) ((mach_port_type_t)(((mach_port_type_t) 1) << ((right) + ((mach_port_right_t) 16))))


#define MACH_PORT_TYPE_NONE ((mach_port_type_t) 0L)
#define MACH_PORT_TYPE_SEND MACH_PORT_TYPE(MACH_PORT_RIGHT_SEND)
#define MACH_PORT_TYPE_RECEIVE MACH_PORT_TYPE(MACH_PORT_RIGHT_RECEIVE)
#define MACH_PORT_TYPE_SEND_ONCE MACH_PORT_TYPE(MACH_PORT_RIGHT_SEND_ONCE)
#define MACH_PORT_TYPE_PORT_SET MACH_PORT_TYPE(MACH_PORT_RIGHT_PORT_SET)
#define MACH_PORT_TYPE_DEAD_NAME MACH_PORT_TYPE(MACH_PORT_RIGHT_DEAD_NAME)



#define MACH_PORT_TYPE_SEND_RECEIVE (MACH_PORT_TYPE_SEND|MACH_PORT_TYPE_RECEIVE)

#define MACH_PORT_TYPE_SEND_RIGHTS (MACH_PORT_TYPE_SEND|MACH_PORT_TYPE_SEND_ONCE)

#define MACH_PORT_TYPE_PORT_RIGHTS (MACH_PORT_TYPE_SEND_RIGHTS|MACH_PORT_TYPE_RECEIVE)

#define MACH_PORT_TYPE_PORT_OR_DEAD (MACH_PORT_TYPE_PORT_RIGHTS|MACH_PORT_TYPE_DEAD_NAME)

#define MACH_PORT_TYPE_ALL_RIGHTS (MACH_PORT_TYPE_PORT_OR_DEAD|MACH_PORT_TYPE_PORT_SET)




#define MACH_PORT_TYPE_DNREQUEST 0x80000000



typedef natural_t mach_port_urefs_t;
typedef integer_t mach_port_delta_t;



typedef natural_t mach_port_seqno_t;
typedef natural_t mach_port_mscount_t;
typedef natural_t mach_port_msgcount_t;
typedef natural_t mach_port_rights_t;




#define MACH_PORT_SRIGHTS_NONE 0
#define MACH_PORT_SRIGHTS_PRESENT 1
typedef unsigned int mach_port_srights_t;

typedef struct mach_port_status {
 mach_port_name_t mps_pset;
 mach_port_seqno_t mps_seqno;
 mach_port_mscount_t mps_mscount;
 mach_port_msgcount_t mps_qlimit;
 mach_port_msgcount_t mps_msgcount;
 mach_port_rights_t mps_sorights;
 boolean_t mps_srights;
 boolean_t mps_pdrequest;
 boolean_t mps_nsrequest;
 natural_t mps_flags;
} mach_port_status_t;

#define MACH_PORT_QLIMIT_DEFAULT ((mach_port_msgcount_t) 5)
#define MACH_PORT_QLIMIT_MAX ((mach_port_msgcount_t) 16)

typedef struct mach_port_limits {
 mach_port_msgcount_t mpl_qlimit;
} mach_port_limits_t;

typedef integer_t *mach_port_info_t;


typedef int mach_port_flavor_t;
#define MACH_PORT_LIMITS_INFO 1
#define MACH_PORT_RECEIVE_STATUS 2
#define MACH_PORT_DNREQUESTS_SIZE 3

#define MACH_PORT_LIMITS_INFO_COUNT ((natural_t) (sizeof(mach_port_limits_t)/sizeof(natural_t)))

#define MACH_PORT_RECEIVE_STATUS_COUNT ((natural_t) (sizeof(mach_port_status_t)/sizeof(natural_t)))

#define MACH_PORT_DNREQUESTS_SIZE_COUNT 1





typedef struct mach_port_qos {
 boolean_t name:1;
 boolean_t prealloc:1;
 boolean_t pad1:30;
 natural_t len;
} mach_port_qos_t;







typedef mach_port_t port_t;
typedef mach_port_name_t port_name_t;
typedef mach_port_name_t *port_name_array_t;

#define PORT_NULL ((port_t) 0)
#define PORT_DEAD ((port_t) ~0)
#define PORT_VALID(name) ((port_t)(name) != PORT_NULL && (port_t)(name) != PORT_DEAD)
# 63 "/usr/include/mach/message.h" 2 3 4

# 1 "/usr/include/mach/kern_return.h" 1 3 4
# 62 "/usr/include/mach/kern_return.h" 3 4
#define _MACH_KERN_RETURN_H_ 

# 1 "/usr/include/mach/machine/kern_return.h" 1 3 4
# 24 "/usr/include/mach/machine/kern_return.h" 3 4
#define _MACH_MACHINE_KERN_RETURN_H_ 


# 1 "/usr/include/mach/ppc/kern_return.h" 1 3 4
# 62 "/usr/include/mach/ppc/kern_return.h" 3 4
#define _MACH_PPC_KERN_RETURN_H_ 


typedef int kern_return_t;
# 28 "/usr/include/mach/machine/kern_return.h" 2 3 4
# 65 "/usr/include/mach/kern_return.h" 2 3 4

#define KERN_SUCCESS 0

#define KERN_INVALID_ADDRESS 1



#define KERN_PROTECTION_FAILURE 2




#define KERN_NO_SPACE 3





#define KERN_INVALID_ARGUMENT 4




#define KERN_FAILURE 5



#define KERN_RESOURCE_SHORTAGE 6




#define KERN_NOT_RECEIVER 7




#define KERN_NO_ACCESS 8



#define KERN_MEMORY_FAILURE 9





#define KERN_MEMORY_ERROR 10







#define KERN_ALREADY_IN_SET 11



#define KERN_NOT_IN_SET 12



#define KERN_NAME_EXISTS 13



#define KERN_ABORTED 14




#define KERN_INVALID_NAME 15



#define KERN_INVALID_TASK 16



#define KERN_INVALID_RIGHT 17



#define KERN_INVALID_VALUE 18



#define KERN_UREFS_OVERFLOW 19



#define KERN_INVALID_CAPABILITY 20



#define KERN_RIGHT_EXISTS 21




#define KERN_INVALID_HOST 22



#define KERN_MEMORY_PRESENT 23





#define KERN_MEMORY_DATA_MOVED 24
# 192 "/usr/include/mach/kern_return.h" 3 4
#define KERN_MEMORY_RESTART_COPY 25







#define KERN_INVALID_PROCESSOR_SET 26




#define KERN_POLICY_LIMIT 27




#define KERN_INVALID_POLICY 28




#define KERN_INVALID_OBJECT 29




#define KERN_ALREADY_WAITING 30




#define KERN_DEFAULT_SET 31




#define KERN_EXCEPTION_PROTECTED 32





#define KERN_INVALID_LEDGER 33



#define KERN_INVALID_MEMORY_CONTROL 34



#define KERN_INVALID_SECURITY 35




#define KERN_NOT_DEPRESSED 36




#define KERN_TERMINATED 37



#define KERN_LOCK_SET_DESTROYED 38



#define KERN_LOCK_UNSTABLE 39




#define KERN_LOCK_OWNED 40



#define KERN_LOCK_OWNED_SELF 41



#define KERN_SEMAPHORE_DESTROYED 42



#define KERN_RPC_SERVER_TERMINATED 43




#define KERN_RPC_TERMINATE_ORPHAN 44



#define KERN_RPC_CONTINUE_ORPHAN 45



#define KERN_NOT_SUPPORTED 46



#define KERN_NODE_DOWN 47



#define KERN_NOT_WAITING 48


#define KERN_OPERATION_TIMED_OUT 49



#define KERN_RETURN_MAX 0x100
# 65 "/usr/include/mach/message.h" 2 3 4
# 76 "/usr/include/mach/message.h" 3 4
typedef natural_t mach_msg_timeout_t;






#define MACH_MSG_TIMEOUT_NONE ((mach_msg_timeout_t) 0)
# 110 "/usr/include/mach/message.h" 3 4
#define MACH_MSGH_BITS_ZERO 0x00000000
#define MACH_MSGH_BITS_REMOTE_MASK 0x000000ff
#define MACH_MSGH_BITS_LOCAL_MASK 0x0000ff00
#define MACH_MSGH_BITS_COMPLEX 0x80000000U
#define MACH_MSGH_BITS_USER 0x8000ffffU

#define MACH_MSGH_BITS_CIRCULAR 0x40000000
#define MACH_MSGH_BITS_USED 0xc000ffffU

#define MACH_MSGH_BITS_PORTS_MASK (MACH_MSGH_BITS_REMOTE_MASK|MACH_MSGH_BITS_LOCAL_MASK)


#define MACH_MSGH_BITS(remote,local) ((remote) | ((local) << 8))

#define MACH_MSGH_BITS_REMOTE(bits) ((bits) & MACH_MSGH_BITS_REMOTE_MASK)

#define MACH_MSGH_BITS_LOCAL(bits) (((bits) & MACH_MSGH_BITS_LOCAL_MASK) >> 8)

#define MACH_MSGH_BITS_PORTS(bits) ((bits) & MACH_MSGH_BITS_PORTS_MASK)

#define MACH_MSGH_BITS_OTHER(bits) ((bits) &~ MACH_MSGH_BITS_PORTS_MASK)
# 159 "/usr/include/mach/message.h" 3 4
typedef unsigned int mach_msg_bits_t;
typedef natural_t mach_msg_size_t;
typedef integer_t mach_msg_id_t;


#define MACH_MSG_SIZE_NULL (mach_msg_size_t *) 0

typedef unsigned int mach_msg_type_name_t;

#define MACH_MSG_TYPE_MOVE_RECEIVE 16
#define MACH_MSG_TYPE_MOVE_SEND 17
#define MACH_MSG_TYPE_MOVE_SEND_ONCE 18
#define MACH_MSG_TYPE_COPY_SEND 19
#define MACH_MSG_TYPE_MAKE_SEND 20
#define MACH_MSG_TYPE_MAKE_SEND_ONCE 21
#define MACH_MSG_TYPE_COPY_RECEIVE 22

typedef unsigned int mach_msg_copy_options_t;

#define MACH_MSG_PHYSICAL_COPY 0
#define MACH_MSG_VIRTUAL_COPY 1
#define MACH_MSG_ALLOCATE 2
#define MACH_MSG_OVERWRITE 3




typedef unsigned int mach_msg_descriptor_type_t;

#define MACH_MSG_PORT_DESCRIPTOR 0
#define MACH_MSG_OOL_DESCRIPTOR 1
#define MACH_MSG_OOL_PORTS_DESCRIPTOR 2
#define MACH_MSG_OOL_VOLATILE_DESCRIPTOR 3

#pragma pack(4)

typedef struct
{
  natural_t pad1;
  mach_msg_size_t pad2;
  unsigned int pad3 : 24;
  mach_msg_descriptor_type_t type : 8;
} mach_msg_type_descriptor_t;

typedef struct
{
  mach_port_t name;
  mach_msg_size_t pad1;
  unsigned int pad2 : 16;
  mach_msg_type_name_t disposition : 8;
  mach_msg_descriptor_type_t type : 8;
} mach_msg_port_descriptor_t;

typedef struct
{
  uint32_t address;
  mach_msg_size_t size;
  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  unsigned int pad1: 8;
  mach_msg_descriptor_type_t type: 8;
} mach_msg_ool_descriptor32_t;

typedef struct
{
  uint64_t address;
  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  unsigned int pad1: 8;
  mach_msg_descriptor_type_t type: 8;
  mach_msg_size_t size;
} mach_msg_ool_descriptor64_t;

typedef struct
{
  void* address;

  mach_msg_size_t size;

  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  unsigned int pad1: 8;
  mach_msg_descriptor_type_t type: 8;



} mach_msg_ool_descriptor_t;

typedef struct
{
  uint32_t address;
  mach_msg_size_t count;
  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  mach_msg_type_name_t disposition : 8;
  mach_msg_descriptor_type_t type : 8;
} mach_msg_ool_ports_descriptor32_t;

typedef struct
{
  uint64_t address;
  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  mach_msg_type_name_t disposition : 8;
  mach_msg_descriptor_type_t type : 8;
  mach_msg_size_t count;
} mach_msg_ool_ports_descriptor64_t;

typedef struct
{
  void* address;

  mach_msg_size_t count;

  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  mach_msg_type_name_t disposition : 8;
  mach_msg_descriptor_type_t type : 8;



} mach_msg_ool_ports_descriptor_t;






typedef union
{
  mach_msg_port_descriptor_t port;
  mach_msg_ool_descriptor_t out_of_line;
  mach_msg_ool_ports_descriptor_t ool_ports;
  mach_msg_type_descriptor_t type;
} mach_msg_descriptor_t;

typedef struct
{
        mach_msg_size_t msgh_descriptor_count;
} mach_msg_body_t;

#define MACH_MSG_BODY_NULL (mach_msg_body_t *) 0
#define MACH_MSG_DESCRIPTOR_NULL (mach_msg_descriptor_t *) 0

typedef struct
{
  mach_msg_bits_t msgh_bits;
  mach_msg_size_t msgh_size;
  mach_port_t msgh_remote_port;
  mach_port_t msgh_local_port;
  mach_msg_size_t msgh_reserved;
  mach_msg_id_t msgh_id;
} mach_msg_header_t;

#define MACH_MSG_NULL (mach_msg_header_t *) 0

typedef struct
{
        mach_msg_header_t header;
        mach_msg_body_t body;
} mach_msg_base_t;

typedef unsigned int mach_msg_trailer_type_t;

#define MACH_MSG_TRAILER_FORMAT_0 0

typedef unsigned int mach_msg_trailer_size_t;

typedef struct
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
} mach_msg_trailer_t;

typedef struct
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
  mach_port_seqno_t msgh_seqno;
} mach_msg_seqno_trailer_t;

typedef struct
{
  unsigned int val[2];
} security_token_t;

typedef struct
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
  mach_port_seqno_t msgh_seqno;
  security_token_t msgh_sender;
} mach_msg_security_trailer_t;
# 362 "/usr/include/mach/message.h" 3 4
typedef struct
{
  unsigned int val[8];
} audit_token_t;

typedef struct
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
  mach_port_seqno_t msgh_seqno;
  security_token_t msgh_sender;
  audit_token_t msgh_audit;
} mach_msg_audit_trailer_t;

#define MACH_MSG_TRAILER_MINIMUM_SIZE sizeof(mach_msg_trailer_t)
# 387 "/usr/include/mach/message.h" 3 4
typedef mach_msg_audit_trailer_t mach_msg_max_trailer_t;
#define MAX_TRAILER_SIZE sizeof(mach_msg_max_trailer_t)
# 397 "/usr/include/mach/message.h" 3 4
typedef mach_msg_security_trailer_t mach_msg_format_0_trailer_t;
#define MACH_MSG_TRAILER_FORMAT_0_SIZE sizeof(mach_msg_format_0_trailer_t)

#define KERNEL_SECURITY_TOKEN_VALUE { {0, 1} }
extern security_token_t KERNEL_SECURITY_TOKEN;

#define KERNEL_AUDIT_TOKEN_VALUE { {0, 0, 0, 0, 0, 0, 0, 0} }
extern audit_token_t KERNEL_AUDIT_TOKEN;

typedef integer_t mach_msg_options_t;

typedef struct
{
  mach_msg_header_t header;
} mach_msg_empty_send_t;

typedef struct
{
  mach_msg_header_t header;
  mach_msg_trailer_t trailer;
} mach_msg_empty_rcv_t;

typedef union
{
  mach_msg_empty_send_t send;
  mach_msg_empty_rcv_t rcv;
} mach_msg_empty_t;

#pragma pack()


#define round_msg(x) (((mach_msg_size_t)(x) + sizeof (natural_t) - 1) & ~(sizeof (natural_t) - 1))






#define MACH_MSG_SIZE_MAX ((mach_msg_size_t) ~0)





#define MACH_MSGH_KIND_NORMAL 0x00000000
#define MACH_MSGH_KIND_NOTIFICATION 0x00000001
#define msgh_kind msgh_seqno
#define mach_msg_kind_t mach_port_seqno_t
# 471 "/usr/include/mach/message.h" 3 4
typedef natural_t mach_msg_type_size_t;
typedef natural_t mach_msg_type_number_t;
# 483 "/usr/include/mach/message.h" 3 4
#define MACH_MSG_TYPE_PORT_NONE 0

#define MACH_MSG_TYPE_PORT_NAME 15
#define MACH_MSG_TYPE_PORT_RECEIVE MACH_MSG_TYPE_MOVE_RECEIVE
#define MACH_MSG_TYPE_PORT_SEND MACH_MSG_TYPE_MOVE_SEND
#define MACH_MSG_TYPE_PORT_SEND_ONCE MACH_MSG_TYPE_MOVE_SEND_ONCE

#define MACH_MSG_TYPE_LAST 22






#define MACH_MSG_TYPE_POLYMORPHIC ((mach_msg_type_name_t) -1)





#define MACH_MSG_TYPE_PORT_ANY(x) (((x) >= MACH_MSG_TYPE_MOVE_RECEIVE) && ((x) <= MACH_MSG_TYPE_MAKE_SEND_ONCE))



#define MACH_MSG_TYPE_PORT_ANY_SEND(x) (((x) >= MACH_MSG_TYPE_MOVE_SEND) && ((x) <= MACH_MSG_TYPE_MAKE_SEND_ONCE))



#define MACH_MSG_TYPE_PORT_ANY_RIGHT(x) (((x) >= MACH_MSG_TYPE_MOVE_RECEIVE) && ((x) <= MACH_MSG_TYPE_MOVE_SEND_ONCE))



typedef integer_t mach_msg_option_t;

#define MACH_MSG_OPTION_NONE 0x00000000

#define MACH_SEND_MSG 0x00000001
#define MACH_RCV_MSG 0x00000002
#define MACH_RCV_LARGE 0x00000004

#define MACH_SEND_TIMEOUT 0x00000010
#define MACH_SEND_INTERRUPT 0x00000040
#define MACH_SEND_CANCEL 0x00000080
#define MACH_SEND_ALWAYS 0x00010000
#define MACH_SEND_TRAILER 0x00020000

#define MACH_RCV_TIMEOUT 0x00000100
#define MACH_RCV_NOTIFY 0x00000200
#define MACH_RCV_INTERRUPT 0x00000400
#define MACH_RCV_OVERWRITE 0x00001000






#define MACH_RCV_TRAILER_NULL 0
#define MACH_RCV_TRAILER_SEQNO 1
#define MACH_RCV_TRAILER_SENDER 2
#define MACH_RCV_TRAILER_AUDIT 3

#define MACH_RCV_TRAILER_TYPE(x) (((x) & 0xf) << 28)
#define MACH_RCV_TRAILER_ELEMENTS(x) (((x) & 0xf) << 24)
#define MACH_RCV_TRAILER_MASK ((0xff << 24))

#define GET_RCV_ELEMENTS(y) (((y) >> 24) & 0xf)
#define REQUESTED_TRAILER_SIZE(y) ((mach_msg_trailer_size_t) ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_NULL) ? sizeof(mach_msg_trailer_t) : ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_SEQNO) ? sizeof(mach_msg_seqno_trailer_t) : ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_SENDER) ? sizeof(mach_msg_security_trailer_t) : sizeof(mach_msg_audit_trailer_t)))))
# 569 "/usr/include/mach/message.h" 3 4
typedef kern_return_t mach_msg_return_t;

#define MACH_MSG_SUCCESS 0x00000000


#define MACH_MSG_MASK 0x00003e00

#define MACH_MSG_IPC_SPACE 0x00002000

#define MACH_MSG_VM_SPACE 0x00001000

#define MACH_MSG_IPC_KERNEL 0x00000800

#define MACH_MSG_VM_KERNEL 0x00000400


#define MACH_SEND_IN_PROGRESS 0x10000001

#define MACH_SEND_INVALID_DATA 0x10000002

#define MACH_SEND_INVALID_DEST 0x10000003

#define MACH_SEND_TIMED_OUT 0x10000004

#define MACH_SEND_INTERRUPTED 0x10000007

#define MACH_SEND_MSG_TOO_SMALL 0x10000008

#define MACH_SEND_INVALID_REPLY 0x10000009

#define MACH_SEND_INVALID_RIGHT 0x1000000a

#define MACH_SEND_INVALID_NOTIFY 0x1000000b

#define MACH_SEND_INVALID_MEMORY 0x1000000c

#define MACH_SEND_NO_BUFFER 0x1000000d

#define MACH_SEND_TOO_LARGE 0x1000000e

#define MACH_SEND_INVALID_TYPE 0x1000000f

#define MACH_SEND_INVALID_HEADER 0x10000010

#define MACH_SEND_INVALID_TRAILER 0x10000011

#define MACH_SEND_INVALID_RT_OOL_SIZE 0x10000015


#define MACH_RCV_IN_PROGRESS 0x10004001

#define MACH_RCV_INVALID_NAME 0x10004002

#define MACH_RCV_TIMED_OUT 0x10004003

#define MACH_RCV_TOO_LARGE 0x10004004

#define MACH_RCV_INTERRUPTED 0x10004005

#define MACH_RCV_PORT_CHANGED 0x10004006

#define MACH_RCV_INVALID_NOTIFY 0x10004007

#define MACH_RCV_INVALID_DATA 0x10004008

#define MACH_RCV_PORT_DIED 0x10004009

#define MACH_RCV_IN_SET 0x1000400a

#define MACH_RCV_HEADER_ERROR 0x1000400b

#define MACH_RCV_BODY_ERROR 0x1000400c

#define MACH_RCV_INVALID_TYPE 0x1000400d

#define MACH_RCV_SCATTER_SMALL 0x1000400e

#define MACH_RCV_INVALID_TRAILER 0x1000400f

#define MACH_RCV_IN_PROGRESS_TIMED 0x10004011




# 671 "/usr/include/mach/message.h" 3 4
extern mach_msg_return_t mach_msg_overwrite(
     mach_msg_header_t *msg,
     mach_msg_option_t option,
     mach_msg_size_t send_size,
     mach_msg_size_t rcv_size,
     mach_port_name_t rcv_name,
     mach_msg_timeout_t timeout,
     mach_port_name_t notify,
     mach_msg_header_t *rcv_msg,
     mach_msg_size_t rcv_limit);
# 691 "/usr/include/mach/message.h" 3 4
extern mach_msg_return_t mach_msg(
     mach_msg_header_t *msg,
     mach_msg_option_t option,
     mach_msg_size_t send_size,
     mach_msg_size_t rcv_size,
     mach_port_name_t rcv_name,
     mach_msg_timeout_t timeout,
     mach_port_name_t notify);



# 63 "/usr/include/mach/host_info.h" 2 3 4
# 1 "/usr/include/mach/vm_statistics.h" 1 3 4
# 61 "/usr/include/mach/vm_statistics.h" 3 4
#define _MACH_VM_STATISTICS_H_ 



struct vm_statistics {
 natural_t free_count;
 natural_t active_count;
 natural_t inactive_count;
 natural_t wire_count;
 natural_t zero_fill_count;
 natural_t reactivations;
 natural_t pageins;
 natural_t pageouts;
 natural_t faults;
 natural_t cow_faults;
 natural_t lookups;
 natural_t hits;

 natural_t purgeable_count;
 natural_t purges;
};

typedef struct vm_statistics *vm_statistics_t;
typedef struct vm_statistics vm_statistics_data_t;

struct vm_statistics_rev0 {
 natural_t free_count;
 natural_t active_count;
 natural_t inactive_count;
 natural_t wire_count;
 natural_t zero_fill_count;
 natural_t reactivations;
 natural_t pageins;
 natural_t pageouts;
 natural_t faults;
 natural_t cow_faults;
 natural_t lookups;
 natural_t hits;
};

typedef struct vm_statistics_rev0 *vm_statistics_rev0_t;
typedef struct vm_statistics_rev0 vm_statistics_rev0_data_t;



#define VM_PAGE_QUERY_PAGE_PRESENT 0x1
#define VM_PAGE_QUERY_PAGE_FICTITIOUS 0x2
#define VM_PAGE_QUERY_PAGE_REF 0x4
#define VM_PAGE_QUERY_PAGE_DIRTY 0x8
# 135 "/usr/include/mach/vm_statistics.h" 3 4
#define VM_FLAGS_FIXED 0x0000
#define VM_FLAGS_ANYWHERE 0x0001
#define VM_FLAGS_PURGABLE 0x0002
#define VM_FLAGS_OVERWRITE 0x0008

#define VM_FLAGS_ALIAS_MASK 0xFF000000
#define VM_GET_FLAGS_ALIAS(flags,alias) (alias) = ((flags) & VM_FLAGS_ALIAS_MASK) >> 24

#define VM_SET_FLAGS_ALIAS(flags,alias) (flags) = (((flags) & ~VM_FLAGS_ALIAS_MASK) | (((alias) & ~VM_FLAGS_ALIAS_MASK) << 24))



#define VM_MEMORY_MALLOC 1
#define VM_MEMORY_MALLOC_SMALL 2
#define VM_MEMORY_MALLOC_LARGE 3
#define VM_MEMORY_MALLOC_HUGE 4
#define VM_MEMORY_SBRK 5
#define VM_MEMORY_REALLOC 6
#define VM_MEMORY_MALLOC_TINY 7

#define VM_MEMORY_ANALYSIS_TOOL 10

#define VM_MEMORY_MACH_MSG 20
#define VM_MEMORY_IOKIT 21
#define VM_MEMORY_STACK 30
#define VM_MEMORY_GUARD 31
#define VM_MEMORY_SHARED_PMAP 32

#define VM_MEMORY_DYLIB 33



#define VM_MEMORY_APPKIT 40
#define VM_MEMORY_FOUNDATION 41
#define VM_MEMORY_COREGRAPHICS 42
#define VM_MEMORY_CARBON 43
#define VM_MEMORY_JAVA 44
#define VM_MEMORY_ATS 50


#define VM_MEMORY_DYLD 60

#define VM_MEMORY_DYLD_MALLOC 61


#define VM_MEMORY_APPLICATION_SPECIFIC_1 240
#define VM_MEMORY_APPLICATION_SPECIFIC_16 255

#define VM_MAKE_TAG(tag) (tag<<24)
# 64 "/usr/include/mach/host_info.h" 2 3 4
# 1 "/usr/include/mach/machine.h" 1 3 4
# 55 "/usr/include/mach/machine.h" 3 4
#define _MACH_MACHINE_H_ 





typedef integer_t cpu_type_t;
typedef integer_t cpu_subtype_t;
typedef integer_t cpu_threadtype_t;

#define CPU_STATE_MAX 4

#define CPU_STATE_USER 0
#define CPU_STATE_SYSTEM 1
#define CPU_STATE_IDLE 2
#define CPU_STATE_NICE 3






#define CPU_ARCH_MASK 0xff000000
#define CPU_ARCH_ABI64 0x01000000





#define CPU_TYPE_ANY ((cpu_type_t) -1)

#define CPU_TYPE_VAX ((cpu_type_t) 1)




#define CPU_TYPE_MC680x0 ((cpu_type_t) 6)
#define CPU_TYPE_X86 ((cpu_type_t) 7)
#define CPU_TYPE_I386 CPU_TYPE_X86
#define CPU_TYPE_X86_64 (CPU_TYPE_X86 | CPU_ARCH_ABI64)



#define CPU_TYPE_MC98000 ((cpu_type_t) 10)
#define CPU_TYPE_HPPA ((cpu_type_t) 11)

#define CPU_TYPE_MC88000 ((cpu_type_t) 13)
#define CPU_TYPE_SPARC ((cpu_type_t) 14)
#define CPU_TYPE_I860 ((cpu_type_t) 15)


#define CPU_TYPE_POWERPC ((cpu_type_t) 18)
#define CPU_TYPE_POWERPC64 (CPU_TYPE_POWERPC | CPU_ARCH_ABI64)
# 126 "/usr/include/mach/machine.h" 3 4
#define CPU_SUBTYPE_MULTIPLE ((cpu_subtype_t) -1)
#define CPU_SUBTYPE_LITTLE_ENDIAN ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_BIG_ENDIAN ((cpu_subtype_t) 1)





#define CPU_THREADTYPE_NONE ((cpu_threadtype_t) 0)






#define CPU_SUBTYPE_VAX_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_VAX780 ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_VAX785 ((cpu_subtype_t) 2)
#define CPU_SUBTYPE_VAX750 ((cpu_subtype_t) 3)
#define CPU_SUBTYPE_VAX730 ((cpu_subtype_t) 4)
#define CPU_SUBTYPE_UVAXI ((cpu_subtype_t) 5)
#define CPU_SUBTYPE_UVAXII ((cpu_subtype_t) 6)
#define CPU_SUBTYPE_VAX8200 ((cpu_subtype_t) 7)
#define CPU_SUBTYPE_VAX8500 ((cpu_subtype_t) 8)
#define CPU_SUBTYPE_VAX8600 ((cpu_subtype_t) 9)
#define CPU_SUBTYPE_VAX8650 ((cpu_subtype_t) 10)
#define CPU_SUBTYPE_VAX8800 ((cpu_subtype_t) 11)
#define CPU_SUBTYPE_UVAXIII ((cpu_subtype_t) 12)
# 172 "/usr/include/mach/machine.h" 3 4
#define CPU_SUBTYPE_MC680x0_ALL ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_MC68030 ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_MC68040 ((cpu_subtype_t) 2)
#define CPU_SUBTYPE_MC68030_ONLY ((cpu_subtype_t) 3)





#define CPU_SUBTYPE_INTEL(f,m) ((cpu_subtype_t) (f) + ((m) << 4))

#define CPU_SUBTYPE_I386_ALL CPU_SUBTYPE_INTEL(3, 0)
#define CPU_SUBTYPE_386 CPU_SUBTYPE_INTEL(3, 0)
#define CPU_SUBTYPE_486 CPU_SUBTYPE_INTEL(4, 0)
#define CPU_SUBTYPE_486SX CPU_SUBTYPE_INTEL(4, 8)
#define CPU_SUBTYPE_586 CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)
#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)
#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)
#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)
#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)
#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)
#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)
#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)
#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)
#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)
#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)
#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)
#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)
#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)
#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)

#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)
#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15

#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)
#define CPU_SUBTYPE_INTEL_MODEL_ALL 0





#define CPU_SUBTYPE_X86_ALL ((cpu_subtype_t)3)
#define CPU_SUBTYPE_X86_64_ALL ((cpu_subtype_t)3)
#define CPU_SUBTYPE_X86_ARCH1 ((cpu_subtype_t)4)


#define CPU_THREADTYPE_INTEL_HTT ((cpu_threadtype_t) 1)





#define CPU_SUBTYPE_MIPS_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_MIPS_R2300 ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_MIPS_R2600 ((cpu_subtype_t) 2)
#define CPU_SUBTYPE_MIPS_R2800 ((cpu_subtype_t) 3)
#define CPU_SUBTYPE_MIPS_R2000a ((cpu_subtype_t) 4)
#define CPU_SUBTYPE_MIPS_R2000 ((cpu_subtype_t) 5)
#define CPU_SUBTYPE_MIPS_R3000a ((cpu_subtype_t) 6)
#define CPU_SUBTYPE_MIPS_R3000 ((cpu_subtype_t) 7)




#define CPU_SUBTYPE_MC98000_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_MC98601 ((cpu_subtype_t) 1)






#define CPU_SUBTYPE_HPPA_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_HPPA_7100 ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_HPPA_7100LC ((cpu_subtype_t) 1)




#define CPU_SUBTYPE_MC88000_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_MC88100 ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_MC88110 ((cpu_subtype_t) 2)




#define CPU_SUBTYPE_SPARC_ALL ((cpu_subtype_t) 0)




#define CPU_SUBTYPE_I860_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_I860_860 ((cpu_subtype_t) 1)




#define CPU_SUBTYPE_POWERPC_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_POWERPC_601 ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_POWERPC_602 ((cpu_subtype_t) 2)
#define CPU_SUBTYPE_POWERPC_603 ((cpu_subtype_t) 3)
#define CPU_SUBTYPE_POWERPC_603e ((cpu_subtype_t) 4)
#define CPU_SUBTYPE_POWERPC_603ev ((cpu_subtype_t) 5)
#define CPU_SUBTYPE_POWERPC_604 ((cpu_subtype_t) 6)
#define CPU_SUBTYPE_POWERPC_604e ((cpu_subtype_t) 7)
#define CPU_SUBTYPE_POWERPC_620 ((cpu_subtype_t) 8)
#define CPU_SUBTYPE_POWERPC_750 ((cpu_subtype_t) 9)
#define CPU_SUBTYPE_POWERPC_7400 ((cpu_subtype_t) 10)
#define CPU_SUBTYPE_POWERPC_7450 ((cpu_subtype_t) 11)

#define CPU_SUBTYPE_POWERPC_Max ((cpu_subtype_t) 10)
#define CPU_SUBTYPE_POWERPC_SCVger ((cpu_subtype_t) 11)

#define CPU_SUBTYPE_POWERPC_970 ((cpu_subtype_t) 100)
# 298 "/usr/include/mach/machine.h" 3 4
#define CPUFAMILY_UNKNOWN 0
#define CPUFAMILY_POWERPC_G3 0xcee41549
#define CPUFAMILY_POWERPC_G4 0x77c184ae
#define CPUFAMILY_POWERPC_G5 0xed76d8aa
#define CPUFAMILY_INTEL_6_14 0x73d67300
#define CPUFAMILY_INTEL_6_15 0x426f69ef
# 65 "/usr/include/mach/host_info.h" 2 3 4

# 1 "/usr/include/mach/time_value.h" 1 3 4
# 52 "/usr/include/mach/time_value.h" 3 4
#define _MACH_TIME_VALUE_H_ 







struct time_value {
 integer_t seconds;
 integer_t microseconds;
};

typedef struct time_value time_value_t;





#define TIME_MICROS_MAX (1000000)

#define time_value_add_usec(val,micros) { if (((val)->microseconds += (micros)) >= TIME_MICROS_MAX) { (val)->microseconds -= TIME_MICROS_MAX; (val)->seconds++; } }







#define time_value_add(result,addend) { (result)->microseconds += (addend)->microseconds; (result)->seconds += (addend)->seconds; if ((result)->microseconds >= TIME_MICROS_MAX) { (result)->microseconds -= TIME_MICROS_MAX; (result)->seconds++; } }
# 67 "/usr/include/mach/host_info.h" 2 3 4






typedef integer_t *host_info_t;

#define HOST_INFO_MAX (1024)
typedef integer_t host_info_data_t[(1024)];

#define KERNEL_VERSION_MAX (512)
typedef char kernel_version_t[(512)];

#define KERNEL_BOOT_INFO_MAX (4096)
typedef char kernel_boot_info_t[(4096)];





typedef integer_t host_flavor_t;
#define HOST_BASIC_INFO 1
#define HOST_SCHED_INFO 3
#define HOST_RESOURCE_SIZES 4
#define HOST_PRIORITY_INFO 5
#define HOST_SEMAPHORE_TRAPS 7
#define HOST_MACH_MSG_TRAP 8


#pragma pack(4)

struct host_basic_info {
 integer_t max_cpus;
 integer_t avail_cpus;
 natural_t memory_size;
 cpu_type_t cpu_type;
 cpu_subtype_t cpu_subtype;
 cpu_threadtype_t cpu_threadtype;
 integer_t physical_cpu;
 integer_t physical_cpu_max;
 integer_t logical_cpu;
 integer_t logical_cpu_max;
 uint64_t max_mem;
};

#pragma pack()

typedef struct host_basic_info host_basic_info_data_t;
typedef struct host_basic_info *host_basic_info_t;
#define HOST_BASIC_INFO_COUNT ((mach_msg_type_number_t) (sizeof(host_basic_info_data_t)/sizeof(integer_t)))


struct host_sched_info {
 integer_t min_timeout;
 integer_t min_quantum;
};

typedef struct host_sched_info host_sched_info_data_t;
typedef struct host_sched_info *host_sched_info_t;
#define HOST_SCHED_INFO_COUNT ((mach_msg_type_number_t) (sizeof(host_sched_info_data_t)/sizeof(integer_t)))


struct kernel_resource_sizes {
 natural_t task;
        natural_t thread;
        natural_t port;
        natural_t memory_region;
        natural_t memory_object;
};

typedef struct kernel_resource_sizes kernel_resource_sizes_data_t;
typedef struct kernel_resource_sizes *kernel_resource_sizes_t;
#define HOST_RESOURCE_SIZES_COUNT ((mach_msg_type_number_t) (sizeof(kernel_resource_sizes_data_t)/sizeof(integer_t)))


struct host_priority_info {
     integer_t kernel_priority;
     integer_t system_priority;
     integer_t server_priority;
     integer_t user_priority;
     integer_t depress_priority;
     integer_t idle_priority;
     integer_t minimum_priority;
 integer_t maximum_priority;
};

typedef struct host_priority_info host_priority_info_data_t;
typedef struct host_priority_info *host_priority_info_t;
#define HOST_PRIORITY_INFO_COUNT ((mach_msg_type_number_t) (sizeof(host_priority_info_data_t)/sizeof(integer_t)))



#define HOST_LOAD_INFO 1
#define HOST_VM_INFO 2
#define HOST_CPU_LOAD_INFO 3

struct host_load_info {
 integer_t avenrun[3];
 integer_t mach_factor[3];
};

typedef struct host_load_info host_load_info_data_t;
typedef struct host_load_info *host_load_info_t;
#define HOST_LOAD_INFO_COUNT ((mach_msg_type_number_t) (sizeof(host_load_info_data_t)/sizeof(integer_t)))



#define HOST_VM_INFO_COUNT ((mach_msg_type_number_t) (sizeof(vm_statistics_data_t)/sizeof(integer_t)))

#define HOST_VM_INFO_REV0_COUNT ((mach_msg_type_number_t) (sizeof(vm_statistics_rev0_data_t)/sizeof(integer_t)))


struct host_cpu_load_info {
 natural_t cpu_ticks[4];
};

typedef struct host_cpu_load_info host_cpu_load_info_data_t;
typedef struct host_cpu_load_info *host_cpu_load_info_t;
#define HOST_CPU_LOAD_INFO_COUNT ((mach_msg_type_number_t) (sizeof (host_cpu_load_info_data_t) / sizeof (integer_t)))
# 69 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/host_notify.h" 1 3 4
# 24 "/usr/include/mach/host_notify.h" 3 4
#define _MACH_HOST_NOTIFY_H_ 

#define HOST_NOTIFY_CALENDAR_CHANGE 0
#define HOST_NOTIFY_TYPE_MAX 0

#define HOST_CALENDAR_CHANGED_REPLYID 950
# 70 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/host_special_ports.h" 1 3 4
# 59 "/usr/include/mach/host_special_ports.h" 3 4
#define _MACH_HOST_SPECIAL_PORTS_H_ 




#define HOST_SECURITY_PORT 0




#define HOST_PORT 1
#define HOST_PRIV_PORT 2
#define HOST_IO_MASTER_PORT 3
#define HOST_MAX_SPECIAL_KERNEL_PORT 7




#define HOST_DYNAMIC_PAGER_PORT (1 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_AUDIT_CONTROL_PORT (2 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_USER_NOTIFICATION_PORT (3 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_MAX_SPECIAL_PORT (8 + HOST_MAX_SPECIAL_KERNEL_PORT)





#define HOST_LOCAL_NODE -1
# 95 "/usr/include/mach/host_special_ports.h" 3 4
#define host_get_host_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_PORT, (port)))


#define host_set_host_port(host,port) (KERN_INVALID_ARGUMENT)

#define host_get_host_priv_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_PRIV_PORT, (port)))


#define host_set_host_priv_port(host,port) (KERN_INVALID_ARGUMENT)

#define host_get_io_master_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_IO_MASTER_PORT, (port)))


#define host_set_io_master_port(host,port) (KERN_INVALID_ARGUMENT)




#define host_get_dynamic_pager_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_DYNAMIC_PAGER_PORT, (port)))


#define host_set_dynamic_pager_port(host,port) (host_set_special_port((host), HOST_DYNAMIC_PAGER_PORT, (port)))


#define host_get_audit_control_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_AUDIT_CONTROL_PORT, (port)))


#define host_set_audit_control_port(host,port) (host_set_special_port((host), HOST_AUDIT_CONTROL_PORT, (port)))


#define host_get_user_notification_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_USER_NOTIFICATION_PORT, (port)))


#define host_set_user_notification_port(host,port) (host_set_special_port((host), HOST_USER_NOTIFICATION_PORT, (port)))
# 71 "/usr/include/mach/mach_types.h" 2 3 4


# 1 "/usr/include/mach/memory_object_types.h" 1 3 4
# 60 "/usr/include/mach/memory_object_types.h" 3 4
#define _MACH_MEMORY_OBJECT_TYPES_H_ 
# 69 "/usr/include/mach/memory_object_types.h" 3 4
# 1 "/usr/include/mach/vm_prot.h" 1 3 4
# 61 "/usr/include/mach/vm_prot.h" 3 4
#define _MACH_VM_PROT_H_ 







typedef int vm_prot_t;





#define VM_PROT_NONE ((vm_prot_t) 0x00)

#define VM_PROT_READ ((vm_prot_t) 0x01)
#define VM_PROT_WRITE ((vm_prot_t) 0x02)
#define VM_PROT_EXECUTE ((vm_prot_t) 0x04)





#define STACK_ONLY_NX 1





#define VM_PROT_DEFAULT (VM_PROT_READ|VM_PROT_WRITE)





#define VM_PROT_ALL (VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE)
# 106 "/usr/include/mach/vm_prot.h" 3 4
#define VM_PROT_NO_CHANGE ((vm_prot_t) 0x08)
# 116 "/usr/include/mach/vm_prot.h" 3 4
#define VM_PROT_COPY ((vm_prot_t) 0x10)
# 130 "/usr/include/mach/vm_prot.h" 3 4
#define VM_PROT_WANTS_COPY ((vm_prot_t) 0x10)
# 70 "/usr/include/mach/memory_object_types.h" 2 3 4
# 1 "/usr/include/mach/vm_sync.h" 1 3 4
# 58 "/usr/include/mach/vm_sync.h" 3 4
#define _MACH_VM_SYNC_H_ 

typedef unsigned vm_sync_t;





#define VM_SYNC_ASYNCHRONOUS ((vm_sync_t) 0x01)
#define VM_SYNC_SYNCHRONOUS ((vm_sync_t) 0x02)
#define VM_SYNC_INVALIDATE ((vm_sync_t) 0x04)
#define VM_SYNC_KILLPAGES ((vm_sync_t) 0x08)
#define VM_SYNC_DEACTIVATE ((vm_sync_t) 0x10)
#define VM_SYNC_CONTIGUOUS ((vm_sync_t) 0x20)
# 71 "/usr/include/mach/memory_object_types.h" 2 3 4
# 1 "/usr/include/mach/vm_types.h" 1 3 4
# 27 "/usr/include/mach/vm_types.h" 3 4
#define _MACH_VM_TYPES_H_ 






typedef vm_offset_t pointer_t;
typedef vm_offset_t vm_address_t;







typedef uint64_t addr64_t;
# 55 "/usr/include/mach/vm_types.h" 3 4
typedef uint32_t reg64_t;






typedef uint32_t ppnum_t;
#define PPNUM_MAX UINT32_MAX



typedef mach_port_t vm_map_t;


#define VM_MAP_NULL ((vm_map_t) 0)





typedef uint64_t vm_object_offset_t;
typedef uint64_t vm_object_size_t;


typedef mach_port_t upl_t;
typedef mach_port_t vm_named_entry_t;


#define UPL_NULL ((upl_t) 0)
#define VM_NAMED_ENTRY_NULL ((vm_named_entry_t) 0)
# 72 "/usr/include/mach/memory_object_types.h" 2 3 4




#define VM_64_BIT_DATA_OBJECTS 

typedef unsigned long long memory_object_offset_t;
typedef unsigned long long memory_object_size_t;
typedef natural_t memory_object_cluster_size_t;







typedef mach_port_t memory_object_t;
typedef mach_port_t memory_object_control_t;


typedef memory_object_t *memory_object_array_t;




typedef mach_port_t memory_object_name_t;



typedef mach_port_t memory_object_default_t;



#define MEMORY_OBJECT_NULL ((memory_object_t) 0)
#define MEMORY_OBJECT_CONTROL_NULL ((memory_object_control_t) 0)
#define MEMORY_OBJECT_NAME_NULL ((memory_object_name_t) 0)
#define MEMORY_OBJECT_DEFAULT_NULL ((memory_object_default_t) 0)


typedef int memory_object_copy_strategy_t;

#define MEMORY_OBJECT_COPY_NONE 0

#define MEMORY_OBJECT_COPY_CALL 1

#define MEMORY_OBJECT_COPY_DELAY 2



#define MEMORY_OBJECT_COPY_TEMPORARY 3




#define MEMORY_OBJECT_COPY_SYMMETRIC 4
# 137 "/usr/include/mach/memory_object_types.h" 3 4
#define MEMORY_OBJECT_COPY_INVALID 5
# 147 "/usr/include/mach/memory_object_types.h" 3 4
typedef int memory_object_return_t;


#define MEMORY_OBJECT_RETURN_NONE 0

#define MEMORY_OBJECT_RETURN_DIRTY 1

#define MEMORY_OBJECT_RETURN_ALL 2

#define MEMORY_OBJECT_RETURN_ANYTHING 3






#define MEMORY_OBJECT_DATA_FLUSH 0x1
#define MEMORY_OBJECT_DATA_NO_CHANGE 0x2
#define MEMORY_OBJECT_DATA_PURGE 0x4
#define MEMORY_OBJECT_COPY_SYNC 0x8
#define MEMORY_OBJECT_DATA_SYNC 0x10
#define MEMORY_OBJECT_IO_SYNC 0x20





#define MEMORY_OBJECT_INFO_MAX (1024)
typedef int *memory_object_info_t;
typedef int memory_object_flavor_t;
typedef int memory_object_info_data_t[(1024)];


#define MEMORY_OBJECT_PERFORMANCE_INFO 11
#define MEMORY_OBJECT_ATTRIBUTE_INFO 14
#define MEMORY_OBJECT_BEHAVIOR_INFO 15


struct memory_object_perf_info {
 memory_object_cluster_size_t cluster_size;
 boolean_t may_cache;
};

struct memory_object_attr_info {
 memory_object_copy_strategy_t copy_strategy;
 memory_object_cluster_size_t cluster_size;
 boolean_t may_cache_object;
 boolean_t temporary;
};

struct memory_object_behave_info {
 memory_object_copy_strategy_t copy_strategy;
 boolean_t temporary;
 boolean_t invalidate;
 boolean_t silent_overwrite;
 boolean_t advisory_pageout;
};


typedef struct memory_object_behave_info *memory_object_behave_info_t;
typedef struct memory_object_behave_info memory_object_behave_info_data_t;

typedef struct memory_object_perf_info *memory_object_perf_info_t;
typedef struct memory_object_perf_info memory_object_perf_info_data_t;

typedef struct memory_object_attr_info *memory_object_attr_info_t;
typedef struct memory_object_attr_info memory_object_attr_info_data_t;

#define MEMORY_OBJECT_BEHAVE_INFO_COUNT ((mach_msg_type_number_t) (sizeof(memory_object_behave_info_data_t)/sizeof(int)))

#define MEMORY_OBJECT_PERF_INFO_COUNT ((mach_msg_type_number_t) (sizeof(memory_object_perf_info_data_t)/sizeof(int)))

#define MEMORY_OBJECT_ATTR_INFO_COUNT ((mach_msg_type_number_t) (sizeof(memory_object_attr_info_data_t)/sizeof(int)))


#define invalid_memory_object_flavor(f) (f != MEMORY_OBJECT_ATTRIBUTE_INFO && f != MEMORY_OBJECT_PERFORMANCE_INFO && f != OLD_MEMORY_OBJECT_BEHAVIOR_INFO && f != MEMORY_OBJECT_BEHAVIOR_INFO && f != OLD_MEMORY_OBJECT_ATTRIBUTE_INFO)
# 233 "/usr/include/mach/memory_object_types.h" 3 4
#define MEMORY_OBJECT_TERMINATE_IDLE 0x1
#define MEMORY_OBJECT_RESPECT_CACHE 0x2
#define MEMORY_OBJECT_RELEASE_NO_OP 0x4




#define MAP_MEM_NOOP 0
#define MAP_MEM_COPYBACK 1
#define MAP_MEM_IO 2
#define MAP_MEM_WTHRU 3
#define MAP_MEM_WCOMB 4


#define GET_MAP_MEM(flags) ((((unsigned int)(flags)) >> 24) & 0xFF)


#define SET_MAP_MEM(caching,flags) ((flags) = ((((unsigned int)(caching)) << 24) & 0xFF000000) | ((flags) & 0xFFFFFF));




#define MAP_MEM_ONLY 0x10000
#define MAP_MEM_NAMED_CREATE 0x20000
#define MAP_MEM_PURGABLE 0x40000
#define MAP_MEM_NAMED_REUSE 0x80000
# 74 "/usr/include/mach/mach_types.h" 2 3 4

# 1 "/usr/include/mach/exception_types.h" 1 3 4
# 54 "/usr/include/mach/exception_types.h" 3 4
#define _MACH_EXCEPTION_TYPES_H_ 

# 1 "/usr/include/mach/machine/exception.h" 1 3 4
# 24 "/usr/include/mach/machine/exception.h" 3 4
#define _MACH_MACHINE_EXCEPTION_H_ 


# 1 "/usr/include/mach/ppc/exception.h" 1 3 4
# 49 "/usr/include/mach/ppc/exception.h" 3 4
#define _MACH_PPC_EXCEPTION_H_ 

#define EXC_TYPES_COUNT 10

#define EXCEPTION_CODE_MAX 2




#define EXC_PPC_INVALID_SYSCALL 1
#define EXC_PPC_UNIPL_INST 2
#define EXC_PPC_PRIVINST 3
#define EXC_PPC_PRIVREG 4
#define EXC_PPC_TRACE 5
#define EXC_PPC_PERFMON 6






#define EXC_PPC_VM_PROT_READ 0x101
#define EXC_PPC_BADSPACE 0x102
#define EXC_PPC_UNALIGNED 0x103





#define EXC_PPC_OVERFLOW 1
#define EXC_PPC_ZERO_DIVIDE 2
#define EXC_PPC_FLT_INEXACT 3
#define EXC_PPC_FLT_ZERO_DIVIDE 4
#define EXC_PPC_FLT_UNDERFLOW 5
#define EXC_PPC_FLT_OVERFLOW 6
#define EXC_PPC_FLT_NOT_A_NUMBER 7






#define EXC_PPC_NOEMULATION 8
#define EXC_PPC_ALTIVECASSIST 9





#define EXC_PPC_TRAP 1
#define EXC_PPC_MIGRATE 0x10100






#define EXC_PPC_BREAKPOINT EXC_PPC_TRAP




#define EXC_MASK_MACHINE 0
# 28 "/usr/include/mach/machine/exception.h" 2 3 4
# 57 "/usr/include/mach/exception_types.h" 2 3 4





#define EXC_BAD_ACCESS 1



#define EXC_BAD_INSTRUCTION 2


#define EXC_ARITHMETIC 3


#define EXC_EMULATION 4



#define EXC_SOFTWARE 5




#define EXC_BREAKPOINT 6


#define EXC_SYSCALL 7

#define EXC_MACH_SYSCALL 8

#define EXC_RPC_ALERT 9





#define EXCEPTION_DEFAULT 1



#define EXCEPTION_STATE 2




#define EXCEPTION_STATE_IDENTITY 3
# 113 "/usr/include/mach/exception_types.h" 3 4
#define EXC_MASK_BAD_ACCESS (1 << EXC_BAD_ACCESS)
#define EXC_MASK_BAD_INSTRUCTION (1 << EXC_BAD_INSTRUCTION)
#define EXC_MASK_ARITHMETIC (1 << EXC_ARITHMETIC)
#define EXC_MASK_EMULATION (1 << EXC_EMULATION)
#define EXC_MASK_SOFTWARE (1 << EXC_SOFTWARE)
#define EXC_MASK_BREAKPOINT (1 << EXC_BREAKPOINT)
#define EXC_MASK_SYSCALL (1 << EXC_SYSCALL)
#define EXC_MASK_MACH_SYSCALL (1 << EXC_MACH_SYSCALL)
#define EXC_MASK_RPC_ALERT (1 << EXC_RPC_ALERT)

#define EXC_MASK_ALL (EXC_MASK_BAD_ACCESS | EXC_MASK_BAD_INSTRUCTION | EXC_MASK_ARITHMETIC | EXC_MASK_EMULATION | EXC_MASK_SOFTWARE | EXC_MASK_BREAKPOINT | EXC_MASK_SYSCALL | EXC_MASK_MACH_SYSCALL | EXC_MASK_RPC_ALERT | EXC_MASK_MACHINE)
# 135 "/usr/include/mach/exception_types.h" 3 4
#define FIRST_EXCEPTION 1






#define EXC_SOFT_SIGNAL 0x10003




# 1 "/usr/include/mach/thread_status.h" 1 3 4
# 63 "/usr/include/mach/thread_status.h" 3 4
#define _MACH_THREAD_STATUS_H_ 






# 1 "/usr/include/mach/machine/thread_status.h" 1 3 4
# 24 "/usr/include/mach/machine/thread_status.h" 3 4
#define _MACH_MACHINE_THREAD_STATUS_H_ 


# 1 "/usr/include/mach/ppc/thread_status.h" 1 3 4
# 27 "/usr/include/mach/ppc/thread_status.h" 3 4
#define _MACH_PPC_THREAD_STATUS_H_ 

# 1 "/usr/include/mach/ppc/_types.h" 1 3 4
# 27 "/usr/include/mach/ppc/_types.h" 3 4
#define _MACH_PPC__TYPES_H_ 
# 36 "/usr/include/mach/ppc/_types.h" 3 4
struct ppc_thread_state



{
 unsigned int srr0;
 unsigned int srr1;
 unsigned int r0;
 unsigned int r1;
 unsigned int r2;
 unsigned int r3;
 unsigned int r4;
 unsigned int r5;
 unsigned int r6;
 unsigned int r7;
 unsigned int r8;
 unsigned int r9;
 unsigned int r10;
 unsigned int r11;
 unsigned int r12;
 unsigned int r13;
 unsigned int r14;
 unsigned int r15;
 unsigned int r16;
 unsigned int r17;
 unsigned int r18;
 unsigned int r19;
 unsigned int r20;
 unsigned int r21;
 unsigned int r22;
 unsigned int r23;
 unsigned int r24;
 unsigned int r25;
 unsigned int r26;
 unsigned int r27;
 unsigned int r28;
 unsigned int r29;
 unsigned int r30;
 unsigned int r31;

 unsigned int cr;
 unsigned int xer;
 unsigned int lr;
 unsigned int ctr;
 unsigned int mq;

 unsigned int vrsave;
};


#pragma pack(4)
struct ppc_thread_state64 {
 unsigned long long srr0;
 unsigned long long srr1;
 unsigned long long r0;
 unsigned long long r1;
 unsigned long long r2;
 unsigned long long r3;
 unsigned long long r4;
 unsigned long long r5;
 unsigned long long r6;
 unsigned long long r7;
 unsigned long long r8;
 unsigned long long r9;
 unsigned long long r10;
 unsigned long long r11;
 unsigned long long r12;
 unsigned long long r13;
 unsigned long long r14;
 unsigned long long r15;
 unsigned long long r16;
 unsigned long long r17;
 unsigned long long r18;
 unsigned long long r19;
 unsigned long long r20;
 unsigned long long r21;
 unsigned long long r22;
 unsigned long long r23;
 unsigned long long r24;
 unsigned long long r25;
 unsigned long long r26;
 unsigned long long r27;
 unsigned long long r28;
 unsigned long long r29;
 unsigned long long r30;
 unsigned long long r31;

 unsigned int cr;
 unsigned long long xer;
 unsigned long long lr;
 unsigned long long ctr;

 unsigned int vrsave;
};

#pragma pack()





struct ppc_float_state



{
 double fpregs[32];

 unsigned int fpscr_pad;
 unsigned int fpscr;
};

#pragma pack(4)


struct ppc_vector_state



{




 unsigned long save_vr[32][4];
 unsigned long save_vscr[4];

 unsigned int save_pad5[4];
 unsigned int save_vrvalid;
 unsigned int save_pad6[7];
};
#pragma pack()
# 186 "/usr/include/mach/ppc/_types.h" 3 4
#pragma pack(4)


struct ppc_exception_state



{







 unsigned long dar;
 unsigned long dsisr;
 unsigned long exception;
 unsigned long pad0;
 unsigned long pad1[4];

};


struct ppc_exception_state64 {
 unsigned long long dar;





 unsigned long dsisr;
 unsigned long exception;
 unsigned long pad1[4];

};


#pragma pack()
# 30 "/usr/include/mach/ppc/thread_status.h" 2 3 4
# 38 "/usr/include/mach/ppc/thread_status.h" 3 4
#define PPC_THREAD_STATE 1
#define PPC_FLOAT_STATE 2
#define PPC_EXCEPTION_STATE 3
#define PPC_VECTOR_STATE 4
#define PPC_THREAD_STATE64 5
#define PPC_EXCEPTION_STATE64 6
#define THREAD_STATE_NONE 7
# 53 "/usr/include/mach/ppc/thread_status.h" 3 4
#define VALID_THREAD_STATE_FLAVOR(x) ((x == PPC_THREAD_STATE) || (x == PPC_FLOAT_STATE) || (x == PPC_EXCEPTION_STATE) || (x == PPC_VECTOR_STATE) || (x == PPC_THREAD_STATE64) || (x == PPC_EXCEPTION_STATE64) || (x == THREAD_STATE_NONE))
# 63 "/usr/include/mach/ppc/thread_status.h" 3 4
typedef struct ppc_thread_state ppc_thread_state_t;





typedef struct ppc_thread_state64 ppc_thread_state64_t;



typedef struct ppc_float_state ppc_float_state_t;





typedef struct ppc_vector_state ppc_vector_state_t;
# 99 "/usr/include/mach/ppc/thread_status.h" 3 4
typedef struct ppc_thread_state ppc_saved_state_t;
# 121 "/usr/include/mach/ppc/thread_status.h" 3 4
typedef struct ppc_exception_state ppc_exception_state_t;
typedef struct ppc_exception_state64 ppc_exception_state64_t;
# 131 "/usr/include/mach/ppc/thread_status.h" 3 4
#define PPC_THREAD_STATE_COUNT ((mach_msg_type_number_t) (sizeof(ppc_thread_state_t) / sizeof(int)))


#define PPC_THREAD_STATE64_COUNT ((mach_msg_type_number_t) (sizeof(ppc_thread_state64_t) / sizeof(int)))


#define PPC_EXCEPTION_STATE_COUNT ((mach_msg_type_number_t) (sizeof(ppc_exception_state_t) / sizeof(int)))


#define PPC_EXCEPTION_STATE64_COUNT ((mach_msg_type_number_t) (sizeof(ppc_exception_state64_t) / sizeof(int)))


#define PPC_FLOAT_STATE_COUNT ((mach_msg_type_number_t) (sizeof(ppc_float_state_t) / sizeof(int)))


#define PPC_VECTOR_STATE_COUNT ((mach_msg_type_number_t) (sizeof(ppc_vector_state_t) / sizeof(int)))






#define MACHINE_THREAD_STATE PPC_THREAD_STATE
#define MACHINE_THREAD_STATE_COUNT PPC_THREAD_STATE_COUNT




#define THREAD_MACHINE_STATE_MAX THREAD_STATE_MAX
# 28 "/usr/include/mach/machine/thread_status.h" 2 3 4
# 71 "/usr/include/mach/thread_status.h" 2 3 4
# 1 "/usr/include/mach/machine/thread_state.h" 1 3 4
# 24 "/usr/include/mach/machine/thread_state.h" 3 4
#define _MACH_MACHINE_THREAD_STATE_H_ 


# 1 "/usr/include/mach/ppc/thread_state.h" 1 3 4
# 27 "/usr/include/mach/ppc/thread_state.h" 3 4
#define _MACH_PPC_THREAD_STATE_H_ 


#define PPC_THREAD_STATE_MAX (144)


#define THREAD_STATE_MAX PPC_THREAD_STATE_MAX
# 28 "/usr/include/mach/machine/thread_state.h" 2 3 4
# 72 "/usr/include/mach/thread_status.h" 2 3 4





typedef natural_t *thread_state_t;


typedef natural_t thread_state_data_t[(144)];

#define THREAD_STATE_FLAVOR_LIST 0
#define THREAD_STATE_FLAVOR_LIST_NEW 128

typedef int thread_state_flavor_t;
typedef thread_state_flavor_t *thread_state_flavor_array_t;
# 148 "/usr/include/mach/exception_types.h" 2 3 4





typedef int exception_type_t;
typedef integer_t exception_data_type_t;
typedef int exception_behavior_t;
typedef integer_t *exception_data_t;
typedef unsigned int exception_mask_t;
typedef exception_mask_t *exception_mask_array_t;
typedef exception_behavior_t *exception_behavior_array_t;
typedef thread_state_flavor_t *exception_flavor_array_t;
typedef mach_port_t *exception_port_array_t;
# 76 "/usr/include/mach/mach_types.h" 2 3 4

# 1 "/usr/include/mach/processor_info.h" 1 3 4
# 62 "/usr/include/mach/processor_info.h" 3 4
#define _MACH_PROCESSOR_INFO_H_ 



# 1 "/usr/include/mach/machine/processor_info.h" 1 3 4
# 24 "/usr/include/mach/machine/processor_info.h" 3 4
#define _MACH_MACHINE_PROCESSOR_INFO_H_ 


# 1 "/usr/include/mach/ppc/processor_info.h" 1 3 4
# 30 "/usr/include/mach/ppc/processor_info.h" 3 4
#define _MACH_PPC_PROCESSOR_INFO_H_ 
# 28 "/usr/include/mach/machine/processor_info.h" 2 3 4
# 67 "/usr/include/mach/processor_info.h" 2 3 4




typedef integer_t *processor_info_t;
typedef integer_t *processor_info_array_t;

#define PROCESSOR_INFO_MAX (1024)
typedef integer_t processor_info_data_t[(1024)];


typedef integer_t *processor_set_info_t;

#define PROCESSOR_SET_INFO_MAX (1024)
typedef integer_t processor_set_info_data_t[(1024)];




typedef int processor_flavor_t;
#define PROCESSOR_BASIC_INFO 1
#define PROCESSOR_CPU_LOAD_INFO 2
#define PROCESSOR_PM_REGS_INFO 0x10000001
#define PROCESSOR_TEMPERATURE 0x10000002

struct processor_basic_info {
 cpu_type_t cpu_type;
 cpu_subtype_t cpu_subtype;
 boolean_t running;
 int slot_num;
 boolean_t is_master;
};

typedef struct processor_basic_info processor_basic_info_data_t;
typedef struct processor_basic_info *processor_basic_info_t;
#define PROCESSOR_BASIC_INFO_COUNT ((mach_msg_type_number_t) (sizeof(processor_basic_info_data_t)/sizeof(natural_t)))


struct processor_cpu_load_info {
        unsigned long cpu_ticks[4];
};

typedef struct processor_cpu_load_info processor_cpu_load_info_data_t;
typedef struct processor_cpu_load_info *processor_cpu_load_info_t;
#define PROCESSOR_CPU_LOAD_INFO_COUNT ((mach_msg_type_number_t) (sizeof(processor_cpu_load_info_data_t)/sizeof(natural_t)))





#define LOAD_SCALE 1000

typedef int processor_set_flavor_t;
#define PROCESSOR_SET_BASIC_INFO 5

struct processor_set_basic_info {
 int processor_count;
 int default_policy;
};

typedef struct processor_set_basic_info processor_set_basic_info_data_t;
typedef struct processor_set_basic_info *processor_set_basic_info_t;
#define PROCESSOR_SET_BASIC_INFO_COUNT ((mach_msg_type_number_t) (sizeof(processor_set_basic_info_data_t)/sizeof(natural_t)))


#define PROCESSOR_SET_LOAD_INFO 4

struct processor_set_load_info {
        int task_count;
        int thread_count;
        integer_t load_average;
        integer_t mach_factor;
};

typedef struct processor_set_load_info processor_set_load_info_data_t;
typedef struct processor_set_load_info *processor_set_load_info_t;
#define PROCESSOR_SET_LOAD_INFO_COUNT ((mach_msg_type_number_t) (sizeof(processor_set_load_info_data_t)/sizeof(natural_t)))
# 78 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/task_info.h" 1 3 4
# 62 "/usr/include/mach/task_info.h" 3 4
#define _MACH_TASK_INFO_H_ 




# 1 "/usr/include/mach/policy.h" 1 3 4
# 54 "/usr/include/mach/policy.h" 3 4
#define _MACH_POLICY_H_ 
# 73 "/usr/include/mach/policy.h" 3 4
typedef int policy_t;
typedef integer_t *policy_info_t;
typedef integer_t *policy_base_t;
typedef integer_t *policy_limit_t;






#define POLICY_NULL 0
#define POLICY_TIMESHARE 1
#define POLICY_RR 2
#define POLICY_FIFO 4

#define __NEW_SCHEDULING_FRAMEWORK__ 




#define POLICYCLASS_FIXEDPRI (POLICY_RR | POLICY_FIFO)




#define invalid_policy(policy) ((policy) != POLICY_TIMESHARE && (policy) != POLICY_RR && (policy) != POLICY_FIFO)
# 107 "/usr/include/mach/policy.h" 3 4
struct policy_timeshare_base {
 integer_t base_priority;
};
struct policy_timeshare_limit {
 integer_t max_priority;
};
struct policy_timeshare_info {
 integer_t max_priority;
 integer_t base_priority;
 integer_t cur_priority;
 boolean_t depressed;
 integer_t depress_priority;
};

typedef struct policy_timeshare_base *policy_timeshare_base_t;
typedef struct policy_timeshare_limit *policy_timeshare_limit_t;
typedef struct policy_timeshare_info *policy_timeshare_info_t;

typedef struct policy_timeshare_base policy_timeshare_base_data_t;
typedef struct policy_timeshare_limit policy_timeshare_limit_data_t;
typedef struct policy_timeshare_info policy_timeshare_info_data_t;


#define POLICY_TIMESHARE_BASE_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_timeshare_base)/sizeof(integer_t)))

#define POLICY_TIMESHARE_LIMIT_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_timeshare_limit)/sizeof(integer_t)))

#define POLICY_TIMESHARE_INFO_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_timeshare_info)/sizeof(integer_t)))






struct policy_rr_base {
 integer_t base_priority;
 integer_t quantum;
};
struct policy_rr_limit {
 integer_t max_priority;
};
struct policy_rr_info {
 integer_t max_priority;
 integer_t base_priority;
 integer_t quantum;
 boolean_t depressed;
 integer_t depress_priority;
};

typedef struct policy_rr_base *policy_rr_base_t;
typedef struct policy_rr_limit *policy_rr_limit_t;
typedef struct policy_rr_info *policy_rr_info_t;

typedef struct policy_rr_base policy_rr_base_data_t;
typedef struct policy_rr_limit policy_rr_limit_data_t;
typedef struct policy_rr_info policy_rr_info_data_t;

#define POLICY_RR_BASE_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_rr_base)/sizeof(integer_t)))

#define POLICY_RR_LIMIT_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_rr_limit)/sizeof(integer_t)))

#define POLICY_RR_INFO_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_rr_info)/sizeof(integer_t)))






struct policy_fifo_base {
 integer_t base_priority;
};
struct policy_fifo_limit {
 integer_t max_priority;
};
struct policy_fifo_info {
 integer_t max_priority;
 integer_t base_priority;
 boolean_t depressed;
 integer_t depress_priority;
};

typedef struct policy_fifo_base *policy_fifo_base_t;
typedef struct policy_fifo_limit *policy_fifo_limit_t;
typedef struct policy_fifo_info *policy_fifo_info_t;

typedef struct policy_fifo_base policy_fifo_base_data_t;
typedef struct policy_fifo_limit policy_fifo_limit_data_t;
typedef struct policy_fifo_info policy_fifo_info_data_t;

#define POLICY_FIFO_BASE_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_fifo_base)/sizeof(integer_t)))

#define POLICY_FIFO_LIMIT_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_fifo_limit)/sizeof(integer_t)))

#define POLICY_FIFO_INFO_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_fifo_info)/sizeof(integer_t)))






struct policy_bases {
 policy_timeshare_base_data_t ts;
 policy_rr_base_data_t rr;
 policy_fifo_base_data_t fifo;
};

struct policy_limits {
 policy_timeshare_limit_data_t ts;
 policy_rr_limit_data_t rr;
 policy_fifo_limit_data_t fifo;
};

struct policy_infos {
 policy_timeshare_info_data_t ts;
 policy_rr_info_data_t rr;
 policy_fifo_info_data_t fifo;
};

typedef struct policy_bases policy_base_data_t;
typedef struct policy_limits policy_limit_data_t;
typedef struct policy_infos policy_info_data_t;
# 68 "/usr/include/mach/task_info.h" 2 3 4






typedef natural_t task_flavor_t;
typedef integer_t *task_info_t;

#define TASK_INFO_MAX (1024)
typedef integer_t task_info_data_t[(1024)];





#pragma pack(4)

#define TASK_BASIC_INFO_32 4

struct task_basic_info_32 {
        integer_t suspend_count;
        natural_t virtual_size;
        natural_t resident_size;
        time_value_t user_time;

        time_value_t system_time;

 policy_t policy;
};
typedef struct task_basic_info_32 task_basic_info_32_data_t;
typedef struct task_basic_info_32 *task_basic_info_32_t;
#define TASK_BASIC_INFO_32_COUNT (sizeof(task_basic_info_32_data_t) / sizeof(natural_t))



#define TASK_BASIC_INFO_64 5

struct task_basic_info_64 {
        integer_t suspend_count;
        mach_vm_size_t virtual_size;
        mach_vm_size_t resident_size;
        time_value_t user_time;

        time_value_t system_time;

 policy_t policy;
};
typedef struct task_basic_info_64 task_basic_info_64_data_t;
typedef struct task_basic_info_64 *task_basic_info_64_t;
#define TASK_BASIC_INFO_64_COUNT (sizeof(task_basic_info_64_data_t) / sizeof(natural_t))





struct task_basic_info {
        integer_t suspend_count;
        vm_size_t virtual_size;
        vm_size_t resident_size;
        time_value_t user_time;

        time_value_t system_time;

 policy_t policy;
};

typedef struct task_basic_info task_basic_info_data_t;
typedef struct task_basic_info *task_basic_info_t;
#define TASK_BASIC_INFO_COUNT (sizeof(task_basic_info_data_t) / sizeof(natural_t))


#define TASK_BASIC_INFO TASK_BASIC_INFO_32






#define TASK_EVENTS_INFO 2

struct task_events_info {
 integer_t faults;
 integer_t pageins;
 integer_t cow_faults;
 integer_t messages_sent;
 integer_t messages_received;
        integer_t syscalls_mach;
 integer_t syscalls_unix;
 integer_t csw;
};
typedef struct task_events_info task_events_info_data_t;
typedef struct task_events_info *task_events_info_t;
#define TASK_EVENTS_INFO_COUNT ((mach_msg_type_number_t) (sizeof(task_events_info_data_t) / sizeof(natural_t)))


#define TASK_THREAD_TIMES_INFO 3


struct task_thread_times_info {
 time_value_t user_time;

 time_value_t system_time;

};

typedef struct task_thread_times_info task_thread_times_info_data_t;
typedef struct task_thread_times_info *task_thread_times_info_t;
#define TASK_THREAD_TIMES_INFO_COUNT ((mach_msg_type_number_t) (sizeof(task_thread_times_info_data_t) / sizeof(natural_t)))


#define TASK_ABSOLUTETIME_INFO 1

struct task_absolutetime_info {
 uint64_t total_user;
 uint64_t total_system;
 uint64_t threads_user;
 uint64_t threads_system;
};

typedef struct task_absolutetime_info task_absolutetime_info_data_t;
typedef struct task_absolutetime_info *task_absolutetime_info_t;
#define TASK_ABSOLUTETIME_INFO_COUNT ((mach_msg_type_number_t) (sizeof (task_absolutetime_info_data_t) / sizeof (natural_t)))


#define TASK_SECURITY_TOKEN 13
#define TASK_SECURITY_TOKEN_COUNT ((mach_msg_type_number_t) (sizeof(security_token_t) / sizeof(natural_t)))


#define TASK_AUDIT_TOKEN 15
#define TASK_AUDIT_TOKEN_COUNT (sizeof(audit_token_t) / sizeof(natural_t))


#pragma pack()






#define TASK_SCHED_TIMESHARE_INFO 10
#define TASK_SCHED_RR_INFO 11
#define TASK_SCHED_FIFO_INFO 12

#define TASK_SCHED_INFO 14
# 79 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/task_policy.h" 1 3 4
# 24 "/usr/include/mach/task_policy.h" 3 4
#define _MACH_TASK_POLICY_H_ 

# 1 "/usr/include/mach/mach_types.h" 1 3 4
# 27 "/usr/include/mach/task_policy.h" 2 3 4
# 45 "/usr/include/mach/task_policy.h" 3 4
typedef natural_t task_policy_flavor_t;
typedef integer_t *task_policy_t;
# 98 "/usr/include/mach/task_policy.h" 3 4
#define TASK_CATEGORY_POLICY 1

enum task_role {
 TASK_RENICED = -1,
 TASK_UNSPECIFIED = 0,
 TASK_FOREGROUND_APPLICATION,
 TASK_BACKGROUND_APPLICATION,
 TASK_CONTROL_APPLICATION,
 TASK_GRAPHICS_SERVER
};

typedef enum task_role task_role_t;

struct task_category_policy {
 task_role_t role;
};

typedef struct task_category_policy task_category_policy_data_t;
typedef struct task_category_policy *task_category_policy_t;

#define TASK_CATEGORY_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (task_category_policy_data_t) / sizeof (integer_t)))
# 80 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/task_special_ports.h" 1 3 4
# 62 "/usr/include/mach/task_special_ports.h" 3 4
#define _MACH_TASK_SPECIAL_PORTS_H_ 

typedef int task_special_port_t;

#define TASK_KERNEL_PORT 1


#define TASK_HOST_PORT 2

#define TASK_NAME_PORT 3

#define TASK_BOOTSTRAP_PORT 4





#define TASK_WIRED_LEDGER_PORT 5

#define TASK_PAGED_LEDGER_PORT 6

#define task_get_wired_ledger_port(task,port) (task_get_special_port((task), TASK_WIRED_LEDGER_PORT, (port)))


#define task_set_wired_ledger_port(task,port) (task_set_special_port((task), TASK_WIRED_LEDGER_PORT, (port)))


#define task_get_paged_ledger_port(task,port) (task_get_special_port((task), TASK_PAGED_LEDGER_PORT, (port)))


#define task_set_paged_ledger_port(task,port) (task_set_special_port((task), TASK_PAGED_LEDGER_PORT, (port)))






#define task_get_kernel_port(task,port) (task_get_special_port((task), TASK_KERNEL_PORT, (port)))


#define task_set_kernel_port(task,port) (task_set_special_port((task), TASK_KERNEL_PORT, (port)))


#define task_get_host_port(task,port) (task_get_special_port((task), TASK_HOST_PORT, (port)))


#define task_set_host_port(task,port) (task_set_special_port((task), TASK_HOST_PORT, (port)))


#define task_get_bootstrap_port(task,port) (task_get_special_port((task), TASK_BOOTSTRAP_PORT, (port)))


#define task_set_bootstrap_port(task,port) (task_set_special_port((task), TASK_BOOTSTRAP_PORT, (port)))
# 81 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/thread_info.h" 1 3 4
# 64 "/usr/include/mach/thread_info.h" 3 4
#define _MACH_THREAD_INFO_H_ 
# 75 "/usr/include/mach/thread_info.h" 3 4
typedef natural_t thread_flavor_t;
typedef integer_t *thread_info_t;

#define THREAD_INFO_MAX (1024)
typedef integer_t thread_info_data_t[(1024)];




#define THREAD_BASIC_INFO 3

struct thread_basic_info {
        time_value_t user_time;
        time_value_t system_time;
        integer_t cpu_usage;
 policy_t policy;
        integer_t run_state;
        integer_t flags;
        integer_t suspend_count;
        integer_t sleep_time;

};

typedef struct thread_basic_info thread_basic_info_data_t;
typedef struct thread_basic_info *thread_basic_info_t;
#define THREAD_BASIC_INFO_COUNT ((mach_msg_type_number_t) (sizeof(thread_basic_info_data_t) / sizeof(natural_t)))






#define TH_USAGE_SCALE 1000





#define TH_STATE_RUNNING 1
#define TH_STATE_STOPPED 2
#define TH_STATE_WAITING 3
#define TH_STATE_UNINTERRUPTIBLE 4

#define TH_STATE_HALTED 5





#define TH_FLAGS_SWAPPED 0x1
#define TH_FLAGS_IDLE 0x2





#define THREAD_SCHED_TIMESHARE_INFO 10
#define THREAD_SCHED_RR_INFO 11
#define THREAD_SCHED_FIFO_INFO 12
# 82 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/thread_policy.h" 1 3 4
# 24 "/usr/include/mach/thread_policy.h" 3 4
#define _MACH_THREAD_POLICY_H_ 
# 45 "/usr/include/mach/thread_policy.h" 3 4
typedef natural_t thread_policy_flavor_t;
typedef integer_t *thread_policy_t;
# 78 "/usr/include/mach/thread_policy.h" 3 4
#define THREAD_STANDARD_POLICY 1

struct thread_standard_policy {
 natural_t no_data;
};

typedef struct thread_standard_policy thread_standard_policy_data_t;
typedef struct thread_standard_policy *thread_standard_policy_t;

#define THREAD_STANDARD_POLICY_COUNT 0
# 101 "/usr/include/mach/thread_policy.h" 3 4
#define THREAD_EXTENDED_POLICY 1

struct thread_extended_policy {
 boolean_t timeshare;
};

typedef struct thread_extended_policy thread_extended_policy_data_t;
typedef struct thread_extended_policy *thread_extended_policy_t;

#define THREAD_EXTENDED_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (thread_extended_policy_data_t) / sizeof (integer_t)))
# 140 "/usr/include/mach/thread_policy.h" 3 4
#define THREAD_TIME_CONSTRAINT_POLICY 2

struct thread_time_constraint_policy {
 uint32_t period;
 uint32_t computation;
 uint32_t constraint;
 boolean_t preemptible;
};

typedef struct thread_time_constraint_policy thread_time_constraint_policy_data_t;

typedef struct thread_time_constraint_policy *thread_time_constraint_policy_t;


#define THREAD_TIME_CONSTRAINT_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (thread_time_constraint_policy_data_t) / sizeof (integer_t)))
# 168 "/usr/include/mach/thread_policy.h" 3 4
#define THREAD_PRECEDENCE_POLICY 3

struct thread_precedence_policy {
 integer_t importance;
};

typedef struct thread_precedence_policy thread_precedence_policy_data_t;
typedef struct thread_precedence_policy *thread_precedence_policy_t;

#define THREAD_PRECEDENCE_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (thread_precedence_policy_data_t) / sizeof (integer_t)))
# 83 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/thread_special_ports.h" 1 3 4
# 62 "/usr/include/mach/thread_special_ports.h" 3 4
#define _MACH_THREAD_SPECIAL_PORTS_H_ 

#define THREAD_KERNEL_PORT 1






#define thread_get_kernel_port(thread,port) (thread_get_special_port((thread), THREAD_KERNEL_PORT, (port)))


#define thread_set_kernel_port(thread,port) (thread_set_special_port((thread), THREAD_KERNEL_PORT, (port)))
# 84 "/usr/include/mach/mach_types.h" 2 3 4


# 1 "/usr/include/mach/clock_types.h" 1 3 4
# 37 "/usr/include/mach/clock_types.h" 3 4
#define _MACH_CLOCK_TYPES_H_ 







typedef int alarm_type_t;
typedef int sleep_type_t;
typedef int clock_id_t;
typedef int clock_flavor_t;
typedef int *clock_attr_t;
typedef int clock_res_t;




struct mach_timespec {
 unsigned int tv_sec;
 clock_res_t tv_nsec;
};
typedef struct mach_timespec mach_timespec_t;




#define SYSTEM_CLOCK 0
#define CALENDAR_CLOCK 1

#define REALTIME_CLOCK 0




#define CLOCK_GET_TIME_RES 1

#define CLOCK_ALARM_CURRES 3
#define CLOCK_ALARM_MINRES 4
#define CLOCK_ALARM_MAXRES 5

#define NSEC_PER_USEC 1000
#define USEC_PER_SEC 1000000
#define NSEC_PER_SEC 1000000000

#define BAD_MACH_TIMESPEC(t) ((t)->tv_nsec < 0 || (t)->tv_nsec >= NSEC_PER_SEC)



#define CMP_MACH_TIMESPEC(t1,t2) ((t1)->tv_sec > (t2)->tv_sec ? +NSEC_PER_SEC : ((t1)->tv_sec < (t2)->tv_sec ? -NSEC_PER_SEC : (t1)->tv_nsec - (t2)->tv_nsec))





#define ADD_MACH_TIMESPEC(t1,t2) do { if (((t1)->tv_nsec += (t2)->tv_nsec) >= NSEC_PER_SEC) { (t1)->tv_nsec -= NSEC_PER_SEC; (t1)->tv_sec += 1; } (t1)->tv_sec += (t2)->tv_sec; } while (0)
# 102 "/usr/include/mach/clock_types.h" 3 4
#define SUB_MACH_TIMESPEC(t1,t2) do { if (((t1)->tv_nsec -= (t2)->tv_nsec) < 0) { (t1)->tv_nsec += NSEC_PER_SEC; (t1)->tv_sec -= 1; } (t1)->tv_sec -= (t2)->tv_sec; } while (0)
# 114 "/usr/include/mach/clock_types.h" 3 4
#define ALRMTYPE 0xff
#define TIME_ABSOLUTE 0x00
#define TIME_RELATIVE 0x01

#define BAD_ALRMTYPE(t) (((t) &~ TIME_RELATIVE) != 0)
# 87 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/vm_attributes.h" 1 3 4
# 65 "/usr/include/mach/vm_attributes.h" 3 4
#define _MACH_VM_ATTRIBUTES_H_ 




typedef unsigned int vm_machine_attribute_t;

#define MATTR_CACHE 1
#define MATTR_MIGRATE 2
#define MATTR_REPLICATE 4




typedef int vm_machine_attribute_val_t;

#define MATTR_VAL_OFF 0
#define MATTR_VAL_ON 1
#define MATTR_VAL_GET 2

#define MATTR_VAL_CACHE_FLUSH 6
#define MATTR_VAL_DCACHE_FLUSH 7
#define MATTR_VAL_ICACHE_FLUSH 8
#define MATTR_VAL_CACHE_SYNC 9
#define MATTR_VAL_CACHE_SYNC 9

#define MATTR_VAL_GET_INFO 10
# 88 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/vm_inherit.h" 1 3 4
# 61 "/usr/include/mach/vm_inherit.h" 3 4
#define _MACH_VM_INHERIT_H_ 







typedef unsigned int vm_inherit_t;





#define VM_INHERIT_SHARE ((vm_inherit_t) 0)
#define VM_INHERIT_COPY ((vm_inherit_t) 1)
#define VM_INHERIT_NONE ((vm_inherit_t) 2)
#define VM_INHERIT_DONATE_COPY ((vm_inherit_t) 3)

#define VM_INHERIT_DEFAULT VM_INHERIT_COPY
#define VM_INHERIT_LAST_VALID VM_INHERIT_NONE
# 89 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/vm_purgable.h" 1 3 4
# 29 "/usr/include/mach/vm_purgable.h" 3 4
#define _MACH_VM_PURGABLE_H_ 







typedef int vm_purgable_t;




#define VM_PURGABLE_SET_STATE ((vm_purgable_t) 0)
#define VM_PURGABLE_GET_STATE ((vm_purgable_t) 1)




#define VM_PURGABLE_STATE_MIN 0
#define VM_PURGABLE_STATE_MAX 2

#define VM_PURGABLE_NONVOLATILE 0
#define VM_PURGABLE_VOLATILE 1
#define VM_PURGABLE_EMPTY 2
# 90 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/vm_behavior.h" 1 3 4
# 33 "/usr/include/mach/vm_behavior.h" 3 4
#define _MACH_VM_BEHAVIOR_H_ 







typedef int vm_behavior_t;
# 51 "/usr/include/mach/vm_behavior.h" 3 4
#define VM_BEHAVIOR_DEFAULT ((vm_behavior_t) 0)
#define VM_BEHAVIOR_RANDOM ((vm_behavior_t) 1)
#define VM_BEHAVIOR_SEQUENTIAL ((vm_behavior_t) 2)
#define VM_BEHAVIOR_RSEQNTL ((vm_behavior_t) 3)
#define VM_BEHAVIOR_WILLNEED ((vm_behavior_t) 4)
#define VM_BEHAVIOR_DONTNEED ((vm_behavior_t) 5)
# 91 "/usr/include/mach/mach_types.h" 2 3 4




# 1 "/usr/include/mach/vm_region.h" 1 3 4
# 33 "/usr/include/mach/vm_region.h" 3 4
#define _MACH_VM_REGION_H_ 







# 1 "/usr/include/mach/machine/vm_param.h" 1 3 4
# 24 "/usr/include/mach/machine/vm_param.h" 3 4
#define _MACH_MACHINE_VM_PARAM_H_ 


# 1 "/usr/include/mach/ppc/vm_param.h" 1 3 4
# 28 "/usr/include/mach/ppc/vm_param.h" 3 4
#define _MACH_PPC_VM_PARAM_H_ 





#define BYTE_SIZE 8

#define PPC_PGBYTES 4096
#define PPC_PGSHIFT 12

#define PAGE_SIZE PPC_PGBYTES
#define PAGE_SHIFT PPC_PGSHIFT
#define PAGE_MASK (PAGE_SIZE - 1)







#define VM_MAX_PAGE_ADDRESS 0x0007FFFFFFFFF000ULL


#define MACH_VM_MIN_ADDRESS ((mach_vm_offset_t) 0)
#define MACH_VM_MAX_ADDRESS ((mach_vm_offset_t) VM_MAX_PAGE_ADDRESS)
# 67 "/usr/include/mach/ppc/vm_param.h" 3 4
#define VM_MIN_ADDRESS ((vm_offset_t) 0)
#define VM_MAX_ADDRESS ((vm_offset_t) (VM_MAX_PAGE_ADDRESS & 0xFFFFFFFF))
#define USER_STACK_END ((vm_offset_t) 0xffff0000U)
# 28 "/usr/include/mach/machine/vm_param.h" 2 3 4
# 42 "/usr/include/mach/vm_region.h" 2 3 4





#pragma pack(4)







#define VM_REGION_INFO_MAX (1024)
typedef int *vm_region_info_t;
typedef int *vm_region_info_64_t;
typedef int *vm_region_recurse_info_t;
typedef int *vm_region_recurse_info_64_t;
typedef int vm_region_flavor_t;
typedef int vm_region_info_data_t[(1024)];

#define VM_REGION_BASIC_INFO_64 9
struct vm_region_basic_info_64 {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 boolean_t shared;
 boolean_t reserved;
 memory_object_offset_t offset;
 vm_behavior_t behavior;
 unsigned short user_wired_count;
};
typedef struct vm_region_basic_info_64 *vm_region_basic_info_64_t;
typedef struct vm_region_basic_info_64 vm_region_basic_info_data_64_t;

#define VM_REGION_BASIC_INFO_COUNT_64 ((mach_msg_type_number_t) (sizeof(vm_region_basic_info_data_64_t)/sizeof(int)))







#define VM_REGION_BASIC_INFO 10






struct vm_region_basic_info {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 boolean_t shared;
 boolean_t reserved;
 uint32_t offset;
 vm_behavior_t behavior;
 unsigned short user_wired_count;
};

typedef struct vm_region_basic_info *vm_region_basic_info_t;
typedef struct vm_region_basic_info vm_region_basic_info_data_t;

#define VM_REGION_BASIC_INFO_COUNT ((mach_msg_type_number_t) (sizeof(vm_region_basic_info_data_t)/sizeof(int)))


#define VM_REGION_EXTENDED_INFO 11

#define SM_COW 1
#define SM_PRIVATE 2
#define SM_EMPTY 3
#define SM_SHARED 4
#define SM_TRUESHARED 5
#define SM_PRIVATE_ALIASED 6
#define SM_SHARED_ALIASED 7
# 127 "/usr/include/mach/vm_region.h" 3 4
struct vm_region_extended_info {
 vm_prot_t protection;
        unsigned int user_tag;
        unsigned int pages_resident;
        unsigned int pages_shared_now_private;
        unsigned int pages_swapped_out;
        unsigned int pages_dirtied;
        unsigned int ref_count;
        unsigned short shadow_depth;
        unsigned char external_pager;
        unsigned char share_mode;
};

typedef struct vm_region_extended_info *vm_region_extended_info_t;
typedef struct vm_region_extended_info vm_region_extended_info_data_t;

#define VM_REGION_EXTENDED_INFO_COUNT ((mach_msg_type_number_t) (sizeof(vm_region_extended_info_data_t)/sizeof(int)))



#define VM_REGION_TOP_INFO 12

struct vm_region_top_info {
        unsigned int obj_id;
        unsigned int ref_count;
        unsigned int private_pages_resident;
        unsigned int shared_pages_resident;
        unsigned char share_mode;
};

typedef struct vm_region_top_info *vm_region_top_info_t;
typedef struct vm_region_top_info vm_region_top_info_data_t;

#define VM_REGION_TOP_INFO_COUNT ((mach_msg_type_number_t) (sizeof(vm_region_top_info_data_t)/sizeof(int)))
# 185 "/usr/include/mach/vm_region.h" 3 4
struct vm_region_submap_info {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 uint32_t offset;
        unsigned int user_tag;
        unsigned int pages_resident;
        unsigned int pages_shared_now_private;
        unsigned int pages_swapped_out;
        unsigned int pages_dirtied;
        unsigned int ref_count;
        unsigned short shadow_depth;
        unsigned char external_pager;
        unsigned char share_mode;
 boolean_t is_submap;
 vm_behavior_t behavior;
 vm_offset_t object_id;
 unsigned short user_wired_count;
};

typedef struct vm_region_submap_info *vm_region_submap_info_t;
typedef struct vm_region_submap_info vm_region_submap_info_data_t;

#define VM_REGION_SUBMAP_INFO_COUNT ((mach_msg_type_number_t) (sizeof(vm_region_submap_info_data_t)/sizeof(int)))


struct vm_region_submap_info_64 {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 memory_object_offset_t offset;
        unsigned int user_tag;
        unsigned int pages_resident;
        unsigned int pages_shared_now_private;
        unsigned int pages_swapped_out;
        unsigned int pages_dirtied;
        unsigned int ref_count;
        unsigned short shadow_depth;
        unsigned char external_pager;
        unsigned char share_mode;
 boolean_t is_submap;
 vm_behavior_t behavior;
 vm_offset_t object_id;
 unsigned short user_wired_count;
};

typedef struct vm_region_submap_info_64 *vm_region_submap_info_64_t;
typedef struct vm_region_submap_info_64 vm_region_submap_info_data_64_t;

#define VM_REGION_SUBMAP_INFO_COUNT_64 ((mach_msg_type_number_t) (sizeof(vm_region_submap_info_data_64_t)/sizeof(int)))


struct mach_vm_read_entry {
 mach_vm_address_t address;
 mach_vm_size_t size;
};

struct vm_read_entry {
 vm_address_t address;
 vm_size_t size;
};

#define VM_MAP_ENTRY_MAX (256)

typedef struct mach_vm_read_entry mach_vm_read_entry_t[(256)];
typedef struct vm_read_entry vm_read_entry_t[(256)];

#pragma pack()
# 96 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/kmod.h" 1 3 4
# 24 "/usr/include/mach/kmod.h" 3 4
#define _MACH_KMOD_H_ 





#define KMOD_CNTL_START 1
#define KMOD_CNTL_STOP 2
#define KMOD_CNTL_RETAIN 3
#define KMOD_CNTL_RELEASE 4
#define KMOD_CNTL_GET_CMD 5

#define KMOD_PACK_IDS(from,to) (((unsigned long)from << 16) | (unsigned long)to)
#define KMOD_UNPACK_FROM_ID(i) ((unsigned long)i >> 16)
#define KMOD_UNPACK_TO_ID(i) ((unsigned long)i & 0xffff)

typedef int kmod_t;
typedef int kmod_control_flavor_t;
typedef void* kmod_args_t;

#define KMOD_MAX_NAME 64

#pragma pack(4)


typedef struct kmod_reference {
 struct kmod_reference *next;
 struct kmod_info *info;
} kmod_reference_t;

#pragma pack()





#define KMOD_RETURN_SUCCESS KERN_SUCCESS
#define KMOD_RETURN_FAILURE KERN_FAILURE

typedef kern_return_t kmod_start_func_t(struct kmod_info *ki, void *data);
typedef kern_return_t kmod_stop_func_t(struct kmod_info *ki, void *data);

#pragma pack(4)



typedef struct kmod_info {
 struct kmod_info *next;
 int info_version;
 int id;
 char name[64];
 char version[64];
 int reference_count;
 kmod_reference_t *reference_list;
 vm_address_t address;
 vm_size_t size;
 vm_size_t hdr_size;
        kmod_start_func_t *start;
        kmod_stop_func_t *stop;
} kmod_info_t;

#pragma pack()

typedef kmod_info_t *kmod_info_array_t;

#define KMOD_INFO_NAME kmod_info
#define KMOD_INFO_VERSION 1

#define KMOD_DECL(name,version) static kmod_start_func_t name ## _module_start; static kmod_stop_func_t name ## _module_stop; kmod_info_t KMOD_INFO_NAME = { 0, KMOD_INFO_VERSION, -1, { #name }, { version }, -1, 0, 0, 0, 0, name ## _module_start, name ## _module_stop };







#define KMOD_EXPLICIT_DECL(name,version,start,stop) kmod_info_t KMOD_INFO_NAME = { 0, KMOD_INFO_VERSION, -1, { #name }, { version }, -1, 0, 0, 0, 0, start, stop };





#define KMOD_LIB_DECL(name,version) kmod_info_t KMOD_INFO_NAME = { 0, KMOD_INFO_VERSION, -1, { #name }, { version }, -1, 0, 0, 0, 0, kmod_default_start, kmod_default_stop };
# 117 "/usr/include/mach/kmod.h" 3 4
#define KMOD_LOAD_EXTENSION_PACKET 1
#define KMOD_LOAD_WITH_DEPENDENCIES_PACKET 2


#define KMOD_IOKIT_START_RANGE_PACKET 0x1000
#define KMOD_IOKIT_END_RANGE_PACKET 0x1fff

typedef struct kmod_load_extension_cmd {
 int type;
 char name[64];
} kmod_load_extension_cmd_t;

typedef struct kmod_load_with_dependencies_cmd {
 int type;
 char name[64];
 char dependencies[1][64];
} kmod_load_with_dependencies_cmd_t;

typedef struct kmod_generic_cmd {
 int type;
 char data[1];
} kmod_generic_cmd_t;
# 97 "/usr/include/mach/mach_types.h" 2 3 4






typedef mach_port_t task_t;
typedef mach_port_t task_name_t;
typedef mach_port_t thread_t;
typedef mach_port_t thread_act_t;
typedef mach_port_t ipc_space_t;
typedef mach_port_t host_t;
typedef mach_port_t host_priv_t;
typedef mach_port_t host_security_t;
typedef mach_port_t processor_t;
typedef mach_port_t processor_set_t;
typedef mach_port_t processor_set_control_t;
typedef mach_port_t semaphore_t;
typedef mach_port_t lock_set_t;
typedef mach_port_t ledger_t;
typedef mach_port_t alarm_t;
typedef mach_port_t clock_serv_t;
typedef mach_port_t clock_ctrl_t;







typedef processor_set_t processor_set_name_t;




typedef mach_port_t clock_reply_t;
typedef mach_port_t bootstrap_t;
typedef mach_port_t mem_entry_name_port_t;
typedef mach_port_t exception_handler_t;
typedef exception_handler_t *exception_handler_array_t;
typedef mach_port_t vm_task_entry_t;
typedef mach_port_t io_master_t;
typedef mach_port_t UNDServerRef;
# 148 "/usr/include/mach/mach_types.h" 3 4
typedef task_t *task_array_t;
typedef thread_t *thread_array_t;
typedef processor_set_t *processor_set_array_t;
typedef processor_set_t *processor_set_name_array_t;
typedef processor_t *processor_array_t;
typedef thread_act_t *thread_act_array_t;
typedef ledger_t *ledger_array_t;







typedef task_t task_port_t;
typedef task_array_t task_port_array_t;
typedef thread_t thread_port_t;
typedef thread_array_t thread_port_array_t;
typedef ipc_space_t ipc_space_port_t;
typedef host_t host_name_t;
typedef host_t host_name_port_t;
typedef processor_set_t processor_set_port_t;
typedef processor_set_t processor_set_name_port_t;
typedef processor_set_array_t processor_set_name_port_array_t;
typedef processor_set_t processor_set_control_port_t;
typedef processor_t processor_port_t;
typedef processor_array_t processor_port_array_t;
typedef thread_act_t thread_act_port_t;
typedef thread_act_array_t thread_act_port_array_t;
typedef semaphore_t semaphore_port_t;
typedef lock_set_t lock_set_port_t;
typedef ledger_t ledger_port_t;
typedef ledger_array_t ledger_port_array_t;
typedef alarm_t alarm_port_t;
typedef clock_serv_t clock_serv_port_t;
typedef clock_ctrl_t clock_ctrl_port_t;
typedef exception_handler_t exception_port_t;
typedef exception_handler_array_t exception_port_arrary_t;


#define TASK_NULL ((task_t) 0)
#define TASK_NAME_NULL ((task_name_t) 0)
#define THREAD_NULL ((thread_t) 0)
#define THR_ACT_NULL ((thread_act_t) 0)
#define IPC_SPACE_NULL ((ipc_space_t) 0)
#define HOST_NULL ((host_t) 0)
#define HOST_PRIV_NULL ((host_priv_t)0)
#define HOST_SECURITY_NULL ((host_security_t)0)
#define PROCESSOR_SET_NULL ((processor_set_t) 0)
#define PROCESSOR_NULL ((processor_t) 0)
#define SEMAPHORE_NULL ((semaphore_t) 0)
#define LOCK_SET_NULL ((lock_set_t) 0)
#define LEDGER_NULL ((ledger_t) 0)
#define ALARM_NULL ((alarm_t) 0)
#define CLOCK_NULL ((clock_t) 0)
#define UND_SERVER_NULL ((UNDServerRef) 0)

typedef natural_t ledger_item_t;
#define LEDGER_ITEM_INFINITY ((ledger_item_t) (~0))

typedef mach_vm_offset_t *emulation_vector_t;
typedef char *user_subsystem_t;





# 1 "/usr/include/mach/std_types.h" 1 3 4
# 58 "/usr/include/mach/std_types.h" 3 4
#define _MACH_STD_TYPES_H_ 
# 216 "/usr/include/mach/mach_types.h" 2 3 4
# 29 "/usr/include/malloc/malloc.h" 2 3 4





typedef struct _malloc_zone_t {


    void *reserved1;
    void *reserved2;
    size_t (*size)(struct _malloc_zone_t *zone, const void *ptr);
    void *(*malloc)(struct _malloc_zone_t *zone, size_t size);
    void *(*calloc)(struct _malloc_zone_t *zone, size_t num_items, size_t size);
    void *(*valloc)(struct _malloc_zone_t *zone, size_t size);
    void (*free)(struct _malloc_zone_t *zone, void *ptr);
    void *(*realloc)(struct _malloc_zone_t *zone, void *ptr, size_t size);
    void (*destroy)(struct _malloc_zone_t *zone);
    const char *zone_name;


    unsigned (*batch_malloc)(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested);
    void (*batch_free)(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed);

    struct malloc_introspection_t *introspect;
    unsigned version;
} malloc_zone_t;



extern malloc_zone_t *malloc_default_zone(void);


extern malloc_zone_t *malloc_create_zone(vm_size_t start_size, unsigned flags);


extern void malloc_destroy_zone(malloc_zone_t *zone);




extern void *malloc_zone_malloc(malloc_zone_t *zone, size_t size);


extern void *malloc_zone_calloc(malloc_zone_t *zone, size_t num_items, size_t size);


extern void *malloc_zone_valloc(malloc_zone_t *zone, size_t size);


extern void malloc_zone_free(malloc_zone_t *zone, void *ptr);


extern void *malloc_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size);


extern malloc_zone_t *malloc_zone_from_ptr(const void *ptr);



extern size_t malloc_size(const void *ptr);




extern unsigned malloc_zone_batch_malloc(malloc_zone_t *zone, size_t size, void **results, unsigned num_requested);


extern void malloc_zone_batch_free(malloc_zone_t *zone, void **to_be_freed, unsigned num);




extern void malloc_zone_register(malloc_zone_t *zone);



extern void malloc_zone_unregister(malloc_zone_t *zone);



extern void malloc_set_zone_name(malloc_zone_t *zone, const char *name);


extern const char *malloc_get_zone_name(malloc_zone_t *zone);


typedef struct {
    vm_address_t address;
    vm_size_t size;
} vm_range_t;

typedef struct malloc_statistics_t {
    unsigned blocks_in_use;
    size_t size_in_use;
    size_t max_size_in_use;
    size_t size_allocated;
} malloc_statistics_t;

typedef kern_return_t memory_reader_t(task_t remote_task, vm_address_t remote_address, vm_size_t size, void **local_memory);



#define MALLOC_PTR_IN_USE_RANGE_TYPE 1
#define MALLOC_PTR_REGION_RANGE_TYPE 2
#define MALLOC_ADMIN_REGION_RANGE_TYPE 4

typedef void vm_range_recorder_t(task_t, void *, unsigned type, vm_range_t *, unsigned);


typedef struct malloc_introspection_t {
    kern_return_t (*enumerator)(task_t task, void *, unsigned type_mask, vm_address_t zone_address, memory_reader_t reader, vm_range_recorder_t recorder);
    size_t (*good_size)(malloc_zone_t *zone, size_t size);
    boolean_t (*check)(malloc_zone_t *zone);
    void (*print)(malloc_zone_t *zone, boolean_t verbose);
    void (*log)(malloc_zone_t *zone, void *address);
    void (*force_lock)(malloc_zone_t *zone);
    void (*force_unlock)(malloc_zone_t *zone);
    void (*statistics)(malloc_zone_t *zone, malloc_statistics_t *stats);
} malloc_introspection_t;

extern void malloc_printf(const char *format, ...);







extern kern_return_t malloc_get_all_zones(task_t task, memory_reader_t reader, vm_address_t **addresses, unsigned *count);





extern void malloc_zone_print_ptr_info(void *ptr);


extern boolean_t malloc_zone_check(malloc_zone_t *zone);


extern void malloc_zone_print(malloc_zone_t *zone, boolean_t verbose);


extern void malloc_zone_statistics(malloc_zone_t *zone, malloc_statistics_t *stats);


extern void malloc_zone_log(malloc_zone_t *zone, void *address);





struct mstats {
    size_t bytes_total;
    size_t chunks_used;
    size_t bytes_used;
    size_t chunks_free;
    size_t bytes_free;
};

extern struct mstats mstats(void);


# 4562 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 4572 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define Perl_safesysmalloc_size(where) malloc_size(where)







#define Perl_malloc_good_size(how_much) malloc_good_size(how_much)







typedef int (*runops_proc_t)(PerlInterpreter* my_perl __attribute__((unused)));
typedef void (*share_proc_t) (PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
typedef int (*thrhook_proc_t) (PerlInterpreter* my_perl __attribute__((unused)));
typedef OP* (*PPADDR_t[]) (PerlInterpreter* my_perl __attribute__((unused)));
typedef _Bool (*destroyable_proc_t) (PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
typedef void (*despatch_signals_proc_t) (PerlInterpreter* my_perl __attribute__((unused)));
# 4604 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
extern char ** environ;




#define PERL_PATCHLEVEL_H_IMPLICIT 
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/patchlevel.h" 1
# 16 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/patchlevel.h"
#define PERL_REVISION 5
#define PERL_VERSION 22
#define PERL_SUBVERSION 1
# 37 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/patchlevel.h"
#define PERL_API_REVISION 5
#define PERL_API_VERSION 22
#define PERL_API_SUBVERSION 0






#define __PATCHLEVEL_H_INCLUDED__ 
# 4611 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
#undef PERL_PATCHLEVEL_H_IMPLICIT

#define PERL_VERSION_STRING STRINGIFY(PERL_REVISION) "." STRINGIFY(PERL_VERSION) "." STRINGIFY(PERL_SUBVERSION)



#define PERL_API_VERSION_STRING STRINGIFY(PERL_API_REVISION) "." STRINGIFY(PERL_API_VERSION) "." STRINGIFY(PERL_API_SUBVERSION)






extern const char PL_warn_uninit[]
  ;
extern const char PL_warn_uninit_sv[]
  ;
extern const char PL_warn_nosemi[]
  ;
extern const char PL_warn_reserved[]
  ;
extern const char PL_warn_nl[]
  ;
extern const char PL_no_wrongref[]
  ;


extern const char PL_no_symref[] __attribute__((deprecated))
  ;
extern const char PL_no_symref_sv[]
  ;

extern const char PL_no_usym[]
  ;
extern const char PL_no_aelem[]
  ;
extern const char PL_no_helem_sv[]
  ;
extern const char PL_no_modify[]
  ;
extern const char PL_no_mem[sizeof("Out of memory!\n")]
  ;
extern const char PL_no_security[]
  ;
extern const char PL_no_sock_func[]
  ;
extern const char PL_no_dir_func[]
  ;
extern const char PL_no_func[]
  ;
extern const char PL_no_myglob[]
  ;
extern const char PL_no_localize_ref[]
  ;
extern const char PL_memory_wrap[]
  ;

extern const char PL_Yes[]
  ;
extern const char PL_No[]
  ;
extern const char PL_hexdigit[]
  ;



extern const char PL_sh_path[]
  ;



extern const char PL_cshname[]
  ;
#define PL_cshlen (sizeof(CSH "") - 1)






extern const U8 PL_revision
  ;
extern const U8 PL_version
  ;
extern const U8 PL_subversion
  ;

extern const char PL_uuemap[65]
  ;
# 4719 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
extern const char PL_uudmap[256];
extern const char PL_bitcount[256];
extern const char* const PL_sig_name[];
extern const int PL_sig_num[];
# 4889 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
extern const unsigned char PL_fold[];
extern const unsigned char PL_fold_latin1[];
extern const unsigned char PL_mod_latin1_uc[];
extern const unsigned char PL_latin1_lc[];
# 4933 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
extern unsigned char PL_fold_locale[];
# 5010 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
extern const unsigned char PL_freq[];
# 5032 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
extern const char* PL_block_type[];
# 5158 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
extern const char PL_bincompat_options[];



#define PERL_SET_PHASE(new_phase) PHASE_CHANGE_PROBE(PL_phase_names[new_phase], PL_phase_names[PL_phase]); PL_phase = new_phase;






enum perl_phase {
    PERL_PHASE_CONSTRUCT = 0,
    PERL_PHASE_START = 1,
    PERL_PHASE_CHECK = 2,
    PERL_PHASE_INIT = 3,
    PERL_PHASE_RUN = 4,
    PERL_PHASE_END = 5,
    PERL_PHASE_DESTRUCT = 6
};
# 5190 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
extern const char *const PL_phase_names[];






#define PL_dirty (PL_phase == PERL_PHASE_DESTRUCT)

#define PL_amagic_generation PL_na


#define PL_hints PL_compiling.cop_hints


# 5221 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define LEX_NOTPARSING 11

typedef enum {
    XOPERATOR,
    XTERM,
    XREF,
    XSTATE,
    XBLOCK,
    XATTRBLOCK,
    XATTRTERM,
    XTERMBLOCK,
    XBLOCKTERM,
    XPOSTDEREF,
    XTERMORDORDOR

} expectation;
# 5250 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define HINT_INTEGER 0x00000001
#define HINT_STRICT_REFS 0x00000002
#define HINT_LOCALE 0x00000004
#define HINT_BYTES 0x00000008
#define HINT_LOCALE_PARTIAL 0x00000010

#define HINT_EXPLICIT_STRICT_REFS 0x00000020
#define HINT_EXPLICIT_STRICT_SUBS 0x00000040
#define HINT_EXPLICIT_STRICT_VARS 0x00000080

#define HINT_BLOCK_SCOPE 0x00000100
#define HINT_STRICT_SUBS 0x00000200
#define HINT_STRICT_VARS 0x00000400
#define HINT_UNI_8_BIT 0x00000800


#define HINT_NEW_INTEGER 0x00001000
#define HINT_NEW_FLOAT 0x00002000
#define HINT_NEW_BINARY 0x00004000
#define HINT_NEW_STRING 0x00008000
#define HINT_NEW_RE 0x00010000
#define HINT_LOCALIZE_HH 0x00020000
#define HINT_LEXICAL_IO_IN 0x00040000
#define HINT_LEXICAL_IO_OUT 0x00080000

#define HINT_RE_TAINT 0x00100000
#define HINT_RE_EVAL 0x00200000

#define HINT_FILETEST_ACCESS 0x00400000
#define HINT_UTF8 0x00800000

#define HINT_NO_AMAGIC 0x01000000

#define HINT_RE_FLAGS 0x02000000

#define HINT_FEATURE_MASK 0x1c000000
# 5294 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define HINT_SORT_SORT_BITS 0x000000FF
#define HINT_SORT_QUICKSORT 0x00000001
#define HINT_SORT_MERGESORT 0x00000002
#define HINT_SORT_STABLE 0x00000100



#define SAWAMPERSAND_LEFT 1
#define SAWAMPERSAND_MIDDLE 2
#define SAWAMPERSAND_RIGHT 4


#define PL_sawampersand (SAWAMPERSAND_LEFT|SAWAMPERSAND_MIDDLE|SAWAMPERSAND_RIGHT)




#define DBVARMG_SINGLE 0
#define DBVARMG_TRACE 1
#define DBVARMG_SIGNAL 2
#define DBVARMG_COUNT 3

#define PL_DBsingle_iv (PL_DBcontrol[DBVARMG_SINGLE])
#define PL_DBtrace_iv (PL_DBcontrol[DBVARMG_TRACE])
#define PL_DBsignal_iv (PL_DBcontrol[DBVARMG_SIGNAL])


#define RsSNARF(sv) (! SvOK(sv))
#define RsSIMPLE(sv) (SvOK(sv) && (! SvPOK(sv) || SvCUR(sv)))
#define RsPARA(sv) (SvPOK(sv) && ! SvCUR(sv))
#define RsRECORD(sv) (SvROK(sv) && (SvIV(SvRV(sv)) > 0))





struct perl_debug_pad {
  SV pad[3];
};

#define PERL_DEBUG_PAD(i) &(PL_debug_pad.pad[i])
#define PERL_DEBUG_PAD_ZERO(i) (SvPVX(PERL_DEBUG_PAD(i))[0] = 0, (((XPV*) SvANY(PERL_DEBUG_PAD(i)))->xpv_cur = 0), PERL_DEBUG_PAD(i))




typedef void (*peep_t)(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
typedef regexp* (*regcomp_t) (PerlInterpreter* my_perl __attribute__((unused)), char* exp, char* xend, PMOP* pm);
typedef I32 (*regexec_t) (PerlInterpreter* my_perl __attribute__((unused)), regexp* prog, char* stringarg,
          char* strend, char* strbeg, I32 minend,
          SV* screamer, void* data, U32 flags);
typedef char* (*re_intuit_start_t) (PerlInterpreter* my_perl __attribute__((unused)), regexp *prog, SV *sv,
      char *strpos, char *strend,
      U32 flags,
      re_scream_pos_data *d);
typedef SV* (*re_intuit_string_t) (PerlInterpreter* my_perl __attribute__((unused)), regexp *prog);
typedef void (*regfree_t) (PerlInterpreter* my_perl __attribute__((unused)), struct regexp* r);
typedef regexp* (*regdupe_t) (PerlInterpreter* my_perl __attribute__((unused)), const regexp* r, CLONE_PARAMS *param);
typedef I32 (*re_fold_t)(const char *, char const *, I32);

typedef void (*DESTRUCTORFUNC_NOCONTEXT_t) (void*);
typedef void (*DESTRUCTORFUNC_t) (PerlInterpreter* my_perl __attribute__((unused)), void*);
typedef void (*SVFUNC_t) (PerlInterpreter* my_perl __attribute__((unused)), SV* const);
typedef I32 (*SVCOMPARE_t) (PerlInterpreter* my_perl __attribute__((unused)), SV* const, SV* const);
typedef void (*XSINIT_t) (PerlInterpreter* my_perl __attribute__((unused)));
typedef void (*ATEXIT_t) (PerlInterpreter* my_perl __attribute__((unused)), void*);
typedef void (*XSUBADDR_t) (PerlInterpreter* my_perl __attribute__((unused)), CV *);

typedef OP* (*Perl_ppaddr_t)(PerlInterpreter* my_perl __attribute__((unused)));
typedef OP* (*Perl_check_t) (PerlInterpreter* my_perl __attribute__((unused)), OP*);
typedef void(*Perl_ophook_t)(PerlInterpreter* my_perl __attribute__((unused)), OP*);
typedef int (*Perl_keyword_plugin_t)(PerlInterpreter* my_perl __attribute__((unused)), char*, STRLEN, OP**);
typedef void(*Perl_cpeep_t)(PerlInterpreter* my_perl __attribute__((unused)), OP *, OP *);

typedef void(*globhook_t)(PerlInterpreter* my_perl __attribute__((unused)));

#define KEYWORD_PLUGIN_DECLINE 0
#define KEYWORD_PLUGIN_STMT 1
#define KEYWORD_PLUGIN_EXPR 2


typedef struct exitlistentry {
    void (*fn) (PerlInterpreter* my_perl __attribute__((unused)), void*);
    void *ptr;
} PerlExitListEntry;
# 5405 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERLVAR(prefix,var,type) type prefix ##var;


#define PERLVARA(prefix,var,n,type) type prefix ##var[n];


#define PERLVARI(prefix,var,type,init) type prefix ##var;


#define PERLVARIC(prefix,var,type,init) type prefix ##var;

struct interpreter {
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/intrpvar.h" 1
# 35 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/intrpvar.h"
SV ** Istack_sp;
OP * Iop;
SV ** Icurpad;

SV ** Istack_base;
SV ** Istack_max;

ANY * Isavestack;

I32 Isavestack_ix;
I32 Isavestack_max;

I32 * Iscopestack;
I32 Iscopestack_ix;
I32 Iscopestack_max;

SV ** Itmps_stack;
ssize_t Itmps_ix;
ssize_t Itmps_floor;
ssize_t Itmps_max;

U32 Isub_generation;

I32 * Imarkstack;

I32 * Imarkstack_ptr;
I32 * Imarkstack_max;

_Bool Isawalias;




U8 Ihash_rand_bits_enabled;

UV Ihash_rand_bits;

HV * Istrtab;


UNOP_AUX_item * Imultideref_pc;


PMOP * Icurpm;

_Bool Itainting;
_Bool Itainted;
U16 Idelaymagic;
U8 Ilocalizing;
U8 Iin_eval;
GV * Idefgv;
# 95 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/intrpvar.h"
U8 Idowarn;




#define PERL___I 1

I8 Iutf8cache;
#undef PERL___I



HV * Idefstash;
HV * Icurstash;

COP * Icurcop;
AV * Icurstack;
PERL_SI * Icurstackinfo;
AV * Imainstack;



IV Isv_count;

SV * Isv_root;
SV * Isv_arenaroot;


PMOP* Ireg_curpm;





regmatch_slab * Iregmatch_slab;
regmatch_state * Iregmatch_state;

PAD * Icomppad;
# 149 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/intrpvar.h"
SV Isv_undef;
SV Isv_no;
SV Isv_yes;
PADNAME Ipadname_undef;
PADNAME Ipadname_const;
SV * ISv;

yy_parser * Iparser;

HV * Istashcache;
# 172 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/intrpvar.h"
STRLEN Ina;



struct stat Istatbuf;
struct stat Istatcache;
GV * Istatgv;
SV * Istatname;



struct tms Itimesbuf;
# 202 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/intrpvar.h"
SV * Irs;
GV * Ilast_in_gv;
GV * Iofsgv;
GV * Idefoutgv;
const char * Ichopset;
SV * Iformtarget;
SV * Ibodytarget;
SV * Itoptarget;


OP * Irestartop;
JMPENV * Irestartjmpenv;

JMPENV * Itop_env;
JMPENV Istart_env;
SV * Ierrors;


HE* Ihv_fetch_ent_mh;

OP* Ilastgotoprobe;


OP * Isortcop;
HV * Isortstash;
GV * Ifirstgv;
GV * Isecondgv;


char * Iefloatbuf;
STRLEN Iefloatsize;

U16 Idumpindent;


U8 Iexit_flags;

_Bool Iutf8locale;
_Bool Iin_utf8_CTYPE_locale;

    SV * Iwarn_locale;


char * Icolors[6];
# 268 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/intrpvar.h"
peep_t Ipeepp;
# 292 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/intrpvar.h"
peep_t Irpeepp;
# 306 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/intrpvar.h"
Perl_ophook_t Iopfreehook;

char ** Iwatchaddr;
char * Iwatchok;

U32 Iperldb;

U32 Isignals;

int Ireentrant_retint;


int Iorigargc;
char ** Iorigargv;
GV * Ienvgv;
GV * Iincgv;
GV * Ihintgv;
char * Iorigfilename;
const char * Ixsubfilename;
SV * Idiehook;
SV * Iwarnhook;


SV * Ipatchlevel;
const char * const * Ilocalpatches;
const char * Isplitstr;

_Bool Iminus_c;
_Bool Iminus_n;
_Bool Iminus_p;
_Bool Iminus_l;
_Bool Iminus_a;
_Bool Iminus_F;
_Bool Idoswitches;
_Bool Iminus_E;

char * Iinplace;
SV * Ie_script;

time_t Ibasetime;

I32 Imaxsysfd;

I32 Istatusvalue;



I32 Istatusvalue_posix;


int Isig_pending;
int * Ipsig_pend;


GV * Istdingv;
GV * Istderrgv;
GV * Iargvgv;
GV * Iargvoutgv;
AV * Iargvout_stack;


GV * Ireplgv;


GV * Ierrgv;


GV * IDBgv;
GV * IDBline;
# 398 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/intrpvar.h"
GV * IDBsub;
SV * IDBsingle;
SV * IDBtrace;
SV * IDBsignal;
AV * Idbargs;

IV IDBcontrol[3];


HV * Idebstash;
HV * Iglobalstash;
SV * Icurstname;
AV * Ibeginav;
AV * Iendav;
AV * Iunitcheckav;
AV * Icheckav;
AV * Iinitav;


AV * Ifdpid;


char * Iop_mask;


CV * Imain_cv;
OP * Imain_root;
OP * Imain_start;
OP * Ieval_root;
OP * Ieval_start;


COP * Icurcopdb;

int Ifilemode;
int Ilastfd;
char * Ioldname;
const char ** IArgv;
char * ICmd;




AV * Ipreambleav;
SV * Imess_sv;
SV * Iors_sv;


int Iforkprocess;


I32 Igensym;
_Bool Icv_has_eval;
_Bool Itaint_warn;
U16 Ilaststype;

int Ilaststatval;

I32 Imodcount;



I32 Iexitlistlen;
PerlExitListEntry * Iexitlist;
# 476 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/intrpvar.h"
HV * Imodglobal;


U32 * Iprofiledata;

COP Icompiling;

CV * Icompcv;
PADNAMELIST * Icomppad_name;
I32 Icomppad_name_fill;
I32 Icomppad_name_floor;







CV * IDBcv;
int Igeneration;

U32 Iunicode;

_Bool Iin_clean_objs;
_Bool Iin_clean_all;
_Bool Inomemok;
_Bool Isavebegin;


uid_t Idelaymagic_uid;
uid_t Idelaymagic_euid;
gid_t Idelaymagic_gid;
gid_t Idelaymagic_egid;
U32 Ian;


U32 Ibreakable_sub_gen;





#define PERL_COP_SEQMAX 0

U32 Icop_seqmax;
#undef PERL_COP_SEQMAX

U32 Ievalseq;
U32 Iorigalen;
char ** Iorigenviron;



char * Iosname;

Sighandler_t Isighandlerp;

void* Ibody_roots[(SVt_LAST)];

volatile U32 Idebug;

int Imaxo;

runops_proc_t Irunops;

SV * Isubname;

I32 Isubline;
I32 Imin_intro_pending;

I32 Imax_intro_pending;
I32 Ipadix;

I32 Iconstpadix;

I32 Ipadix_floor;


char * Icollation_name;
size_t Icollxfrm_base;
size_t Icollxfrm_mult;
U32 Icollation_ix;
_Bool Icollation_standard;







_Bool Iunsafe;
_Bool Icolorset;




enum perl_phase Iphase;

_Bool Iin_load_module;




signed char Iperl_destruct_level;



int Inumeric_standard;

_Bool Inumeric_local;

char * Inumeric_name;
SV * Inumeric_radix_sv;




SV * ILatin1;
SV * IUpperLatin1;
SV * IAboveLatin1;
SV * IInBitmap;

SV * INonL1NonFinalFold;
SV * IHasMultiCharFold;


SV * Iutf8_mark;
SV * Iutf8_toupper;
SV * Iutf8_totitle;
SV * Iutf8_tolower;
SV * Iutf8_tofold;
SV * Iutf8_charname_begin;
SV * Iutf8_charname_continue;

SV * Iutf8_swash_ptrs[10];
SV * IPosix_ptrs[(15 + 1)];
SV * IXPosix_ptrs[(15 + 1)];
SV * IGCB_invlist;
SV * ISB_invlist;
SV * IWB_invlist;

HV * Ilast_swash_hv;
U8 * Ilast_swash_tmps;
STRLEN Ilast_swash_slen;
U8 Ilast_swash_key[13 -1];
U8 Ilast_swash_klen;







_Bool Ipad_reset_pending;
_Bool Isrand_called;



SV ** Ipsig_ptr;



SV ** Ipsig_name;
# 652 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/intrpvar.h"
PTR_TBL_t * Iptr_table;
AV * Ibeginav_save;

void * Ibody_arenas;



SV ** Iregex_pad;

AV * Iregex_padav;




HV ** Istashpad;
PADOFFSET Istashpadmax;
PADOFFSET Istashpadix;



REENTR * Ireentrant_buffer;


HV * Icustom_op_names;
HV * Icustom_op_descs;


PerlIOl * Iperlio;
PerlIO_list_t * Iknown_layers;
PerlIO_list_t * Idef_layerlist;


SV * Iencoding;
SV * Ilex_encoding;

SV * Iutf8_idstart;
SV * Iutf8_idcont;
SV * Iutf8_xidstart;
SV * Iutf8_perl_idstart;
SV * Iutf8_perl_idcont;
SV * Iutf8_xidcont;

SVCOMPARE_t Isort_RealCmp;

AV * Icheckav_save;
AV * Iunitcheckav_save;


long Iclocktick;


share_proc_t Isharehook;
share_proc_t Ilockhook;




#define PERL_UNLOCK_HOOK Perl_sv_nounlocking

share_proc_t Iunlockhook;

thrhook_proc_t Ithreadhook;


destroyable_proc_t Idestroyhook;


despatch_signals_proc_t Isignalhook;


HV * Iisarev;





HV * Iregistered_mros;


AV * Iblockhooks;



HV * Iutf8_foldclosures;



SV * Iutf8_foldable;

HV * Icustom_ops;

XPV * IXpv;



const char * * Iscopestack_name;

struct perl_debug_pad Idebug_pad;


globhook_t Iglobhook;

U32 Ipadlist_generation;





#define PERL_LAST_5_18_0_INTERP_MEMBER Iglobhook


void ** Imy_cxt_list;
int Imy_cxt_size;
# 785 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/intrpvar.h"
SV* Isv_consts[35];
# 796 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/intrpvar.h"
perl_drand48_t Irandom_state;
# 5418 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
};

extern const U16 PL_interp_size
  ;

#define PERL_INTERPRETER_SIZE_UPTO_MEMBER(member) STRUCT_OFFSET(struct interpreter, member) + sizeof(((struct interpreter*)0)->member)






extern const U16 PL_interp_size_5_18_0
  ;
# 5463 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#undef PERLVAR
#undef PERLVARA
#undef PERLVARI
#undef PERLVARIC



struct tempsym;

# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/thread.h" 1
# 71 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/thread.h"
#define pthread_mutexattr_default NULL
#define pthread_condattr_default NULL






#define PTHREAD_CREATE(t,a,s,d) pthread_create(t,&(a),s,d)



#define PTHREAD_ATTR_SETDETACHSTATE(a,s) pthread_attr_setdetachstate(a,s)
# 171 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/thread.h"
#define YIELD SCHED_YIELD
# 202 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/thread.h"
#define MUTEX_INIT(m) STMT_START { int _eC_; if ((_eC_ = pthread_mutex_init((m), pthread_mutexattr_default))) Perl_croak_nocontext("panic: MUTEX_INIT (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END
# 211 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/thread.h"
#define MUTEX_LOCK(m) STMT_START { int _eC_; if ((_eC_ = pthread_mutex_lock((m)))) Perl_croak_nocontext("panic: MUTEX_LOCK (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END







#define MUTEX_UNLOCK(m) STMT_START { int _eC_; if ((_eC_ = pthread_mutex_unlock((m)))) Perl_croak_nocontext("panic: MUTEX_UNLOCK (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END







#define MUTEX_DESTROY(m) STMT_START { int _eC_; if ((_eC_ = pthread_mutex_destroy((m)))) Perl_croak_nocontext("panic: MUTEX_DESTROY (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END
# 237 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/thread.h"
#define COND_INIT(c) STMT_START { int _eC_; if ((_eC_ = pthread_cond_init((c), pthread_condattr_default))) Perl_croak_nocontext("panic: COND_INIT (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END







#define COND_SIGNAL(c) STMT_START { int _eC_; if ((_eC_ = pthread_cond_signal((c)))) Perl_croak_nocontext("panic: COND_SIGNAL (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END







#define COND_BROADCAST(c) STMT_START { int _eC_; if ((_eC_ = pthread_cond_broadcast((c)))) Perl_croak_nocontext("panic: COND_BROADCAST (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END







#define COND_WAIT(c,m) STMT_START { int _eC_; if ((_eC_ = pthread_cond_wait((c), (m)))) Perl_croak_nocontext("panic: COND_WAIT (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END







#define COND_DESTROY(c) STMT_START { int _eC_; if ((_eC_ = pthread_cond_destroy((c)))) Perl_croak_nocontext("panic: COND_DESTROY (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END
# 280 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/thread.h"
#define DETACH(t) STMT_START { int _eC_; if ((_eC_ = pthread_detach((t)->self))) { MUTEX_UNLOCK(&(t)->mutex); Perl_croak_nocontext("panic: DETACH (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } } STMT_END
# 292 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/thread.h"
#define JOIN(t,avp) STMT_START { int _eC_; if ((_eC_ = pthread_join((t)->self, (void**)(avp)))) Perl_croak_nocontext("panic: pthread_join (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END
# 312 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/thread.h"
#define PTHREAD_GETSPECIFIC(key) pthread_getspecific(key)



#define PERL_GET_CONTEXT PTHREAD_GETSPECIFIC(PL_thr_key)



#define PERL_SET_CONTEXT(t) STMT_START { int _eC_; if ((_eC_ = pthread_setspecific(PL_thr_key, (void *)(t)))) Perl_croak_nocontext("panic: pthread_setspecific (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END
# 336 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/thread.h"
#define ALLOC_THREAD_KEY STMT_START { if (pthread_key_create(&PL_thr_key, 0)) { PERL_UNUSED_RESULT(write(2, STR_WITH_LEN("panic: pthread_key_create failed\n"))); exit(1); } } STMT_END
# 346 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/thread.h"
#define FREE_THREAD_KEY STMT_START { pthread_key_delete(PL_thr_key); } STMT_END







#define PTHREAD_ATFORK(prepare,parent,child) pthread_atfork(prepare,parent,child)
# 363 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/thread.h"
#define THREAD_RET_TYPE void *
#define THREAD_RET_CAST(p) ((void *)(p))


#define LOCK_DOLLARZERO_MUTEX MUTEX_LOCK(&PL_dollarzero_mutex)
#define UNLOCK_DOLLARZERO_MUTEX MUTEX_UNLOCK(&PL_dollarzero_mutex)
# 418 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/thread.h"
#define THR PERL_GET_THX



#define SET_THR(t) PERL_SET_THX(t)



#define dTHR dNOOP



#define INIT_THREADS NOOP
# 5473 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pp.h" 1
# 11 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pp.h"
#define PP(s) OP * Perl_ ##s(pTHX)
# 53 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pp.h"
#undef SP
#define SP sp
#define MARK mark
#define TARG targ

#define PUSHMARK(p) STMT_START { I32 * mark_stack_entry; if (UNLIKELY((mark_stack_entry = ++PL_markstack_ptr) == PL_markstack_max)) mark_stack_entry = markstack_grow(); *mark_stack_entry = (I32)((p) - PL_stack_base); } STMT_END







#define TOPMARK (*PL_markstack_ptr)
#define POPMARK (*PL_markstack_ptr--)

#define dSP SV **sp = PL_stack_sp
#define djSP dSP
#define dMARK SV **mark = PL_stack_base + POPMARK
#define dORIGMARK const I32 origmark = (I32)(mark - PL_stack_base)
#define ORIGMARK (PL_stack_base + origmark)

#define SPAGAIN sp = PL_stack_sp
#define MSPAGAIN STMT_START { sp = PL_stack_sp; mark = ORIGMARK; } STMT_END

#define GETTARGETSTACKED targ = (PL_op->op_flags & OPf_STACKED ? POPs : PAD_SV(PL_op->op_targ))
#define dTARGETSTACKED SV * GETTARGETSTACKED

#define GETTARGET targ = PAD_SV(PL_op->op_targ)
#define dTARGET SV * GETTARGET

#define GETATARGET targ = (PL_op->op_flags & OPf_STACKED ? sp[-1] : PAD_SV(PL_op->op_targ))
#define dATARGET SV * GETATARGET

#define dTARG SV *targ

#define NORMAL PL_op->op_next
#define DIE return Perl_die
# 122 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pp.h"
#define PUTBACK PL_stack_sp = sp
#define RETURN return (PUTBACK, NORMAL)
#define RETURNOP(o) return (PUTBACK, o)
#define RETURNX(x) return (x, PUTBACK, NORMAL)

#define POPs (*sp--)
#define POPp POPpx
#define POPpx (SvPVx_nolen(POPs))
#define POPpconstx (SvPVx_nolen_const(POPs))
#define POPpbytex (SvPVbytex_nolen(POPs))
#define POPn (SvNVx(POPs))
#define POPi ((IV)SvIVx(POPs))
#define POPu ((UV)SvUVx(POPs))
#define POPl ((long)SvIVx(POPs))
#define POPul ((unsigned long)SvIVx(POPs))

#define TOPs (*sp)
#define TOPm1s (*(sp-1))
#define TOPp1s (*(sp+1))
#define TOPp TOPpx
#define TOPpx (SvPV_nolen(TOPs))
#define TOPn (SvNV(TOPs))
#define TOPi ((IV)SvIV(TOPs))
#define TOPu ((UV)SvUV(TOPs))
#define TOPl ((long)SvIV(TOPs))
#define TOPul ((unsigned long)SvUV(TOPs))
# 287 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pp.h"
#define EXTEND(p,n) STMT_START { if (UNLIKELY(PL_stack_max - p < (SSize_t)(n))) { sp = stack_grow(sp,p,(SSize_t) (n)); PERL_UNUSED_VAR(sp); } } STMT_END





#define MEXTEND(p,n) STMT_START { if (UNLIKELY(PL_stack_max - p < (SSize_t)(n))) { const SSize_t markoff = mark - PL_stack_base; sp = stack_grow(sp,p,(SSize_t) (n)); mark = PL_stack_base + markoff; PERL_UNUSED_VAR(sp); } } STMT_END
# 302 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pp.h"
#define PUSHs(s) (*++sp = (s))
#define PUSHTARG STMT_START { SvSETMAGIC(TARG); PUSHs(TARG); } STMT_END
#define PUSHp(p,l) STMT_START { sv_setpvn(TARG, (p), (l)); PUSHTARG; } STMT_END
#define PUSHn(n) STMT_START { sv_setnv(TARG, (NV)(n)); PUSHTARG; } STMT_END
#define PUSHi(i) STMT_START { sv_setiv(TARG, (IV)(i)); PUSHTARG; } STMT_END
#define PUSHu(u) STMT_START { sv_setuv(TARG, (UV)(u)); PUSHTARG; } STMT_END

#define XPUSHs(s) STMT_START { EXTEND(sp,1); *++sp = (s); } STMT_END
#define XPUSHTARG STMT_START { SvSETMAGIC(TARG); XPUSHs(TARG); } STMT_END
#define XPUSHp(p,l) STMT_START { sv_setpvn(TARG, (p), (l)); XPUSHTARG; } STMT_END
#define XPUSHn(n) STMT_START { sv_setnv(TARG, (NV)(n)); XPUSHTARG; } STMT_END
#define XPUSHi(i) STMT_START { sv_setiv(TARG, (IV)(i)); XPUSHTARG; } STMT_END
#define XPUSHu(u) STMT_START { sv_setuv(TARG, (UV)(u)); XPUSHTARG; } STMT_END
#define XPUSHundef STMT_START { SvOK_off(TARG); XPUSHs(TARG); } STMT_END

#define mPUSHs(s) PUSHs(sv_2mortal(s))
#define PUSHmortal PUSHs(sv_newmortal())
#define mPUSHp(p,l) PUSHs(newSVpvn_flags((p), (l), SVs_TEMP))
#define mPUSHn(n) sv_setnv(PUSHmortal, (NV)(n))
#define mPUSHi(i) sv_setiv(PUSHmortal, (IV)(i))
#define mPUSHu(u) sv_setuv(PUSHmortal, (UV)(u))

#define mXPUSHs(s) XPUSHs(sv_2mortal(s))
#define XPUSHmortal XPUSHs(sv_newmortal())
#define mXPUSHp(p,l) STMT_START { EXTEND(sp,1); mPUSHp((p), (l)); } STMT_END
#define mXPUSHn(n) STMT_START { EXTEND(sp,1); sv_setnv(PUSHmortal, (NV)(n)); } STMT_END
#define mXPUSHi(i) STMT_START { EXTEND(sp,1); sv_setiv(PUSHmortal, (IV)(i)); } STMT_END
#define mXPUSHu(u) STMT_START { EXTEND(sp,1); sv_setuv(PUSHmortal, (UV)(u)); } STMT_END

#define SETs(s) (*sp = s)
#define SETTARG STMT_START { SvSETMAGIC(TARG); SETs(TARG); } STMT_END
#define SETp(p,l) STMT_START { sv_setpvn(TARG, (p), (l)); SETTARG; } STMT_END
#define SETn(n) STMT_START { sv_setnv(TARG, (NV)(n)); SETTARG; } STMT_END
#define SETi(i) STMT_START { sv_setiv(TARG, (IV)(i)); SETTARG; } STMT_END
#define SETu(u) STMT_START { sv_setuv(TARG, (UV)(u)); SETTARG; } STMT_END

#define dTOPss SV *sv = TOPs
#define dPOPss SV *sv = POPs
#define dTOPnv NV value = TOPn
#define dPOPnv NV value = POPn
#define dPOPnv_nomg NV value = (sp--, SvNV_nomg(TOPp1s))
#define dTOPiv IV value = TOPi
#define dPOPiv IV value = POPi
#define dTOPuv UV value = TOPu
#define dPOPuv UV value = POPu

#define dPOPXssrl(X) SV *right = POPs; SV *left = CAT2(X,s)
#define dPOPXnnrl(X) NV right = POPn; NV left = CAT2(X,n)
#define dPOPXiirl(X) IV right = POPi; IV left = CAT2(X,i)

#define USE_LEFT(sv) (SvOK(sv) || !(PL_op->op_flags & OPf_STACKED))

#define dPOPXiirl_ul_nomg(X) IV right = (sp--, SvIV_nomg(TOPp1s)); SV *leftsv = CAT2(X,s); IV left = USE_LEFT(leftsv) ? SvIV_nomg(leftsv) : 0




#define dPOPPOPssrl dPOPXssrl(POP)
#define dPOPPOPnnrl dPOPXnnrl(POP)
#define dPOPPOPiirl dPOPXiirl(POP)

#define dPOPTOPssrl dPOPXssrl(TOP)
#define dPOPTOPnnrl dPOPXnnrl(TOP)
#define dPOPTOPnnrl_nomg NV right = SvNV_nomg(TOPs); NV left = (sp--, SvNV_nomg(TOPs))

#define dPOPTOPiirl dPOPXiirl(TOP)
#define dPOPTOPiirl_ul_nomg dPOPXiirl_ul_nomg(TOP)
#define dPOPTOPiirl_nomg IV right = SvIV_nomg(TOPs); IV left = (sp--, SvIV_nomg(TOPs))


#define RETPUSHYES RETURNX(PUSHs(&PL_sv_yes))
#define RETPUSHNO RETURNX(PUSHs(&PL_sv_no))
#define RETPUSHUNDEF RETURNX(PUSHs(&PL_sv_undef))

#define RETSETYES RETURNX(SETs(&PL_sv_yes))
#define RETSETNO RETURNX(SETs(&PL_sv_no))
#define RETSETUNDEF RETURNX(SETs(&PL_sv_undef))
#define RETSETTARG STMT_START { SETTARG; RETURN; } STMT_END

#define ARGTARG PL_op->op_targ

#define MAXARG (PL_op->op_private & OPpARG4_MASK)

#define SWITCHSTACK(f,t) STMT_START { AvFILLp(f) = sp - PL_stack_base; PL_stack_base = AvARRAY(t); PL_stack_max = PL_stack_base + AvMAX(t); sp = PL_stack_sp = PL_stack_base + AvFILLp(t); PL_curstack = t; } STMT_END
# 394 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pp.h"
#define EXTEND_MORTAL(n) STMT_START { SSize_t eMiX = PL_tmps_ix + (n); if (UNLIKELY(eMiX >= PL_tmps_max)) (void)Perl_tmps_grow_p(aTHX_ eMiX); } STMT_END






#define AMGf_noright 1
#define AMGf_noleft 2
#define AMGf_assign 4
#define AMGf_unary 8
#define AMGf_numeric 0x10
#define AMGf_set 0x20
#define AMGf_want_list 0x40
#define AMGf_numarg 0x80




#define tryAMAGICun_MG(method,flags) STMT_START { if ( UNLIKELY((SvFLAGS(TOPs) & (SVf_ROK|SVs_GMG))) && Perl_try_amagic_un(aTHX_ method, flags)) return NORMAL; } STMT_END




#define tryAMAGICbin_MG(method,flags) STMT_START { if ( UNLIKELY(((SvFLAGS(TOPm1s)|SvFLAGS(TOPs)) & (SVf_ROK|SVs_GMG))) && Perl_try_amagic_bin(aTHX_ method, flags)) return NORMAL; } STMT_END





#define AMG_CALLunary(sv,meth) amagic_call(sv,&PL_sv_undef, meth, AMGf_noright | AMGf_unary)



#define AMG_CALLun(sv,meth) AMG_CALLunary(sv, CAT2(meth,_amg))

#define tryAMAGICunTARGETlist(meth,jump) STMT_START { dSP; SV *tmpsv; SV *arg= *sp; int gimme = GIMME_V; if (UNLIKELY(SvAMAGIC(arg) && (tmpsv = amagic_call(arg, &PL_sv_undef, meth, AMGf_want_list | AMGf_noright |AMGf_unary)))) { SPAGAIN; if (gimme == G_VOID) { NOOP; } else if (gimme == G_ARRAY) { SSize_t i; SSize_t len; assert(SvTYPE(tmpsv) == SVt_PVAV); len = av_tindex((AV *)tmpsv) + 1; (void)POPs; EXTEND(sp, len); for (i = 0; i < len; ++i) PUSHs(av_shift((AV *)tmpsv)); } else { dATARGET; sv_setsv(TARG, tmpsv); if (opASSIGN) sp--; SETTARG; } PUTBACK; if (jump) { OP *jump_o = NORMAL->op_next; while (jump_o->op_type == OP_NULL) jump_o = jump_o->op_next; assert(jump_o->op_type == OP_ENTERSUB); PL_markstack_ptr--; return jump_o->op_next; } return NORMAL; } } STMT_END
# 477 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/pp.h"
#define tryAMAGICunDEREF(meth) STMT_START { sv = amagic_deref_call(*sp, CAT2(meth,_amg)); SPAGAIN; } STMT_END






#define opASSIGN (PL_op->op_flags & OPf_STACKED)






#define LVRET ((PL_op->op_private & OPpMAYBE_LVSUB) && is_lvalue_sub())

#define SvCANEXISTDELETE(sv) (!SvRMAGICAL(sv) || !(mg = mg_find((const SV *) sv, PERL_MAGIC_tied)) || ( (stash = SvSTASH(SvRV(SvTIED_obj(MUTABLE_SV(sv), mg)))) && gv_fetchmethod_autoload(stash, "EXISTS", TRUE) && gv_fetchmethod_autoload(stash, "DELETE", TRUE) ) )
# 5474 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2





#define PERL_CALLCONV 



#define PERL_CALLCONV_NO_RET PERL_CALLCONV






#define PERL_STATIC_NO_RET STATIC





#define PERL_STATIC_INLINE_NO_RET PERL_STATIC_INLINE



#undef PERL_CKDEF
#undef PERL_PPDEF
#define PERL_CKDEF(s) PERL_CALLCONV OP *s (pTHX_ OP *o);
#define PERL_PPDEF(s) PERL_CALLCONV OP *s (pTHX);





# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h" 1
# 19 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h"

 UV ASCII_TO_NEED(const UV enc, const UV ch)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 int Perl_Gv_AMupdate(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, _Bool destructing)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GV_AMUPDATE assert(stash)


 UV NATIVE_TO_NEED(const UV enc, const UV ch)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 const char * Perl_PerlIO_context_layers(PerlInterpreter* my_perl __attribute__((unused)), const char *mode);
 void* Perl_Slab_Alloc(PerlInterpreter* my_perl __attribute__((unused)), size_t sz)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 void Perl_Slab_Free(PerlInterpreter* my_perl __attribute__((unused)), void *op)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SLAB_FREE assert(op)


 SV* Perl__get_encoding(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((pure));

 _Bool Perl__is_in_locale_category(PerlInterpreter* my_perl __attribute__((unused)), const _Bool compiling, const int category);
 _Bool Perl__is_uni_FOO(PerlInterpreter* my_perl __attribute__((unused)), const U8 classnum, const UV c)
   __attribute__((warn_unused_result));

 _Bool Perl__is_uni_perl_idcont(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((warn_unused_result));

 _Bool Perl__is_uni_perl_idstart(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((warn_unused_result));

 _Bool Perl__is_utf8_FOO(PerlInterpreter* my_perl __attribute__((unused)), const U8 classnum, const U8 *p)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT__IS_UTF8_FOO assert(p)


static __inline__ STRLEN S__is_utf8_char_slow(const U8 *s, const U8 *e)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT__IS_UTF8_CHAR_SLOW assert(s); assert(e)


 _Bool Perl__is_utf8_idcont(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT__IS_UTF8_IDCONT assert(p)


 _Bool Perl__is_utf8_idstart(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT__IS_UTF8_IDSTART assert(p)


 _Bool Perl__is_utf8_mark(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT__IS_UTF8_MARK assert(p)


 _Bool Perl__is_utf8_perl_idcont(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT__IS_UTF8_PERL_IDCONT assert(p)


 _Bool Perl__is_utf8_perl_idstart(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT__IS_UTF8_PERL_IDSTART assert(p)


 _Bool Perl__is_utf8_xidcont(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT__IS_UTF8_XIDCONT assert(p)


 _Bool Perl__is_utf8_xidstart(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT__IS_UTF8_XIDSTART assert(p)


 UV Perl__to_uni_fold_flags(PerlInterpreter* my_perl __attribute__((unused)), UV c, U8 *p, STRLEN *lenp, U8 flags)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT__TO_UNI_FOLD_FLAGS assert(p); assert(lenp)


 UV Perl__to_utf8_fold_flags(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p, U8* ustrp, STRLEN *lenp, U8 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT__TO_UTF8_FOLD_FLAGS assert(p); assert(ustrp)


 UV Perl__to_utf8_lower_flags(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p, U8* ustrp, STRLEN *lenp, _Bool flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT__TO_UTF8_LOWER_FLAGS assert(p); assert(ustrp)


 UV Perl__to_utf8_title_flags(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p, U8* ustrp, STRLEN *lenp, _Bool flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT__TO_UTF8_TITLE_FLAGS assert(p); assert(ustrp)


 UV Perl__to_utf8_upper_flags(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p, U8* ustrp, STRLEN *lenp, _Bool flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT__TO_UTF8_UPPER_FLAGS assert(p); assert(ustrp)


 void Perl__warn_problematic_locale(void);
 PADOFFSET Perl_allocmy(PerlInterpreter* my_perl __attribute__((unused)), const char *const name, const STRLEN len, const U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_ALLOCMY assert(name)


 SV* Perl_amagic_call(PerlInterpreter* my_perl __attribute__((unused)), SV* left, SV* right, int method, int dir)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_AMAGIC_CALL assert(left); assert(right)


 SV * Perl_amagic_deref_call(PerlInterpreter* my_perl __attribute__((unused)), SV *ref, int method)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AMAGIC_DEREF_CALL assert(ref)


 _Bool Perl_amagic_is_enabled(PerlInterpreter* my_perl __attribute__((unused)), int method);
static __inline__ void S_append_utf8_from_native_byte(const U8 byte, U8** dest)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_APPEND_UTF8_FROM_NATIVE_BYTE assert(dest)


 I32 Perl_apply(PerlInterpreter* my_perl __attribute__((unused)), I32 type, SV** mark, SV** sp)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_APPLY assert(mark); assert(sp)


 void Perl_apply_attrs_string(PerlInterpreter* my_perl __attribute__((unused)), const char *stashpv, CV *cv, const char *attrstr, STRLEN len)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_APPLY_ATTRS_STRING assert(stashpv); assert(cv); assert(attrstr)


 void Perl_atfork_lock(void);
 void Perl_atfork_unlock(void);
 SV** Perl_av_arylen_p(PerlInterpreter* my_perl __attribute__((unused)), AV *av)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AV_ARYLEN_P assert(av)


 void Perl_av_clear(PerlInterpreter* my_perl __attribute__((unused)), AV *av)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AV_CLEAR assert(av)


 void Perl_av_create_and_push(PerlInterpreter* my_perl __attribute__((unused)), AV **const avp, SV *const val)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_AV_CREATE_AND_PUSH assert(avp); assert(val)


 SV** Perl_av_create_and_unshift_one(PerlInterpreter* my_perl __attribute__((unused)), AV **const avp, SV *const val)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_AV_CREATE_AND_UNSHIFT_ONE assert(avp); assert(val)


 SV* Perl_av_delete(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t key, I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AV_DELETE assert(av)


 _Bool Perl_av_exists(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t key)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AV_EXISTS assert(av)


 void Perl_av_extend(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t key)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AV_EXTEND assert(av)


 void Perl_av_extend_guts(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t key, ssize_t *maxp, SV ***allocp, SV ***arrayp)
   __attribute__((nonnull(4)))
   __attribute__((nonnull(5)))
   __attribute__((nonnull(6)));
#define PERL_ARGS_ASSERT_AV_EXTEND_GUTS assert(maxp); assert(allocp); assert(arrayp)


 SV** Perl_av_fetch(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t key, I32 lval)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AV_FETCH assert(av)


 void Perl_av_fill(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t fill)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AV_FILL assert(av)


 IV* Perl_av_iter_p(PerlInterpreter* my_perl __attribute__((unused)), AV *av)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AV_ITER_P assert(av)


 ssize_t Perl_av_len(PerlInterpreter* my_perl __attribute__((unused)), AV *av)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AV_LEN assert(av)


 AV* Perl_av_make(PerlInterpreter* my_perl __attribute__((unused)), ssize_t size, SV **strp)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_AV_MAKE assert(strp)


 SV* Perl_av_pop(PerlInterpreter* my_perl __attribute__((unused)), AV *av)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AV_POP assert(av)


 void Perl_av_push(PerlInterpreter* my_perl __attribute__((unused)), AV *av, SV *val)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_AV_PUSH assert(av); assert(val)


 void Perl_av_reify(PerlInterpreter* my_perl __attribute__((unused)), AV *av)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AV_REIFY assert(av)


 SV* Perl_av_shift(PerlInterpreter* my_perl __attribute__((unused)), AV *av)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AV_SHIFT assert(av)


 SV** Perl_av_store(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t key, SV *val)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AV_STORE assert(av)






static __inline__ ssize_t S_av_top_index(PerlInterpreter* my_perl __attribute__((unused)), AV *av)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AV_TOP_INDEX assert(av)


 void Perl_av_undef(PerlInterpreter* my_perl __attribute__((unused)), AV *av)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AV_UNDEF assert(av)


 void Perl_av_unshift(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t num)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_AV_UNSHIFT assert(av)


 OP* Perl_bind_match(PerlInterpreter* my_perl __attribute__((unused)), I32 type, OP *left, OP *right)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_BIND_MATCH assert(left); assert(right)


 OP* Perl_block_end(PerlInterpreter* my_perl __attribute__((unused)), I32 floor, OP* seq)
   __attribute__((warn_unused_result));

 I32 Perl_block_gimme(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));

 int Perl_block_start(PerlInterpreter* my_perl __attribute__((unused)), int full)
   __attribute__((warn_unused_result));

 void Perl_blockhook_register(PerlInterpreter* my_perl __attribute__((unused)), BHK *hk)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_BLOCKHOOK_REGISTER assert(hk)


 void Perl_boot_core_PerlIO(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_boot_core_UNIVERSAL(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_boot_core_mro(PerlInterpreter* my_perl __attribute__((unused)));
 int Perl_bytes_cmp_utf8(PerlInterpreter* my_perl __attribute__((unused)), const U8 *b, STRLEN blen, const U8 *u, STRLEN ulen)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_BYTES_CMP_UTF8 assert(b); assert(u)


 U8* Perl_bytes_from_utf8(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, STRLEN *len, _Bool *is_utf8)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_BYTES_FROM_UTF8 assert(s); assert(len)


 U8* Perl_bytes_to_utf8(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, STRLEN *len)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_BYTES_TO_UTF8 assert(s); assert(len)


 I32 Perl_call_argv(PerlInterpreter* my_perl __attribute__((unused)), const char* sub_name, I32 flags, char** argv)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_CALL_ARGV assert(sub_name); assert(argv)


 void Perl_call_atexit(PerlInterpreter* my_perl __attribute__((unused)), ATEXIT_t fn, void *ptr);
 void Perl_call_list(PerlInterpreter* my_perl __attribute__((unused)), I32 oldscope, AV *paramList)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_CALL_LIST assert(paramList)


 I32 Perl_call_method(PerlInterpreter* my_perl __attribute__((unused)), const char* methname, I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CALL_METHOD assert(methname)


 I32 Perl_call_pv(PerlInterpreter* my_perl __attribute__((unused)), const char* sub_name, I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CALL_PV assert(sub_name)


 I32 Perl_call_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, volatile I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CALL_SV assert(sv)


 const PERL_CONTEXT * Perl_caller_cx(PerlInterpreter* my_perl __attribute__((unused)), I32 level, const PERL_CONTEXT **dbcxp);
 void * Perl_calloc(size_t elements, size_t size)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 _Bool Perl_cando(PerlInterpreter* my_perl __attribute__((unused)), mode_t mode, _Bool effective, const struct stat* statbufp)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_CANDO assert(statbufp)


 I32 Perl_cast_i32(NV f)
   __attribute__((warn_unused_result));

 IV Perl_cast_iv(NV f)
   __attribute__((warn_unused_result));

 U32 Perl_cast_ulong(NV f)
   __attribute__((warn_unused_result));

 UV Perl_cast_uv(NV f)
   __attribute__((warn_unused_result));

 _Bool Perl_check_utf8_print(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, const STRLEN len)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CHECK_UTF8_PRINT assert(s)


 OP * Perl_ck_anoncode(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_ANONCODE assert(o)


 OP * Perl_ck_backtick(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_BACKTICK assert(o)


 OP * Perl_ck_bitop(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_BITOP assert(o)


 OP * Perl_ck_cmp(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_CMP assert(o)


 OP * Perl_ck_concat(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_CONCAT assert(o)


 OP * Perl_ck_defined(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_DEFINED assert(o)


 OP * Perl_ck_delete(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_DELETE assert(o)


 OP * Perl_ck_each(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_EACH assert(o)


 OP* Perl_ck_entersub_args_core(PerlInterpreter* my_perl __attribute__((unused)), OP *entersubop, GV *namegv, SV *protosv)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_CORE assert(entersubop); assert(namegv); assert(protosv)


 OP* Perl_ck_entersub_args_list(PerlInterpreter* my_perl __attribute__((unused)), OP *entersubop)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_LIST assert(entersubop)


 OP* Perl_ck_entersub_args_proto(PerlInterpreter* my_perl __attribute__((unused)), OP *entersubop, GV *namegv, SV *protosv)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_PROTO assert(entersubop); assert(namegv); assert(protosv)


 OP* Perl_ck_entersub_args_proto_or_list(PerlInterpreter* my_perl __attribute__((unused)), OP *entersubop, GV *namegv, SV *protosv)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_PROTO_OR_LIST assert(entersubop); assert(namegv); assert(protosv)


 OP * Perl_ck_eof(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_EOF assert(o)


 OP * Perl_ck_eval(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_EVAL assert(o)


 OP * Perl_ck_exec(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_EXEC assert(o)


 OP * Perl_ck_exists(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_EXISTS assert(o)


 OP * Perl_ck_ftst(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_FTST assert(o)


 OP * Perl_ck_fun(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_FUN assert(o)


 OP * Perl_ck_glob(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_GLOB assert(o)


 OP * Perl_ck_grep(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_GREP assert(o)


 OP * Perl_ck_index(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_INDEX assert(o)


 OP * Perl_ck_join(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_JOIN assert(o)


 OP * Perl_ck_length(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_LENGTH assert(o)


 OP * Perl_ck_lfun(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_LFUN assert(o)


 OP * Perl_ck_listiob(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_LISTIOB assert(o)


 OP * Perl_ck_match(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_MATCH assert(o)


 OP * Perl_ck_method(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_METHOD assert(o)


 OP * Perl_ck_null(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_NULL assert(o)


 OP * Perl_ck_open(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_OPEN assert(o)


 OP * Perl_ck_prototype(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_PROTOTYPE assert(o)


 OP * Perl_ck_readline(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_READLINE assert(o)


 OP * Perl_ck_refassign(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_REFASSIGN assert(o)


 OP * Perl_ck_repeat(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_REPEAT assert(o)


 OP * Perl_ck_require(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_REQUIRE assert(o)


 OP * Perl_ck_return(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_RETURN assert(o)


 OP * Perl_ck_rfun(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_RFUN assert(o)


 OP * Perl_ck_rvconst(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_RVCONST assert(o)


 OP * Perl_ck_sassign(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_SASSIGN assert(o)


 OP * Perl_ck_select(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_SELECT assert(o)


 OP * Perl_ck_shift(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_SHIFT assert(o)


 OP * Perl_ck_smartmatch(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_SMARTMATCH assert(o)


 OP * Perl_ck_sort(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_SORT assert(o)


 OP * Perl_ck_spair(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_SPAIR assert(o)


 OP * Perl_ck_split(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_SPLIT assert(o)


 OP * Perl_ck_stringify(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_STRINGIFY assert(o)


 OP * Perl_ck_subr(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_SUBR assert(o)


 OP * Perl_ck_substr(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_SUBSTR assert(o)


 OP * Perl_ck_svconst(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_SVCONST assert(o)


 OP * Perl_ck_tell(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_TELL assert(o)


 OP * Perl_ck_trunc(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CK_TRUNC assert(o)


 void Perl_ck_warner(PerlInterpreter* my_perl __attribute__((unused)), U32 err, const char* pat, ...)
   __attribute__((format(__printf__,3,4)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_CK_WARNER assert(pat)


 void Perl_ck_warner_d(PerlInterpreter* my_perl __attribute__((unused)), U32 err, const char* pat, ...)
   __attribute__((format(__printf__,3,4)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_CK_WARNER_D assert(pat)


 _Bool Perl_ckwarn(PerlInterpreter* my_perl __attribute__((unused)), U32 w);
 _Bool Perl_ckwarn_d(PerlInterpreter* my_perl __attribute__((unused)), U32 w);
 const COP* Perl_closest_cop(PerlInterpreter* my_perl __attribute__((unused)), const COP *cop, const OP *o, const OP *curop, _Bool opnext)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CLOSEST_COP assert(cop)


 const char * Perl_cop_fetch_label(PerlInterpreter* my_perl __attribute__((unused)), COP *const cop, STRLEN *len, U32 *flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_COP_FETCH_LABEL assert(cop)


 void Perl_cop_store_label(PerlInterpreter* my_perl __attribute__((unused)), COP *const cop, const char *label, STRLEN len, U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_COP_STORE_LABEL assert(cop); assert(label)


 SV * Perl_core_prototype(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, const char *name, const int code, int * const opnum)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_CORE_PROTOTYPE assert(name)


 OP * Perl_coresub_op(PerlInterpreter* my_perl __attribute__((unused)), SV *const coreargssv, const int code, const int opnum)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CORESUB_OP assert(coreargssv)


 PERL_CONTEXT* Perl_create_eval_scope(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
 void Perl_croak(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, ...)
   __attribute__((noreturn))
   __attribute__((format(__printf__,2,3)));

static void S_croak_memory_wrap(void)
   __attribute__((noreturn));

 void Perl_croak_no_mem(void)
   __attribute__((noreturn));

 void Perl_croak_no_modify(void)
   __attribute__((noreturn));

 void Perl_croak_popstack(void)
   __attribute__((noreturn));

 void Perl_croak_sv(PerlInterpreter* my_perl __attribute__((unused)), SV *baseex)
   __attribute__((noreturn))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CROAK_SV assert(baseex)


 void Perl_croak_xs_usage(const CV *const cv, const char *const params)
   __attribute__((noreturn))
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CROAK_XS_USAGE assert(cv); assert(params)


 regexp_engine const * Perl_current_re_engine(PerlInterpreter* my_perl __attribute__((unused)));
 const char * Perl_custom_op_desc(PerlInterpreter* my_perl __attribute__((unused)), const OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CUSTOM_OP_DESC assert(o)


 XOPRETANY Perl_custom_op_get_field(PerlInterpreter* my_perl __attribute__((unused)), const OP *o, const xop_flags_enum field)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CUSTOM_OP_GET_FIELD assert(o)


 const char * Perl_custom_op_name(PerlInterpreter* my_perl __attribute__((unused)), const OP *o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CUSTOM_OP_NAME assert(o)


 void Perl_custom_op_register(PerlInterpreter* my_perl __attribute__((unused)), Perl_ppaddr_t ppaddr, const XOP *xop)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_CUSTOM_OP_REGISTER assert(ppaddr); assert(xop)






 void Perl_cv_ckproto_len_flags(PerlInterpreter* my_perl __attribute__((unused)), const CV* cv, const GV* gv, const char* p, const STRLEN len, const U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CV_CKPROTO_LEN_FLAGS assert(cv)


 CV* Perl_cv_clone(PerlInterpreter* my_perl __attribute__((unused)), CV* proto)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CV_CLONE assert(proto)


 CV* Perl_cv_clone_into(PerlInterpreter* my_perl __attribute__((unused)), CV* proto, CV *target)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_CV_CLONE_INTO assert(proto); assert(target)


 SV* Perl_cv_const_sv(const CV *const cv)
   __attribute__((warn_unused_result));

 SV* Perl_cv_const_sv_or_av(const CV *const cv)
   __attribute__((warn_unused_result));

 void Perl_cv_forget_slab(PerlInterpreter* my_perl __attribute__((unused)), CV *cv);
 void Perl_cv_get_call_checker(PerlInterpreter* my_perl __attribute__((unused)), CV *cv, Perl_call_checker *ckfun_p, SV **ckobj_p)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_CV_GET_CALL_CHECKER assert(cv); assert(ckfun_p); assert(ckobj_p)


 SV * Perl_cv_name(PerlInterpreter* my_perl __attribute__((unused)), CV *cv, SV *sv, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CV_NAME assert(cv)


 void Perl_cv_set_call_checker(PerlInterpreter* my_perl __attribute__((unused)), CV *cv, Perl_call_checker ckfun, SV *ckobj)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_CV_SET_CALL_CHECKER assert(cv); assert(ckfun); assert(ckobj)


 void Perl_cv_set_call_checker_flags(PerlInterpreter* my_perl __attribute__((unused)), CV *cv, Perl_call_checker ckfun, SV *ckobj, U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_CV_SET_CALL_CHECKER_FLAGS assert(cv); assert(ckfun); assert(ckobj)


 void Perl_cv_undef(PerlInterpreter* my_perl __attribute__((unused)), CV* cv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CV_UNDEF assert(cv)


 void Perl_cv_undef_flags(PerlInterpreter* my_perl __attribute__((unused)), CV* cv, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CV_UNDEF_FLAGS assert(cv)


 GV * Perl_cvgv_from_hek(PerlInterpreter* my_perl __attribute__((unused)), CV* cv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CVGV_FROM_HEK assert(cv)


 void Perl_cvgv_set(PerlInterpreter* my_perl __attribute__((unused)), CV* cv, GV* gv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CVGV_SET assert(cv)


 void Perl_cvstash_set(PerlInterpreter* my_perl __attribute__((unused)), CV* cv, HV* stash)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CVSTASH_SET assert(cv)


 void Perl_cx_dump(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT* cx)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CX_DUMP assert(cx)


 I32 Perl_cxinc(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));

 void Perl_deb(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, ...)
   __attribute__((format(__printf__,2,3)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DEB assert(pat)


 void Perl_deb_stack_all(PerlInterpreter* my_perl __attribute__((unused)));
 I32 Perl_debop(PerlInterpreter* my_perl __attribute__((unused)), const OP* o)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DEBOP assert(o)


 void Perl_debprofdump(PerlInterpreter* my_perl __attribute__((unused)));
 I32 Perl_debstack(PerlInterpreter* my_perl __attribute__((unused)));
 I32 Perl_debstackptrs(PerlInterpreter* my_perl __attribute__((unused)));
 SV * Perl_defelem_target(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC *mg)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DEFELEM_TARGET assert(sv)


 void Perl_delete_eval_scope(PerlInterpreter* my_perl __attribute__((unused)));
 char* Perl_delimcpy(char* to, const char* toend, const char* from, const char* fromend, int delim, I32* retlen)
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)))
   __attribute__((nonnull(6)));
#define PERL_ARGS_ASSERT_DELIMCPY assert(to); assert(toend); assert(from); assert(fromend); assert(retlen)


 void Perl_despatch_signals(PerlInterpreter* my_perl __attribute__((unused)));
 OP* Perl_die(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, ...)
   __attribute__((noreturn))
   __attribute__((format(__printf__,2,3)));

 OP* Perl_die_sv(PerlInterpreter* my_perl __attribute__((unused)), SV *baseex)
   __attribute__((noreturn))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DIE_SV assert(baseex)


 void Perl_die_unwind(PerlInterpreter* my_perl __attribute__((unused)), SV* msv)
   __attribute__((noreturn))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DIE_UNWIND assert(msv)





#define PERL_ARGS_ASSERT_DO_AEXEC assert(mark); assert(sp)


 _Bool Perl_do_aexec5(PerlInterpreter* my_perl __attribute__((unused)), SV* really, SV** mark, SV** sp, int fd, int do_report)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_DO_AEXEC5 assert(mark); assert(sp)


 int Perl_do_binmode(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *fp, int iotype, int mode)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DO_BINMODE assert(fp)


 _Bool Perl_do_close(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, _Bool not_implicit);
 void Perl_do_dump_pad(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, PADLIST *padlist, int full)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_DO_DUMP_PAD assert(file)


 _Bool Perl_do_eof(PerlInterpreter* my_perl __attribute__((unused)), GV* gv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DO_EOF assert(gv)


 void Perl_do_execfree(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_do_gv_dump(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, const char *name, GV *sv)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_DO_GV_DUMP assert(file); assert(name)


 void Perl_do_gvgv_dump(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, const char *name, GV *sv)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_DO_GVGV_DUMP assert(file); assert(name)


 void Perl_do_hv_dump(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, const char *name, HV *sv)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_DO_HV_DUMP assert(file); assert(name)


 void Perl_do_join(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, SV *delim, SV **mark, SV **sp)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)))
   __attribute__((nonnull(5)));
#define PERL_ARGS_ASSERT_DO_JOIN assert(sv); assert(delim); assert(mark); assert(sp)


 void Perl_do_magic_dump(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, const MAGIC *mg, I32 nest, I32 maxnest, _Bool dumpops, STRLEN pvlim)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_DO_MAGIC_DUMP assert(file)


 I32 Perl_do_ncmp(PerlInterpreter* my_perl __attribute__((unused)), SV *const left, SV *const right)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_DO_NCMP assert(left); assert(right)


 void Perl_do_op_dump(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, const OP *o)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_DO_OP_DUMP assert(file)





#define PERL_ARGS_ASSERT_DO_OPEN assert(gv); assert(name)


 _Bool Perl_do_open6(PerlInterpreter* my_perl __attribute__((unused)), GV *gv, const char *oname, STRLEN len, PerlIO *supplied_fp, SV **svp, U32 num)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_DO_OPEN6 assert(gv); assert(oname)


 _Bool Perl_do_open9(PerlInterpreter* my_perl __attribute__((unused)), GV *gv, const char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV *svs, I32 num)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(9)));
#define PERL_ARGS_ASSERT_DO_OPEN9 assert(gv); assert(name); assert(svs)


 _Bool Perl_do_open_raw(PerlInterpreter* my_perl __attribute__((unused)), GV *gv, const char *oname, STRLEN len, int rawmode, int rawperm)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_DO_OPEN_RAW assert(gv); assert(oname)


 _Bool Perl_do_openn(PerlInterpreter* my_perl __attribute__((unused)), GV *gv, const char *oname, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV **svp, I32 num)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_DO_OPENN assert(gv); assert(oname)


 void Perl_do_pmop_dump(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, const PMOP *pm)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_DO_PMOP_DUMP assert(file)


 _Bool Perl_do_print(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, PerlIO* fp)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_DO_PRINT assert(fp)


 OP* Perl_do_readline(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));

 _Bool Perl_do_seek(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, off_t pos, int whence);
 void Perl_do_sprintf(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, I32 len, SV** sarg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_DO_SPRINTF assert(sv); assert(sarg)


 void Perl_do_sv_dump(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, SV *sv, I32 nest, I32 maxnest, _Bool dumpops, STRLEN pvlim)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_DO_SV_DUMP assert(file)


 off_t Perl_do_sysseek(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, off_t pos, int whence)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DO_SYSSEEK assert(gv)


 off_t Perl_do_tell(PerlInterpreter* my_perl __attribute__((unused)), GV* gv)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DO_TELL assert(gv)


 I32 Perl_do_trans(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DO_TRANS assert(sv)


 UV Perl_do_vecget(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, ssize_t offset, int size)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DO_VECGET assert(sv)


 void Perl_do_vecset(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DO_VECSET assert(sv)


 void Perl_do_vop(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, SV* sv, SV* left, SV* right)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)))
   __attribute__((nonnull(5)));
#define PERL_ARGS_ASSERT_DO_VOP assert(sv); assert(left); assert(right)


 OP* Perl_dofile(PerlInterpreter* my_perl __attribute__((unused)), OP* term, I32 force_builtin)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DOFILE assert(term)


 _Bool Perl_doing_taint(int argc, char** argv, char** env)
   __attribute__((warn_unused_result));

 OP * Perl_doref(PerlInterpreter* my_perl __attribute__((unused)), OP *o, I32 type, _Bool set_op_ref)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DOREF assert(o)


 void Perl_dounwind(PerlInterpreter* my_perl __attribute__((unused)), I32 cxix);
 I32 Perl_dowantarray(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));

 void Perl_drand48_init_r(perl_drand48_t *random_state, U32 seed)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_DRAND48_INIT_R assert(random_state)


 double Perl_drand48_r(perl_drand48_t *random_state)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_DRAND48_R assert(random_state)


 void Perl_dump_all(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_dump_all_perl(PerlInterpreter* my_perl __attribute__((unused)), _Bool justperl);
 void Perl_dump_eval(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_dump_form(PerlInterpreter* my_perl __attribute__((unused)), const GV* gv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DUMP_FORM assert(gv)


 void Perl_dump_indent(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, const char* pat, ...)
   __attribute__((format(__printf__,4,5)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_DUMP_INDENT assert(file); assert(pat)


 void Perl_dump_packsubs(PerlInterpreter* my_perl __attribute__((unused)), const HV* stash)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DUMP_PACKSUBS assert(stash)


 void Perl_dump_packsubs_perl(PerlInterpreter* my_perl __attribute__((unused)), const HV* stash, _Bool justperl)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DUMP_PACKSUBS_PERL assert(stash)


 void Perl_dump_sub(PerlInterpreter* my_perl __attribute__((unused)), const GV* gv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DUMP_SUB assert(gv)


 void Perl_dump_sub_perl(PerlInterpreter* my_perl __attribute__((unused)), const GV* gv, _Bool justperl)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DUMP_SUB_PERL assert(gv)


 void Perl_dump_vindent(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, const char* pat, va_list *args)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_DUMP_VINDENT assert(file); assert(pat)


 void Perl_emulate_cop_io(PerlInterpreter* my_perl __attribute__((unused)), const COP *const c, SV *const sv)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_EMULATE_COP_IO assert(c); assert(sv)


 SV* Perl_eval_pv(PerlInterpreter* my_perl __attribute__((unused)), const char* p, I32 croak_on_error)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_EVAL_PV assert(p)


 I32 Perl_eval_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_EVAL_SV assert(sv)


 void Perl_fbm_compile(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_FBM_COMPILE assert(sv)


 char* Perl_fbm_instr(PerlInterpreter* my_perl __attribute__((unused)), unsigned char* big, unsigned char* bigend, SV* littlestr, U32 flags)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_FBM_INSTR assert(big); assert(bigend); assert(littlestr)


 _Bool Perl_feature_is_enabled(PerlInterpreter* my_perl __attribute__((unused)), const char *const name, STRLEN namelen)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_FEATURE_IS_ENABLED assert(name)


 SV* Perl_filter_add(PerlInterpreter* my_perl __attribute__((unused)), filter_t funcp, SV* datasv);
 void Perl_filter_del(PerlInterpreter* my_perl __attribute__((unused)), filter_t funcp)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_FILTER_DEL assert(funcp)


 I32 Perl_filter_read(PerlInterpreter* my_perl __attribute__((unused)), int idx, SV *buf_sv, int maxlen)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_FILTER_READ assert(buf_sv)


 void Perl_finalize_optree(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_FINALIZE_OPTREE assert(o)


 CV * Perl_find_lexical_cv(PerlInterpreter* my_perl __attribute__((unused)), PADOFFSET off);
 CV* Perl_find_runcv(PerlInterpreter* my_perl __attribute__((unused)), U32 *db_seqp)
   __attribute__((warn_unused_result));

 CV* Perl_find_runcv_where(PerlInterpreter* my_perl __attribute__((unused)), U8 cond, IV arg, U32 *db_seqp)
   __attribute__((warn_unused_result));

 SV* Perl_find_rundefsv(PerlInterpreter* my_perl __attribute__((unused)));
 SV* Perl_find_rundefsv2(PerlInterpreter* my_perl __attribute__((unused)), CV *cv, U32 seq)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_FIND_RUNDEFSV2 assert(cv)


 PADOFFSET Perl_find_rundefsvoffset(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((deprecated));

 char* Perl_find_script(PerlInterpreter* my_perl __attribute__((unused)), const char *scriptname, _Bool dosearch, const char *const *const search_ext, I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_FIND_SCRIPT assert(scriptname)


 I32 Perl_foldEQ(const char* a, const char* b, I32 len)
   __attribute__((pure))
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_FOLDEQ assert(a); assert(b)


 I32 Perl_foldEQ_latin1(const char* a, const char* b, I32 len)
   __attribute__((pure))
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_FOLDEQ_LATIN1 assert(a); assert(b)


 I32 Perl_foldEQ_locale(const char* a, const char* b, I32 len)
   __attribute__((pure))
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_FOLDEQ_LOCALE assert(a); assert(b)






 I32 Perl_foldEQ_utf8_flags(PerlInterpreter* my_perl __attribute__((unused)), const char *s1, char **pe1, UV l1, _Bool u1, const char *s2, char **pe2, UV l2, _Bool u2, U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(6)));
#define PERL_ARGS_ASSERT_FOLDEQ_UTF8_FLAGS assert(s1); assert(s2)


 char* Perl_form(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, ...)
   __attribute__((format(__printf__,2,3)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_FORM assert(pat)


 void Perl_free_tied_hv_pool(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_free_tmps(PerlInterpreter* my_perl __attribute__((unused)));
 AV* Perl_get_av(PerlInterpreter* my_perl __attribute__((unused)), const char *name, I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GET_AV assert(name)


 void* Perl_get_context(void)
   __attribute__((warn_unused_result));

 CV* Perl_get_cv(PerlInterpreter* my_perl __attribute__((unused)), const char* name, I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GET_CV assert(name)


 CV* Perl_get_cvn_flags(PerlInterpreter* my_perl __attribute__((unused)), const char* name, STRLEN len, I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GET_CVN_FLAGS assert(name)


 void Perl_get_db_sub(PerlInterpreter* my_perl __attribute__((unused)), SV **svp, CV *cv)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GET_DB_SUB assert(cv)


 void Perl_get_hash_seed(PerlInterpreter* my_perl __attribute__((unused)), unsigned char * const seed_buffer)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GET_HASH_SEED assert(seed_buffer)


 HV* Perl_get_hv(PerlInterpreter* my_perl __attribute__((unused)), const char *name, I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GET_HV assert(name)


 const char* Perl_get_no_modify(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 char** Perl_get_op_descs(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 char** Perl_get_op_names(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 U32* Perl_get_opargs(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 PPADDR_t* Perl_get_ppaddr(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 REGEXP * Perl_get_re_arg(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
 SV* Perl_get_sv(PerlInterpreter* my_perl __attribute__((unused)), const char *name, I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GET_SV assert(name)


 MGVTBL* Perl_get_vtbl(PerlInterpreter* my_perl __attribute__((unused)), int vtbl_id)
   __attribute__((warn_unused_result));

 int Perl_getcwd_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GETCWD_SV assert(sv)


 void Perl_gp_free(PerlInterpreter* my_perl __attribute__((unused)), GV* gv);
 GP* Perl_gp_ref(PerlInterpreter* my_perl __attribute__((unused)), GP* gp);
 _Bool Perl_grok_atoUV(const char* pv, UV* valptr, const char** endptr)
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GROK_ATOUV assert(pv); assert(valptr)


 UV Perl_grok_bin(PerlInterpreter* my_perl __attribute__((unused)), const char* start, STRLEN* len_p, I32* flags, NV *result)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_GROK_BIN assert(start); assert(len_p); assert(flags)


 UV Perl_grok_hex(PerlInterpreter* my_perl __attribute__((unused)), const char* start, STRLEN* len_p, I32* flags, NV *result)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_GROK_HEX assert(start); assert(len_p); assert(flags)


 int Perl_grok_infnan(PerlInterpreter* my_perl __attribute__((unused)), const char** sp, const char *send)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GROK_INFNAN assert(sp); assert(send)


 int Perl_grok_number(PerlInterpreter* my_perl __attribute__((unused)), const char *pv, STRLEN len, UV *valuep)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GROK_NUMBER assert(pv)


 int Perl_grok_number_flags(PerlInterpreter* my_perl __attribute__((unused)), const char *pv, STRLEN len, UV *valuep, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GROK_NUMBER_FLAGS assert(pv)


 _Bool Perl_grok_numeric_radix(PerlInterpreter* my_perl __attribute__((unused)), const char **sp, const char *send)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GROK_NUMERIC_RADIX assert(sp); assert(send)


 UV Perl_grok_oct(PerlInterpreter* my_perl __attribute__((unused)), const char* start, STRLEN* len_p, I32* flags, NV *result)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_GROK_OCT assert(start); assert(len_p); assert(flags)





 GV* Perl_gv_add_by_type(PerlInterpreter* my_perl __attribute__((unused)), GV *gv, svtype type);




 GV* Perl_gv_autoload_pv(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* namepv, U32 flags)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_AUTOLOAD_PV assert(namepv)


 GV* Perl_gv_autoload_pvn(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, STRLEN len, U32 flags)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_AUTOLOAD_PVN assert(name)


 GV* Perl_gv_autoload_sv(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, SV* namesv, U32 flags)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_AUTOLOAD_SV assert(namesv)


 void Perl_gv_check(PerlInterpreter* my_perl __attribute__((unused)), HV* stash)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GV_CHECK assert(stash)


 SV* Perl_gv_const_sv(PerlInterpreter* my_perl __attribute__((unused)), GV* gv)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GV_CONST_SV assert(gv)


 void Perl_gv_dump(PerlInterpreter* my_perl __attribute__((unused)), GV* gv);
 void Perl_gv_efullname(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const GV* gv)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_EFULLNAME assert(sv); assert(gv)





#define PERL_ARGS_ASSERT_GV_EFULLNAME3 assert(sv); assert(gv)


 void Perl_gv_efullname4(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const GV* gv, const char* prefix, _Bool keepmain)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_EFULLNAME4 assert(sv); assert(gv)


 GV* Perl_gv_fetchfile(PerlInterpreter* my_perl __attribute__((unused)), const char* name)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GV_FETCHFILE assert(name)


 GV* Perl_gv_fetchfile_flags(PerlInterpreter* my_perl __attribute__((unused)), const char *const name, const STRLEN len, const U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GV_FETCHFILE_FLAGS assert(name)
# 1460 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h"
 GV* Perl_gv_fetchmeth_pv(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, I32 level, U32 flags)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PV assert(name)


 GV* Perl_gv_fetchmeth_pv_autoload(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, I32 level, U32 flags)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PV_AUTOLOAD assert(name)


 GV* Perl_gv_fetchmeth_pvn(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, STRLEN len, I32 level, U32 flags)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PVN assert(name)


 GV* Perl_gv_fetchmeth_pvn_autoload(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, STRLEN len, I32 level, U32 flags)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PVN_AUTOLOAD assert(name)


 GV* Perl_gv_fetchmeth_sv(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, SV* namesv, I32 level, U32 flags)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_FETCHMETH_SV assert(namesv)


 GV* Perl_gv_fetchmeth_sv_autoload(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, SV* namesv, I32 level, U32 flags)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_FETCHMETH_SV_AUTOLOAD assert(namesv)





#define PERL_ARGS_ASSERT_GV_FETCHMETHOD assert(stash); assert(name)


 GV* Perl_gv_fetchmethod_autoload(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, I32 autoload)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_AUTOLOAD assert(stash); assert(name)


 GV* Perl_gv_fetchmethod_pv_flags(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_PV_FLAGS assert(stash); assert(name)


 GV* Perl_gv_fetchmethod_pvn_flags(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, const STRLEN len, U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_PVN_FLAGS assert(stash); assert(name)


 GV* Perl_gv_fetchmethod_sv_flags(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, SV* namesv, U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_SV_FLAGS assert(stash); assert(namesv)


 GV* Perl_gv_fetchpv(PerlInterpreter* my_perl __attribute__((unused)), const char *nambeg, I32 add, const svtype sv_type)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GV_FETCHPV assert(nambeg)


 GV* Perl_gv_fetchpvn_flags(PerlInterpreter* my_perl __attribute__((unused)), const char* name, STRLEN len, I32 flags, const svtype sv_type)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GV_FETCHPVN_FLAGS assert(name)


 GV* Perl_gv_fetchsv(PerlInterpreter* my_perl __attribute__((unused)), SV *name, I32 flags, const svtype sv_type)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GV_FETCHSV assert(name)


 void Perl_gv_fullname(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const GV* gv)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_FULLNAME assert(sv); assert(gv)





#define PERL_ARGS_ASSERT_GV_FULLNAME3 assert(sv); assert(gv)


 void Perl_gv_fullname4(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const GV* gv, const char* prefix, _Bool keepmain)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_FULLNAME4 assert(sv); assert(gv)


 CV* Perl_gv_handler(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, I32 id)
   __attribute__((warn_unused_result));





 void Perl_gv_init_pv(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, HV* stash, const char* name, U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_GV_INIT_PV assert(gv); assert(name)


 void Perl_gv_init_pvn(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, HV* stash, const char* name, STRLEN len, U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_GV_INIT_PVN assert(gv); assert(name)


 void Perl_gv_init_sv(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, HV* stash, SV* namesv, U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_GV_INIT_SV assert(gv); assert(namesv)


 void Perl_gv_name_set(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, const char *name, U32 len, U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_NAME_SET assert(gv); assert(name)


 GV * Perl_gv_override(PerlInterpreter* my_perl __attribute__((unused)), const char * const name, const STRLEN len)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GV_OVERRIDE assert(name)


 void Perl_gv_setref(PerlInterpreter* my_perl __attribute__((unused)), SV *const dstr, SV *const sstr)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GV_SETREF assert(dstr); assert(sstr)


 HV* Perl_gv_stashpv(PerlInterpreter* my_perl __attribute__((unused)), const char* name, I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GV_STASHPV assert(name)


 HV* Perl_gv_stashpvn(PerlInterpreter* my_perl __attribute__((unused)), const char* name, U32 namelen, I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GV_STASHPVN assert(name)


 HV* Perl_gv_stashsv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GV_STASHSV assert(sv)


 void Perl_gv_try_downgrade(PerlInterpreter* my_perl __attribute__((unused)), GV* gv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_GV_TRY_DOWNGRADE assert(gv)


 AV** Perl_hv_backreferences_p(PerlInterpreter* my_perl __attribute__((unused)), HV *hv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_BACKREFERENCES_P assert(hv)


 void Perl_hv_clear(PerlInterpreter* my_perl __attribute__((unused)), HV *hv);
 void Perl_hv_clear_placeholders(PerlInterpreter* my_perl __attribute__((unused)), HV *hv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_CLEAR_PLACEHOLDERS assert(hv)


 void* Perl_hv_common(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, SV *keysv, const char* key, STRLEN klen, int flags, int action, SV *val, U32 hash);
 void* Perl_hv_common_key_len(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, const char *key, I32 klen_i32, const int action, SV *val, const U32 hash)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_HV_COMMON_KEY_LEN assert(key)


 HV * Perl_hv_copy_hints_hv(PerlInterpreter* my_perl __attribute__((unused)), HV *const ohv)
   __attribute__((warn_unused_result));

 void Perl_hv_delayfree_ent(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, HE *entry)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_DELAYFREE_ENT assert(hv)




#define PERL_ARGS_ASSERT_HV_DELETE assert(key)




#define PERL_ARGS_ASSERT_HV_DELETE_ENT assert(keysv)


 HE** Perl_hv_eiter_p(PerlInterpreter* my_perl __attribute__((unused)), HV *hv)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_EITER_P assert(hv)


 void Perl_hv_eiter_set(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, HE *eiter)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_EITER_SET assert(hv)


 void Perl_hv_ename_add(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, const char *name, U32 len, U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_HV_ENAME_ADD assert(hv); assert(name)


 void Perl_hv_ename_delete(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, const char *name, U32 len, U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_HV_ENAME_DELETE assert(hv); assert(name)





#define PERL_ARGS_ASSERT_HV_EXISTS assert(key)





#define PERL_ARGS_ASSERT_HV_EXISTS_ENT assert(keysv)




#define PERL_ARGS_ASSERT_HV_FETCH assert(key)




#define PERL_ARGS_ASSERT_HV_FETCH_ENT assert(keysv)


 STRLEN Perl_hv_fill(PerlInterpreter* my_perl __attribute__((unused)), HV *const hv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_FILL assert(hv)


 void Perl_hv_free_ent(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, HE *entry)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_FREE_ENT assert(hv)


 I32 Perl_hv_iterinit(PerlInterpreter* my_perl __attribute__((unused)), HV *hv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_ITERINIT assert(hv)


 char* Perl_hv_iterkey(PerlInterpreter* my_perl __attribute__((unused)), HE* entry, I32* retlen)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_HV_ITERKEY assert(entry); assert(retlen)


 SV* Perl_hv_iterkeysv(PerlInterpreter* my_perl __attribute__((unused)), HE* entry)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_ITERKEYSV assert(entry)





#define PERL_ARGS_ASSERT_HV_ITERNEXT assert(hv)


 HE* Perl_hv_iternext_flags(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, I32 flags)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_ITERNEXT_FLAGS assert(hv)


 SV* Perl_hv_iternextsv(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, char **key, I32 *retlen)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_HV_ITERNEXTSV assert(hv); assert(key); assert(retlen)


 SV* Perl_hv_iterval(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, HE *entry)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_HV_ITERVAL assert(hv); assert(entry)


 void Perl_hv_ksplit(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, IV newmax)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_KSPLIT assert(hv)




#define PERL_ARGS_ASSERT_HV_MAGIC assert(hv)


 void Perl_hv_name_set(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, const char *name, U32 len, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_NAME_SET assert(hv)


 I32 Perl_hv_placeholders_get(PerlInterpreter* my_perl __attribute__((unused)), const HV *hv)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_GET assert(hv)


 ssize_t* Perl_hv_placeholders_p(PerlInterpreter* my_perl __attribute__((unused)), HV *hv)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_P assert(hv)


 void Perl_hv_placeholders_set(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, I32 ph)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_SET assert(hv)


 void Perl_hv_rand_set(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, U32 new_xhv_rand)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_RAND_SET assert(hv)


 I32* Perl_hv_riter_p(PerlInterpreter* my_perl __attribute__((unused)), HV *hv)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_RITER_P assert(hv)


 void Perl_hv_riter_set(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, I32 riter)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_RITER_SET assert(hv)


 SV* Perl_hv_scalar(PerlInterpreter* my_perl __attribute__((unused)), HV *hv)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_HV_SCALAR assert(hv)






 void Perl_hv_undef_flags(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, U32 flags);
# 1821 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h"
 void Perl_init_argv_symbols(PerlInterpreter* my_perl __attribute__((unused)), int argc, char **argv)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_INIT_ARGV_SYMBOLS assert(argv)


 void Perl_init_constants(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_init_dbargs(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_init_debugger(PerlInterpreter* my_perl __attribute__((unused)));
 int Perl_init_i18nl10n(PerlInterpreter* my_perl __attribute__((unused)), int printwarn);
 int Perl_init_i18nl14n(PerlInterpreter* my_perl __attribute__((unused)), int printwarn);
 void Perl_init_stacks(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_init_tm(PerlInterpreter* my_perl __attribute__((unused)), struct tm *ptm)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_INIT_TM assert(ptm)


 char* Perl_instr(const char* big, const char* little)
   __attribute__((warn_unused_result))
   __attribute__((pure))
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_INSTR assert(big); assert(little)


 U32 Perl_intro_my(PerlInterpreter* my_perl __attribute__((unused)));
 OP* Perl_invert(PerlInterpreter* my_perl __attribute__((unused)), OP* cmd)
   __attribute__((warn_unused_result));

 _Bool Perl_io_close(PerlInterpreter* my_perl __attribute__((unused)), IO* io, GV *gv, _Bool not_implicit, _Bool warn_on_fail)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IO_CLOSE assert(io)


 _Bool Perl_isALNUM_lazy(PerlInterpreter* my_perl __attribute__((unused)), const char* p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_ISALNUM_LAZY assert(p)


 _Bool Perl_isIDFIRST_lazy(PerlInterpreter* my_perl __attribute__((unused)), const char* p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_ISIDFIRST_LAZY assert(p)






 _Bool Perl_is_invariant_string(const U8 *s, STRLEN len)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_IS_INVARIANT_STRING assert(s)


 I32 Perl_is_lvalue_sub(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));

static __inline__ _Bool S_is_safe_syscall(PerlInterpreter* my_perl __attribute__((unused)), const char *pv, STRLEN len, const char *what, const char *op_name)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)))
   __attribute__((nonnull(5)));
#define PERL_ARGS_ASSERT_IS_SAFE_SYSCALL assert(pv); assert(what); assert(op_name)


 _Bool Perl_is_uni_alnum(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_alnum_lc(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_alnumc(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_alnumc_lc(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_alpha(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_alpha_lc(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_ascii(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_ascii_lc(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_blank(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_blank_lc(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_cntrl(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_cntrl_lc(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_digit(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_digit_lc(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_graph(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_graph_lc(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_idfirst(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_idfirst_lc(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_lower(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_lower_lc(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_print(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_print_lc(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_punct(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_punct_lc(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_space(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_space_lc(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_upper(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_upper_lc(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_xdigit(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_uni_xdigit_lc(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 _Bool Perl_is_utf8_alnum(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_ALNUM assert(p)


 _Bool Perl_is_utf8_alnumc(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_ALNUMC assert(p)


 _Bool Perl_is_utf8_alpha(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_ALPHA assert(p)


 _Bool Perl_is_utf8_ascii(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_ASCII assert(p)


 _Bool Perl_is_utf8_blank(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_BLANK assert(p)


 STRLEN Perl_is_utf8_char(const U8 *s)
   __attribute__((deprecated))
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_IS_UTF8_CHAR assert(s)





#define PERL_ARGS_ASSERT_IS_UTF8_CHAR_BUF assert(buf); assert(buf_end)


 _Bool Perl_is_utf8_cntrl(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_CNTRL assert(p)


 _Bool Perl_is_utf8_digit(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_DIGIT assert(p)


 _Bool Perl_is_utf8_graph(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_GRAPH assert(p)


 _Bool Perl_is_utf8_idcont(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_IDCONT assert(p)


 _Bool Perl_is_utf8_idfirst(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_IDFIRST assert(p)


 _Bool Perl_is_utf8_lower(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_LOWER assert(p)


 _Bool Perl_is_utf8_mark(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_MARK assert(p)


 _Bool Perl_is_utf8_perl_space(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_PERL_SPACE assert(p)


 _Bool Perl_is_utf8_perl_word(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_PERL_WORD assert(p)


 _Bool Perl_is_utf8_posix_digit(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_POSIX_DIGIT assert(p)


 _Bool Perl_is_utf8_print(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_PRINT assert(p)


 _Bool Perl_is_utf8_punct(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_PUNCT assert(p)


 _Bool Perl_is_utf8_space(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_SPACE assert(p)


 _Bool Perl_is_utf8_string(const U8 *s, STRLEN len)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_IS_UTF8_STRING assert(s)




#define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOC assert(s)


 _Bool Perl_is_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOCLEN assert(s)


 _Bool Perl_is_utf8_upper(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_UPPER assert(p)


 _Bool Perl_is_utf8_xdigit(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_XDIGIT assert(p)


 _Bool Perl_is_utf8_xidcont(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_XIDCONT assert(p)


 _Bool Perl_is_utf8_xidfirst(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_IS_UTF8_XIDFIRST assert(p)


 _Bool Perl_isinfnan(NV nv);
 _Bool Perl_isinfnansv(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_ISINFNANSV assert(sv)


 OP* Perl_jmaybe(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_JMAYBE assert(o)


 I32 Perl_keyword(PerlInterpreter* my_perl __attribute__((unused)), const char *name, I32 len, _Bool all_keywords)
   __attribute__((pure))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_KEYWORD assert(name)


 int Perl_keyword_plugin_standard(PerlInterpreter* my_perl __attribute__((unused)), char* keyword_ptr, STRLEN keyword_len, OP** op_ptr)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_KEYWORD_PLUGIN_STANDARD assert(keyword_ptr); assert(op_ptr)


 void Perl_leave_scope(PerlInterpreter* my_perl __attribute__((unused)), I32 base);
 _Bool Perl_lex_bufutf8(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_lex_discard_to(PerlInterpreter* my_perl __attribute__((unused)), char* ptr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_LEX_DISCARD_TO assert(ptr)


 char* Perl_lex_grow_linestr(PerlInterpreter* my_perl __attribute__((unused)), STRLEN len);
 _Bool Perl_lex_next_chunk(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
 I32 Perl_lex_peek_unichar(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
 void Perl_lex_read_space(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
 void Perl_lex_read_to(PerlInterpreter* my_perl __attribute__((unused)), char* ptr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_LEX_READ_TO assert(ptr)


 I32 Perl_lex_read_unichar(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
 void Perl_lex_start(PerlInterpreter* my_perl __attribute__((unused)), SV* line, PerlIO *rsfp, U32 flags);
 void Perl_lex_stuff_pv(PerlInterpreter* my_perl __attribute__((unused)), const char* pv, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_LEX_STUFF_PV assert(pv)


 void Perl_lex_stuff_pvn(PerlInterpreter* my_perl __attribute__((unused)), const char* pv, STRLEN len, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_LEX_STUFF_PVN assert(pv)


 void Perl_lex_stuff_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_LEX_STUFF_SV assert(sv)


 void Perl_lex_unstuff(PerlInterpreter* my_perl __attribute__((unused)), char* ptr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_LEX_UNSTUFF assert(ptr)


 OP* Perl_list(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
 void Perl_load_module(PerlInterpreter* my_perl __attribute__((unused)), U32 flags, SV* name, SV* ver, ...)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_LOAD_MODULE assert(name)


 OP* Perl_localize(PerlInterpreter* my_perl __attribute__((unused)), OP *o, I32 lex)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_LOCALIZE assert(o)


 I32 Perl_looks_like_number(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_LOOKS_LIKE_NUMBER assert(sv)


 int Perl_magic_clear_all_env(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_CLEAR_ALL_ENV assert(sv); assert(mg)


 int Perl_magic_cleararylen_p(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_CLEARARYLEN_P assert(sv); assert(mg)


 int Perl_magic_clearenv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_CLEARENV assert(sv); assert(mg)


 int Perl_magic_clearhint(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_CLEARHINT assert(sv); assert(mg)


 int Perl_magic_clearhints(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_CLEARHINTS assert(sv); assert(mg)


 int Perl_magic_clearisa(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_CLEARISA assert(mg)


 int Perl_magic_clearpack(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_CLEARPACK assert(sv); assert(mg)


 int Perl_magic_clearsig(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_CLEARSIG assert(sv); assert(mg)


 int Perl_magic_copycallchecker(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC *mg, SV *nsv, const char *name, I32 namlen)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_MAGIC_COPYCALLCHECKER assert(sv); assert(mg); assert(nsv)


 void Perl_magic_dump(PerlInterpreter* my_perl __attribute__((unused)), const MAGIC *mg);
 int Perl_magic_existspack(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_EXISTSPACK assert(sv); assert(mg)


 int Perl_magic_freearylen_p(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_FREEARYLEN_P assert(sv); assert(mg)


 int Perl_magic_freeovrld(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_FREEOVRLD assert(sv); assert(mg)


 int Perl_magic_get(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_GET assert(sv); assert(mg)


 int Perl_magic_getarylen(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_GETARYLEN assert(sv); assert(mg)


 int Perl_magic_getdebugvar(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_GETDEBUGVAR assert(sv); assert(mg)


 int Perl_magic_getdefelem(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_GETDEFELEM assert(sv); assert(mg)


 int Perl_magic_getnkeys(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_GETNKEYS assert(sv); assert(mg)


 int Perl_magic_getpack(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_GETPACK assert(sv); assert(mg)


 int Perl_magic_getpos(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_GETPOS assert(sv); assert(mg)


 int Perl_magic_getsig(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_GETSIG assert(sv); assert(mg)


 int Perl_magic_getsubstr(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_GETSUBSTR assert(sv); assert(mg)


 int Perl_magic_gettaint(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_GETTAINT assert(sv); assert(mg)


 int Perl_magic_getuvar(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_GETUVAR assert(sv); assert(mg)


 int Perl_magic_getvec(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_GETVEC assert(sv); assert(mg)


 int Perl_magic_killbackrefs(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC *mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_KILLBACKREFS assert(sv); assert(mg)


 SV* Perl_magic_methcall(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, const MAGIC *mg, SV *meth, U32 flags, U32 argc, ...)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_MAGIC_METHCALL assert(sv); assert(mg); assert(meth)


 int Perl_magic_nextpack(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC *mg, SV *key)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_MAGIC_NEXTPACK assert(sv); assert(mg); assert(key)


 U32 Perl_magic_regdata_cnt(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_REGDATA_CNT assert(sv); assert(mg)


 int Perl_magic_regdatum_get(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_REGDATUM_GET assert(sv); assert(mg)


 SV* Perl_magic_scalarpack(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, MAGIC *mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SCALARPACK assert(hv); assert(mg)


 int Perl_magic_set(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SET assert(sv); assert(mg)


 int Perl_magic_set_all_env(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SET_ALL_ENV assert(sv); assert(mg)


 int Perl_magic_setarylen(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETARYLEN assert(sv); assert(mg)


 int Perl_magic_setdbline(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETDBLINE assert(sv); assert(mg)


 int Perl_magic_setdebugvar(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETDEBUGVAR assert(sv); assert(mg)


 int Perl_magic_setdefelem(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETDEFELEM assert(sv); assert(mg)


 int Perl_magic_setenv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETENV assert(sv); assert(mg)


 int Perl_magic_sethint(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETHINT assert(sv); assert(mg)


 int Perl_magic_setisa(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETISA assert(sv); assert(mg)


 int Perl_magic_setlvref(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETLVREF assert(sv); assert(mg)


 int Perl_magic_setmglob(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETMGLOB assert(sv); assert(mg)


 int Perl_magic_setnkeys(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETNKEYS assert(sv); assert(mg)


 int Perl_magic_setpack(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETPACK assert(sv); assert(mg)


 int Perl_magic_setpos(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETPOS assert(sv); assert(mg)


 int Perl_magic_setregexp(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETREGEXP assert(sv); assert(mg)


 int Perl_magic_setsig(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETSIG assert(mg)


 int Perl_magic_setsubstr(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETSUBSTR assert(sv); assert(mg)


 int Perl_magic_settaint(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETTAINT assert(sv); assert(mg)


 int Perl_magic_setutf8(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETUTF8 assert(sv); assert(mg)


 int Perl_magic_setuvar(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETUVAR assert(sv); assert(mg)


 int Perl_magic_setvec(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETVEC assert(sv); assert(mg)


 U32 Perl_magic_sizepack(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SIZEPACK assert(sv); assert(mg)


 int Perl_magic_wipepack(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_WIPEPACK assert(sv); assert(mg)


 void * Perl_malloc(size_t nbytes)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 I32 * Perl_markstack_grow(PerlInterpreter* my_perl __attribute__((unused)));
 SV* Perl_mess(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, ...)
   __attribute__((format(__printf__,2,3)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MESS assert(pat)


 SV* Perl_mess_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* basemsg, _Bool consume)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MESS_SV assert(basemsg)


 void Perl_mfree(void * where);
 int Perl_mg_clear(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MG_CLEAR assert(sv)


 int Perl_mg_copy(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, SV *nsv, const char *key, I32 klen)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MG_COPY assert(sv); assert(nsv)


 MAGIC* Perl_mg_find(const SV* sv, int type)
   __attribute__((warn_unused_result));

 MAGIC* Perl_mg_find_mglob(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MG_FIND_MGLOB assert(sv)


 MAGIC* Perl_mg_findext(const SV* sv, int type, const MGVTBL *vtbl)
   __attribute__((warn_unused_result));

 int Perl_mg_free(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MG_FREE assert(sv)


 void Perl_mg_free_type(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, int how)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MG_FREE_TYPE assert(sv)


 int Perl_mg_get(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MG_GET assert(sv)


 U32 Perl_mg_length(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((deprecated))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MG_LENGTH assert(sv)


 void Perl_mg_localize(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, SV* nsv, _Bool setmagic)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MG_LOCALIZE assert(sv); assert(nsv)


 void Perl_mg_magical(SV* sv)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_MG_MAGICAL assert(sv)


 int Perl_mg_set(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MG_SET assert(sv)


 I32 Perl_mg_size(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MG_SIZE assert(sv)


 void Perl_mini_mktime(struct tm *ptm)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_MINI_MKTIME assert(ptm)


 int Perl_mode_from_discipline(PerlInterpreter* my_perl __attribute__((unused)), const char* s, STRLEN len);
 void * Perl_more_bodies(PerlInterpreter* my_perl __attribute__((unused)), const svtype sv_type, const size_t body_size, const size_t arena_size);
 const char* Perl_moreswitches(PerlInterpreter* my_perl __attribute__((unused)), const char* s)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MORESWITCHES assert(s)


 const struct mro_alg * Perl_mro_get_from_name(PerlInterpreter* my_perl __attribute__((unused)), SV *name)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MRO_GET_FROM_NAME assert(name)


 AV* Perl_mro_get_linear_isa(PerlInterpreter* my_perl __attribute__((unused)), HV* stash)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MRO_GET_LINEAR_ISA assert(stash)


 SV* Perl_mro_get_private_data(PerlInterpreter* my_perl __attribute__((unused)), struct mro_meta *const smeta, const struct mro_alg *const which)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MRO_GET_PRIVATE_DATA assert(smeta); assert(which)


 void Perl_mro_isa_changed_in(PerlInterpreter* my_perl __attribute__((unused)), HV* stash)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MRO_ISA_CHANGED_IN assert(stash)


 struct mro_meta* Perl_mro_meta_init(PerlInterpreter* my_perl __attribute__((unused)), HV* stash)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MRO_META_INIT assert(stash)


 void Perl_mro_method_changed_in(PerlInterpreter* my_perl __attribute__((unused)), HV* stash)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MRO_METHOD_CHANGED_IN assert(stash)


 void Perl_mro_package_moved(PerlInterpreter* my_perl __attribute__((unused)), HV * const stash, HV * const oldstash, const GV * const gv, U32 flags)
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_MRO_PACKAGE_MOVED assert(gv)


 void Perl_mro_register(PerlInterpreter* my_perl __attribute__((unused)), const struct mro_alg *mro)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MRO_REGISTER assert(mro)


 void Perl_mro_set_mro(PerlInterpreter* my_perl __attribute__((unused)), struct mro_meta *const meta, SV *const name)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MRO_SET_MRO assert(meta); assert(name)


 SV* Perl_mro_set_private_data(PerlInterpreter* my_perl __attribute__((unused)), struct mro_meta *const smeta, const struct mro_alg *const which, SV *const data)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_MRO_SET_PRIVATE_DATA assert(smeta); assert(which); assert(data)


 SV* Perl_multideref_stringify(PerlInterpreter* my_perl __attribute__((unused)), const OP* o, CV *cv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MULTIDEREF_STRINGIFY assert(o)


 NV Perl_my_atof(PerlInterpreter* my_perl __attribute__((unused)), const char *s)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MY_ATOF assert(s)


 char* Perl_my_atof2(PerlInterpreter* my_perl __attribute__((unused)), const char *s, NV* value)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MY_ATOF2 assert(s); assert(value)


 OP * Perl_my_attrs(PerlInterpreter* my_perl __attribute__((unused)), OP *o, OP *attrs)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MY_ATTRS assert(o)


 void Perl_my_clearenv(PerlInterpreter* my_perl __attribute__((unused)));
 int Perl_my_dirfd(DIR* dir);
 void Perl_my_exit(PerlInterpreter* my_perl __attribute__((unused)), U32 status)
   __attribute__((noreturn));

 void Perl_my_failure_exit(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((noreturn));

 I32 Perl_my_fflush_all(PerlInterpreter* my_perl __attribute__((unused)));
 pid_t Perl_my_fork(void);

 I32 Perl_my_lstat_flags(PerlInterpreter* my_perl __attribute__((unused)), const U32 flags);
 PerlIO* Perl_my_popen_list(PerlInterpreter* my_perl __attribute__((unused)), const char* mode, int n, SV ** args)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_MY_POPEN_LIST assert(mode); assert(args)


 void Perl_my_setenv(PerlInterpreter* my_perl __attribute__((unused)), const char* nam, const char* val);
 int Perl_my_snprintf(char *buffer, const size_t len, const char *format, ...)
   __attribute__((format(__printf__,3,4)))
   __attribute__((nonnull(1)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MY_SNPRINTF assert(buffer); assert(format)


 int Perl_my_socketpair(int family, int type, int protocol, int fd[2]);

 I32 Perl_my_stat_flags(PerlInterpreter* my_perl __attribute__((unused)), const U32 flags);
 char* Perl_my_strerror(PerlInterpreter* my_perl __attribute__((unused)), const int errnum);
 char * Perl_my_strftime(PerlInterpreter* my_perl __attribute__((unused)), const char *fmt, int sec, int min, int hour, int mday, int mon, int year, int wday, int yday, int isdst)
   __attribute__((format(__strftime__,2,0)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MY_STRFTIME assert(fmt)


 void Perl_my_unexec(PerlInterpreter* my_perl __attribute__((unused)));
 int Perl_my_vsnprintf(char *buffer, const size_t len, const char *format, va_list ap)
   __attribute__((nonnull(1)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MY_VSNPRINTF assert(buffer); assert(format)


 OP* Perl_newANONATTRSUB(PerlInterpreter* my_perl __attribute__((unused)), I32 floor, OP *proto, OP *attrs, OP *block);
 OP* Perl_newANONHASH(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 OP* Perl_newANONLIST(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 OP* Perl_newANONSUB(PerlInterpreter* my_perl __attribute__((unused)), I32 floor, OP* proto, OP* block);
 OP* Perl_newASSIGNOP(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, OP* left, I32 optype, OP* right)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));


 CV* Perl_newATTRSUB_x(PerlInterpreter* my_perl __attribute__((unused)), I32 floor, OP *o, OP *proto, OP *attrs, OP *block, _Bool o_is_gv);



 OP* Perl_newAVREF(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_NEWAVREF assert(o)


 OP* Perl_newBINOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, OP* first, OP* last)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 OP* Perl_newCONDOP(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, OP* first, OP* trueop, OP* falseop)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_NEWCONDOP assert(first)


 CV* Perl_newCONSTSUB(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, SV* sv);
 CV* Perl_newCONSTSUB_flags(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, STRLEN len, U32 flags, SV* sv);
 OP* Perl_newCVREF(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, OP* o)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 OP* Perl_newDEFSVOP(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));

 void Perl_newFORM(PerlInterpreter* my_perl __attribute__((unused)), I32 floor, OP* o, OP* block);
 OP* Perl_newFOROP(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, OP* sv, OP* expr, OP* block, OP* cont)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_NEWFOROP assert(expr)


 OP* Perl_newGIVENOP(PerlInterpreter* my_perl __attribute__((unused)), OP* cond, OP* block, PADOFFSET defsv_off)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_NEWGIVENOP assert(cond); assert(block)


 GP * Perl_newGP(PerlInterpreter* my_perl __attribute__((unused)), GV *const gv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_NEWGP assert(gv)


 OP* Perl_newGVOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, GV* gv)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_NEWGVOP assert(gv)


 OP* Perl_newGVREF(PerlInterpreter* my_perl __attribute__((unused)), I32 type, OP* o)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));




 GV* Perl_newGVgen_flags(PerlInterpreter* my_perl __attribute__((unused)), const char* pack, U32 flags)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_NEWGVGEN_FLAGS assert(pack)





 OP* Perl_newHVREF(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_NEWHVREF assert(o)


 HV* Perl_newHVhv(PerlInterpreter* my_perl __attribute__((unused)), HV *hv)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));





 OP* Perl_newLISTOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, OP* first, OP* last)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 OP* Perl_newLOGOP(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, I32 flags, OP *first, OP *other)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(4)))
   __attribute__((nonnull(5)));
#define PERL_ARGS_ASSERT_NEWLOGOP assert(first); assert(other)


 OP* Perl_newLOOPEX(PerlInterpreter* my_perl __attribute__((unused)), I32 type, OP* label)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_NEWLOOPEX assert(label)


 OP* Perl_newLOOPOP(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, I32 debuggable, OP* expr, OP* block)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 OP* Perl_newMETHOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, OP* dynamic_meth)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_NEWMETHOP assert(dynamic_meth)


 OP* Perl_newMETHOP_named(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, SV* const_meth)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_NEWMETHOP_NAMED assert(const_meth)


 CV * Perl_newMYSUB(PerlInterpreter* my_perl __attribute__((unused)), I32 floor, OP *o, OP *proto, OP *attrs, OP *block)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_NEWMYSUB assert(o)


 OP* Perl_newNULLLIST(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 OP* Perl_newOP(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, I32 flags)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 PADNAMELIST * Perl_newPADNAMELIST(size_t max)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 PADNAME * Perl_newPADNAMEouter(PADNAME *outer)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_NEWPADNAMEOUTER assert(outer)


 PADNAME * Perl_newPADNAMEpvn(const char *s, STRLEN len)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_NEWPADNAMEPVN assert(s)


 OP* Perl_newPMOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 void Perl_newPROG(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_NEWPROG assert(o)


 OP* Perl_newPVOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, char* pv)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 OP* Perl_newRANGE(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, OP* left, OP* right)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_NEWRANGE assert(left); assert(right)


 SV* Perl_newRV(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_NEWRV assert(sv)


 SV* Perl_newRV_noinc(PerlInterpreter* my_perl __attribute__((unused)), SV *const tmpRef)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_NEWRV_NOINC assert(tmpRef)


 OP* Perl_newSLICEOP(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, OP* subscript, OP* listop)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 OP* Perl_newSTATEOP(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, char* label, OP* o)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 CV* Perl_newSTUB(PerlInterpreter* my_perl __attribute__((unused)), GV *gv, _Bool fake)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_NEWSTUB assert(gv)



 SV* Perl_newSV(PerlInterpreter* my_perl __attribute__((unused)), const STRLEN len)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 OP* Perl_newSVOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, SV* sv)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_NEWSVOP assert(sv)


 OP* Perl_newSVREF(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_NEWSVREF assert(o)


 SV* Perl_newSV_type(PerlInterpreter* my_perl __attribute__((unused)), const svtype type)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 SV* Perl_newSVavdefelem(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t ix, _Bool extendible)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_NEWSVAVDEFELEM assert(av)


 SV* Perl_newSVhek(PerlInterpreter* my_perl __attribute__((unused)), const HEK *const hek)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 SV* Perl_newSViv(PerlInterpreter* my_perl __attribute__((unused)), const IV i)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 SV* Perl_newSVnv(PerlInterpreter* my_perl __attribute__((unused)), const NV n)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 SV* Perl_newSVpv(PerlInterpreter* my_perl __attribute__((unused)), const char *const s, const STRLEN len)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 SV* Perl_newSVpv_share(PerlInterpreter* my_perl __attribute__((unused)), const char* s, U32 hash)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 SV* Perl_newSVpvf(PerlInterpreter* my_perl __attribute__((unused)), const char *const pat, ...)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((format(__printf__,2,3)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_NEWSVPVF assert(pat)


 SV* Perl_newSVpvn(PerlInterpreter* my_perl __attribute__((unused)), const char *const s, const STRLEN len)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 SV* Perl_newSVpvn_flags(PerlInterpreter* my_perl __attribute__((unused)), const char *const s, const STRLEN len, const U32 flags)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 SV* Perl_newSVpvn_share(PerlInterpreter* my_perl __attribute__((unused)), const char* s, I32 len, U32 hash)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 SV* Perl_newSVrv(PerlInterpreter* my_perl __attribute__((unused)), SV *const rv, const char *const classname)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_NEWSVRV assert(rv)


 SV* Perl_newSVsv(PerlInterpreter* my_perl __attribute__((unused)), SV *const old)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 SV* Perl_newSVuv(PerlInterpreter* my_perl __attribute__((unused)), const UV u)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 OP* Perl_newUNOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, OP* first)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 OP* Perl_newUNOP_AUX(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, OP* first, UNOP_AUX_item *aux)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 OP* Perl_newWHENOP(PerlInterpreter* my_perl __attribute__((unused)), OP* cond, OP* block)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_NEWWHENOP assert(block)


 OP* Perl_newWHILEOP(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, I32 debuggable, LOOP* loop, OP* expr, OP* block, OP* cont, I32 has_my)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 CV* Perl_newXS(PerlInterpreter* my_perl __attribute__((unused)), const char *name, XSUBADDR_t subaddr, const char *filename)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_NEWXS assert(subaddr); assert(filename)


 CV * Perl_newXS_deffile(PerlInterpreter* my_perl __attribute__((unused)), const char *name, XSUBADDR_t subaddr)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_NEWXS_DEFFILE assert(name); assert(subaddr)


 CV * Perl_newXS_flags(PerlInterpreter* my_perl __attribute__((unused)), const char *name, XSUBADDR_t subaddr, const char *const filename, const char *const proto, U32 flags)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_NEWXS_FLAGS assert(subaddr); assert(filename)


 CV * Perl_newXS_len_flags(PerlInterpreter* my_perl __attribute__((unused)), const char *name, STRLEN len, XSUBADDR_t subaddr, const char *const filename, const char *const proto, SV **const_svp, U32 flags)
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_NEWXS_LEN_FLAGS assert(subaddr)


 void Perl_new_collate(PerlInterpreter* my_perl __attribute__((unused)), const char* newcoll);
 void Perl_new_ctype(PerlInterpreter* my_perl __attribute__((unused)), const char* newctype)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_NEW_CTYPE assert(newctype)


 void Perl_new_numeric(PerlInterpreter* my_perl __attribute__((unused)), const char* newcoll);
 PERL_SI* Perl_new_stackinfo(PerlInterpreter* my_perl __attribute__((unused)), I32 stitems, I32 cxitems)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 SV* Perl_new_version(PerlInterpreter* my_perl __attribute__((unused)), SV *ver)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_NEW_VERSION assert(ver)


 STRLEN * Perl_new_warnings_bitfield(PerlInterpreter* my_perl __attribute__((unused)), STRLEN *buffer, const char *const bits, STRLEN size)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_NEW_WARNINGS_BITFIELD assert(bits)


 PerlIO* Perl_nextargv(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, _Bool nomagicopen)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_NEXTARGV assert(gv)


 char* Perl_ninstr(const char* big, const char* bigend, const char* little, const char* lend)
   __attribute__((pure))
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_NINSTR assert(big); assert(bigend); assert(little); assert(lend)


 void Perl_noperl_die(const char* pat, ...)
   __attribute__((noreturn))
   __attribute__((format(__printf__,1,2)))
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_NOPERL_DIE assert(pat)


 int Perl_nothreadhook(PerlInterpreter* my_perl __attribute__((unused)));
 OP* Perl_oopsAV(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_OOPSAV assert(o)


 OP* Perl_oopsHV(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_OOPSHV assert(o)


 OP* Perl_op_append_elem(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, OP* first, OP* last);
 OP* Perl_op_append_list(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, OP* first, OP* last);
 void Perl_op_clear(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_OP_CLEAR assert(o)


 OP* Perl_op_contextualize(PerlInterpreter* my_perl __attribute__((unused)), OP* o, I32 context)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_OP_CONTEXTUALIZE assert(o)


 OP* Perl_op_convert_list(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, I32 flags, OP* o)
   __attribute__((warn_unused_result));

 void Perl_op_dump(PerlInterpreter* my_perl __attribute__((unused)), const OP *o)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_OP_DUMP assert(o)


 void Perl_op_free(PerlInterpreter* my_perl __attribute__((unused)), OP* arg);
 OP* Perl_op_linklist(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_OP_LINKLIST assert(o)



 OP* Perl_op_lvalue_flags(PerlInterpreter* my_perl __attribute__((unused)), OP* o, I32 type, U32 flags);
 void Perl_op_null(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_OP_NULL assert(o)


 OP* Perl_op_prepend_elem(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, OP* first, OP* last);
 void Perl_op_refcnt_lock(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_op_refcnt_unlock(PerlInterpreter* my_perl __attribute__((unused)));
 OP* Perl_op_scope(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
 OP* Perl_op_sibling_splice(OP *parent, OP *start, int del_count, OP* insert);
 OP* Perl_op_unscope(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
 void Perl_pack_cat(PerlInterpreter* my_perl __attribute__((unused)), SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist, SV ***next_in_list, U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)))
   __attribute__((nonnull(5)))
   __attribute__((nonnull(6)))
   __attribute__((nonnull(7)));
#define PERL_ARGS_ASSERT_PACK_CAT assert(cat); assert(pat); assert(patend); assert(beglist); assert(endlist); assert(next_in_list)


 void Perl_package(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PACKAGE assert(o)


 void Perl_package_version(PerlInterpreter* my_perl __attribute__((unused)), OP* v)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PACKAGE_VERSION assert(v)


 void Perl_packlist(PerlInterpreter* my_perl __attribute__((unused)), SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)))
   __attribute__((nonnull(5)))
   __attribute__((nonnull(6)));
#define PERL_ARGS_ASSERT_PACKLIST assert(cat); assert(pat); assert(patend); assert(beglist); assert(endlist)


 PADOFFSET Perl_pad_add_anon(PerlInterpreter* my_perl __attribute__((unused)), CV* func, I32 optype)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PAD_ADD_ANON assert(func)


 PADOFFSET Perl_pad_add_name_pv(PerlInterpreter* my_perl __attribute__((unused)), const char *name, const U32 flags, HV *typestash, HV *ourstash)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_PV assert(name)


 PADOFFSET Perl_pad_add_name_pvn(PerlInterpreter* my_perl __attribute__((unused)), const char *namepv, STRLEN namelen, U32 flags, HV *typestash, HV *ourstash)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_PVN assert(namepv)


 PADOFFSET Perl_pad_add_name_sv(PerlInterpreter* my_perl __attribute__((unused)), SV *name, U32 flags, HV *typestash, HV *ourstash)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_SV assert(name)


 void Perl_pad_add_weakref(PerlInterpreter* my_perl __attribute__((unused)), CV* func)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PAD_ADD_WEAKREF assert(func)


 PADOFFSET Perl_pad_alloc(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, U32 tmptype);
 void Perl_pad_block_start(PerlInterpreter* my_perl __attribute__((unused)), int full);
 HV* Perl_pad_compname_type(PerlInterpreter* my_perl __attribute__((unused)), const PADOFFSET po)
   __attribute__((warn_unused_result));

 PADOFFSET Perl_pad_findmy_pv(PerlInterpreter* my_perl __attribute__((unused)), const char* name, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PAD_FINDMY_PV assert(name)


 PADOFFSET Perl_pad_findmy_pvn(PerlInterpreter* my_perl __attribute__((unused)), const char* namepv, STRLEN namelen, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PAD_FINDMY_PVN assert(namepv)


 PADOFFSET Perl_pad_findmy_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* name, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PAD_FINDMY_SV assert(name)


 void Perl_pad_fixup_inner_anons(PerlInterpreter* my_perl __attribute__((unused)), PADLIST *padlist, CV *old_cv, CV *new_cv)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_PAD_FIXUP_INNER_ANONS assert(padlist); assert(old_cv); assert(new_cv)


 void Perl_pad_free(PerlInterpreter* my_perl __attribute__((unused)), PADOFFSET po);
 OP * Perl_pad_leavemy(PerlInterpreter* my_perl __attribute__((unused)));
 PADLIST* Perl_pad_new(PerlInterpreter* my_perl __attribute__((unused)), int flags)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 void Perl_pad_push(PerlInterpreter* my_perl __attribute__((unused)), PADLIST *padlist, int depth)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PAD_PUSH assert(padlist)


 void Perl_pad_swipe(PerlInterpreter* my_perl __attribute__((unused)), PADOFFSET po, _Bool refadjust);
 void Perl_pad_tidy(PerlInterpreter* my_perl __attribute__((unused)), padtidy_type type);
 PAD ** Perl_padlist_store(PerlInterpreter* my_perl __attribute__((unused)), PADLIST *padlist, I32 key, PAD *val)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PADLIST_STORE assert(padlist)


 void Perl_padname_free(PerlInterpreter* my_perl __attribute__((unused)), PADNAME *pn)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PADNAME_FREE assert(pn)


 PADNAME * Perl_padnamelist_fetch(PADNAMELIST *pnl, ssize_t key)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_PADNAMELIST_FETCH assert(pnl)


 void Perl_padnamelist_free(PerlInterpreter* my_perl __attribute__((unused)), PADNAMELIST *pnl)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PADNAMELIST_FREE assert(pnl)


 PADNAME ** Perl_padnamelist_store(PerlInterpreter* my_perl __attribute__((unused)), PADNAMELIST *pnl, ssize_t key, PADNAME *val)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PADNAMELIST_STORE assert(pnl)


 OP* Perl_parse_arithexpr(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
 OP* Perl_parse_barestmt(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
 OP* Perl_parse_block(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
 OP* Perl_parse_fullexpr(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
 OP* Perl_parse_fullstmt(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
 SV* Perl_parse_label(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
 OP* Perl_parse_listexpr(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
 OP* Perl_parse_stmtseq(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
 OP * Perl_parse_subsignature(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));

 OP* Perl_parse_termexpr(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
 U32 Perl_parse_unicode_opts(PerlInterpreter* my_perl __attribute__((unused)), const char **popt)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PARSE_UNICODE_OPTS assert(popt)


 void Perl_parser_free(PerlInterpreter* my_perl __attribute__((unused)), const yy_parser *parser)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PARSER_FREE assert(parser)


 void Perl_peep(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
 PerlInterpreter* perl_alloc(void);
 void perl_construct(PerlInterpreter *my_perl)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_PERL_CONSTRUCT assert(my_perl)


 int perl_destruct(PerlInterpreter *my_perl)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_PERL_DESTRUCT assert(my_perl)


 void perl_free(PerlInterpreter *my_perl)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_PERL_FREE assert(my_perl)


 int perl_parse(PerlInterpreter *my_perl, XSINIT_t xsinit, int argc, char** argv, char** env)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_PERL_PARSE assert(my_perl)


 int perl_run(PerlInterpreter *my_perl)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_PERL_RUN assert(my_perl)


 void Perl_pmop_dump(PerlInterpreter* my_perl __attribute__((unused)), PMOP* pm);
 OP* Perl_pmruntime(PerlInterpreter* my_perl __attribute__((unused)), OP *o, OP *expr, OP *repl, _Bool isreg, I32 floor)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_PMRUNTIME assert(o); assert(expr)


 void Perl_pop_scope(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_populate_isa(PerlInterpreter* my_perl __attribute__((unused)), const char *name, STRLEN len, ...)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_POPULATE_ISA assert(name)


 REGEXP* Perl_pregcomp(PerlInterpreter* my_perl __attribute__((unused)), SV * const pattern, const U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PREGCOMP assert(pattern)


 I32 Perl_pregexec(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const prog, char* stringarg, char* strend, char* strbeg, ssize_t minend, SV* screamer, U32 nosave)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)))
   __attribute__((nonnull(5)))
   __attribute__((nonnull(7)));
#define PERL_ARGS_ASSERT_PREGEXEC assert(prog); assert(stringarg); assert(strend); assert(strbeg); assert(screamer)


 void Perl_pregfree(PerlInterpreter* my_perl __attribute__((unused)), REGEXP* r);
 void Perl_pregfree2(PerlInterpreter* my_perl __attribute__((unused)), REGEXP *rx)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PREGFREE2 assert(rx)


 const char* Perl_prescan_version(PerlInterpreter* my_perl __attribute__((unused)), const char *s, _Bool strict, const char** errstr, _Bool *sqv, int *ssaw_decimal, int *swidth, _Bool *salpha)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PRESCAN_VERSION assert(s)


 void Perl_ptr_table_clear(PerlInterpreter* my_perl __attribute__((unused)), PTR_TBL_t *const tbl)
   __attribute__((deprecated));

 void* Perl_ptr_table_fetch(PerlInterpreter* my_perl __attribute__((unused)), PTR_TBL_t *const tbl, const void *const sv)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PTR_TABLE_FETCH assert(tbl)


 void Perl_ptr_table_free(PerlInterpreter* my_perl __attribute__((unused)), PTR_TBL_t *const tbl);
 PTR_TBL_t* Perl_ptr_table_new(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 void Perl_ptr_table_split(PerlInterpreter* my_perl __attribute__((unused)), PTR_TBL_t *const tbl)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_PTR_TABLE_SPLIT assert(tbl)


 void Perl_ptr_table_store(PerlInterpreter* my_perl __attribute__((unused)), PTR_TBL_t *const tbl, const void *const oldsv, void *const newsv)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_PTR_TABLE_STORE assert(tbl); assert(newsv)


 void Perl_push_scope(PerlInterpreter* my_perl __attribute__((unused)));
 char* Perl_pv_display(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, const char *pv, STRLEN cur, STRLEN len, STRLEN pvlim)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_PV_DISPLAY assert(dsv); assert(pv)


 char* Perl_pv_escape(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, char const * const str, const STRLEN count, const STRLEN max, STRLEN * const escaped, const U32 flags)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_PV_ESCAPE assert(str)


 char* Perl_pv_pretty(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, char const * const str, const STRLEN count, const STRLEN max, char const * const start_color, char const * const end_color, const U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_PV_PRETTY assert(dsv); assert(str)


 char* Perl_pv_uni_display(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, const U8 *spv, STRLEN len, STRLEN pvlim, UV flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_PV_UNI_DISPLAY assert(dsv); assert(spv)


 void Perl_qerror(PerlInterpreter* my_perl __attribute__((unused)), SV* err)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_QERROR assert(err)


 REGEXP* Perl_re_compile(PerlInterpreter* my_perl __attribute__((unused)), SV * const pattern, U32 orig_rx_flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_RE_COMPILE assert(pattern)


 char* Perl_re_intuit_start(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, SV* sv, const char* const strbeg, char* strpos, char* strend, const U32 flags, re_scream_pos_data *data)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)))
   __attribute__((nonnull(5)))
   __attribute__((nonnull(6)));
#define PERL_ARGS_ASSERT_RE_INTUIT_START assert(rx); assert(strbeg); assert(strpos); assert(strend)


 SV* Perl_re_intuit_string(PerlInterpreter* my_perl __attribute__((unused)), REGEXP *const r)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_RE_INTUIT_STRING assert(r)


 REGEXP* Perl_re_op_compile(PerlInterpreter* my_perl __attribute__((unused)), SV ** const patternp, int pat_count, OP *expr, const regexp_engine* eng, REGEXP *old_re, _Bool *is_bare_re, U32 rx_flags, U32 pm_flags)
   __attribute__((nonnull(5)));
#define PERL_ARGS_ASSERT_RE_OP_COMPILE assert(eng)


 void * Perl_realloc(void * where, size_t nbytes)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 void Perl_reentrant_free(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_reentrant_init(PerlInterpreter* my_perl __attribute__((unused)));
 void* Perl_reentrant_retry(const char *f, ...)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_REENTRANT_RETRY assert(f)


 void Perl_reentrant_size(PerlInterpreter* my_perl __attribute__((unused)));

 HV * Perl_refcounted_he_chain_2hv(PerlInterpreter* my_perl __attribute__((unused)), const struct refcounted_he *c, U32 flags);
 SV * Perl_refcounted_he_fetch_pv(PerlInterpreter* my_perl __attribute__((unused)), const struct refcounted_he *chain, const char *key, U32 hash, U32 flags)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FETCH_PV assert(key)


 SV * Perl_refcounted_he_fetch_pvn(PerlInterpreter* my_perl __attribute__((unused)), const struct refcounted_he *chain, const char *keypv, STRLEN keylen, U32 hash, U32 flags)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FETCH_PVN assert(keypv)


 SV * Perl_refcounted_he_fetch_sv(PerlInterpreter* my_perl __attribute__((unused)), const struct refcounted_he *chain, SV *key, U32 hash, U32 flags)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FETCH_SV assert(key)


 void Perl_refcounted_he_free(PerlInterpreter* my_perl __attribute__((unused)), struct refcounted_he *he);
 struct refcounted_he * Perl_refcounted_he_inc(PerlInterpreter* my_perl __attribute__((unused)), struct refcounted_he *he);
 struct refcounted_he * Perl_refcounted_he_new_pv(PerlInterpreter* my_perl __attribute__((unused)), struct refcounted_he *parent, const char *key, U32 hash, SV *value, U32 flags)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_PV assert(key)


 struct refcounted_he * Perl_refcounted_he_new_pvn(PerlInterpreter* my_perl __attribute__((unused)), struct refcounted_he *parent, const char *keypv, STRLEN keylen, U32 hash, SV *value, U32 flags)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_PVN assert(keypv)


 struct refcounted_he * Perl_refcounted_he_new_sv(PerlInterpreter* my_perl __attribute__((unused)), struct refcounted_he *parent, SV *key, U32 hash, SV *value, U32 flags)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_SV assert(key)


 SV* Perl_reg_named_buff(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, SV * const key, SV * const value, const U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF assert(rx)


 SV* Perl_reg_named_buff_all(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_ALL assert(rx)


 _Bool Perl_reg_named_buff_exists(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, SV * const key, const U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_EXISTS assert(rx); assert(key)


 SV* Perl_reg_named_buff_fetch(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, SV * const namesv, const U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_FETCH assert(rx); assert(namesv)


 SV* Perl_reg_named_buff_firstkey(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_FIRSTKEY assert(rx)


 SV* Perl_reg_named_buff_iter(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const SV * const lastkey, const U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_ITER assert(rx)


 SV* Perl_reg_named_buff_nextkey(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_NEXTKEY assert(rx)


 SV* Perl_reg_named_buff_scalar(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_SCALAR assert(rx)


 void Perl_reg_numbered_buff_fetch(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const I32 paren, SV * const sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_FETCH assert(rx)


 I32 Perl_reg_numbered_buff_length(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const SV * const sv, const I32 paren)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_LENGTH assert(rx); assert(sv)


 void Perl_reg_numbered_buff_store(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const I32 paren, SV const * const value)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_STORE assert(rx)


 SV* Perl_reg_qr_package(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_REG_QR_PACKAGE assert(rx)


 REGEXP* Perl_reg_temp_copy(PerlInterpreter* my_perl __attribute__((unused)), REGEXP* ret_x, REGEXP* rx)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_REG_TEMP_COPY assert(rx)


 SV* Perl_regclass_swash(PerlInterpreter* my_perl __attribute__((unused)), const regexp *prog, const struct regnode *node, _Bool doinit, SV **listsvp, SV **altsvp)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_REGCLASS_SWASH assert(node)


 void Perl_regdump(PerlInterpreter* my_perl __attribute__((unused)), const regexp* r)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_REGDUMP assert(r)


 I32 Perl_regexec_flags(PerlInterpreter* my_perl __attribute__((unused)), REGEXP *const rx, char *stringarg, char *strend, char *strbeg, ssize_t minend, SV *sv, void *data, U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)))
   __attribute__((nonnull(5)))
   __attribute__((nonnull(7)));
#define PERL_ARGS_ASSERT_REGEXEC_FLAGS assert(rx); assert(stringarg); assert(strend); assert(strbeg); assert(sv)


 void Perl_regfree_internal(PerlInterpreter* my_perl __attribute__((unused)), REGEXP *const rx)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_REGFREE_INTERNAL assert(rx)


 void Perl_reginitcolors(PerlInterpreter* my_perl __attribute__((unused)));
 regnode* Perl_regnext(PerlInterpreter* my_perl __attribute__((unused)), regnode* p)
   __attribute__((warn_unused_result));

 void Perl_repeatcpy(char* to, const char* from, I32 len, IV count)
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_REPEATCPY assert(to); assert(from)


 void Perl_report_evil_fh(PerlInterpreter* my_perl __attribute__((unused)), const GV *gv);
 void Perl_report_uninit(PerlInterpreter* my_perl __attribute__((unused)), const SV *uninit_sv);
 void Perl_report_wrongway_fh(PerlInterpreter* my_perl __attribute__((unused)), const GV *gv, const char have);
 void Perl_require_pv(PerlInterpreter* my_perl __attribute__((unused)), const char* pv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_REQUIRE_PV assert(pv)


 char* Perl_rninstr(const char* big, const char* bigend, const char* little, const char* lend)
   __attribute__((pure))
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_RNINSTR assert(big); assert(bigend); assert(little); assert(lend)


 void Perl_rpeep(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
 Sighandler_t Perl_rsignal(PerlInterpreter* my_perl __attribute__((unused)), int i, Sighandler_t t);
 int Perl_rsignal_restore(PerlInterpreter* my_perl __attribute__((unused)), int i, Sigsave_t* t);
 int Perl_rsignal_save(PerlInterpreter* my_perl __attribute__((unused)), int i, Sighandler_t t1, Sigsave_t* save)
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_RSIGNAL_SAVE assert(save)


 Sighandler_t Perl_rsignal_state(PerlInterpreter* my_perl __attribute__((unused)), int i);
 int Perl_runops_debug(PerlInterpreter* my_perl __attribute__((unused)));
 int Perl_runops_standard(PerlInterpreter* my_perl __attribute__((unused)));
 CV* Perl_rv2cv_op_cv(PerlInterpreter* my_perl __attribute__((unused)), OP *cvop, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_RV2CV_OP_CV assert(cvop)


 void Perl_rxres_save(PerlInterpreter* my_perl __attribute__((unused)), void **rsp, REGEXP *rx)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_RXRES_SAVE assert(rsp); assert(rx)


 void * Perl_safesyscalloc(size_t elements, size_t size)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 void Perl_safesysfree(void * where);
 void * Perl_safesysmalloc(size_t nbytes)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 void * Perl_safesysrealloc(void * where, size_t nbytes)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 void Perl_save_I16(PerlInterpreter* my_perl __attribute__((unused)), I16* intp)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_I16 assert(intp)


 void Perl_save_I32(PerlInterpreter* my_perl __attribute__((unused)), I32* intp)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_I32 assert(intp)


 void Perl_save_I8(PerlInterpreter* my_perl __attribute__((unused)), I8* bytep)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_I8 assert(bytep)


 void Perl_save_adelete(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t key)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_ADELETE assert(av)






 void Perl_save_aelem_flags(PerlInterpreter* my_perl __attribute__((unused)), AV* av, ssize_t idx, SV **sptr, const U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_SAVE_AELEM_FLAGS assert(av); assert(sptr)


 void Perl_save_aliased_sv(PerlInterpreter* my_perl __attribute__((unused)), GV* gv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_ALIASED_SV assert(gv)


 I32 Perl_save_alloc(PerlInterpreter* my_perl __attribute__((unused)), I32 size, I32 pad);
 void Perl_save_aptr(PerlInterpreter* my_perl __attribute__((unused)), AV** aptr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_APTR assert(aptr)


 AV* Perl_save_ary(PerlInterpreter* my_perl __attribute__((unused)), GV* gv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_ARY assert(gv)


 void Perl_save_bool(PerlInterpreter* my_perl __attribute__((unused)), _Bool* boolp)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_BOOL assert(boolp)


 void Perl_save_clearsv(PerlInterpreter* my_perl __attribute__((unused)), SV** svp)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_CLEARSV assert(svp)


 void Perl_save_delete(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, char *key, I32 klen)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SAVE_DELETE assert(hv); assert(key)


 void Perl_save_destructor(PerlInterpreter* my_perl __attribute__((unused)), DESTRUCTORFUNC_NOCONTEXT_t f, void* p)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SAVE_DESTRUCTOR assert(p)


 void Perl_save_destructor_x(PerlInterpreter* my_perl __attribute__((unused)), DESTRUCTORFUNC_t f, void* p);



 void Perl_save_generic_pvref(PerlInterpreter* my_perl __attribute__((unused)), char** str)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_GENERIC_PVREF assert(str)


 void Perl_save_generic_svref(PerlInterpreter* my_perl __attribute__((unused)), SV** sptr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_GENERIC_SVREF assert(sptr)


 void Perl_save_gp(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, I32 empty)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_GP assert(gv)


 HV* Perl_save_hash(PerlInterpreter* my_perl __attribute__((unused)), GV* gv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_HASH assert(gv)


 void Perl_save_hdelete(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, SV *keysv)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SAVE_HDELETE assert(hv); assert(keysv)







 void Perl_save_helem_flags(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, SV *key, SV **sptr, const U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_SAVE_HELEM_FLAGS assert(hv); assert(key); assert(sptr)


 void Perl_save_hints(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_save_hptr(PerlInterpreter* my_perl __attribute__((unused)), HV** hptr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_HPTR assert(hptr)


 void Perl_save_int(PerlInterpreter* my_perl __attribute__((unused)), int* intp)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_INT assert(intp)


 void Perl_save_item(PerlInterpreter* my_perl __attribute__((unused)), SV* item)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_ITEM assert(item)


 void Perl_save_iv(PerlInterpreter* my_perl __attribute__((unused)), IV *ivp)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_IV assert(ivp)


 void Perl_save_list(PerlInterpreter* my_perl __attribute__((unused)), SV** sarg, I32 maxsarg)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_LIST assert(sarg)


 void Perl_save_long(PerlInterpreter* my_perl __attribute__((unused)), long* longp)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_LONG assert(longp)




#define PERL_ARGS_ASSERT_SAVE_MORTALIZESV assert(sv)


 void Perl_save_nogv(PerlInterpreter* my_perl __attribute__((unused)), GV* gv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_NOGV assert(gv)



 void Perl_save_padsv_and_mortalize(PerlInterpreter* my_perl __attribute__((unused)), PADOFFSET off);
 void Perl_save_pptr(PerlInterpreter* my_perl __attribute__((unused)), char** pptr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_PPTR assert(pptr)


 void Perl_save_pushi32ptr(PerlInterpreter* my_perl __attribute__((unused)), const I32 i, void *const ptr, const int type);
 void Perl_save_pushptr(PerlInterpreter* my_perl __attribute__((unused)), void *const ptr, const int type);
 void Perl_save_pushptrptr(PerlInterpreter* my_perl __attribute__((unused)), void *const ptr1, void *const ptr2, const int type);
 void Perl_save_re_context(PerlInterpreter* my_perl __attribute__((unused)));
 SV* Perl_save_scalar(PerlInterpreter* my_perl __attribute__((unused)), GV* gv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_SCALAR assert(gv)


 void Perl_save_set_svflags(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, U32 mask, U32 val)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_SET_SVFLAGS assert(sv)


 void Perl_save_shared_pvref(PerlInterpreter* my_perl __attribute__((unused)), char** str)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_SHARED_PVREF assert(str)


 void Perl_save_sptr(PerlInterpreter* my_perl __attribute__((unused)), SV** sptr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_SPTR assert(sptr)


 void Perl_save_strlen(PerlInterpreter* my_perl __attribute__((unused)), STRLEN* ptr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_STRLEN assert(ptr)


 SV* Perl_save_svref(PerlInterpreter* my_perl __attribute__((unused)), SV** sptr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_SVREF assert(sptr)


 void Perl_save_vptr(PerlInterpreter* my_perl __attribute__((unused)), void *ptr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVE_VPTR assert(ptr)


 char* Perl_savepv(PerlInterpreter* my_perl __attribute__((unused)), const char* pv)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 char* Perl_savepvn(PerlInterpreter* my_perl __attribute__((unused)), const char* pv, I32 len)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 char* Perl_savesharedpv(PerlInterpreter* my_perl __attribute__((unused)), const char* pv)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 char* Perl_savesharedpvn(PerlInterpreter* my_perl __attribute__((unused)), const char *const pv, const STRLEN len)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 char* Perl_savesharedsvpv(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVESHAREDSVPV assert(sv)


 void Perl_savestack_grow(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_savestack_grow_cnt(PerlInterpreter* my_perl __attribute__((unused)), I32 need);
 char* Perl_savesvpv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SAVESVPV assert(sv)


 OP* Perl_sawparens(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
 OP* Perl_scalar(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
 OP* Perl_scalarvoid(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SCALARVOID assert(o)


 NV Perl_scan_bin(PerlInterpreter* my_perl __attribute__((unused)), const char* start, STRLEN len, STRLEN* retlen)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_SCAN_BIN assert(start); assert(retlen)


 NV Perl_scan_hex(PerlInterpreter* my_perl __attribute__((unused)), const char* start, STRLEN len, STRLEN* retlen)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_SCAN_HEX assert(start); assert(retlen)


 char* Perl_scan_num(PerlInterpreter* my_perl __attribute__((unused)), const char* s, YYSTYPE *lvalp)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SCAN_NUM assert(s); assert(lvalp)


 NV Perl_scan_oct(PerlInterpreter* my_perl __attribute__((unused)), const char* start, STRLEN len, STRLEN* retlen)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_SCAN_OCT assert(start); assert(retlen)


 const char* Perl_scan_version(PerlInterpreter* my_perl __attribute__((unused)), const char *s, SV *rv, _Bool qv)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SCAN_VERSION assert(s); assert(rv)


 char* Perl_scan_vstring(PerlInterpreter* my_perl __attribute__((unused)), const char *s, const char *const e, SV *sv)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_SCAN_VSTRING assert(s); assert(e); assert(sv)


 U32 Perl_seed(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_set_caret_X(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_set_context(void *t)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_SET_CONTEXT assert(t)


 void Perl_set_numeric_local(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_set_numeric_radix(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_set_numeric_standard(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_setdefout(PerlInterpreter* my_perl __attribute__((unused)), GV* gv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SETDEFOUT assert(gv)


 HEK* Perl_share_hek(PerlInterpreter* my_perl __attribute__((unused)), const char* str, I32 len, U32 hash)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SHARE_HEK assert(str)


 void Perl_sortsv(PerlInterpreter* my_perl __attribute__((unused)), SV** array, size_t num_elts, SVCOMPARE_t cmp)
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_SORTSV assert(cmp)


 void Perl_sortsv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV** array, size_t num_elts, SVCOMPARE_t cmp, U32 flags)
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_SORTSV_FLAGS assert(cmp)


 SV** Perl_stack_grow(PerlInterpreter* my_perl __attribute__((unused)), SV** sp, SV** p, ssize_t n)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_STACK_GROW assert(sp); assert(p)


 PerlIO* Perl_start_glob(PerlInterpreter* my_perl __attribute__((unused)), SV *tmpglob, IO *io)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_START_GLOB assert(tmpglob); assert(io)


 I32 Perl_start_subparse(PerlInterpreter* my_perl __attribute__((unused)), I32 is_format, U32 flags);
 NV Perl_str_to_version(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_STR_TO_VERSION assert(sv)


 void Perl_sub_crush_depth(PerlInterpreter* my_perl __attribute__((unused)), CV* cv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SUB_CRUSH_DEPTH assert(cv)





 _Bool Perl_sv_2bool_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_2BOOL_FLAGS assert(sv)


 CV* Perl_sv_2cv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, HV **const st, GV **const gvp, const I32 lref)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_SV_2CV assert(st); assert(gvp)


 IO* Perl_sv_2io(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_2IO assert(sv)




#define PERL_ARGS_ASSERT_SV_2IV assert(sv)


 IV Perl_sv_2iv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_2IV_FLAGS assert(sv)


 SV* Perl_sv_2mortal(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
 SV* Perl_sv_2num(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_2NUM assert(sv)


 NV Perl_sv_2nv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_2NV_FLAGS assert(sv)




#define PERL_ARGS_ASSERT_SV_2PV assert(sv)


 char* Perl_sv_2pv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN *const lp, const I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_2PV_FLAGS assert(sv)





#define PERL_ARGS_ASSERT_SV_2PV_NOLEN assert(sv)


 char* Perl_sv_2pvbyte(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, STRLEN *const lp)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_2PVBYTE assert(sv)





#define PERL_ARGS_ASSERT_SV_2PVBYTE_NOLEN assert(sv)


 char* Perl_sv_2pvutf8(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, STRLEN *const lp)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_2PVUTF8 assert(sv)





#define PERL_ARGS_ASSERT_SV_2PVUTF8_NOLEN assert(sv)




#define PERL_ARGS_ASSERT_SV_2UV assert(sv)


 UV Perl_sv_2uv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_2UV_FLAGS assert(sv)


 int Perl_sv_backoff(SV *const sv)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_SV_BACKOFF assert(sv)


 SV* Perl_sv_bless(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, HV *const stash)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_BLESS assert(sv); assert(stash)


 _Bool Perl_sv_cat_decode(PerlInterpreter* my_perl __attribute__((unused)), SV* dsv, SV *encoding, SV *ssv, int *offset, char* tstr, int tlen)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)))
   __attribute__((nonnull(5)))
   __attribute__((nonnull(6)));
#define PERL_ARGS_ASSERT_SV_CAT_DECODE assert(dsv); assert(encoding); assert(ssv); assert(offset); assert(tstr)


 void Perl_sv_catpv(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char* ptr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_CATPV assert(sv)


 void Perl_sv_catpv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *dstr, const char *sstr, const I32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_CATPV_FLAGS assert(dstr); assert(sstr)


 void Perl_sv_catpv_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const ptr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_CATPV_MG assert(sv)


 void Perl_sv_catpvf(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, ...)
   __attribute__((format(__printf__,3,4)))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_CATPVF assert(sv); assert(pat)


 void Perl_sv_catpvf_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, ...)
   __attribute__((format(__printf__,3,4)))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_CATPVF_MG assert(sv); assert(pat)





#define PERL_ARGS_ASSERT_SV_CATPVN assert(dsv); assert(sstr)


 void Perl_sv_catpvn_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const dstr, const char *sstr, const STRLEN len, const I32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_CATPVN_FLAGS assert(dstr); assert(sstr)





#define PERL_ARGS_ASSERT_SV_CATPVN_MG assert(sv); assert(ptr)




#define PERL_ARGS_ASSERT_SV_CATSV assert(dstr)


 void Perl_sv_catsv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const dsv, SV *const ssv, const I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_CATSV_FLAGS assert(dsv)




#define PERL_ARGS_ASSERT_SV_CATSV_MG assert(dsv)


 void Perl_sv_chop(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const ptr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_CHOP assert(sv)


 I32 Perl_sv_clean_all(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_sv_clean_objs(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_sv_clear(PerlInterpreter* my_perl __attribute__((unused)), SV *const orig_sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_CLEAR assert(orig_sv)


 I32 Perl_sv_cmp(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv1, SV *const sv2);
 I32 Perl_sv_cmp_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv1, SV *const sv2, const U32 flags);
 I32 Perl_sv_cmp_locale(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv1, SV *const sv2);
 I32 Perl_sv_cmp_locale_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv1, SV *const sv2, const U32 flags);



#define PERL_ARGS_ASSERT_SV_COPYPV assert(dsv); assert(ssv)


 void Perl_sv_copypv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const dsv, SV *const ssv, const I32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_COPYPV_FLAGS assert(dsv); assert(ssv)






 void Perl_sv_dec(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
 void Perl_sv_dec_nomg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
 void Perl_sv_del_backref(PerlInterpreter* my_perl __attribute__((unused)), SV *const tsv, SV *const sv)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_DEL_BACKREF assert(tsv); assert(sv)


 _Bool Perl_sv_derived_from(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const char *const name)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM assert(sv); assert(name)


 _Bool Perl_sv_derived_from_pv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const char *const name, U32 flags)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_PV assert(sv); assert(name)


 _Bool Perl_sv_derived_from_pvn(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const char *const name, const STRLEN len, U32 flags)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_PVN assert(sv); assert(name)


 _Bool Perl_sv_derived_from_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, SV *namesv, U32 flags)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_SV assert(sv); assert(namesv)


 _Bool Perl_sv_destroyable(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
 _Bool Perl_sv_does(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const char *const name)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_DOES assert(sv); assert(name)


 _Bool Perl_sv_does_pv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const char *const name, U32 flags)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_DOES_PV assert(sv); assert(name)


 _Bool Perl_sv_does_pvn(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const char *const name, const STRLEN len, U32 flags)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_DOES_PVN assert(sv); assert(name)


 _Bool Perl_sv_does_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, SV* namesv, U32 flags)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_DOES_SV assert(sv); assert(namesv)


 void Perl_sv_dump(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_DUMP assert(sv)



 I32 Perl_sv_eq_flags(PerlInterpreter* my_perl __attribute__((unused)), SV* sv1, SV* sv2, const U32 flags);


#define PERL_ARGS_ASSERT_SV_FORCE_NORMAL assert(sv)


 void Perl_sv_force_normal_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_FORCE_NORMAL_FLAGS assert(sv)


 void Perl_sv_free(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
 void Perl_sv_free2(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const U32 refcnt)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_FREE2 assert(sv)


 void Perl_sv_free_arenas(PerlInterpreter* my_perl __attribute__((unused)));
 SV* Perl_sv_get_backrefs(SV *const sv)
   __attribute__((pure))
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_SV_GET_BACKREFS assert(sv)


 char* Perl_sv_gets(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, PerlIO *const fp, I32 append)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_GETS assert(sv); assert(fp)


 char* Perl_sv_grow(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN newlen)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_GROW assert(sv)


 void Perl_sv_inc(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
 void Perl_sv_inc_nomg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);



#define PERL_ARGS_ASSERT_SV_INSERT assert(bigstr); assert(little)


 void Perl_sv_insert_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const bigstr, const STRLEN offset, const STRLEN len, const char *const little, const STRLEN littlelen, const U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(5)));
#define PERL_ARGS_ASSERT_SV_INSERT_FLAGS assert(bigstr); assert(little)


 int Perl_sv_isa(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const char *const name)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_ISA assert(name)


 int Perl_sv_isobject(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
 IV Perl_sv_iv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_IV assert(sv)


 STRLEN Perl_sv_len(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
 STRLEN Perl_sv_len_utf8(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
 STRLEN Perl_sv_len_utf8_nomg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_LEN_UTF8_NOMG assert(sv)


 void Perl_sv_magic(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, SV *const obj, const int how, const char *const name, const I32 namlen)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_MAGIC assert(sv)


 MAGIC * Perl_sv_magicext(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, SV *const obj, const int how, const MGVTBL *const vtbl, const char *const name, const I32 namlen)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_MAGICEXT assert(sv)


 MAGIC * Perl_sv_magicext_mglob(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_MAGICEXT_MGLOB assert(sv)






 SV* Perl_sv_mortalcopy_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const oldsv, U32 flags)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));

 SV* Perl_sv_newmortal(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));

 SV* Perl_sv_newref(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);

 void Perl_sv_nosharing(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
 NV Perl_sv_nv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_NV assert(sv)


static __inline__ _Bool S_sv_only_taint_gmagic(SV *sv)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_SV_ONLY_TAINT_GMAGIC assert(sv)


 char* Perl_sv_peek(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
 void Perl_sv_pos_b2u(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, I32 *const offsetp)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_POS_B2U assert(offsetp)


 STRLEN Perl_sv_pos_b2u_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN const offset, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_POS_B2U_FLAGS assert(sv)


 void Perl_sv_pos_u2b(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, I32 *const offsetp, I32 *const lenp)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_POS_U2B assert(offsetp)


 STRLEN Perl_sv_pos_u2b_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN uoffset, STRLEN *const lenp, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_POS_U2B_FLAGS assert(sv)





#define PERL_ARGS_ASSERT_SV_PV assert(sv)





#define PERL_ARGS_ASSERT_SV_PVBYTE assert(sv)


 char* Perl_sv_pvbyten(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, STRLEN *lp)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_PVBYTEN assert(sv); assert(lp)


 char* Perl_sv_pvbyten_force(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN *const lp)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_PVBYTEN_FORCE assert(sv)


 char* Perl_sv_pvn(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, STRLEN *lp)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_PVN assert(sv); assert(lp)




#define PERL_ARGS_ASSERT_SV_PVN_FORCE assert(sv)


 char* Perl_sv_pvn_force_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN *const lp, const I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_PVN_FORCE_FLAGS assert(sv)


 char* Perl_sv_pvn_nomg(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, STRLEN* lp)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_PVN_NOMG assert(sv)





#define PERL_ARGS_ASSERT_SV_PVUTF8 assert(sv)


 char* Perl_sv_pvutf8n(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, STRLEN *lp)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_PVUTF8N assert(sv); assert(lp)


 char* Perl_sv_pvutf8n_force(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN *const lp)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_PVUTF8N_FORCE assert(sv)


 char* Perl_sv_recode_to_utf8(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, SV *encoding)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_RECODE_TO_UTF8 assert(sv); assert(encoding)


 SV* Perl_sv_ref(PerlInterpreter* my_perl __attribute__((unused)), SV *dst, const SV *const sv, const int ob)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_REF assert(sv)


 const char* Perl_sv_reftype(PerlInterpreter* my_perl __attribute__((unused)), const SV *const sv, const int ob)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_REFTYPE assert(sv)


 void Perl_sv_replace(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, SV *const nsv)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_REPLACE assert(sv); assert(nsv)


 void Perl_sv_report_used(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_sv_reset(PerlInterpreter* my_perl __attribute__((unused)), const char* s, HV *const stash)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_RESET assert(s)


 void Perl_sv_resetpvn(PerlInterpreter* my_perl __attribute__((unused)), const char* s, STRLEN len, HV *const stash);
 SV* Perl_sv_rvweaken(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_RVWEAKEN assert(sv)


 void Perl_sv_sethek(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const HEK *const hek)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETHEK assert(sv)


 void Perl_sv_setiv(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const IV num)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETIV assert(sv)


 void Perl_sv_setiv_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const IV i)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETIV_MG assert(sv)


 void Perl_sv_setnv(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const NV num)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETNV assert(sv)


 void Perl_sv_setnv_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const NV num)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETNV_MG assert(sv)


 void Perl_sv_setpv(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const ptr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETPV assert(sv)


 void Perl_sv_setpv_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const ptr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETPV_MG assert(sv)


 void Perl_sv_setpvf(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, ...)
   __attribute__((format(__printf__,3,4)))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_SETPVF assert(sv); assert(pat)


 void Perl_sv_setpvf_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, ...)
   __attribute__((format(__printf__,3,4)))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_SETPVF_MG assert(sv); assert(pat)


 void Perl_sv_setpviv(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const IV num)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETPVIV assert(sv)


 void Perl_sv_setpviv_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const IV iv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETPVIV_MG assert(sv)


 void Perl_sv_setpvn(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const ptr, const STRLEN len)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETPVN assert(sv)


 void Perl_sv_setpvn_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const ptr, const STRLEN len)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_SETPVN_MG assert(sv); assert(ptr)


 SV* Perl_sv_setref_iv(PerlInterpreter* my_perl __attribute__((unused)), SV *const rv, const char *const classname, const IV iv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETREF_IV assert(rv)


 SV* Perl_sv_setref_nv(PerlInterpreter* my_perl __attribute__((unused)), SV *const rv, const char *const classname, const NV nv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETREF_NV assert(rv)


 SV* Perl_sv_setref_pv(PerlInterpreter* my_perl __attribute__((unused)), SV *const rv, const char *const classname, void *const pv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETREF_PV assert(rv)


 SV* Perl_sv_setref_pvn(PerlInterpreter* my_perl __attribute__((unused)), SV *const rv, const char *const classname, const char *const pv, const STRLEN n)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_SV_SETREF_PVN assert(rv); assert(pv)


 SV* Perl_sv_setref_uv(PerlInterpreter* my_perl __attribute__((unused)), SV *const rv, const char *const classname, const UV uv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETREF_UV assert(rv)




#define PERL_ARGS_ASSERT_SV_SETSV assert(dstr)


 void Perl_sv_setsv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *dstr, SV *sstr, const I32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETSV_FLAGS assert(dstr)


 void Perl_sv_setsv_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const dstr, SV *const sstr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETSV_MG assert(dstr)


 void Perl_sv_setuv(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const UV num)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETUV assert(sv)


 void Perl_sv_setuv_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const UV u)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETUV_MG assert(sv)




#define PERL_ARGS_ASSERT_SV_TAINT assert(sv)


 _Bool Perl_sv_tainted(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_TAINTED assert(sv)


 I32 Perl_sv_true(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
 char* Perl_sv_uni_display(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, SV *ssv, STRLEN pvlim, UV flags)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_UNI_DISPLAY assert(dsv); assert(ssv)


 int Perl_sv_unmagic(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const int type)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_UNMAGIC assert(sv)


 int Perl_sv_unmagicext(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const int type, MGVTBL *vtbl)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_UNMAGICEXT assert(sv)




#define PERL_ARGS_ASSERT_SV_UNREF assert(sv)


 void Perl_sv_unref_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const ref, const U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_UNREF_FLAGS assert(ref)


 void Perl_sv_untaint(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_UNTAINT assert(sv)


 void Perl_sv_upgrade(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, svtype new_type)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_UPGRADE assert(sv)




#define PERL_ARGS_ASSERT_SV_USEPVN assert(sv)


 void Perl_sv_usepvn_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, char* ptr, const STRLEN len, const U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_USEPVN_FLAGS assert(sv)




#define PERL_ARGS_ASSERT_SV_USEPVN_MG assert(sv)


 _Bool Perl_sv_utf8_decode(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_UTF8_DECODE assert(sv)


 _Bool Perl_sv_utf8_downgrade(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const _Bool fail_ok)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_UTF8_DOWNGRADE assert(sv)


 void Perl_sv_utf8_encode(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_UTF8_ENCODE assert(sv)




#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE assert(sv)





 STRLEN Perl_sv_utf8_upgrade_flags_grow(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const I32 flags, STRLEN extra)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE_FLAGS_GROW assert(sv)





 UV Perl_sv_uv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_UV assert(sv)


 void Perl_sv_vcatpvf(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, va_list *const args)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_VCATPVF assert(sv); assert(pat)


 void Perl_sv_vcatpvf_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, va_list *const args)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_VCATPVF_MG assert(sv); assert(pat)


 void Perl_sv_vcatpvfn(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, _Bool *const maybe_tainted)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_VCATPVFN assert(sv); assert(pat)


 void Perl_sv_vcatpvfn_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, _Bool *const maybe_tainted, const U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_VCATPVFN_FLAGS assert(sv); assert(pat)


 void Perl_sv_vsetpvf(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, va_list *const args)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_VSETPVF assert(sv); assert(pat)


 void Perl_sv_vsetpvf_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, va_list *const args)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_VSETPVF_MG assert(sv); assert(pat)


 void Perl_sv_vsetpvfn(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, _Bool *const maybe_tainted)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_VSETPVFN assert(sv); assert(pat)


 UV Perl_swash_fetch(PerlInterpreter* my_perl __attribute__((unused)), SV *swash, const U8 *ptr, _Bool do_utf8)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SWASH_FETCH assert(swash); assert(ptr)


 SV* Perl_swash_init(PerlInterpreter* my_perl __attribute__((unused)), const char* pkg, const char* name, SV* listsv, I32 minbits, I32 none)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_SWASH_INIT assert(pkg); assert(name); assert(listsv)


 void Perl_sync_locale(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_sys_init(int* argc, char*** argv)
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SYS_INIT assert(argc); assert(argv)


 void Perl_sys_init3(int* argc, char*** argv, char*** env)
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SYS_INIT3 assert(argc); assert(argv); assert(env)


 void Perl_sys_term(void);
 void Perl_taint_env(PerlInterpreter* my_perl __attribute__((unused)));
 void Perl_taint_proper(PerlInterpreter* my_perl __attribute__((unused)), const char* f, const char *const s)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_TAINT_PROPER assert(s)


 OP * Perl_tied_method(PerlInterpreter* my_perl __attribute__((unused)), SV *methname, SV **sp, SV *const sv, const MAGIC *const mg, const U32 flags, U32 argc, ...)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)))
   __attribute__((nonnull(5)));
#define PERL_ARGS_ASSERT_TIED_METHOD assert(methname); assert(sp); assert(sv); assert(mg)


 ssize_t Perl_tmps_grow_p(PerlInterpreter* my_perl __attribute__((unused)), ssize_t ix);




 UV Perl_to_uni_lower(PerlInterpreter* my_perl __attribute__((unused)), UV c, U8 *p, STRLEN *lenp)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_TO_UNI_LOWER assert(p); assert(lenp)


 U32 Perl_to_uni_lower_lc(PerlInterpreter* my_perl __attribute__((unused)), U32 c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 UV Perl_to_uni_title(PerlInterpreter* my_perl __attribute__((unused)), UV c, U8 *p, STRLEN *lenp)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_TO_UNI_TITLE assert(p); assert(lenp)


 U32 Perl_to_uni_title_lc(PerlInterpreter* my_perl __attribute__((unused)), U32 c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 UV Perl_to_uni_upper(PerlInterpreter* my_perl __attribute__((unused)), UV c, U8 *p, STRLEN *lenp)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_TO_UNI_UPPER assert(p); assert(lenp)


 U32 Perl_to_uni_upper_lc(PerlInterpreter* my_perl __attribute__((unused)), U32 c)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));

 UV Perl_to_utf8_case(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p, U8* ustrp, STRLEN *lenp, SV **swashp, const char *normal, const char *special)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(5)))
   __attribute__((nonnull(6)));
#define PERL_ARGS_ASSERT_TO_UTF8_CASE assert(p); assert(ustrp); assert(swashp); assert(normal)





#define PERL_ARGS_ASSERT_TO_UTF8_FOLD assert(p); assert(ustrp)





#define PERL_ARGS_ASSERT_TO_UTF8_LOWER assert(p); assert(ustrp)





#define PERL_ARGS_ASSERT_TO_UTF8_TITLE assert(p); assert(ustrp)





#define PERL_ARGS_ASSERT_TO_UTF8_UPPER assert(p); assert(ustrp)


 _Bool Perl_try_amagic_bin(PerlInterpreter* my_perl __attribute__((unused)), int method, int flags);
 _Bool Perl_try_amagic_un(PerlInterpreter* my_perl __attribute__((unused)), int method, int flags);
 I32 Perl_unpack_str(PerlInterpreter* my_perl __attribute__((unused)), const char *pat, const char *patend, const char *s, const char *strbeg, const char *strend, char **new_s, I32 ocnt, U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)))
   __attribute__((nonnull(6)));
#define PERL_ARGS_ASSERT_UNPACK_STR assert(pat); assert(patend); assert(s); assert(strend)


 I32 Perl_unpackstring(PerlInterpreter* my_perl __attribute__((unused)), const char *pat, const char *patend, const char *s, const char *strend, U32 flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)))
   __attribute__((nonnull(5)));
#define PERL_ARGS_ASSERT_UNPACKSTRING assert(pat); assert(patend); assert(s); assert(strend)


 void Perl_unshare_hek(PerlInterpreter* my_perl __attribute__((unused)), HEK* hek);
 void Perl_unsharepvn(PerlInterpreter* my_perl __attribute__((unused)), const char* sv, I32 len, U32 hash);
 SV* Perl_upg_version(PerlInterpreter* my_perl __attribute__((unused)), SV *ver, _Bool qv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_UPG_VERSION assert(ver)


 U8* Perl_utf16_to_utf8(PerlInterpreter* my_perl __attribute__((unused)), U8* p, U8 *d, I32 bytelen, I32 *newlen)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(5)));
#define PERL_ARGS_ASSERT_UTF16_TO_UTF8 assert(p); assert(d); assert(newlen)


 U8* Perl_utf16_to_utf8_reversed(PerlInterpreter* my_perl __attribute__((unused)), U8* p, U8 *d, I32 bytelen, I32 *newlen)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(5)));
#define PERL_ARGS_ASSERT_UTF16_TO_UTF8_REVERSED assert(p); assert(d); assert(newlen)


 IV Perl_utf8_distance(PerlInterpreter* my_perl __attribute__((unused)), const U8 *a, const U8 *b)
   __attribute__((warn_unused_result))
   __attribute__((pure))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_UTF8_DISTANCE assert(a); assert(b)


 U8* Perl_utf8_hop(const U8 *s, I32 off)
   __attribute__((warn_unused_result))
   __attribute__((pure))
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_UTF8_HOP assert(s)


 STRLEN Perl_utf8_length(PerlInterpreter* my_perl __attribute__((unused)), const U8* s, const U8 *e)
   __attribute__((warn_unused_result))
   __attribute__((pure))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_UTF8_LENGTH assert(s); assert(e)


 U8* Perl_utf8_to_bytes(PerlInterpreter* my_perl __attribute__((unused)), U8 *s, STRLEN *len)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_UTF8_TO_BYTES assert(s); assert(len)


 UV Perl_utf8_to_uvchr(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, STRLEN *retlen)
   __attribute__((deprecated))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_UTF8_TO_UVCHR assert(s)






 UV Perl_utf8_to_uvuni(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, STRLEN *retlen)
   __attribute__((deprecated))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_UTF8_TO_UVUNI assert(s)


 UV Perl_utf8_to_uvuni_buf(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, const U8 *send, STRLEN *retlen)
   __attribute__((deprecated))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_UTF8_TO_UVUNI_BUF assert(s); assert(send)


 UV Perl_utf8n_to_uvchr(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR assert(s)


 UV Perl_utf8n_to_uvuni(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_UTF8N_TO_UVUNI assert(s)


 void Perl_utilize(PerlInterpreter* my_perl __attribute__((unused)), int aver, I32 floor, OP* version, OP* idop, OP* arg)
   __attribute__((nonnull(5)));
#define PERL_ARGS_ASSERT_UTILIZE assert(idop)
# 5070 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h"
 U8* Perl_uvoffuni_to_utf8_flags(PerlInterpreter* my_perl __attribute__((unused)), U8 *d, UV uv, UV flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_UVOFFUNI_TO_UTF8_FLAGS assert(d)


 U8* Perl_uvuni_to_utf8(PerlInterpreter* my_perl __attribute__((unused)), U8 *d, UV uv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_UVUNI_TO_UTF8 assert(d)


 U8* Perl_uvuni_to_utf8_flags(PerlInterpreter* my_perl __attribute__((unused)), U8 *d, UV uv, UV flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_UVUNI_TO_UTF8_FLAGS assert(d)


 UV Perl_valid_utf8_to_uvchr(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, STRLEN *retlen)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_VALID_UTF8_TO_UVCHR assert(s)


 UV Perl_valid_utf8_to_uvuni(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, STRLEN *retlen)
   __attribute__((deprecated))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_VALID_UTF8_TO_UVUNI assert(s)


 _Bool Perl_validate_proto(PerlInterpreter* my_perl __attribute__((unused)), SV *name, SV *proto, _Bool warn)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_VALIDATE_PROTO assert(name)


 int Perl_vcmp(PerlInterpreter* my_perl __attribute__((unused)), SV *lhv, SV *rhv)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_VCMP assert(lhv); assert(rhv)


 void Perl_vcroak(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, va_list* args)
   __attribute__((noreturn));

 void Perl_vdeb(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, va_list* args)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_VDEB assert(pat)


 char* Perl_vform(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, va_list* args)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_VFORM assert(pat)


 void Perl_vivify_defelem(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_VIVIFY_DEFELEM assert(sv)


 SV* Perl_vivify_ref(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, U32 to_what)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_VIVIFY_REF assert(sv)


 void Perl_vload_module(PerlInterpreter* my_perl __attribute__((unused)), U32 flags, SV* name, SV* ver, va_list* args)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_VLOAD_MODULE assert(name)


 SV* Perl_vmess(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, va_list* args)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_VMESS assert(pat)


 SV* Perl_vnewSVpvf(PerlInterpreter* my_perl __attribute__((unused)), const char *const pat, va_list *const args)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_VNEWSVPVF assert(pat)


 SV* Perl_vnormal(PerlInterpreter* my_perl __attribute__((unused)), SV *vs)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_VNORMAL assert(vs)


 SV* Perl_vnumify(PerlInterpreter* my_perl __attribute__((unused)), SV *vs)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_VNUMIFY assert(vs)


 SV* Perl_vstringify(PerlInterpreter* my_perl __attribute__((unused)), SV *vs)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_VSTRINGIFY assert(vs)


 SV* Perl_vverify(PerlInterpreter* my_perl __attribute__((unused)), SV *vs)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_VVERIFY assert(vs)


 void Perl_vwarn(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, va_list* args)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_VWARN assert(pat)


 void Perl_vwarner(PerlInterpreter* my_perl __attribute__((unused)), U32 err, const char* pat, va_list* args)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_VWARNER assert(pat)


 I32 Perl_wait4pid(PerlInterpreter* my_perl __attribute__((unused)), pid_t pid, int* statusp, int flags)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_WAIT4PID assert(statusp)


 void Perl_warn(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, ...)
   __attribute__((format(__printf__,2,3)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_WARN assert(pat)


 void Perl_warn_sv(PerlInterpreter* my_perl __attribute__((unused)), SV *baseex)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_WARN_SV assert(baseex)


 void Perl_warner(PerlInterpreter* my_perl __attribute__((unused)), U32 err, const char* pat, ...)
   __attribute__((format(__printf__,3,4)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_WARNER assert(pat)


 I32 Perl_was_lvalue_sub(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));

 void Perl_watch(PerlInterpreter* my_perl __attribute__((unused)), char** addr)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_WATCH assert(addr)





 I32 Perl_whichsig_pv(PerlInterpreter* my_perl __attribute__((unused)), const char* sig)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_WHICHSIG_PV assert(sig)


 I32 Perl_whichsig_pvn(PerlInterpreter* my_perl __attribute__((unused)), const char* sig, STRLEN len)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_WHICHSIG_PVN assert(sig)


 I32 Perl_whichsig_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* sigsv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_WHICHSIG_SV assert(sigsv)


 void Perl_wrap_op_checker(PerlInterpreter* my_perl __attribute__((unused)), Optype opcode, Perl_check_t new_checker, Perl_check_t *old_checker_p)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_WRAP_OP_CHECKER assert(new_checker); assert(old_checker_p)


 void Perl_write_to_stderr(PerlInterpreter* my_perl __attribute__((unused)), SV* msv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_WRITE_TO_STDERR assert(msv)


 void Perl_xs_boot_epilog(PerlInterpreter* my_perl __attribute__((unused)), const U32 ax);
 I32 Perl_xs_handshake(const U32 key, void * v_my_perl, const char * file, ...)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_XS_HANDSHAKE assert(v_my_perl); assert(file)


 int Perl_yyerror(PerlInterpreter* my_perl __attribute__((unused)), const char *const s)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_YYERROR assert(s)


 int Perl_yyerror_pv(PerlInterpreter* my_perl __attribute__((unused)), const char *const s, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_YYERROR_PV assert(s)


 int Perl_yyerror_pvn(PerlInterpreter* my_perl __attribute__((unused)), const char *const s, STRLEN len, U32 flags)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_YYERROR_PVN assert(s)


 int Perl_yylex(PerlInterpreter* my_perl __attribute__((unused)));
 int Perl_yyparse(PerlInterpreter* my_perl __attribute__((unused)), int gramtype);
 void Perl_yyunlex(PerlInterpreter* my_perl __attribute__((unused)));
# 5278 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h"
 void Perl_sv_nounlocking(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
# 5289 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h"
 void* Perl_my_cxt_init(PerlInterpreter* my_perl __attribute__((unused)), int *index, size_t size)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_MY_CXT_INIT assert(index)
# 5302 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h"
 int Perl_magic_regdatum_set(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((noreturn))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_REGDATUM_SET assert(sv); assert(mg)
# 5318 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h"
 char* Perl_getenv_len(PerlInterpreter* my_perl __attribute__((unused)), const char *env_elem, unsigned long *len)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GETENV_LEN assert(env_elem); assert(len)
# 5430 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h"
 I32 Perl_my_pclose(PerlInterpreter* my_perl __attribute__((unused)), PerlIO* ptr);
 PerlIO* Perl_my_popen(PerlInterpreter* my_perl __attribute__((unused)), const char* cmd, const char* mode)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MY_POPEN assert(cmd); assert(mode)
# 5486 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h"
 _Bool Perl_do_exec3(PerlInterpreter* my_perl __attribute__((unused)), const char *incmd, int fd, int do_report)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_DO_EXEC3 assert(incmd)
# 5633 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h"
 I32 Perl_do_ipcctl(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, SV** mark, SV** sp)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_DO_IPCCTL assert(mark); assert(sp)


 I32 Perl_do_ipcget(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, SV** mark, SV** sp)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_DO_IPCGET assert(mark); assert(sp)


 I32 Perl_do_msgrcv(PerlInterpreter* my_perl __attribute__((unused)), SV** mark, SV** sp)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_DO_MSGRCV assert(mark); assert(sp)


 I32 Perl_do_msgsnd(PerlInterpreter* my_perl __attribute__((unused)), SV** mark, SV** sp)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_DO_MSGSND assert(mark); assert(sp)


 I32 Perl_do_semop(PerlInterpreter* my_perl __attribute__((unused)), SV** mark, SV** sp)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_DO_SEMOP assert(mark); assert(sp)


 I32 Perl_do_shmio(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, SV** mark, SV** sp)
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_DO_SHMIO assert(mark); assert(sp)




 void Perl_csighandler(int sig, siginfo_t *info, void *uap);
 void Perl_sighandler(int sig, siginfo_t *info, void *uap);
# 5711 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h"
 SV* Perl_sv_setsv_cow(PerlInterpreter* my_perl __attribute__((unused)), SV* dstr, SV* sstr)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_SETSV_COW assert(sstr)
# 5830 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h"
 void Perl_croak_nocontext(const char* pat, ...)
   __attribute__((noreturn))
   __attribute__((format(__printf__,1,2)));

 void Perl_deb_nocontext(const char* pat, ...)
   __attribute__((format(__printf__,1,2)))
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_DEB_NOCONTEXT assert(pat)


 OP* Perl_die_nocontext(const char* pat, ...)
   __attribute__((noreturn))
   __attribute__((format(__printf__,1,2)));

 char* Perl_form_nocontext(const char* pat, ...)
   __attribute__((format(__printf__,1,2)))
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_FORM_NOCONTEXT assert(pat)


 int Perl_fprintf_nocontext(PerlIO *stream, const char *format, ...)
   __attribute__((format(__printf__,2,3)))
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_FPRINTF_NOCONTEXT assert(stream); assert(format)


 void Perl_load_module_nocontext(U32 flags, SV* name, SV* ver, ...)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_LOAD_MODULE_NOCONTEXT assert(name)


 SV* Perl_mess_nocontext(const char* pat, ...)
   __attribute__((format(__printf__,1,2)))
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_MESS_NOCONTEXT assert(pat)


 SV* Perl_newSVpvf_nocontext(const char *const pat, ...)
   __attribute__((format(__printf__,1,2)))
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_NEWSVPVF_NOCONTEXT assert(pat)


 int Perl_printf_nocontext(const char *format, ...)
   __attribute__((format(__printf__,1,2)))
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_PRINTF_NOCONTEXT assert(format)


 void Perl_sv_catpvf_mg_nocontext(SV *const sv, const char *const pat, ...)
   __attribute__((format(__printf__,2,3)))
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_CATPVF_MG_NOCONTEXT assert(sv); assert(pat)


 void Perl_sv_catpvf_nocontext(SV *const sv, const char *const pat, ...)
   __attribute__((format(__printf__,2,3)))
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_CATPVF_NOCONTEXT assert(sv); assert(pat)


 void Perl_sv_setpvf_mg_nocontext(SV *const sv, const char *const pat, ...)
   __attribute__((format(__printf__,2,3)))
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETPVF_MG_NOCONTEXT assert(sv); assert(pat)


 void Perl_sv_setpvf_nocontext(SV *const sv, const char *const pat, ...)
   __attribute__((format(__printf__,2,3)))
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_SV_SETPVF_NOCONTEXT assert(sv); assert(pat)


 void Perl_warn_nocontext(const char* pat, ...)
   __attribute__((format(__printf__,1,2)))
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_WARN_NOCONTEXT assert(pat)


 void Perl_warner_nocontext(U32 err, const char* pat, ...)
   __attribute__((format(__printf__,2,3)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_WARNER_NOCONTEXT assert(pat)
# 8057 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h"
 PADOFFSET Perl_alloccopstash(PerlInterpreter* my_perl __attribute__((unused)), HV *hv)
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_ALLOCCOPSTASH assert(hv)


 void* Perl_any_dup(PerlInterpreter* my_perl __attribute__((unused)), void* v, const PerlInterpreter* proto_perl)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_ANY_DUP assert(proto_perl)


 void Perl_clone_params_del(CLONE_PARAMS *param)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_CLONE_PARAMS_DEL assert(param)


 CLONE_PARAMS * Perl_clone_params_new(PerlInterpreter *const from, PerlInterpreter *const to)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(1)))
   __attribute__((nonnull(2)));
#define PERL_ARGS_ASSERT_CLONE_PARAMS_NEW assert(from); assert(to)


 PERL_CONTEXT* Perl_cx_dup(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT* cx, I32 ix, I32 max, CLONE_PARAMS* param)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(5)));
#define PERL_ARGS_ASSERT_CX_DUP assert(param)


 DIR* Perl_dirp_dup(PerlInterpreter* my_perl __attribute__((unused)), DIR *const dp, CLONE_PARAMS *const param)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_DIRP_DUP assert(param)


 PerlIO* Perl_fp_dup(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *const fp, const char type, CLONE_PARAMS *const param)
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_FP_DUP assert(param)


 GP* Perl_gp_dup(PerlInterpreter* my_perl __attribute__((unused)), GP *const gp, CLONE_PARAMS *const param)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_GP_DUP assert(param)


 HE* Perl_he_dup(PerlInterpreter* my_perl __attribute__((unused)), const HE* e, _Bool shared, CLONE_PARAMS* param)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_HE_DUP assert(param)


 HEK* Perl_hek_dup(PerlInterpreter* my_perl __attribute__((unused)), HEK* e, CLONE_PARAMS* param)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_HEK_DUP assert(param)


 MAGIC* Perl_mg_dup(PerlInterpreter* my_perl __attribute__((unused)), MAGIC *mg, CLONE_PARAMS *const param)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MG_DUP assert(param)


 struct mro_meta* Perl_mro_meta_dup(PerlInterpreter* my_perl __attribute__((unused)), struct mro_meta* smeta, CLONE_PARAMS* param)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MRO_META_DUP assert(smeta); assert(param)


 OP* Perl_newPADOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, SV* sv)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_NEWPADOP assert(sv)


 PADLIST * Perl_padlist_dup(PerlInterpreter* my_perl __attribute__((unused)), PADLIST *srcpad, CLONE_PARAMS *param)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_PADLIST_DUP assert(srcpad); assert(param)


 PADNAME * Perl_padname_dup(PerlInterpreter* my_perl __attribute__((unused)), PADNAME *src, CLONE_PARAMS *param)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_PADNAME_DUP assert(src); assert(param)


 PADNAMELIST * Perl_padnamelist_dup(PerlInterpreter* my_perl __attribute__((unused)), PADNAMELIST *srcpad, CLONE_PARAMS *param)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_PADNAMELIST_DUP assert(srcpad); assert(param)


 yy_parser* Perl_parser_dup(PerlInterpreter* my_perl __attribute__((unused)), const yy_parser *const proto, CLONE_PARAMS *const param)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_PARSER_DUP assert(param)


 PerlInterpreter* perl_clone(PerlInterpreter *proto_perl, UV flags)
   __attribute__((nonnull(1)));
#define PERL_ARGS_ASSERT_PERL_CLONE assert(proto_perl)


 void Perl_re_dup_guts(PerlInterpreter* my_perl __attribute__((unused)), const REGEXP *sstr, REGEXP *dstr, CLONE_PARAMS* param)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_RE_DUP_GUTS assert(sstr); assert(dstr); assert(param)


 void* Perl_regdupe_internal(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const r, CLONE_PARAMS* param)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_REGDUPE_INTERNAL assert(r); assert(param)


 void Perl_rvpv_dup(PerlInterpreter* my_perl __attribute__((unused)), SV *const dstr, const SV *const sstr, CLONE_PARAMS *const param)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_RVPV_DUP assert(dstr); assert(sstr); assert(param)


 PERL_SI* Perl_si_dup(PerlInterpreter* my_perl __attribute__((unused)), PERL_SI* si, CLONE_PARAMS* param)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SI_DUP assert(param)


 ANY* Perl_ss_dup(PerlInterpreter* my_perl __attribute__((unused)), PerlInterpreter* proto_perl, CLONE_PARAMS* param)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result))
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SS_DUP assert(proto_perl); assert(param)


 SV* Perl_sv_dup(PerlInterpreter* my_perl __attribute__((unused)), const SV *const sstr, CLONE_PARAMS *const param)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_DUP assert(param)


 SV* Perl_sv_dup_inc(PerlInterpreter* my_perl __attribute__((unused)), const SV *const sstr, CLONE_PARAMS *const param)
   __attribute__((warn_unused_result))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_DUP_INC assert(param)
# 8224 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h"
 int Perl_magic_setcollxfrm(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_MAGIC_SETCOLLXFRM assert(sv); assert(mg)


 char* Perl_mem_collxfrm(PerlInterpreter* my_perl __attribute__((unused)), const char* s, STRLEN len, STRLEN* xlen)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(4)));
#define PERL_ARGS_ASSERT_MEM_COLLXFRM assert(s); assert(xlen)






 char* Perl_sv_collxfrm_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN *const nxp, I32 const flags)
   __attribute__((nonnull(2)))
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_SV_COLLXFRM_FLAGS assert(sv); assert(nxp)




 void Perl_PerlIO_clearerr(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
 int Perl_PerlIO_close(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
 int Perl_PerlIO_eof(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
 int Perl_PerlIO_error(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
 int Perl_PerlIO_fileno(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
 int Perl_PerlIO_fill(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
 int Perl_PerlIO_flush(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
 char * Perl_PerlIO_get_base(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
 ssize_t Perl_PerlIO_get_bufsiz(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f)
   __attribute__((warn_unused_result));

 ssize_t Perl_PerlIO_get_cnt(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f)
   __attribute__((warn_unused_result));

 char * Perl_PerlIO_get_ptr(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
 ssize_t Perl_PerlIO_read(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, void *vbuf, size_t count)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_PERLIO_READ assert(vbuf)


 void Perl_PerlIO_restore_errno(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
 void Perl_PerlIO_save_errno(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
 int Perl_PerlIO_seek(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, off_t offset, int whence);
 void Perl_PerlIO_set_cnt(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, ssize_t cnt);
 void Perl_PerlIO_set_ptrcnt(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, char *ptr, ssize_t cnt);
 void Perl_PerlIO_setlinebuf(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
 PerlIO * Perl_PerlIO_stderr(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));

 PerlIO * Perl_PerlIO_stdin(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));

 PerlIO * Perl_PerlIO_stdout(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));

 off_t Perl_PerlIO_tell(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
 ssize_t Perl_PerlIO_unread(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, const void *vbuf, size_t count)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_PERLIO_UNREAD assert(vbuf)


 ssize_t Perl_PerlIO_write(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, const void *vbuf, size_t count)
   __attribute__((nonnull(3)));
#define PERL_ARGS_ASSERT_PERLIO_WRITE assert(vbuf)
# 8347 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/proto.h"

# 5510 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2


# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/opcode.h" 1
# 18 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/opcode.h"
#define Perl_pp_scalar Perl_pp_null
#define Perl_pp_padany Perl_unimplemented_op
#define Perl_pp_regcmaybe Perl_pp_null
#define Perl_pp_transr Perl_pp_trans
#define Perl_pp_chomp Perl_pp_chop
#define Perl_pp_schomp Perl_pp_schop
#define Perl_pp_i_preinc Perl_pp_preinc
#define Perl_pp_predec Perl_pp_preinc
#define Perl_pp_i_predec Perl_pp_preinc
#define Perl_pp_i_postinc Perl_pp_postinc
#define Perl_pp_postdec Perl_pp_postinc
#define Perl_pp_i_postdec Perl_pp_postinc
#define Perl_pp_slt Perl_pp_sle
#define Perl_pp_sgt Perl_pp_sle
#define Perl_pp_sge Perl_pp_sle
#define Perl_pp_bit_xor Perl_pp_bit_or
#define Perl_pp_nbit_xor Perl_pp_nbit_or
#define Perl_pp_sbit_xor Perl_pp_sbit_or
#define Perl_pp_cos Perl_pp_sin
#define Perl_pp_exp Perl_pp_sin
#define Perl_pp_log Perl_pp_sin
#define Perl_pp_sqrt Perl_pp_sin
#define Perl_pp_hex Perl_pp_oct
#define Perl_pp_rindex Perl_pp_index
#define Perl_pp_lcfirst Perl_pp_ucfirst
#define Perl_pp_aelemfast_lex Perl_pp_aelemfast
#define Perl_pp_avalues Perl_pp_akeys
#define Perl_pp_values Perl_do_kv
#define Perl_pp_keys Perl_do_kv
#define Perl_pp_rv2hv Perl_pp_rv2av
#define Perl_pp_pop Perl_pp_shift
#define Perl_pp_mapstart Perl_pp_grepstart
#define Perl_pp_dor Perl_pp_defined
#define Perl_pp_andassign Perl_pp_and
#define Perl_pp_orassign Perl_pp_or
#define Perl_pp_dorassign Perl_pp_defined
#define Perl_pp_lineseq Perl_pp_null
#define Perl_pp_scope Perl_pp_null
#define Perl_pp_dump Perl_pp_goto
#define Perl_pp_dbmclose Perl_pp_untie
#define Perl_pp_read Perl_pp_sysread
#define Perl_pp_say Perl_pp_print
#define Perl_pp_seek Perl_pp_sysseek
#define Perl_pp_fcntl Perl_pp_ioctl

#define Perl_pp_send Perl_pp_syswrite
#define Perl_pp_recv Perl_pp_sysread






#define Perl_pp_connect Perl_pp_bind
#define Perl_pp_gsockopt Perl_pp_ssockopt
#define Perl_pp_getsockname Perl_pp_getpeername
# 85 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/opcode.h"
#define Perl_pp_lstat Perl_pp_stat
#define Perl_pp_ftrwrite Perl_pp_ftrread
#define Perl_pp_ftrexec Perl_pp_ftrread
#define Perl_pp_fteread Perl_pp_ftrread
#define Perl_pp_ftewrite Perl_pp_ftrread
#define Perl_pp_fteexec Perl_pp_ftrread
#define Perl_pp_ftsize Perl_pp_ftis
#define Perl_pp_ftmtime Perl_pp_ftis
#define Perl_pp_ftatime Perl_pp_ftis
#define Perl_pp_ftctime Perl_pp_ftis
#define Perl_pp_fteowned Perl_pp_ftrowned
#define Perl_pp_ftzero Perl_pp_ftrowned
#define Perl_pp_ftsock Perl_pp_ftrowned
#define Perl_pp_ftchr Perl_pp_ftrowned
#define Perl_pp_ftblk Perl_pp_ftrowned
#define Perl_pp_ftfile Perl_pp_ftrowned
#define Perl_pp_ftdir Perl_pp_ftrowned
#define Perl_pp_ftpipe Perl_pp_ftrowned
#define Perl_pp_ftsuid Perl_pp_ftrowned
#define Perl_pp_ftsgid Perl_pp_ftrowned
#define Perl_pp_ftsvtx Perl_pp_ftrowned
#define Perl_pp_ftbinary Perl_pp_fttext
#define Perl_pp_unlink Perl_pp_chown
#define Perl_pp_chmod Perl_pp_chown
#define Perl_pp_utime Perl_pp_chown
#define Perl_pp_symlink Perl_pp_link
#define Perl_pp_kill Perl_pp_chown
#define Perl_pp_localtime Perl_pp_gmtime
#define Perl_pp_shmget Perl_pp_semget
#define Perl_pp_shmctl Perl_pp_semctl
#define Perl_pp_shmread Perl_pp_shmwrite
#define Perl_pp_msgget Perl_pp_semget
#define Perl_pp_msgctl Perl_pp_semctl
#define Perl_pp_msgsnd Perl_pp_shmwrite
#define Perl_pp_msgrcv Perl_pp_shmwrite
#define Perl_pp_semop Perl_pp_shmwrite
#define Perl_pp_dofile Perl_pp_require
#define Perl_pp_ghbyname Perl_pp_ghostent
#define Perl_pp_ghbyaddr Perl_pp_ghostent
#define Perl_pp_gnbyname Perl_pp_gnetent
#define Perl_pp_gnbyaddr Perl_pp_gnetent
#define Perl_pp_gpbyname Perl_pp_gprotoent
#define Perl_pp_gpbynumber Perl_pp_gprotoent
#define Perl_pp_gsbyname Perl_pp_gservent
#define Perl_pp_gsbyport Perl_pp_gservent
#define Perl_pp_snetent Perl_pp_shostent
#define Perl_pp_sprotoent Perl_pp_shostent
#define Perl_pp_sservent Perl_pp_shostent
#define Perl_pp_enetent Perl_pp_ehostent
#define Perl_pp_eprotoent Perl_pp_ehostent
#define Perl_pp_eservent Perl_pp_ehostent
#define Perl_pp_gpwnam Perl_pp_gpwent
#define Perl_pp_gpwuid Perl_pp_gpwent
#define Perl_pp_spwent Perl_pp_ehostent
#define Perl_pp_epwent Perl_pp_ehostent
#define Perl_pp_ggrnam Perl_pp_ggrent
#define Perl_pp_ggrgid Perl_pp_ggrent
#define Perl_pp_sgrent Perl_pp_ehostent
#define Perl_pp_egrent Perl_pp_ehostent
#define Perl_pp_custom Perl_unimplemented_op
#define Perl_pp_reach Perl_pp_rkeys
#define Perl_pp_rvalues Perl_pp_rkeys



extern const char* const PL_op_name[];
# 554 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/opcode.h"
extern const char* const PL_op_desc[];
# 957 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/opcode.h"











#define PERL_PPADDR_INITED 
extern Perl_ppaddr_t PL_ppaddr[]
# 1374 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/opcode.h"
;







#define PERL_CHECK_INITED 
extern Perl_check_t PL_check[]
# 1788 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/opcode.h"
;





extern const U32 PL_opargs[];
# 2198 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/opcode.h"



#define OPpLVREF_SV 0x00
#define OPpARG1_MASK 0x01
#define OPpCOREARGS_DEREF1 0x01
#define OPpENTERSUB_INARGS 0x01
#define OPpSORT_NUMERIC 0x01
#define OPpTRANS_FROM_UTF 0x01
#define OPpCONST_NOVER 0x02
#define OPpCOREARGS_DEREF2 0x02
#define OPpEVAL_HAS_HH 0x02
#define OPpFT_ACCESS 0x02
#define OPpGREP_LEX 0x02
#define OPpHINT_STRICT_REFS 0x02
#define OPpSORT_INTEGER 0x02
#define OPpTRANS_TO_UTF 0x02
#define OPpARG2_MASK 0x03
#define OPpCONST_SHORTCIRCUIT 0x04
#define OPpDONT_INIT_GV 0x04
#define OPpENTERSUB_HASTARG 0x04
#define OPpEVAL_UNICODE 0x04
#define OPpFT_STACKED 0x04
#define OPpITER_REVERSED 0x04
#define OPpLVREF_ELEM 0x04
#define OPpSLICEWARNING 0x04
#define OPpSORT_REVERSE 0x04
#define OPpTRANS_IDENTICAL 0x04
#define OPpARG3_MASK 0x07
#define OPpPADRANGE_COUNTSHIFT 0x07
#define OPpCONST_STRICT 0x08
#define OPpENTERSUB_AMPER 0x08
#define OPpEVAL_BYTES 0x08
#define OPpFT_STACKING 0x08
#define OPpITER_DEF 0x08
#define OPpLVREF_ITER 0x08
#define OPpMAYBE_LVSUB 0x08
#define OPpREVERSE_INPLACE 0x08
#define OPpSORT_INPLACE 0x08
#define OPpTRANS_SQUASH 0x08
#define OPpARG4_MASK 0x0f
#define OPpCONST_ENTERED 0x10
#define OPpDEREF_AV 0x10
#define OPpEVAL_COPHH 0x10
#define OPpFT_AFTER_t 0x10
#define OPpLVREF_AV 0x10
#define OPpMAYBE_TRUEBOOL 0x10
#define OPpMULTIDEREF_EXISTS 0x10
#define OPpOPEN_IN_RAW 0x10
#define OPpSORT_DESCEND 0x10
#define OPpSUBSTR_REPL_FIRST 0x10
#define OPpTARGET_MY 0x10
#define OPpDEREF_HV 0x20
#define OPpEARLY_CV 0x20
#define OPpEVAL_RE_REPARSING 0x20
#define OPpHUSH_VMSISH 0x20
#define OPpLVREF_HV 0x20
#define OPpMAY_RETURN_CONSTANT 0x20
#define OPpMULTIDEREF_DELETE 0x20
#define OPpOPEN_IN_CRLF 0x20
#define OPpSORT_QSORT 0x20
#define OPpTRANS_COMPLEMENT 0x20
#define OPpTRUEBOOL 0x20
#define OPpDEREF 0x30
#define OPpDEREF_SV 0x30
#define OPpLVREF_CV 0x30
#define OPpLVREF_TYPE 0x30
#define OPpALLOW_FAKE 0x40
#define OPpASSIGN_BACKWARDS 0x40
#define OPpASSIGN_COMMON 0x40
#define OPpCONST_BARE 0x40
#define OPpCOREARGS_SCALARMOD 0x40
#define OPpENTERSUB_DB 0x40
#define OPpEXISTS_SUB 0x40
#define OPpFLIP_LINENUM 0x40
#define OPpLIST_GUESSED 0x40
#define OPpLVAL_DEFER 0x40
#define OPpOPEN_OUT_RAW 0x40
#define OPpOUR_INTRO 0x40
#define OPpPAD_STATE 0x40
#define OPpREFCOUNTED 0x40
#define OPpREPEAT_DOLIST 0x40
#define OPpRUNTIME 0x40
#define OPpSLICE 0x40
#define OPpSORT_STABLE 0x40
#define OPpTRANS_GROWS 0x40
#define OPpPADRANGE_COUNTMASK 0x7f
#define OPpASSIGN_CV_TO_GV 0x80
#define OPpCOREARGS_PUSHMARK 0x80
#define OPpENTERSUB_NOPAREN 0x80
#define OPpLVALUE 0x80
#define OPpLVAL_INTRO 0x80
#define OPpOFFBYONE 0x80
#define OPpOPEN_OUT_CRLF 0x80
#define OPpPV_IS_UTF8 0x80
#define OPpSPLIT_IMPLIM 0x80
#define OPpTRANS_DELETE 0x80








extern const I16 PL_op_private_bitdef_ix[];
extern const U16 PL_op_private_bitdefs[];
extern const char PL_op_private_labels[];
extern const I16 PL_op_private_bitfields[];
extern const U8 PL_op_private_valid[];
# 3322 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/opcode.h"

# 5513 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2




# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/embedvar.h" 1
# 38 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/embedvar.h"
#define vTHX aTHX




#define PL_AboveLatin1 (vTHX->IAboveLatin1)
#define PL_Argv (vTHX->IArgv)
#define PL_Cmd (vTHX->ICmd)
#define PL_DBcontrol (vTHX->IDBcontrol)
#define PL_DBcv (vTHX->IDBcv)
#define PL_DBgv (vTHX->IDBgv)
#define PL_DBline (vTHX->IDBline)
#define PL_DBsignal (vTHX->IDBsignal)
#define PL_DBsingle (vTHX->IDBsingle)
#define PL_DBsub (vTHX->IDBsub)
#define PL_DBtrace (vTHX->IDBtrace)
#define PL_Dir (vTHX->IDir)
#define PL_Env (vTHX->IEnv)
#define PL_GCB_invlist (vTHX->IGCB_invlist)
#define PL_HasMultiCharFold (vTHX->IHasMultiCharFold)
#define PL_InBitmap (vTHX->IInBitmap)
#define PL_LIO (vTHX->ILIO)
#define PL_Latin1 (vTHX->ILatin1)
#define PL_Mem (vTHX->IMem)
#define PL_MemParse (vTHX->IMemParse)
#define PL_MemShared (vTHX->IMemShared)
#define PL_NonL1NonFinalFold (vTHX->INonL1NonFinalFold)
#define PL_Posix_ptrs (vTHX->IPosix_ptrs)
#define PL_Proc (vTHX->IProc)
#define PL_SB_invlist (vTHX->ISB_invlist)
#define PL_Sock (vTHX->ISock)
#define PL_StdIO (vTHX->IStdIO)
#define PL_Sv (vTHX->ISv)
#define PL_UpperLatin1 (vTHX->IUpperLatin1)
#define PL_WB_invlist (vTHX->IWB_invlist)
#define PL_XPosix_ptrs (vTHX->IXPosix_ptrs)
#define PL_Xpv (vTHX->IXpv)
#define PL_an (vTHX->Ian)
#define PL_argvgv (vTHX->Iargvgv)
#define PL_argvout_stack (vTHX->Iargvout_stack)
#define PL_argvoutgv (vTHX->Iargvoutgv)
#define PL_basetime (vTHX->Ibasetime)
#define PL_beginav (vTHX->Ibeginav)
#define PL_beginav_save (vTHX->Ibeginav_save)
#define PL_blockhooks (vTHX->Iblockhooks)
#define PL_body_arenas (vTHX->Ibody_arenas)
#define PL_body_roots (vTHX->Ibody_roots)
#define PL_bodytarget (vTHX->Ibodytarget)
#define PL_breakable_sub_gen (vTHX->Ibreakable_sub_gen)
#define PL_checkav (vTHX->Icheckav)
#define PL_checkav_save (vTHX->Icheckav_save)
#define PL_chopset (vTHX->Ichopset)
#define PL_clocktick (vTHX->Iclocktick)
#define PL_collation_ix (vTHX->Icollation_ix)
#define PL_collation_name (vTHX->Icollation_name)
#define PL_collation_standard (vTHX->Icollation_standard)
#define PL_collxfrm_base (vTHX->Icollxfrm_base)
#define PL_collxfrm_mult (vTHX->Icollxfrm_mult)
#define PL_colors (vTHX->Icolors)
#define PL_colorset (vTHX->Icolorset)
#define PL_compcv (vTHX->Icompcv)
#define PL_compiling (vTHX->Icompiling)
#define PL_comppad (vTHX->Icomppad)
#define PL_comppad_name (vTHX->Icomppad_name)
#define PL_comppad_name_fill (vTHX->Icomppad_name_fill)
#define PL_comppad_name_floor (vTHX->Icomppad_name_floor)
#define PL_constpadix (vTHX->Iconstpadix)
#define PL_cop_seqmax (vTHX->Icop_seqmax)
#define PL_cryptseen (vTHX->Icryptseen)
#define PL_curcop (vTHX->Icurcop)
#define PL_curcopdb (vTHX->Icurcopdb)
#define PL_curpad (vTHX->Icurpad)
#define PL_curpm (vTHX->Icurpm)
#define PL_curstack (vTHX->Icurstack)
#define PL_curstackinfo (vTHX->Icurstackinfo)
#define PL_curstash (vTHX->Icurstash)
#define PL_curstname (vTHX->Icurstname)
#define PL_custom_op_descs (vTHX->Icustom_op_descs)
#define PL_custom_op_names (vTHX->Icustom_op_names)
#define PL_custom_ops (vTHX->Icustom_ops)
#define PL_cv_has_eval (vTHX->Icv_has_eval)
#define PL_dbargs (vTHX->Idbargs)
#define PL_debstash (vTHX->Idebstash)
#define PL_debug (vTHX->Idebug)
#define PL_debug_pad (vTHX->Idebug_pad)
#define PL_def_layerlist (vTHX->Idef_layerlist)
#define PL_defgv (vTHX->Idefgv)
#define PL_defoutgv (vTHX->Idefoutgv)
#define PL_defstash (vTHX->Idefstash)
#define PL_delaymagic (vTHX->Idelaymagic)
#define PL_delaymagic_egid (vTHX->Idelaymagic_egid)
#define PL_delaymagic_euid (vTHX->Idelaymagic_euid)
#define PL_delaymagic_gid (vTHX->Idelaymagic_gid)
#define PL_delaymagic_uid (vTHX->Idelaymagic_uid)
#define PL_destroyhook (vTHX->Idestroyhook)
#define PL_diehook (vTHX->Idiehook)
#define PL_doswitches (vTHX->Idoswitches)
#define PL_dowarn (vTHX->Idowarn)
#define PL_dumper_fd (vTHX->Idumper_fd)
#define PL_dumpindent (vTHX->Idumpindent)
#define PL_e_script (vTHX->Ie_script)
#define PL_efloatbuf (vTHX->Iefloatbuf)
#define PL_efloatsize (vTHX->Iefloatsize)
#define PL_encoding (vTHX->Iencoding)
#define PL_endav (vTHX->Iendav)
#define PL_envgv (vTHX->Ienvgv)
#define PL_errgv (vTHX->Ierrgv)
#define PL_errors (vTHX->Ierrors)
#define PL_eval_root (vTHX->Ieval_root)
#define PL_eval_start (vTHX->Ieval_start)
#define PL_evalseq (vTHX->Ievalseq)
#define PL_exit_flags (vTHX->Iexit_flags)
#define PL_exitlist (vTHX->Iexitlist)
#define PL_exitlistlen (vTHX->Iexitlistlen)
#define PL_fdpid (vTHX->Ifdpid)
#define PL_filemode (vTHX->Ifilemode)
#define PL_firstgv (vTHX->Ifirstgv)
#define PL_forkprocess (vTHX->Iforkprocess)
#define PL_formtarget (vTHX->Iformtarget)
#define PL_generation (vTHX->Igeneration)
#define PL_gensym (vTHX->Igensym)
#define PL_globalstash (vTHX->Iglobalstash)
#define PL_globhook (vTHX->Iglobhook)
#define PL_hash_rand_bits (vTHX->Ihash_rand_bits)
#define PL_hash_rand_bits_enabled (vTHX->Ihash_rand_bits_enabled)
#define PL_hintgv (vTHX->Ihintgv)
#define PL_hv_fetch_ent_mh (vTHX->Ihv_fetch_ent_mh)
#define PL_in_clean_all (vTHX->Iin_clean_all)
#define PL_in_clean_objs (vTHX->Iin_clean_objs)
#define PL_in_eval (vTHX->Iin_eval)
#define PL_in_load_module (vTHX->Iin_load_module)
#define PL_in_utf8_CTYPE_locale (vTHX->Iin_utf8_CTYPE_locale)
#define PL_incgv (vTHX->Iincgv)
#define PL_initav (vTHX->Iinitav)
#define PL_inplace (vTHX->Iinplace)
#define PL_isarev (vTHX->Iisarev)
#define PL_known_layers (vTHX->Iknown_layers)
#define PL_last_in_gv (vTHX->Ilast_in_gv)
#define PL_last_swash_hv (vTHX->Ilast_swash_hv)
#define PL_last_swash_key (vTHX->Ilast_swash_key)
#define PL_last_swash_klen (vTHX->Ilast_swash_klen)
#define PL_last_swash_slen (vTHX->Ilast_swash_slen)
#define PL_last_swash_tmps (vTHX->Ilast_swash_tmps)
#define PL_lastfd (vTHX->Ilastfd)
#define PL_lastgotoprobe (vTHX->Ilastgotoprobe)
#define PL_laststatval (vTHX->Ilaststatval)
#define PL_laststype (vTHX->Ilaststype)
#define PL_lex_encoding (vTHX->Ilex_encoding)
#define PL_localizing (vTHX->Ilocalizing)
#define PL_localpatches (vTHX->Ilocalpatches)
#define PL_lockhook (vTHX->Ilockhook)
#define PL_main_cv (vTHX->Imain_cv)
#define PL_main_root (vTHX->Imain_root)
#define PL_main_start (vTHX->Imain_start)
#define PL_mainstack (vTHX->Imainstack)
#define PL_markstack (vTHX->Imarkstack)
#define PL_markstack_max (vTHX->Imarkstack_max)
#define PL_markstack_ptr (vTHX->Imarkstack_ptr)
#define PL_max_intro_pending (vTHX->Imax_intro_pending)
#define PL_maxo (vTHX->Imaxo)
#define PL_maxsysfd (vTHX->Imaxsysfd)
#define PL_memory_debug_header (vTHX->Imemory_debug_header)
#define PL_mess_sv (vTHX->Imess_sv)
#define PL_min_intro_pending (vTHX->Imin_intro_pending)
#define PL_minus_E (vTHX->Iminus_E)
#define PL_minus_F (vTHX->Iminus_F)
#define PL_minus_a (vTHX->Iminus_a)
#define PL_minus_c (vTHX->Iminus_c)
#define PL_minus_l (vTHX->Iminus_l)
#define PL_minus_n (vTHX->Iminus_n)
#define PL_minus_p (vTHX->Iminus_p)
#define PL_modcount (vTHX->Imodcount)
#define PL_modglobal (vTHX->Imodglobal)
#define PL_multideref_pc (vTHX->Imultideref_pc)
#define PL_my_cxt_keys (vTHX->Imy_cxt_keys)
#define PL_my_cxt_list (vTHX->Imy_cxt_list)
#define PL_my_cxt_size (vTHX->Imy_cxt_size)
#define PL_na (vTHX->Ina)
#define PL_nomemok (vTHX->Inomemok)
#define PL_numeric_local (vTHX->Inumeric_local)
#define PL_numeric_name (vTHX->Inumeric_name)
#define PL_numeric_radix_sv (vTHX->Inumeric_radix_sv)
#define PL_numeric_standard (vTHX->Inumeric_standard)
#define PL_ofsgv (vTHX->Iofsgv)
#define PL_oldname (vTHX->Ioldname)
#define PL_op (vTHX->Iop)
#define PL_op_exec_cnt (vTHX->Iop_exec_cnt)
#define PL_op_mask (vTHX->Iop_mask)
#define PL_opfreehook (vTHX->Iopfreehook)
#define PL_origalen (vTHX->Iorigalen)
#define PL_origargc (vTHX->Iorigargc)
#define PL_origargv (vTHX->Iorigargv)
#define PL_origenviron (vTHX->Iorigenviron)
#define PL_origfilename (vTHX->Iorigfilename)
#define PL_ors_sv (vTHX->Iors_sv)
#define PL_osname (vTHX->Iosname)
#define PL_pad_reset_pending (vTHX->Ipad_reset_pending)
#define PL_padix (vTHX->Ipadix)
#define PL_padix_floor (vTHX->Ipadix_floor)
#define PL_padlist_generation (vTHX->Ipadlist_generation)
#define PL_padname_const (vTHX->Ipadname_const)
#define PL_padname_undef (vTHX->Ipadname_undef)
#define PL_parser (vTHX->Iparser)
#define PL_patchlevel (vTHX->Ipatchlevel)
#define PL_peepp (vTHX->Ipeepp)
#define PL_perl_destruct_level (vTHX->Iperl_destruct_level)
#define PL_perldb (vTHX->Iperldb)
#define PL_perlio (vTHX->Iperlio)
#define PL_phase (vTHX->Iphase)
#define PL_pidstatus (vTHX->Ipidstatus)
#define PL_preambleav (vTHX->Ipreambleav)
#define PL_profiledata (vTHX->Iprofiledata)
#define PL_psig_name (vTHX->Ipsig_name)
#define PL_psig_pend (vTHX->Ipsig_pend)
#define PL_psig_ptr (vTHX->Ipsig_ptr)
#define PL_ptr_table (vTHX->Iptr_table)
#define PL_random_state (vTHX->Irandom_state)
#define PL_reentrant_buffer (vTHX->Ireentrant_buffer)
#define PL_reentrant_retint (vTHX->Ireentrant_retint)
#define PL_reg_curpm (vTHX->Ireg_curpm)
#define PL_regex_pad (vTHX->Iregex_pad)
#define PL_regex_padav (vTHX->Iregex_padav)
#define PL_registered_mros (vTHX->Iregistered_mros)
#define PL_regmatch_slab (vTHX->Iregmatch_slab)
#define PL_regmatch_state (vTHX->Iregmatch_state)
#define PL_replgv (vTHX->Ireplgv)
#define PL_restartjmpenv (vTHX->Irestartjmpenv)
#define PL_restartop (vTHX->Irestartop)
#define PL_rpeepp (vTHX->Irpeepp)
#define PL_rs (vTHX->Irs)
#define PL_runops (vTHX->Irunops)
#define PL_savebegin (vTHX->Isavebegin)
#define PL_savestack (vTHX->Isavestack)
#define PL_savestack_ix (vTHX->Isavestack_ix)
#define PL_savestack_max (vTHX->Isavestack_max)
#define PL_sawalias (vTHX->Isawalias)



#define PL_scopestack (vTHX->Iscopestack)
#define PL_scopestack_ix (vTHX->Iscopestack_ix)
#define PL_scopestack_max (vTHX->Iscopestack_max)
#define PL_scopestack_name (vTHX->Iscopestack_name)
#define PL_secondgv (vTHX->Isecondgv)
#define PL_sharehook (vTHX->Isharehook)
#define PL_sig_pending (vTHX->Isig_pending)
#define PL_sighandlerp (vTHX->Isighandlerp)
#define PL_signalhook (vTHX->Isignalhook)
#define PL_signals (vTHX->Isignals)
#define PL_sort_RealCmp (vTHX->Isort_RealCmp)
#define PL_sortcop (vTHX->Isortcop)
#define PL_sortstash (vTHX->Isortstash)
#define PL_splitstr (vTHX->Isplitstr)
#define PL_srand_called (vTHX->Isrand_called)
#define PL_stack_base (vTHX->Istack_base)
#define PL_stack_max (vTHX->Istack_max)
#define PL_stack_sp (vTHX->Istack_sp)
#define PL_start_env (vTHX->Istart_env)
#define PL_stashcache (vTHX->Istashcache)
#define PL_stashpad (vTHX->Istashpad)
#define PL_stashpadix (vTHX->Istashpadix)
#define PL_stashpadmax (vTHX->Istashpadmax)
#define PL_statbuf (vTHX->Istatbuf)
#define PL_statcache (vTHX->Istatcache)
#define PL_statgv (vTHX->Istatgv)
#define PL_statname (vTHX->Istatname)
#define PL_statusvalue (vTHX->Istatusvalue)
#define PL_statusvalue_posix (vTHX->Istatusvalue_posix)
#define PL_statusvalue_vms (vTHX->Istatusvalue_vms)
#define PL_stderrgv (vTHX->Istderrgv)
#define PL_stdingv (vTHX->Istdingv)
#define PL_strtab (vTHX->Istrtab)
#define PL_sub_generation (vTHX->Isub_generation)
#define PL_subline (vTHX->Isubline)
#define PL_subname (vTHX->Isubname)
#define PL_sv_arenaroot (vTHX->Isv_arenaroot)
#define PL_sv_consts (vTHX->Isv_consts)
#define PL_sv_count (vTHX->Isv_count)
#define PL_sv_no (vTHX->Isv_no)
#define PL_sv_root (vTHX->Isv_root)
#define PL_sv_serial (vTHX->Isv_serial)
#define PL_sv_undef (vTHX->Isv_undef)
#define PL_sv_yes (vTHX->Isv_yes)
#define PL_sys_intern (vTHX->Isys_intern)
#define PL_taint_warn (vTHX->Itaint_warn)
#define PL_tainted (vTHX->Itainted)
#define PL_tainting (vTHX->Itainting)
#define PL_threadhook (vTHX->Ithreadhook)
#define PL_timesbuf (vTHX->Itimesbuf)
#define PL_tmps_floor (vTHX->Itmps_floor)
#define PL_tmps_ix (vTHX->Itmps_ix)
#define PL_tmps_max (vTHX->Itmps_max)
#define PL_tmps_stack (vTHX->Itmps_stack)
#define PL_top_env (vTHX->Itop_env)
#define PL_toptarget (vTHX->Itoptarget)
#define PL_unicode (vTHX->Iunicode)
#define PL_unitcheckav (vTHX->Iunitcheckav)
#define PL_unitcheckav_save (vTHX->Iunitcheckav_save)
#define PL_unlockhook (vTHX->Iunlockhook)
#define PL_unsafe (vTHX->Iunsafe)
#define PL_utf8_charname_begin (vTHX->Iutf8_charname_begin)
#define PL_utf8_charname_continue (vTHX->Iutf8_charname_continue)
#define PL_utf8_foldable (vTHX->Iutf8_foldable)
#define PL_utf8_foldclosures (vTHX->Iutf8_foldclosures)
#define PL_utf8_idcont (vTHX->Iutf8_idcont)
#define PL_utf8_idstart (vTHX->Iutf8_idstart)
#define PL_utf8_mark (vTHX->Iutf8_mark)
#define PL_utf8_perl_idcont (vTHX->Iutf8_perl_idcont)
#define PL_utf8_perl_idstart (vTHX->Iutf8_perl_idstart)
#define PL_utf8_swash_ptrs (vTHX->Iutf8_swash_ptrs)
#define PL_utf8_tofold (vTHX->Iutf8_tofold)
#define PL_utf8_tolower (vTHX->Iutf8_tolower)
#define PL_utf8_totitle (vTHX->Iutf8_totitle)
#define PL_utf8_toupper (vTHX->Iutf8_toupper)
#define PL_utf8_xidcont (vTHX->Iutf8_xidcont)
#define PL_utf8_xidstart (vTHX->Iutf8_xidstart)
#define PL_utf8cache (vTHX->Iutf8cache)
#define PL_utf8locale (vTHX->Iutf8locale)
#define PL_warn_locale (vTHX->Iwarn_locale)
#define PL_warnhook (vTHX->Iwarnhook)
#define PL_watchaddr (vTHX->Iwatchaddr)
#define PL_watchok (vTHX->Iwatchok)
#define PL_xsubfilename (vTHX->Ixsubfilename)
# 5518 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2







#define PERLVAR(prefix,var,type) EXT type PL_ ##var;
#define PERLVARA(prefix,var,n,type) EXT type PL_ ##var[n];
#define PERLVARI(prefix,var,type,init) EXT type PL_ ##var INIT(init);
#define PERLVARIC(prefix,var,type,init) EXTCONST type PL_ ##var INIT(init);
# 5544 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/embed.h" 1
# 29 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/embed.h"
#define Gv_AMupdate(a,b) Perl_Gv_AMupdate(aTHX_ a,b)
#define _is_in_locale_category(a,b) Perl__is_in_locale_category(aTHX_ a,b)
#define _is_uni_FOO(a,b) Perl__is_uni_FOO(aTHX_ a,b)
#define _is_uni_perl_idcont(a) Perl__is_uni_perl_idcont(aTHX_ a)
#define _is_uni_perl_idstart(a) Perl__is_uni_perl_idstart(aTHX_ a)
#define _is_utf8_FOO(a,b) Perl__is_utf8_FOO(aTHX_ a,b)
#define _is_utf8_char_slow S__is_utf8_char_slow
#define _is_utf8_idcont(a) Perl__is_utf8_idcont(aTHX_ a)
#define _is_utf8_idstart(a) Perl__is_utf8_idstart(aTHX_ a)
#define _is_utf8_mark(a) Perl__is_utf8_mark(aTHX_ a)
#define _is_utf8_perl_idcont(a) Perl__is_utf8_perl_idcont(aTHX_ a)
#define _is_utf8_perl_idstart(a) Perl__is_utf8_perl_idstart(aTHX_ a)
#define _is_utf8_xidcont(a) Perl__is_utf8_xidcont(aTHX_ a)
#define _is_utf8_xidstart(a) Perl__is_utf8_xidstart(aTHX_ a)
#define _to_uni_fold_flags(a,b,c,d) Perl__to_uni_fold_flags(aTHX_ a,b,c,d)
#define _to_utf8_fold_flags(a,b,c,d) Perl__to_utf8_fold_flags(aTHX_ a,b,c,d)
#define _to_utf8_lower_flags(a,b,c,d) Perl__to_utf8_lower_flags(aTHX_ a,b,c,d)
#define _to_utf8_title_flags(a,b,c,d) Perl__to_utf8_title_flags(aTHX_ a,b,c,d)
#define _to_utf8_upper_flags(a,b,c,d) Perl__to_utf8_upper_flags(aTHX_ a,b,c,d)
#define amagic_call(a,b,c,d) Perl_amagic_call(aTHX_ a,b,c,d)
#define amagic_deref_call(a,b) Perl_amagic_deref_call(aTHX_ a,b)
#define append_utf8_from_native_byte S_append_utf8_from_native_byte
#define apply_attrs_string(a,b,c,d) Perl_apply_attrs_string(aTHX_ a,b,c,d)
#define atfork_lock Perl_atfork_lock
#define atfork_unlock Perl_atfork_unlock
#define av_clear(a) Perl_av_clear(aTHX_ a)
#define av_delete(a,b,c) Perl_av_delete(aTHX_ a,b,c)
#define av_exists(a,b) Perl_av_exists(aTHX_ a,b)
#define av_extend(a,b) Perl_av_extend(aTHX_ a,b)
#define av_fetch(a,b,c) Perl_av_fetch(aTHX_ a,b,c)
#define av_fill(a,b) Perl_av_fill(aTHX_ a,b)
#define av_len(a) Perl_av_len(aTHX_ a)
#define av_make(a,b) Perl_av_make(aTHX_ a,b)
#define av_pop(a) Perl_av_pop(aTHX_ a)
#define av_push(a,b) Perl_av_push(aTHX_ a,b)
#define av_shift(a) Perl_av_shift(aTHX_ a)
#define av_store(a,b,c) Perl_av_store(aTHX_ a,b,c)
#define av_top_index(a) S_av_top_index(aTHX_ a)
#define av_undef(a) Perl_av_undef(aTHX_ a)
#define av_unshift(a,b) Perl_av_unshift(aTHX_ a,b)
#define block_end(a,b) Perl_block_end(aTHX_ a,b)
#define block_gimme() Perl_block_gimme(aTHX)
#define block_start(a) Perl_block_start(aTHX_ a)
#define bytes_cmp_utf8(a,b,c,d) Perl_bytes_cmp_utf8(aTHX_ a,b,c,d)
#define bytes_from_utf8(a,b,c) Perl_bytes_from_utf8(aTHX_ a,b,c)
#define bytes_to_utf8(a,b) Perl_bytes_to_utf8(aTHX_ a,b)
#define call_argv(a,b,c) Perl_call_argv(aTHX_ a,b,c)
#define call_atexit(a,b) Perl_call_atexit(aTHX_ a,b)
#define call_list(a,b) Perl_call_list(aTHX_ a,b)
#define call_method(a,b) Perl_call_method(aTHX_ a,b)
#define call_pv(a,b) Perl_call_pv(aTHX_ a,b)
#define call_sv(a,b) Perl_call_sv(aTHX_ a,b)
#define caller_cx(a,b) Perl_caller_cx(aTHX_ a,b)
#define cast_i32 Perl_cast_i32
#define cast_iv Perl_cast_iv
#define cast_ulong Perl_cast_ulong
#define cast_uv Perl_cast_uv
#define ck_entersub_args_list(a) Perl_ck_entersub_args_list(aTHX_ a)
#define ck_entersub_args_proto(a,b,c) Perl_ck_entersub_args_proto(aTHX_ a,b,c)
#define ck_entersub_args_proto_or_list(a,b,c) Perl_ck_entersub_args_proto_or_list(aTHX_ a,b,c)







#define croak_memory_wrap S_croak_memory_wrap
#define croak_no_modify Perl_croak_no_modify
#define croak_sv(a) Perl_croak_sv(aTHX_ a)
#define croak_xs_usage Perl_croak_xs_usage
#define custom_op_desc(a) Perl_custom_op_desc(aTHX_ a)
#define custom_op_name(a) Perl_custom_op_name(aTHX_ a)
#define cv_clone(a) Perl_cv_clone(aTHX_ a)
#define cv_const_sv Perl_cv_const_sv
#define cv_get_call_checker(a,b,c) Perl_cv_get_call_checker(aTHX_ a,b,c)
#define cv_name(a,b,c) Perl_cv_name(aTHX_ a,b,c)
#define cv_set_call_checker(a,b,c) Perl_cv_set_call_checker(aTHX_ a,b,c)
#define cv_set_call_checker_flags(a,b,c,d) Perl_cv_set_call_checker_flags(aTHX_ a,b,c,d)
#define cv_undef(a) Perl_cv_undef(aTHX_ a)
#define cx_dump(a) Perl_cx_dump(aTHX_ a)
#define cxinc() Perl_cxinc(aTHX)



#define debop(a) Perl_debop(aTHX_ a)
#define debprofdump() Perl_debprofdump(aTHX)
#define debstack() Perl_debstack(aTHX)
#define debstackptrs() Perl_debstackptrs(aTHX)
#define delimcpy Perl_delimcpy
#define despatch_signals() Perl_despatch_signals(aTHX)



#define die_sv(a) Perl_die_sv(aTHX_ a)
#define do_binmode(a,b,c) Perl_do_binmode(aTHX_ a,b,c)
#define do_close(a,b) Perl_do_close(aTHX_ a,b)
#define do_gv_dump(a,b,c,d) Perl_do_gv_dump(aTHX_ a,b,c,d)
#define do_gvgv_dump(a,b,c,d) Perl_do_gvgv_dump(aTHX_ a,b,c,d)
#define do_hv_dump(a,b,c,d) Perl_do_hv_dump(aTHX_ a,b,c,d)
#define do_join(a,b,c,d) Perl_do_join(aTHX_ a,b,c,d)
#define do_magic_dump(a,b,c,d,e,f,g) Perl_do_magic_dump(aTHX_ a,b,c,d,e,f,g)
#define do_op_dump(a,b,c) Perl_do_op_dump(aTHX_ a,b,c)
#define do_open9(a,b,c,d,e,f,g,h,i) Perl_do_open9(aTHX_ a,b,c,d,e,f,g,h,i)
#define do_openn(a,b,c,d,e,f,g,h,i) Perl_do_openn(aTHX_ a,b,c,d,e,f,g,h,i)
#define do_pmop_dump(a,b,c) Perl_do_pmop_dump(aTHX_ a,b,c)
#define do_sprintf(a,b,c) Perl_do_sprintf(aTHX_ a,b,c)
#define do_sv_dump(a,b,c,d,e,f,g) Perl_do_sv_dump(aTHX_ a,b,c,d,e,f,g)
#define doing_taint Perl_doing_taint
#define doref(a,b,c) Perl_doref(aTHX_ a,b,c)
#define dounwind(a) Perl_dounwind(aTHX_ a)
#define dowantarray() Perl_dowantarray(aTHX)
#define dump_all() Perl_dump_all(aTHX)
#define dump_eval() Perl_dump_eval(aTHX)
#define dump_form(a) Perl_dump_form(aTHX_ a)



#define dump_packsubs(a) Perl_dump_packsubs(aTHX_ a)
#define dump_sub(a) Perl_dump_sub(aTHX_ a)
#define dump_vindent(a,b,c,d) Perl_dump_vindent(aTHX_ a,b,c,d)
#define eval_pv(a,b) Perl_eval_pv(aTHX_ a,b)
#define eval_sv(a,b) Perl_eval_sv(aTHX_ a,b)
#define fbm_compile(a,b) Perl_fbm_compile(aTHX_ a,b)
#define fbm_instr(a,b,c,d) Perl_fbm_instr(aTHX_ a,b,c,d)
#define filter_add(a,b) Perl_filter_add(aTHX_ a,b)
#define filter_del(a) Perl_filter_del(aTHX_ a)
#define filter_read(a,b,c) Perl_filter_read(aTHX_ a,b,c)
#define find_runcv(a) Perl_find_runcv(aTHX_ a)
#define find_rundefsv() Perl_find_rundefsv(aTHX)
#define find_rundefsvoffset() Perl_find_rundefsvoffset(aTHX)
#define foldEQ Perl_foldEQ
#define foldEQ_latin1 Perl_foldEQ_latin1
#define foldEQ_locale Perl_foldEQ_locale
#define foldEQ_utf8_flags(a,b,c,d,e,f,g,h,i) Perl_foldEQ_utf8_flags(aTHX_ a,b,c,d,e,f,g,h,i)



#define free_tmps() Perl_free_tmps(aTHX)
#define get_av(a,b) Perl_get_av(aTHX_ a,b)
#define get_context Perl_get_context
#define get_cv(a,b) Perl_get_cv(aTHX_ a,b)
#define get_cvn_flags(a,b,c) Perl_get_cvn_flags(aTHX_ a,b,c)
#define get_hv(a,b) Perl_get_hv(aTHX_ a,b)
#define get_op_descs() Perl_get_op_descs(aTHX)
#define get_op_names() Perl_get_op_names(aTHX)
#define get_ppaddr() Perl_get_ppaddr(aTHX)
#define get_sv(a,b) Perl_get_sv(aTHX_ a,b)
#define get_vtbl(a) Perl_get_vtbl(aTHX_ a)
#define getcwd_sv(a) Perl_getcwd_sv(aTHX_ a)
#define gp_free(a) Perl_gp_free(aTHX_ a)
#define gp_ref(a) Perl_gp_ref(aTHX_ a)
#define grok_bin(a,b,c,d) Perl_grok_bin(aTHX_ a,b,c,d)
#define grok_hex(a,b,c,d) Perl_grok_hex(aTHX_ a,b,c,d)
#define grok_infnan(a,b) Perl_grok_infnan(aTHX_ a,b)
#define grok_number(a,b,c) Perl_grok_number(aTHX_ a,b,c)
#define grok_number_flags(a,b,c,d) Perl_grok_number_flags(aTHX_ a,b,c,d)
#define grok_numeric_radix(a,b) Perl_grok_numeric_radix(aTHX_ a,b)
#define grok_oct(a,b,c,d) Perl_grok_oct(aTHX_ a,b,c,d)
#define gv_add_by_type(a,b) Perl_gv_add_by_type(aTHX_ a,b)
#define gv_autoload_pv(a,b,c) Perl_gv_autoload_pv(aTHX_ a,b,c)
#define gv_autoload_pvn(a,b,c,d) Perl_gv_autoload_pvn(aTHX_ a,b,c,d)
#define gv_autoload_sv(a,b,c) Perl_gv_autoload_sv(aTHX_ a,b,c)
#define gv_check(a) Perl_gv_check(aTHX_ a)
#define gv_const_sv(a) Perl_gv_const_sv(aTHX_ a)
#define gv_dump(a) Perl_gv_dump(aTHX_ a)
#define gv_efullname(a,b) Perl_gv_efullname(aTHX_ a,b)
#define gv_efullname4(a,b,c,d) Perl_gv_efullname4(aTHX_ a,b,c,d)
#define gv_fetchfile(a) Perl_gv_fetchfile(aTHX_ a)
#define gv_fetchfile_flags(a,b,c) Perl_gv_fetchfile_flags(aTHX_ a,b,c)
#define gv_fetchmeth_pv(a,b,c,d) Perl_gv_fetchmeth_pv(aTHX_ a,b,c,d)
#define gv_fetchmeth_pv_autoload(a,b,c,d) Perl_gv_fetchmeth_pv_autoload(aTHX_ a,b,c,d)
#define gv_fetchmeth_pvn(a,b,c,d,e) Perl_gv_fetchmeth_pvn(aTHX_ a,b,c,d,e)
#define gv_fetchmeth_pvn_autoload(a,b,c,d,e) Perl_gv_fetchmeth_pvn_autoload(aTHX_ a,b,c,d,e)
#define gv_fetchmeth_sv(a,b,c,d) Perl_gv_fetchmeth_sv(aTHX_ a,b,c,d)
#define gv_fetchmeth_sv_autoload(a,b,c,d) Perl_gv_fetchmeth_sv_autoload(aTHX_ a,b,c,d)
#define gv_fetchmethod_autoload(a,b,c) Perl_gv_fetchmethod_autoload(aTHX_ a,b,c)
#define gv_fetchmethod_pv_flags(a,b,c) Perl_gv_fetchmethod_pv_flags(aTHX_ a,b,c)
#define gv_fetchmethod_pvn_flags(a,b,c,d) Perl_gv_fetchmethod_pvn_flags(aTHX_ a,b,c,d)
#define gv_fetchmethod_sv_flags(a,b,c) Perl_gv_fetchmethod_sv_flags(aTHX_ a,b,c)
#define gv_fetchpv(a,b,c) Perl_gv_fetchpv(aTHX_ a,b,c)
#define gv_fetchpvn_flags(a,b,c,d) Perl_gv_fetchpvn_flags(aTHX_ a,b,c,d)
#define gv_fetchsv(a,b,c) Perl_gv_fetchsv(aTHX_ a,b,c)
#define gv_fullname(a,b) Perl_gv_fullname(aTHX_ a,b)
#define gv_fullname4(a,b,c,d) Perl_gv_fullname4(aTHX_ a,b,c,d)
#define gv_handler(a,b) Perl_gv_handler(aTHX_ a,b)
#define gv_init_pv(a,b,c,d) Perl_gv_init_pv(aTHX_ a,b,c,d)
#define gv_init_pvn(a,b,c,d,e) Perl_gv_init_pvn(aTHX_ a,b,c,d,e)
#define gv_init_sv(a,b,c,d) Perl_gv_init_sv(aTHX_ a,b,c,d)
#define gv_name_set(a,b,c,d) Perl_gv_name_set(aTHX_ a,b,c,d)
#define gv_stashpv(a,b) Perl_gv_stashpv(aTHX_ a,b)
#define gv_stashpvn(a,b,c) Perl_gv_stashpvn(aTHX_ a,b,c)
#define gv_stashsv(a,b) Perl_gv_stashsv(aTHX_ a,b)
#define hv_clear(a) Perl_hv_clear(aTHX_ a)
#define hv_clear_placeholders(a) Perl_hv_clear_placeholders(aTHX_ a)
#define hv_common(a,b,c,d,e,f,g,h) Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
#define hv_common_key_len(a,b,c,d,e,f) Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
#define hv_copy_hints_hv(a) Perl_hv_copy_hints_hv(aTHX_ a)
#define hv_delayfree_ent(a,b) Perl_hv_delayfree_ent(aTHX_ a,b)
#define hv_free_ent(a,b) Perl_hv_free_ent(aTHX_ a,b)
#define hv_iterinit(a) Perl_hv_iterinit(aTHX_ a)
#define hv_iterkey(a,b) Perl_hv_iterkey(aTHX_ a,b)
#define hv_iterkeysv(a) Perl_hv_iterkeysv(aTHX_ a)
#define hv_iternext_flags(a,b) Perl_hv_iternext_flags(aTHX_ a,b)
#define hv_iternextsv(a,b,c) Perl_hv_iternextsv(aTHX_ a,b,c)
#define hv_iterval(a,b) Perl_hv_iterval(aTHX_ a,b)
#define hv_ksplit(a,b) Perl_hv_ksplit(aTHX_ a,b)
#define hv_name_set(a,b,c,d) Perl_hv_name_set(aTHX_ a,b,c,d)
#define hv_rand_set(a,b) Perl_hv_rand_set(aTHX_ a,b)
#define hv_scalar(a) Perl_hv_scalar(aTHX_ a)
#define init_i18nl10n(a) Perl_init_i18nl10n(aTHX_ a)
#define init_i18nl14n(a) Perl_init_i18nl14n(aTHX_ a)
#define init_stacks() Perl_init_stacks(aTHX)
#define init_tm(a) Perl_init_tm(aTHX_ a)
#define instr Perl_instr
#define intro_my() Perl_intro_my(aTHX)
#define isALNUM_lazy(a) Perl_isALNUM_lazy(aTHX_ a)
#define isIDFIRST_lazy(a) Perl_isIDFIRST_lazy(aTHX_ a)
#define is_invariant_string Perl_is_invariant_string
#define is_lvalue_sub() Perl_is_lvalue_sub(aTHX)
#define is_safe_syscall(a,b,c,d) S_is_safe_syscall(aTHX_ a,b,c,d)
#define is_uni_alnum(a) Perl_is_uni_alnum(aTHX_ a)
#define is_uni_alnum_lc(a) Perl_is_uni_alnum_lc(aTHX_ a)
#define is_uni_alnumc(a) Perl_is_uni_alnumc(aTHX_ a)
#define is_uni_alnumc_lc(a) Perl_is_uni_alnumc_lc(aTHX_ a)
#define is_uni_alpha(a) Perl_is_uni_alpha(aTHX_ a)
#define is_uni_alpha_lc(a) Perl_is_uni_alpha_lc(aTHX_ a)
#define is_uni_ascii(a) Perl_is_uni_ascii(aTHX_ a)
#define is_uni_ascii_lc(a) Perl_is_uni_ascii_lc(aTHX_ a)
#define is_uni_blank(a) Perl_is_uni_blank(aTHX_ a)
#define is_uni_blank_lc(a) Perl_is_uni_blank_lc(aTHX_ a)
#define is_uni_cntrl(a) Perl_is_uni_cntrl(aTHX_ a)
#define is_uni_cntrl_lc(a) Perl_is_uni_cntrl_lc(aTHX_ a)
#define is_uni_digit(a) Perl_is_uni_digit(aTHX_ a)
#define is_uni_digit_lc(a) Perl_is_uni_digit_lc(aTHX_ a)
#define is_uni_graph(a) Perl_is_uni_graph(aTHX_ a)
#define is_uni_graph_lc(a) Perl_is_uni_graph_lc(aTHX_ a)
#define is_uni_idfirst(a) Perl_is_uni_idfirst(aTHX_ a)
#define is_uni_idfirst_lc(a) Perl_is_uni_idfirst_lc(aTHX_ a)
#define is_uni_lower(a) Perl_is_uni_lower(aTHX_ a)
#define is_uni_lower_lc(a) Perl_is_uni_lower_lc(aTHX_ a)
#define is_uni_print(a) Perl_is_uni_print(aTHX_ a)
#define is_uni_print_lc(a) Perl_is_uni_print_lc(aTHX_ a)
#define is_uni_punct(a) Perl_is_uni_punct(aTHX_ a)
#define is_uni_punct_lc(a) Perl_is_uni_punct_lc(aTHX_ a)
#define is_uni_space(a) Perl_is_uni_space(aTHX_ a)
#define is_uni_space_lc(a) Perl_is_uni_space_lc(aTHX_ a)
#define is_uni_upper(a) Perl_is_uni_upper(aTHX_ a)
#define is_uni_upper_lc(a) Perl_is_uni_upper_lc(aTHX_ a)
#define is_uni_xdigit(a) Perl_is_uni_xdigit(aTHX_ a)
#define is_uni_xdigit_lc(a) Perl_is_uni_xdigit_lc(aTHX_ a)
#define is_utf8_alnum(a) Perl_is_utf8_alnum(aTHX_ a)
#define is_utf8_alnumc(a) Perl_is_utf8_alnumc(aTHX_ a)
#define is_utf8_alpha(a) Perl_is_utf8_alpha(aTHX_ a)
#define is_utf8_ascii(a) Perl_is_utf8_ascii(aTHX_ a)
#define is_utf8_blank(a) Perl_is_utf8_blank(aTHX_ a)
#define is_utf8_char Perl_is_utf8_char
#define is_utf8_cntrl(a) Perl_is_utf8_cntrl(aTHX_ a)
#define is_utf8_digit(a) Perl_is_utf8_digit(aTHX_ a)
#define is_utf8_graph(a) Perl_is_utf8_graph(aTHX_ a)
#define is_utf8_idcont(a) Perl_is_utf8_idcont(aTHX_ a)
#define is_utf8_idfirst(a) Perl_is_utf8_idfirst(aTHX_ a)
#define is_utf8_lower(a) Perl_is_utf8_lower(aTHX_ a)
#define is_utf8_mark(a) Perl_is_utf8_mark(aTHX_ a)
#define is_utf8_perl_space(a) Perl_is_utf8_perl_space(aTHX_ a)
#define is_utf8_perl_word(a) Perl_is_utf8_perl_word(aTHX_ a)
#define is_utf8_posix_digit(a) Perl_is_utf8_posix_digit(aTHX_ a)
#define is_utf8_print(a) Perl_is_utf8_print(aTHX_ a)
#define is_utf8_punct(a) Perl_is_utf8_punct(aTHX_ a)
#define is_utf8_space(a) Perl_is_utf8_space(aTHX_ a)
#define is_utf8_string Perl_is_utf8_string
#define is_utf8_string_loclen Perl_is_utf8_string_loclen
#define is_utf8_upper(a) Perl_is_utf8_upper(aTHX_ a)
#define is_utf8_xdigit(a) Perl_is_utf8_xdigit(aTHX_ a)
#define is_utf8_xidcont(a) Perl_is_utf8_xidcont(aTHX_ a)
#define is_utf8_xidfirst(a) Perl_is_utf8_xidfirst(aTHX_ a)
#define isinfnan Perl_isinfnan
#define leave_scope(a) Perl_leave_scope(aTHX_ a)
#define lex_bufutf8() Perl_lex_bufutf8(aTHX)
#define lex_discard_to(a) Perl_lex_discard_to(aTHX_ a)
#define lex_grow_linestr(a) Perl_lex_grow_linestr(aTHX_ a)
#define lex_next_chunk(a) Perl_lex_next_chunk(aTHX_ a)
#define lex_peek_unichar(a) Perl_lex_peek_unichar(aTHX_ a)
#define lex_read_space(a) Perl_lex_read_space(aTHX_ a)
#define lex_read_to(a) Perl_lex_read_to(aTHX_ a)
#define lex_read_unichar(a) Perl_lex_read_unichar(aTHX_ a)
#define lex_start(a,b,c) Perl_lex_start(aTHX_ a,b,c)
#define lex_stuff_pv(a,b) Perl_lex_stuff_pv(aTHX_ a,b)
#define lex_stuff_pvn(a,b,c) Perl_lex_stuff_pvn(aTHX_ a,b,c)
#define lex_stuff_sv(a,b) Perl_lex_stuff_sv(aTHX_ a,b)
#define lex_unstuff(a) Perl_lex_unstuff(aTHX_ a)



#define looks_like_number(a) Perl_looks_like_number(aTHX_ a)
#define magic_dump(a) Perl_magic_dump(aTHX_ a)
#define markstack_grow() Perl_markstack_grow(aTHX)



#define mess_sv(a,b) Perl_mess_sv(aTHX_ a,b)
#define mg_clear(a) Perl_mg_clear(aTHX_ a)
#define mg_copy(a,b,c,d) Perl_mg_copy(aTHX_ a,b,c,d)
#define mg_find Perl_mg_find
#define mg_findext Perl_mg_findext
#define mg_free(a) Perl_mg_free(aTHX_ a)
#define mg_free_type(a,b) Perl_mg_free_type(aTHX_ a,b)
#define mg_get(a) Perl_mg_get(aTHX_ a)
#define mg_length(a) Perl_mg_length(aTHX_ a)
#define mg_magical Perl_mg_magical
#define mg_set(a) Perl_mg_set(aTHX_ a)
#define mg_size(a) Perl_mg_size(aTHX_ a)
#define mini_mktime Perl_mini_mktime
#define moreswitches(a) Perl_moreswitches(aTHX_ a)
#define mro_get_linear_isa(a) Perl_mro_get_linear_isa(aTHX_ a)
#define mro_method_changed_in(a) Perl_mro_method_changed_in(aTHX_ a)
#define my_atof(a) Perl_my_atof(aTHX_ a)
#define my_atof2(a,b) Perl_my_atof2(aTHX_ a,b)
#define my_dirfd Perl_my_dirfd
#define my_exit(a) Perl_my_exit(aTHX_ a)
#define my_failure_exit() Perl_my_failure_exit(aTHX)
#define my_fflush_all() Perl_my_fflush_all(aTHX)
#define my_fork Perl_my_fork
#define my_popen_list(a,b,c) Perl_my_popen_list(aTHX_ a,b,c)
#define my_setenv(a,b) Perl_my_setenv(aTHX_ a,b)
#define my_socketpair Perl_my_socketpair
#define my_strerror(a) Perl_my_strerror(aTHX_ a)
#define my_strftime(a,b,c,d,e,f,g,h,i,j) Perl_my_strftime(aTHX_ a,b,c,d,e,f,g,h,i,j)
#define newANONATTRSUB(a,b,c,d) Perl_newANONATTRSUB(aTHX_ a,b,c,d)
#define newANONHASH(a) Perl_newANONHASH(aTHX_ a)
#define newANONLIST(a) Perl_newANONLIST(aTHX_ a)
#define newANONSUB(a,b,c) Perl_newANONSUB(aTHX_ a,b,c)
#define newASSIGNOP(a,b,c,d) Perl_newASSIGNOP(aTHX_ a,b,c,d)
#define newAVREF(a) Perl_newAVREF(aTHX_ a)
#define newBINOP(a,b,c,d) Perl_newBINOP(aTHX_ a,b,c,d)
#define newCONDOP(a,b,c,d) Perl_newCONDOP(aTHX_ a,b,c,d)
#define newCONSTSUB(a,b,c) Perl_newCONSTSUB(aTHX_ a,b,c)
#define newCONSTSUB_flags(a,b,c,d,e) Perl_newCONSTSUB_flags(aTHX_ a,b,c,d,e)
#define newCVREF(a,b) Perl_newCVREF(aTHX_ a,b)
#define newDEFSVOP() Perl_newDEFSVOP(aTHX)
#define newFORM(a,b,c) Perl_newFORM(aTHX_ a,b,c)
#define newFOROP(a,b,c,d,e) Perl_newFOROP(aTHX_ a,b,c,d,e)
#define newGIVENOP(a,b,c) Perl_newGIVENOP(aTHX_ a,b,c)
#define newGVOP(a,b,c) Perl_newGVOP(aTHX_ a,b,c)
#define newGVREF(a,b) Perl_newGVREF(aTHX_ a,b)
#define newGVgen_flags(a,b) Perl_newGVgen_flags(aTHX_ a,b)
#define newHVREF(a) Perl_newHVREF(aTHX_ a)
#define newHVhv(a) Perl_newHVhv(aTHX_ a)
#define newLISTOP(a,b,c,d) Perl_newLISTOP(aTHX_ a,b,c,d)
#define newLOGOP(a,b,c,d) Perl_newLOGOP(aTHX_ a,b,c,d)
#define newLOOPEX(a,b) Perl_newLOOPEX(aTHX_ a,b)
#define newLOOPOP(a,b,c,d) Perl_newLOOPOP(aTHX_ a,b,c,d)
#define newMETHOP(a,b,c) Perl_newMETHOP(aTHX_ a,b,c)
#define newMETHOP_named(a,b,c) Perl_newMETHOP_named(aTHX_ a,b,c)
#define newMYSUB(a,b,c,d,e) Perl_newMYSUB(aTHX_ a,b,c,d,e)
#define newNULLLIST() Perl_newNULLLIST(aTHX)
#define newOP(a,b) Perl_newOP(aTHX_ a,b)
#define newPADNAMELIST Perl_newPADNAMELIST
#define newPADNAMEouter Perl_newPADNAMEouter
#define newPADNAMEpvn Perl_newPADNAMEpvn
#define newPMOP(a,b) Perl_newPMOP(aTHX_ a,b)
#define newPROG(a) Perl_newPROG(aTHX_ a)
#define newPVOP(a,b,c) Perl_newPVOP(aTHX_ a,b,c)
#define newRANGE(a,b,c) Perl_newRANGE(aTHX_ a,b,c)
#define newRV(a) Perl_newRV(aTHX_ a)
#define newRV_noinc(a) Perl_newRV_noinc(aTHX_ a)
#define newSLICEOP(a,b,c) Perl_newSLICEOP(aTHX_ a,b,c)
#define newSTATEOP(a,b,c) Perl_newSTATEOP(aTHX_ a,b,c)
#define newSV(a) Perl_newSV(aTHX_ a)
#define newSVOP(a,b,c) Perl_newSVOP(aTHX_ a,b,c)
#define newSVREF(a) Perl_newSVREF(aTHX_ a)
#define newSV_type(a) Perl_newSV_type(aTHX_ a)
#define newSVhek(a) Perl_newSVhek(aTHX_ a)
#define newSViv(a) Perl_newSViv(aTHX_ a)
#define newSVnv(a) Perl_newSVnv(aTHX_ a)
#define newSVpv(a,b) Perl_newSVpv(aTHX_ a,b)
#define newSVpv_share(a,b) Perl_newSVpv_share(aTHX_ a,b)



#define newSVpvn(a,b) Perl_newSVpvn(aTHX_ a,b)
#define newSVpvn_flags(a,b,c) Perl_newSVpvn_flags(aTHX_ a,b,c)
#define newSVpvn_share(a,b,c) Perl_newSVpvn_share(aTHX_ a,b,c)
#define newSVrv(a,b) Perl_newSVrv(aTHX_ a,b)
#define newSVsv(a) Perl_newSVsv(aTHX_ a)
#define newSVuv(a) Perl_newSVuv(aTHX_ a)
#define newUNOP(a,b,c) Perl_newUNOP(aTHX_ a,b,c)
#define newUNOP_AUX(a,b,c,d) Perl_newUNOP_AUX(aTHX_ a,b,c,d)
#define newWHENOP(a,b) Perl_newWHENOP(aTHX_ a,b)
#define newWHILEOP(a,b,c,d,e,f,g) Perl_newWHILEOP(aTHX_ a,b,c,d,e,f,g)
#define newXS(a,b,c) Perl_newXS(aTHX_ a,b,c)
#define newXS_flags(a,b,c,d,e) Perl_newXS_flags(aTHX_ a,b,c,d,e)
#define new_collate(a) Perl_new_collate(aTHX_ a)
#define new_ctype(a) Perl_new_ctype(aTHX_ a)
#define new_numeric(a) Perl_new_numeric(aTHX_ a)
#define new_stackinfo(a,b) Perl_new_stackinfo(aTHX_ a,b)
#define new_version(a) Perl_new_version(aTHX_ a)
#define ninstr Perl_ninstr
#define nothreadhook() Perl_nothreadhook(aTHX)
#define op_append_elem(a,b,c) Perl_op_append_elem(aTHX_ a,b,c)
#define op_append_list(a,b,c) Perl_op_append_list(aTHX_ a,b,c)
#define op_contextualize(a,b) Perl_op_contextualize(aTHX_ a,b)
#define op_convert_list(a,b,c) Perl_op_convert_list(aTHX_ a,b,c)
#define op_dump(a) Perl_op_dump(aTHX_ a)
#define op_free(a) Perl_op_free(aTHX_ a)
#define op_linklist(a) Perl_op_linklist(aTHX_ a)
#define op_null(a) Perl_op_null(aTHX_ a)
#define op_prepend_elem(a,b,c) Perl_op_prepend_elem(aTHX_ a,b,c)
#define op_refcnt_lock() Perl_op_refcnt_lock(aTHX)
#define op_refcnt_unlock() Perl_op_refcnt_unlock(aTHX)
#define op_scope(a) Perl_op_scope(aTHX_ a)
#define op_sibling_splice Perl_op_sibling_splice
#define pack_cat(a,b,c,d,e,f,g) Perl_pack_cat(aTHX_ a,b,c,d,e,f,g)
#define packlist(a,b,c,d,e) Perl_packlist(aTHX_ a,b,c,d,e)
#define pad_add_anon(a,b) Perl_pad_add_anon(aTHX_ a,b)
#define pad_add_name_pv(a,b,c,d) Perl_pad_add_name_pv(aTHX_ a,b,c,d)
#define pad_add_name_pvn(a,b,c,d,e) Perl_pad_add_name_pvn(aTHX_ a,b,c,d,e)
#define pad_add_name_sv(a,b,c,d) Perl_pad_add_name_sv(aTHX_ a,b,c,d)
#define pad_alloc(a,b) Perl_pad_alloc(aTHX_ a,b)
#define pad_compname_type(a) Perl_pad_compname_type(aTHX_ a)
#define pad_findmy_pv(a,b) Perl_pad_findmy_pv(aTHX_ a,b)
#define pad_findmy_pvn(a,b,c) Perl_pad_findmy_pvn(aTHX_ a,b,c)
#define pad_findmy_sv(a,b) Perl_pad_findmy_sv(aTHX_ a,b)
#define pad_new(a) Perl_pad_new(aTHX_ a)
#define pad_tidy(a) Perl_pad_tidy(aTHX_ a)
#define padnamelist_fetch Perl_padnamelist_fetch
#define padnamelist_store(a,b,c) Perl_padnamelist_store(aTHX_ a,b,c)
#define parse_arithexpr(a) Perl_parse_arithexpr(aTHX_ a)
#define parse_barestmt(a) Perl_parse_barestmt(aTHX_ a)
#define parse_block(a) Perl_parse_block(aTHX_ a)
#define parse_fullexpr(a) Perl_parse_fullexpr(aTHX_ a)
#define parse_fullstmt(a) Perl_parse_fullstmt(aTHX_ a)
#define parse_label(a) Perl_parse_label(aTHX_ a)
#define parse_listexpr(a) Perl_parse_listexpr(aTHX_ a)
#define parse_stmtseq(a) Perl_parse_stmtseq(aTHX_ a)
#define parse_termexpr(a) Perl_parse_termexpr(aTHX_ a)
#define pmop_dump(a) Perl_pmop_dump(aTHX_ a)
#define pop_scope() Perl_pop_scope(aTHX)
#define pregcomp(a,b) Perl_pregcomp(aTHX_ a,b)
#define pregexec(a,b,c,d,e,f,g) Perl_pregexec(aTHX_ a,b,c,d,e,f,g)
#define pregfree(a) Perl_pregfree(aTHX_ a)
#define pregfree2(a) Perl_pregfree2(aTHX_ a)
#define prescan_version(a,b,c,d,e,f,g) Perl_prescan_version(aTHX_ a,b,c,d,e,f,g)
#define ptr_table_clear(a) Perl_ptr_table_clear(aTHX_ a)
#define ptr_table_fetch(a,b) Perl_ptr_table_fetch(aTHX_ a,b)
#define ptr_table_free(a) Perl_ptr_table_free(aTHX_ a)
#define ptr_table_new() Perl_ptr_table_new(aTHX)
#define ptr_table_split(a) Perl_ptr_table_split(aTHX_ a)
#define ptr_table_store(a,b,c) Perl_ptr_table_store(aTHX_ a,b,c)
#define push_scope() Perl_push_scope(aTHX)
#define pv_display(a,b,c,d,e) Perl_pv_display(aTHX_ a,b,c,d,e)
#define pv_escape(a,b,c,d,e,f) Perl_pv_escape(aTHX_ a,b,c,d,e,f)
#define pv_pretty(a,b,c,d,e,f,g) Perl_pv_pretty(aTHX_ a,b,c,d,e,f,g)
#define pv_uni_display(a,b,c,d,e) Perl_pv_uni_display(aTHX_ a,b,c,d,e)
#define re_compile(a,b) Perl_re_compile(aTHX_ a,b)
#define re_intuit_start(a,b,c,d,e,f,g) Perl_re_intuit_start(aTHX_ a,b,c,d,e,f,g)
#define re_intuit_string(a) Perl_re_intuit_string(aTHX_ a)
#define reentrant_free() Perl_reentrant_free(aTHX)
#define reentrant_init() Perl_reentrant_init(aTHX)
#define reentrant_retry Perl_reentrant_retry
#define reentrant_size() Perl_reentrant_size(aTHX)
#define reg_named_buff_all(a,b) Perl_reg_named_buff_all(aTHX_ a,b)
#define reg_named_buff_exists(a,b,c) Perl_reg_named_buff_exists(aTHX_ a,b,c)
#define reg_named_buff_fetch(a,b,c) Perl_reg_named_buff_fetch(aTHX_ a,b,c)
#define reg_named_buff_firstkey(a,b) Perl_reg_named_buff_firstkey(aTHX_ a,b)
#define reg_named_buff_nextkey(a,b) Perl_reg_named_buff_nextkey(aTHX_ a,b)
#define reg_named_buff_scalar(a,b) Perl_reg_named_buff_scalar(aTHX_ a,b)
#define regclass_swash(a,b,c,d,e) Perl_regclass_swash(aTHX_ a,b,c,d,e)
#define regdump(a) Perl_regdump(aTHX_ a)
#define regexec_flags(a,b,c,d,e,f,g,h) Perl_regexec_flags(aTHX_ a,b,c,d,e,f,g,h)
#define regfree_internal(a) Perl_regfree_internal(aTHX_ a)
#define reginitcolors() Perl_reginitcolors(aTHX)
#define regnext(a) Perl_regnext(aTHX_ a)
#define repeatcpy Perl_repeatcpy
#define require_pv(a) Perl_require_pv(aTHX_ a)
#define rninstr Perl_rninstr
#define rsignal(a,b) Perl_rsignal(aTHX_ a,b)
#define rsignal_state(a) Perl_rsignal_state(aTHX_ a)
#define runops_debug() Perl_runops_debug(aTHX)
#define runops_standard() Perl_runops_standard(aTHX)
#define rv2cv_op_cv(a,b) Perl_rv2cv_op_cv(aTHX_ a,b)
#define safesyscalloc Perl_safesyscalloc
#define safesysfree Perl_safesysfree
#define safesysmalloc Perl_safesysmalloc
#define safesysrealloc Perl_safesysrealloc
#define save_I16(a) Perl_save_I16(aTHX_ a)
#define save_I32(a) Perl_save_I32(aTHX_ a)
#define save_I8(a) Perl_save_I8(aTHX_ a)
#define save_adelete(a,b) Perl_save_adelete(aTHX_ a,b)
#define save_aelem_flags(a,b,c,d) Perl_save_aelem_flags(aTHX_ a,b,c,d)
#define save_alloc(a,b) Perl_save_alloc(aTHX_ a,b)
#define save_aptr(a) Perl_save_aptr(aTHX_ a)
#define save_ary(a) Perl_save_ary(aTHX_ a)
#define save_bool(a) Perl_save_bool(aTHX_ a)
#define save_clearsv(a) Perl_save_clearsv(aTHX_ a)
#define save_delete(a,b,c) Perl_save_delete(aTHX_ a,b,c)
#define save_destructor(a,b) Perl_save_destructor(aTHX_ a,b)
#define save_destructor_x(a,b) Perl_save_destructor_x(aTHX_ a,b)
#define save_generic_pvref(a) Perl_save_generic_pvref(aTHX_ a)
#define save_generic_svref(a) Perl_save_generic_svref(aTHX_ a)
#define save_gp(a,b) Perl_save_gp(aTHX_ a,b)
#define save_hash(a) Perl_save_hash(aTHX_ a)
#define save_hdelete(a,b) Perl_save_hdelete(aTHX_ a,b)
#define save_helem_flags(a,b,c,d) Perl_save_helem_flags(aTHX_ a,b,c,d)
#define save_hints() Perl_save_hints(aTHX)
#define save_hptr(a) Perl_save_hptr(aTHX_ a)
#define save_int(a) Perl_save_int(aTHX_ a)
#define save_item(a) Perl_save_item(aTHX_ a)
#define save_iv(a) Perl_save_iv(aTHX_ a)
#define save_list(a,b) Perl_save_list(aTHX_ a,b)
#define save_long(a) Perl_save_long(aTHX_ a)
#define save_nogv(a) Perl_save_nogv(aTHX_ a)
#define save_padsv_and_mortalize(a) Perl_save_padsv_and_mortalize(aTHX_ a)
#define save_pptr(a) Perl_save_pptr(aTHX_ a)
#define save_pushi32ptr(a,b,c) Perl_save_pushi32ptr(aTHX_ a,b,c)
#define save_pushptr(a,b) Perl_save_pushptr(aTHX_ a,b)
#define save_pushptrptr(a,b,c) Perl_save_pushptrptr(aTHX_ a,b,c)
#define save_re_context() Perl_save_re_context(aTHX)
#define save_scalar(a) Perl_save_scalar(aTHX_ a)
#define save_set_svflags(a,b,c) Perl_save_set_svflags(aTHX_ a,b,c)
#define save_shared_pvref(a) Perl_save_shared_pvref(aTHX_ a)
#define save_sptr(a) Perl_save_sptr(aTHX_ a)
#define save_svref(a) Perl_save_svref(aTHX_ a)
#define save_vptr(a) Perl_save_vptr(aTHX_ a)
#define savepv(a) Perl_savepv(aTHX_ a)
#define savepvn(a,b) Perl_savepvn(aTHX_ a,b)
#define savesharedpv(a) Perl_savesharedpv(aTHX_ a)
#define savesharedpvn(a,b) Perl_savesharedpvn(aTHX_ a,b)
#define savesharedsvpv(a) Perl_savesharedsvpv(aTHX_ a)
#define savestack_grow() Perl_savestack_grow(aTHX)
#define savestack_grow_cnt(a) Perl_savestack_grow_cnt(aTHX_ a)
#define savesvpv(a) Perl_savesvpv(aTHX_ a)
#define scan_bin(a,b,c) Perl_scan_bin(aTHX_ a,b,c)
#define scan_hex(a,b,c) Perl_scan_hex(aTHX_ a,b,c)
#define scan_num(a,b) Perl_scan_num(aTHX_ a,b)
#define scan_oct(a,b,c) Perl_scan_oct(aTHX_ a,b,c)
#define scan_version(a,b,c) Perl_scan_version(aTHX_ a,b,c)
#define scan_vstring(a,b,c) Perl_scan_vstring(aTHX_ a,b,c)
#define seed() Perl_seed(aTHX)
#define set_context Perl_set_context
#define set_numeric_local() Perl_set_numeric_local(aTHX)
#define set_numeric_radix() Perl_set_numeric_radix(aTHX)
#define set_numeric_standard() Perl_set_numeric_standard(aTHX)
#define setdefout(a) Perl_setdefout(aTHX_ a)
#define share_hek(a,b,c) Perl_share_hek(aTHX_ a,b,c)
#define sortsv(a,b,c) Perl_sortsv(aTHX_ a,b,c)
#define sortsv_flags(a,b,c,d) Perl_sortsv_flags(aTHX_ a,b,c,d)
#define stack_grow(a,b,c) Perl_stack_grow(aTHX_ a,b,c)
#define start_subparse(a,b) Perl_start_subparse(aTHX_ a,b)
#define str_to_version(a) Perl_str_to_version(aTHX_ a)
#define sv_2bool_flags(a,b) Perl_sv_2bool_flags(aTHX_ a,b)
#define sv_2cv(a,b,c,d) Perl_sv_2cv(aTHX_ a,b,c,d)
#define sv_2io(a) Perl_sv_2io(aTHX_ a)
#define sv_2iv_flags(a,b) Perl_sv_2iv_flags(aTHX_ a,b)
#define sv_2mortal(a) Perl_sv_2mortal(aTHX_ a)
#define sv_2nv_flags(a,b) Perl_sv_2nv_flags(aTHX_ a,b)
#define sv_2pv_flags(a,b,c) Perl_sv_2pv_flags(aTHX_ a,b,c)
#define sv_2pvbyte(a,b) Perl_sv_2pvbyte(aTHX_ a,b)
#define sv_2pvutf8(a,b) Perl_sv_2pvutf8(aTHX_ a,b)
#define sv_2uv_flags(a,b) Perl_sv_2uv_flags(aTHX_ a,b)
#define sv_backoff Perl_sv_backoff
#define sv_bless(a,b) Perl_sv_bless(aTHX_ a,b)
#define sv_cat_decode(a,b,c,d,e,f) Perl_sv_cat_decode(aTHX_ a,b,c,d,e,f)
#define sv_catpv(a,b) Perl_sv_catpv(aTHX_ a,b)
#define sv_catpv_flags(a,b,c) Perl_sv_catpv_flags(aTHX_ a,b,c)
#define sv_catpv_mg(a,b) Perl_sv_catpv_mg(aTHX_ a,b)




#define sv_catpvn_flags(a,b,c,d) Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
#define sv_catsv_flags(a,b,c) Perl_sv_catsv_flags(aTHX_ a,b,c)
#define sv_chop(a,b) Perl_sv_chop(aTHX_ a,b)
#define sv_clear(a) Perl_sv_clear(aTHX_ a)
#define sv_cmp_flags(a,b,c) Perl_sv_cmp_flags(aTHX_ a,b,c)
#define sv_cmp_locale_flags(a,b,c) Perl_sv_cmp_locale_flags(aTHX_ a,b,c)
#define sv_copypv_flags(a,b,c) Perl_sv_copypv_flags(aTHX_ a,b,c)
#define sv_dec(a) Perl_sv_dec(aTHX_ a)
#define sv_dec_nomg(a) Perl_sv_dec_nomg(aTHX_ a)
#define sv_derived_from(a,b) Perl_sv_derived_from(aTHX_ a,b)
#define sv_derived_from_pv(a,b,c) Perl_sv_derived_from_pv(aTHX_ a,b,c)
#define sv_derived_from_pvn(a,b,c,d) Perl_sv_derived_from_pvn(aTHX_ a,b,c,d)
#define sv_derived_from_sv(a,b,c) Perl_sv_derived_from_sv(aTHX_ a,b,c)
#define sv_destroyable(a) Perl_sv_destroyable(aTHX_ a)
#define sv_does(a,b) Perl_sv_does(aTHX_ a,b)
#define sv_does_pv(a,b,c) Perl_sv_does_pv(aTHX_ a,b,c)
#define sv_does_pvn(a,b,c,d) Perl_sv_does_pvn(aTHX_ a,b,c,d)
#define sv_does_sv(a,b,c) Perl_sv_does_sv(aTHX_ a,b,c)
#define sv_dump(a) Perl_sv_dump(aTHX_ a)
#define sv_eq_flags(a,b,c) Perl_sv_eq_flags(aTHX_ a,b,c)
#define sv_force_normal_flags(a,b) Perl_sv_force_normal_flags(aTHX_ a,b)
#define sv_free(a) Perl_sv_free(aTHX_ a)
#define sv_get_backrefs Perl_sv_get_backrefs
#define sv_gets(a,b,c) Perl_sv_gets(aTHX_ a,b,c)
#define sv_grow(a,b) Perl_sv_grow(aTHX_ a,b)
#define sv_inc(a) Perl_sv_inc(aTHX_ a)
#define sv_inc_nomg(a) Perl_sv_inc_nomg(aTHX_ a)
#define sv_insert_flags(a,b,c,d,e,f) Perl_sv_insert_flags(aTHX_ a,b,c,d,e,f)
#define sv_isa(a,b) Perl_sv_isa(aTHX_ a,b)
#define sv_isobject(a) Perl_sv_isobject(aTHX_ a)
#define sv_iv(a) Perl_sv_iv(aTHX_ a)
#define sv_len(a) Perl_sv_len(aTHX_ a)
#define sv_len_utf8(a) Perl_sv_len_utf8(aTHX_ a)
#define sv_magic(a,b,c,d,e) Perl_sv_magic(aTHX_ a,b,c,d,e)
#define sv_magicext(a,b,c,d,e,f) Perl_sv_magicext(aTHX_ a,b,c,d,e,f)
#define sv_newmortal() Perl_sv_newmortal(aTHX)
#define sv_newref(a) Perl_sv_newref(aTHX_ a)
#define sv_nosharing(a) Perl_sv_nosharing(aTHX_ a)
#define sv_nv(a) Perl_sv_nv(aTHX_ a)
#define sv_peek(a) Perl_sv_peek(aTHX_ a)
#define sv_pos_b2u(a,b) Perl_sv_pos_b2u(aTHX_ a,b)
#define sv_pos_b2u_flags(a,b,c) Perl_sv_pos_b2u_flags(aTHX_ a,b,c)
#define sv_pos_u2b(a,b,c) Perl_sv_pos_u2b(aTHX_ a,b,c)
#define sv_pos_u2b_flags(a,b,c,d) Perl_sv_pos_u2b_flags(aTHX_ a,b,c,d)
#define sv_pvbyten(a,b) Perl_sv_pvbyten(aTHX_ a,b)
#define sv_pvbyten_force(a,b) Perl_sv_pvbyten_force(aTHX_ a,b)
#define sv_pvn(a,b) Perl_sv_pvn(aTHX_ a,b)
#define sv_pvn_force_flags(a,b,c) Perl_sv_pvn_force_flags(aTHX_ a,b,c)
#define sv_pvn_nomg(a,b) Perl_sv_pvn_nomg(aTHX_ a,b)
#define sv_pvutf8n(a,b) Perl_sv_pvutf8n(aTHX_ a,b)
#define sv_pvutf8n_force(a,b) Perl_sv_pvutf8n_force(aTHX_ a,b)
#define sv_recode_to_utf8(a,b) Perl_sv_recode_to_utf8(aTHX_ a,b)
#define sv_reftype(a,b) Perl_sv_reftype(aTHX_ a,b)
#define sv_replace(a,b) Perl_sv_replace(aTHX_ a,b)
#define sv_report_used() Perl_sv_report_used(aTHX)
#define sv_reset(a,b) Perl_sv_reset(aTHX_ a,b)
#define sv_rvweaken(a) Perl_sv_rvweaken(aTHX_ a)
#define sv_setiv(a,b) Perl_sv_setiv(aTHX_ a,b)
#define sv_setiv_mg(a,b) Perl_sv_setiv_mg(aTHX_ a,b)
#define sv_setnv(a,b) Perl_sv_setnv(aTHX_ a,b)
#define sv_setnv_mg(a,b) Perl_sv_setnv_mg(aTHX_ a,b)
#define sv_setpv(a,b) Perl_sv_setpv(aTHX_ a,b)
#define sv_setpv_mg(a,b) Perl_sv_setpv_mg(aTHX_ a,b)




#define sv_setpviv(a,b) Perl_sv_setpviv(aTHX_ a,b)
#define sv_setpviv_mg(a,b) Perl_sv_setpviv_mg(aTHX_ a,b)
#define sv_setpvn(a,b,c) Perl_sv_setpvn(aTHX_ a,b,c)
#define sv_setpvn_mg(a,b,c) Perl_sv_setpvn_mg(aTHX_ a,b,c)
#define sv_setref_iv(a,b,c) Perl_sv_setref_iv(aTHX_ a,b,c)
#define sv_setref_nv(a,b,c) Perl_sv_setref_nv(aTHX_ a,b,c)
#define sv_setref_pv(a,b,c) Perl_sv_setref_pv(aTHX_ a,b,c)
#define sv_setref_pvn(a,b,c,d) Perl_sv_setref_pvn(aTHX_ a,b,c,d)
#define sv_setref_uv(a,b,c) Perl_sv_setref_uv(aTHX_ a,b,c)
#define sv_setsv_flags(a,b,c) Perl_sv_setsv_flags(aTHX_ a,b,c)
#define sv_setsv_mg(a,b) Perl_sv_setsv_mg(aTHX_ a,b)
#define sv_setuv(a,b) Perl_sv_setuv(aTHX_ a,b)
#define sv_setuv_mg(a,b) Perl_sv_setuv_mg(aTHX_ a,b)
#define sv_tainted(a) Perl_sv_tainted(aTHX_ a)
#define sv_true(a) Perl_sv_true(aTHX_ a)
#define sv_uni_display(a,b,c,d) Perl_sv_uni_display(aTHX_ a,b,c,d)
#define sv_unmagic(a,b) Perl_sv_unmagic(aTHX_ a,b)
#define sv_unmagicext(a,b,c) Perl_sv_unmagicext(aTHX_ a,b,c)
#define sv_unref_flags(a,b) Perl_sv_unref_flags(aTHX_ a,b)
#define sv_untaint(a) Perl_sv_untaint(aTHX_ a)
#define sv_upgrade(a,b) Perl_sv_upgrade(aTHX_ a,b)
#define sv_usepvn_flags(a,b,c,d) Perl_sv_usepvn_flags(aTHX_ a,b,c,d)
#define sv_utf8_decode(a) Perl_sv_utf8_decode(aTHX_ a)
#define sv_utf8_downgrade(a,b) Perl_sv_utf8_downgrade(aTHX_ a,b)
#define sv_utf8_encode(a) Perl_sv_utf8_encode(aTHX_ a)
#define sv_utf8_upgrade_flags_grow(a,b,c) Perl_sv_utf8_upgrade_flags_grow(aTHX_ a,b,c)
#define sv_uv(a) Perl_sv_uv(aTHX_ a)
#define sv_vcatpvf(a,b,c) Perl_sv_vcatpvf(aTHX_ a,b,c)
#define sv_vcatpvf_mg(a,b,c) Perl_sv_vcatpvf_mg(aTHX_ a,b,c)
#define sv_vcatpvfn(a,b,c,d,e,f,g) Perl_sv_vcatpvfn(aTHX_ a,b,c,d,e,f,g)
#define sv_vcatpvfn_flags(a,b,c,d,e,f,g,h) Perl_sv_vcatpvfn_flags(aTHX_ a,b,c,d,e,f,g,h)
#define sv_vsetpvf(a,b,c) Perl_sv_vsetpvf(aTHX_ a,b,c)
#define sv_vsetpvf_mg(a,b,c) Perl_sv_vsetpvf_mg(aTHX_ a,b,c)
#define sv_vsetpvfn(a,b,c,d,e,f,g) Perl_sv_vsetpvfn(aTHX_ a,b,c,d,e,f,g)
#define swash_fetch(a,b,c) Perl_swash_fetch(aTHX_ a,b,c)
#define swash_init(a,b,c,d,e) Perl_swash_init(aTHX_ a,b,c,d,e)
#define sync_locale() Perl_sync_locale(aTHX)
#define taint_env() Perl_taint_env(aTHX)
#define taint_proper(a,b) Perl_taint_proper(aTHX_ a,b)
#define to_uni_lower(a,b,c) Perl_to_uni_lower(aTHX_ a,b,c)
#define to_uni_lower_lc(a) Perl_to_uni_lower_lc(aTHX_ a)
#define to_uni_title(a,b,c) Perl_to_uni_title(aTHX_ a,b,c)
#define to_uni_title_lc(a) Perl_to_uni_title_lc(aTHX_ a)
#define to_uni_upper(a,b,c) Perl_to_uni_upper(aTHX_ a,b,c)
#define to_uni_upper_lc(a) Perl_to_uni_upper_lc(aTHX_ a)
#define to_utf8_case(a,b,c,d,e,f) Perl_to_utf8_case(aTHX_ a,b,c,d,e,f)
#define unpack_str(a,b,c,d,e,f,g,h) Perl_unpack_str(aTHX_ a,b,c,d,e,f,g,h)
#define unpackstring(a,b,c,d,e) Perl_unpackstring(aTHX_ a,b,c,d,e)
#define unsharepvn(a,b,c) Perl_unsharepvn(aTHX_ a,b,c)
#define upg_version(a,b) Perl_upg_version(aTHX_ a,b)
#define utf16_to_utf8(a,b,c,d) Perl_utf16_to_utf8(aTHX_ a,b,c,d)
#define utf16_to_utf8_reversed(a,b,c,d) Perl_utf16_to_utf8_reversed(aTHX_ a,b,c,d)
#define utf8_distance(a,b) Perl_utf8_distance(aTHX_ a,b)
#define utf8_hop Perl_utf8_hop
#define utf8_length(a,b) Perl_utf8_length(aTHX_ a,b)
#define utf8_to_bytes(a,b) Perl_utf8_to_bytes(aTHX_ a,b)
#define utf8_to_uvchr(a,b) Perl_utf8_to_uvchr(aTHX_ a,b)
#define utf8_to_uvuni(a,b) Perl_utf8_to_uvuni(aTHX_ a,b)
#define utf8_to_uvuni_buf(a,b,c) Perl_utf8_to_uvuni_buf(aTHX_ a,b,c)
#define utf8n_to_uvchr(a,b,c,d) Perl_utf8n_to_uvchr(aTHX_ a,b,c,d)
#define utf8n_to_uvuni(a,b,c,d) Perl_utf8n_to_uvuni(aTHX_ a,b,c,d)
#define uvoffuni_to_utf8_flags(a,b,c) Perl_uvoffuni_to_utf8_flags(aTHX_ a,b,c)
#define uvuni_to_utf8(a,b) Perl_uvuni_to_utf8(aTHX_ a,b)
#define uvuni_to_utf8_flags(a,b,c) Perl_uvuni_to_utf8_flags(aTHX_ a,b,c)
#define valid_utf8_to_uvchr(a,b) Perl_valid_utf8_to_uvchr(aTHX_ a,b)
#define valid_utf8_to_uvuni(a,b) Perl_valid_utf8_to_uvuni(aTHX_ a,b)
#define vcmp(a,b) Perl_vcmp(aTHX_ a,b)
#define vcroak(a,b) Perl_vcroak(aTHX_ a,b)
#define vdeb(a,b) Perl_vdeb(aTHX_ a,b)
#define vform(a,b) Perl_vform(aTHX_ a,b)
#define vload_module(a,b,c,d) Perl_vload_module(aTHX_ a,b,c,d)
#define vmess(a,b) Perl_vmess(aTHX_ a,b)
#define vnewSVpvf(a,b) Perl_vnewSVpvf(aTHX_ a,b)
#define vnormal(a) Perl_vnormal(aTHX_ a)
#define vnumify(a) Perl_vnumify(aTHX_ a)
#define vstringify(a) Perl_vstringify(aTHX_ a)
#define vverify(a) Perl_vverify(aTHX_ a)
#define vwarn(a,b) Perl_vwarn(aTHX_ a,b)
#define vwarner(a,b,c) Perl_vwarner(aTHX_ a,b,c)



#define warn_sv(a) Perl_warn_sv(aTHX_ a)



#define whichsig_pv(a) Perl_whichsig_pv(aTHX_ a)
#define whichsig_pvn(a,b) Perl_whichsig_pvn(aTHX_ a,b)
#define whichsig_sv(a) Perl_whichsig_sv(aTHX_ a)
#define wrap_op_checker(a,b,c) Perl_wrap_op_checker(aTHX_ a,b,c)




#define sv_nounlocking(a) Perl_sv_nounlocking(aTHX_ a)
# 775 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/embed.h"
#define my_pclose(a) Perl_my_pclose(aTHX_ a)
#define my_popen(a,b) Perl_my_popen(aTHX_ a,b)
# 786 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/embed.h"
#define csighandler Perl_csighandler
# 805 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/embed.h"
#define croak_nocontext Perl_croak_nocontext
#define deb_nocontext Perl_deb_nocontext
#define die_nocontext Perl_die_nocontext
#define form_nocontext Perl_form_nocontext
#define fprintf_nocontext Perl_fprintf_nocontext
#define load_module_nocontext Perl_load_module_nocontext
#define mess_nocontext Perl_mess_nocontext
#define newSVpvf_nocontext Perl_newSVpvf_nocontext
#define printf_nocontext Perl_printf_nocontext
#define sv_catpvf_mg_nocontext Perl_sv_catpvf_mg_nocontext
#define sv_catpvf_nocontext Perl_sv_catpvf_nocontext
#define sv_setpvf_mg_nocontext Perl_sv_setpvf_mg_nocontext
#define sv_setpvf_nocontext Perl_sv_setpvf_nocontext
#define warn_nocontext Perl_warn_nocontext
#define warner_nocontext Perl_warner_nocontext
# 838 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/embed.h"
#define alloccopstash(a) Perl_alloccopstash(aTHX_ a)
#define any_dup(a,b) Perl_any_dup(aTHX_ a,b)
#define cx_dup(a,b,c,d) Perl_cx_dup(aTHX_ a,b,c,d)
#define dirp_dup(a,b) Perl_dirp_dup(aTHX_ a,b)
#define fp_dup(a,b,c) Perl_fp_dup(aTHX_ a,b,c)
#define gp_dup(a,b) Perl_gp_dup(aTHX_ a,b)
#define he_dup(a,b,c) Perl_he_dup(aTHX_ a,b,c)
#define hek_dup(a,b) Perl_hek_dup(aTHX_ a,b)
#define mg_dup(a,b) Perl_mg_dup(aTHX_ a,b)
#define newPADOP(a,b,c) Perl_newPADOP(aTHX_ a,b,c)
#define parser_dup(a,b) Perl_parser_dup(aTHX_ a,b)
#define re_dup_guts(a,b,c) Perl_re_dup_guts(aTHX_ a,b,c)
#define regdupe_internal(a,b) Perl_regdupe_internal(aTHX_ a,b)
#define rvpv_dup(a,b,c) Perl_rvpv_dup(aTHX_ a,b,c)
#define si_dup(a,b) Perl_si_dup(aTHX_ a,b)
#define ss_dup(a,b) Perl_ss_dup(aTHX_ a,b)
#define sv_dup(a,b) Perl_sv_dup(aTHX_ a,b)
#define sv_dup_inc(a,b) Perl_sv_dup_inc(aTHX_ a,b)





#define sv_collxfrm_flags(a,b,c) Perl_sv_collxfrm_flags(aTHX_ a,b,c)


#define PerlIO_clearerr(a) Perl_PerlIO_clearerr(aTHX_ a)
#define PerlIO_close(a) Perl_PerlIO_close(aTHX_ a)
#define PerlIO_eof(a) Perl_PerlIO_eof(aTHX_ a)
#define PerlIO_error(a) Perl_PerlIO_error(aTHX_ a)
#define PerlIO_fileno(a) Perl_PerlIO_fileno(aTHX_ a)
#define PerlIO_fill(a) Perl_PerlIO_fill(aTHX_ a)
#define PerlIO_flush(a) Perl_PerlIO_flush(aTHX_ a)
#define PerlIO_get_base(a) Perl_PerlIO_get_base(aTHX_ a)
#define PerlIO_get_bufsiz(a) Perl_PerlIO_get_bufsiz(aTHX_ a)
#define PerlIO_get_cnt(a) Perl_PerlIO_get_cnt(aTHX_ a)
#define PerlIO_get_ptr(a) Perl_PerlIO_get_ptr(aTHX_ a)
#define PerlIO_read(a,b,c) Perl_PerlIO_read(aTHX_ a,b,c)
#define PerlIO_seek(a,b,c) Perl_PerlIO_seek(aTHX_ a,b,c)
#define PerlIO_set_cnt(a,b) Perl_PerlIO_set_cnt(aTHX_ a,b)
#define PerlIO_set_ptrcnt(a,b,c) Perl_PerlIO_set_ptrcnt(aTHX_ a,b,c)
#define PerlIO_setlinebuf(a) Perl_PerlIO_setlinebuf(aTHX_ a)
#define PerlIO_stderr() Perl_PerlIO_stderr(aTHX)
#define PerlIO_stdin() Perl_PerlIO_stdin(aTHX)
#define PerlIO_stdout() Perl_PerlIO_stdout(aTHX)
#define PerlIO_tell(a) Perl_PerlIO_tell(aTHX_ a)
#define PerlIO_unread(a,b,c) Perl_PerlIO_unread(aTHX_ a,b,c)
#define PerlIO_write(a,b,c) Perl_PerlIO_write(aTHX_ a,b,c)
# 1811 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/embed.h"
#define sv_setptrobj(rv,ptr,name) sv_setref_iv(rv,name,PTR2IV(ptr))
#define sv_setptrref(rv,ptr) sv_setref_iv(rv,NULL,PTR2IV(ptr))
# 1823 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/embed.h"
#define perl_atexit(a,b) call_atexit(a,b)
#define perl_call_argv(a,b,c) call_argv(a,b,c)
#define perl_call_method(a,b) call_method(a,b)
#define perl_call_pv(a,b) call_pv(a,b)
#define perl_call_sv(a,b) call_sv(a,b)
#define perl_eval_pv(a,b) eval_pv(a,b)
#define perl_eval_sv(a,b) eval_sv(a,b)
#define perl_get_av(a,b) get_av(a,b)
#define perl_get_cv(a,b) get_cv(a,b)
#define perl_get_hv(a,b) get_hv(a,b)
#define perl_get_sv(a,b) get_sv(a,b)
#define perl_init_i18nl10n(a) init_i18nl10n(a)
#define perl_init_i18nl14n(a) init_i18nl14n(a)
#define perl_new_collate(a) new_collate(a)
#define perl_new_ctype(a) new_ctype(a)
#define perl_new_numeric(a) new_numeric(a)
#define perl_require_pv(a) require_pv(a)







#define croak Perl_croak_nocontext
#define deb Perl_deb_nocontext
#define die Perl_die_nocontext
#define form Perl_form_nocontext
#define load_module Perl_load_module_nocontext
#define mess Perl_mess_nocontext
#define newSVpvf Perl_newSVpvf_nocontext
#define sv_catpvf Perl_sv_catpvf_nocontext
#define sv_catpvf_mg Perl_sv_catpvf_mg_nocontext
#define sv_setpvf Perl_sv_setpvf_nocontext
#define sv_setpvf_mg Perl_sv_setpvf_mg_nocontext
#define warn Perl_warn_nocontext
#define warner Perl_warner_nocontext
# 5545 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2




# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlvars.h" 1
# 33 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlvars.h"
extern perl_mutex PL_op_mutex;

extern PerlInterpreter * PL_curinterp ;




extern perl_key PL_thr_key;



extern _Bool PL_do_undump ;


extern _Bool PL_use_safe_putenv ;
# 70 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlvars.h"
extern Sighandler_t PL_sigfpe_saved;
extern Sighandler_t PL_csighandlerp ;
# 83 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlvars.h"
extern perl_mutex PL_perlio_mutex;


extern int * PL_perlio_fd_refcnt ;
extern int PL_perlio_fd_refcnt_size ;
extern int PL_perlio_debug_fd ;



extern IV PL_mmap_page_size ;



extern perl_mutex PL_hints_mutex;
# 136 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlvars.h"
extern perl_mutex PL_check_mutex;
# 156 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlvars.h"
extern perl_mutex PL_my_ctx_mutex;

extern int PL_my_cxt_index ;




extern int PL_veto_cleanup ;
# 218 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlvars.h"
extern Perl_keyword_plugin_t PL_keyword_plugin ;

extern HV * PL_op_sequence ;
extern UV PL_op_seq ;


extern perl_mutex PL_dollarzero_mutex;







extern SV PL_sv_placeholder;





extern _Bool PL_hash_seed_set ;
extern unsigned char PL_hash_seed[8];
# 5550 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2




#undef PERLVAR
#undef PERLVARA
#undef PERLVARI
#undef PERLVARIC
# 5579 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"





extern const runops_proc_t PL_runops_std
  ;
extern const runops_proc_t PL_runops_dbg
  ;

#define EXT_MGVTBL EXTCONST MGVTBL

#define PERL_MAGIC_READONLY_ACCEPTABLE 0x40
#define PERL_MAGIC_VALUE_MAGIC 0x80
#define PERL_MAGIC_VTABLE_MASK 0x3F
#define PERL_MAGIC_TYPE_READONLY_ACCEPTABLE(t) (PL_magic_data[(U8)(t)] & PERL_MAGIC_READONLY_ACCEPTABLE)

#define PERL_MAGIC_TYPE_IS_VALUE_MAGIC(t) (PL_magic_data[(U8)(t)] & PERL_MAGIC_VALUE_MAGIC)


# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/mg_vtable.h" 1
# 15 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/mg_vtable.h"
#define PERL_MAGIC_sv '\0'
#define PERL_MAGIC_arylen '#'
#define PERL_MAGIC_rhash '%'
#define PERL_MAGIC_debugvar '*'
#define PERL_MAGIC_pos '.'
#define PERL_MAGIC_symtab ':'
#define PERL_MAGIC_backref '<'
#define PERL_MAGIC_arylen_p '@'
#define PERL_MAGIC_bm 'B'
#define PERL_MAGIC_overload_table 'c'
#define PERL_MAGIC_regdata 'D'

#define PERL_MAGIC_regdatum 'd'
#define PERL_MAGIC_env 'E'
#define PERL_MAGIC_envelem 'e'
#define PERL_MAGIC_fm 'f'
#define PERL_MAGIC_regex_global 'g'
#define PERL_MAGIC_hints 'H'
#define PERL_MAGIC_hintselem 'h'
#define PERL_MAGIC_isa 'I'
#define PERL_MAGIC_isaelem 'i'
#define PERL_MAGIC_nkeys 'k'
#define PERL_MAGIC_dbfile 'L'
#define PERL_MAGIC_dbline 'l'
#define PERL_MAGIC_shared 'N'
#define PERL_MAGIC_shared_scalar 'n'
#define PERL_MAGIC_collxfrm 'o'
#define PERL_MAGIC_tied 'P'
#define PERL_MAGIC_tiedelem 'p'
#define PERL_MAGIC_tiedscalar 'q'
#define PERL_MAGIC_qr 'r'
#define PERL_MAGIC_sig 'S'
#define PERL_MAGIC_sigelem 's'
#define PERL_MAGIC_taint 't'
#define PERL_MAGIC_uvar 'U'
#define PERL_MAGIC_uvar_elem 'u'
#define PERL_MAGIC_vstring 'V'
#define PERL_MAGIC_vec 'v'
#define PERL_MAGIC_utf8 'w'
#define PERL_MAGIC_substr 'x'
#define PERL_MAGIC_defelem 'y'

#define PERL_MAGIC_lvref '\\'
#define PERL_MAGIC_checkcall ']'
#define PERL_MAGIC_ext '~'

enum {
    want_vtbl_arylen,
    want_vtbl_arylen_p,
    want_vtbl_backref,
    want_vtbl_checkcall,
    want_vtbl_collxfrm,
    want_vtbl_dbline,
    want_vtbl_debugvar,
    want_vtbl_defelem,
    want_vtbl_env,
    want_vtbl_envelem,
    want_vtbl_hints,
    want_vtbl_hintselem,
    want_vtbl_isa,
    want_vtbl_isaelem,
    want_vtbl_lvref,
    want_vtbl_mglob,
    want_vtbl_nkeys,
    want_vtbl_ovrld,
    want_vtbl_pack,
    want_vtbl_packelem,
    want_vtbl_pos,
    want_vtbl_regdata,
    want_vtbl_regdatum,
    want_vtbl_regexp,
    want_vtbl_sigelem,
    want_vtbl_substr,
    want_vtbl_sv,
    want_vtbl_taint,
    want_vtbl_utf8,
    want_vtbl_uvar,
    want_vtbl_vec,
    magic_vtable_max
};
# 131 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/mg_vtable.h"
extern const char * const PL_magic_vtable_names[magic_vtable_max];
# 194 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/mg_vtable.h"
extern const MGVTBL PL_magic_vtables[magic_vtable_max];


#define want_vtbl_bm want_vtbl_regexp
#define want_vtbl_fm want_vtbl_regexp

#define PL_vtbl_arylen PL_magic_vtables[want_vtbl_arylen]
#define PL_vtbl_arylen_p PL_magic_vtables[want_vtbl_arylen_p]
#define PL_vtbl_backref PL_magic_vtables[want_vtbl_backref]
#define PL_vtbl_bm PL_magic_vtables[want_vtbl_bm]
#define PL_vtbl_checkcall PL_magic_vtables[want_vtbl_checkcall]
#define PL_vtbl_collxfrm PL_magic_vtables[want_vtbl_collxfrm]
#define PL_vtbl_dbline PL_magic_vtables[want_vtbl_dbline]
#define PL_vtbl_debugvar PL_magic_vtables[want_vtbl_debugvar]
#define PL_vtbl_defelem PL_magic_vtables[want_vtbl_defelem]
#define PL_vtbl_env PL_magic_vtables[want_vtbl_env]
#define PL_vtbl_envelem PL_magic_vtables[want_vtbl_envelem]
#define PL_vtbl_fm PL_magic_vtables[want_vtbl_fm]
#define PL_vtbl_hints PL_magic_vtables[want_vtbl_hints]
#define PL_vtbl_hintselem PL_magic_vtables[want_vtbl_hintselem]
#define PL_vtbl_isa PL_magic_vtables[want_vtbl_isa]
#define PL_vtbl_isaelem PL_magic_vtables[want_vtbl_isaelem]
#define PL_vtbl_lvref PL_magic_vtables[want_vtbl_lvref]
#define PL_vtbl_mglob PL_magic_vtables[want_vtbl_mglob]
#define PL_vtbl_nkeys PL_magic_vtables[want_vtbl_nkeys]
#define PL_vtbl_ovrld PL_magic_vtables[want_vtbl_ovrld]
#define PL_vtbl_pack PL_magic_vtables[want_vtbl_pack]
#define PL_vtbl_packelem PL_magic_vtables[want_vtbl_packelem]
#define PL_vtbl_pos PL_magic_vtables[want_vtbl_pos]
#define PL_vtbl_regdata PL_magic_vtables[want_vtbl_regdata]
#define PL_vtbl_regdatum PL_magic_vtables[want_vtbl_regdatum]
#define PL_vtbl_regexp PL_magic_vtables[want_vtbl_regexp]
#define PL_vtbl_sigelem PL_magic_vtables[want_vtbl_sigelem]
#define PL_vtbl_substr PL_magic_vtables[want_vtbl_substr]
#define PL_vtbl_sv PL_magic_vtables[want_vtbl_sv]
#define PL_vtbl_taint PL_magic_vtables[want_vtbl_taint]
#define PL_vtbl_utf8 PL_magic_vtables[want_vtbl_utf8]
#define PL_vtbl_uvar PL_magic_vtables[want_vtbl_uvar]
#define PL_vtbl_vec PL_magic_vtables[want_vtbl_vec]
# 5600 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 5610 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
extern const U8 PL_magic_data[256];
# 5630 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
extern const _Bool PL_valid_types_IVX[];
extern const _Bool PL_valid_types_NVX[];
extern const _Bool PL_valid_types_PVX[];
extern const _Bool PL_valid_types_RV[];
extern const _Bool PL_valid_types_IV_set[];
extern const _Bool PL_valid_types_NV_set[];
# 5671 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/inline.h" 1
# 17 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/inline.h"
static __inline__ ssize_t
S_av_top_index(PerlInterpreter* my_perl __attribute__((unused)), AV *av)
{
    ((void)0);
    ((void)0);

    return (((((const SV *) (av))->sv_flags & 0x00800000)) ? Perl_mg_size(my_perl, ((SV *)({ void *_p = (av); _p; }))) : ((XPVAV*) (av)->sv_any)->xav_fill);
}



static __inline__ GV *
S_CvGV(PerlInterpreter* my_perl __attribute__((unused)), CV *sv)
{
    return (((XPVCV*)({ void *_p = ((sv)->sv_any); _p; }))->xcv_flags & 0x8000)
 ? Perl_cvgv_from_hek(my_perl, sv)
 : ((XPVCV*)({ void *_p = ((sv)->sv_any); _p; }))->xcv_gv_u.xcv_gv;
}

static __inline__ I32 *
S_CvDEPTHp(const CV * const sv)
{
    ((void)0);
    return &((XPVCV*)(sv)->sv_any)->xcv_depth;
}
# 130 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/inline.h"
static __inline__ struct regexp *
S_ReANY(const REGEXP * const re)
{
    ((void)0);
    return re->sv_u.svu_rx;
}



static __inline__ SV *
S_SvREFCNT_inc(SV *sv)
{
    if (__builtin_expect(((sv != ((void *)0)) ? (_Bool)1 : (_Bool)0),(1)))
 (sv)->sv_refcnt++;
    return sv;
}
static __inline__ SV *
S_SvREFCNT_inc_NN(SV *sv)
{
    (sv)->sv_refcnt++;
    return sv;
}
static __inline__ void
S_SvREFCNT_inc_void(SV *sv)
{
    if (__builtin_expect(((sv != ((void *)0)) ? (_Bool)1 : (_Bool)0),(1)))
 (sv)->sv_refcnt++;
}
static __inline__ void
S_SvREFCNT_dec(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
{
    if (__builtin_expect(((sv != ((void *)0)) ? (_Bool)1 : (_Bool)0),(1))) {
 U32 rc = (sv)->sv_refcnt;
 if (__builtin_expect(((rc > 1) ? (_Bool)1 : (_Bool)0),(1)))
     (sv)->sv_refcnt = rc - 1;
 else
     Perl_sv_free2(my_perl, sv, rc);
    }
}

static __inline__ void
S_SvREFCNT_dec_NN(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
{
    U32 rc = (sv)->sv_refcnt;
    if (__builtin_expect(((rc > 1) ? (_Bool)1 : (_Bool)0),(1)))
 (sv)->sv_refcnt = rc - 1;
    else
 Perl_sv_free2(my_perl, sv, rc);
}

static __inline__ void
SvAMAGIC_on(SV *sv)
{
    ((void)0);
    if (((((sv)->sv_u.svu_rv))->sv_flags & 0x00100000)) ((((XPVMG*) (((sv)->sv_u.svu_rv))->sv_any)->xmg_stash)->sv_flags |= 0x10000000);
}
static __inline__ void
SvAMAGIC_off(SV *sv)
{
    if (((sv)->sv_flags & 0x00000800) && ((((sv)->sv_u.svu_rv))->sv_flags & 0x00100000))
 ((((XPVMG*) (((sv)->sv_u.svu_rv))->sv_any)->xmg_stash)->sv_flags &=~ 0x10000000);
}

static __inline__ U32
S_SvPADSTALE_on(SV *sv)
{
    ((void)0);
    return (sv)->sv_flags |= 0x00040000;
}
static __inline__ U32
S_SvPADSTALE_off(SV *sv)
{
    ((void)0);
    return (sv)->sv_flags &= ~0x00040000;
}
# 225 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/inline.h"
static void
S_croak_memory_wrap(void)
{
    Perl_croak_nocontext("%s",PL_memory_wrap);
}






static __inline__ void
S_append_utf8_from_native_byte(const U8 byte, U8** dest)
{



    ((void)0);

    if ((((UV)(byte)) < 0x80))
        *(*dest)++ = byte;
    else {
        *(*dest)++ = ( ((U8) (((byte) >> 6) | (((2) > 7) ? 0xFF : (0xFF & (0xFE << (7-(2))))))));
        *(*dest)++ = ( ((U8) (((byte) & ((U8)0x3f)) | 0x80)));
    }
}
# 267 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/inline.h"
static __inline__ STRLEN
S__is_utf8_char_slow(const U8 *s, const U8 *e)
{
    PerlInterpreter* my_perl __attribute__((unused)) = ((PerlInterpreter *)pthread_getspecific(PL_thr_key));

    STRLEN actual_len;

    ((void)0); ((void)0);

    ((void)0);
    Perl_utf8n_to_uvchr(my_perl, s,e - s,&actual_len,0x2000);

    return (actual_len == (STRLEN) -1) ? 0 : actual_len;
}
# 299 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/inline.h"
static __inline__ _Bool
S_is_safe_syscall(PerlInterpreter* my_perl __attribute__((unused)), const char *pv, STRLEN len, const char *what, const char *op_name) {




    ((void)0); ((void)0); ((void)0);

    if (len > 1) {
        char *null_at;
        if (__builtin_expect((((null_at = (char *)memchr(pv, 0, len-1)) != ((void *)0)) ? (_Bool)1 : (_Bool)0),(0))) {
                ((*__error()) = (2));
                Perl_ck_warner(my_perl, (59 ),
                                   "Invalid \\0 character in %s for %s: %s\\0%s",
                                   what, op_name, pv, null_at+1);
                return (0);
        }
    }

    return (1);
}
# 355 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/inline.h"
#define MAX_CHARSET_NAME_LENGTH 2

static __inline__ const char *
get_regex_charset_name(const U32 flags, STRLEN* const lenp)
{




    *lenp = 1;
    switch (get_regex_charset(flags)) {
        case REGEX_DEPENDS_CHARSET: return "d";
        case REGEX_LOCALE_CHARSET: return "l";
        case REGEX_UNICODE_CHARSET: return "u";
 case REGEX_ASCII_RESTRICTED_CHARSET: return "a";
 case REGEX_ASCII_MORE_RESTRICTED_CHARSET:
     *lenp = 2;
     return "aa";
    }


    ((void)0);
    return "?";
}







static __inline__ _Bool
S_sv_only_taint_gmagic(SV *sv) {
    MAGIC *mg = ((XPVMG*) (sv)->sv_any)->xmg_u.xmg_magic;

    ((void)0);

    while (mg) {
        if (mg->mg_type != 't'
            && !(mg->mg_flags & 4)
            && mg->mg_virtual->svt_get) {
            return (0);
        }
        mg = mg->mg_moremagic;
    }

    return (1);
}
# 5672 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2


# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/overload.h" 1
# 16 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/overload.h"
enum {
    fallback_amg,
    to_sv_amg,
    to_av_amg,
    to_hv_amg,
    to_gv_amg,
    to_cv_amg,
    inc_amg,
    dec_amg,
    bool__amg,
    numer_amg,
    string_amg,
    not_amg,
    copy_amg,
    abs_amg,
    neg_amg,
    iter_amg,
    int_amg,
    lt_amg,
    le_amg,
    gt_amg,
    ge_amg,
    eq_amg,
    ne_amg,
    slt_amg,
    sle_amg,
    sgt_amg,
    sge_amg,
    seq_amg,
    sne_amg,
    nomethod_amg,
    add_amg,
    add_ass_amg,
    subtr_amg,
    subtr_ass_amg,
    mult_amg,
    mult_ass_amg,
    div_amg,
    div_ass_amg,
    modulo_amg,
    modulo_ass_amg,
    pow_amg,
    pow_ass_amg,
    lshift_amg,
    lshift_ass_amg,
    rshift_amg,
    rshift_ass_amg,
    band_amg,
    band_ass_amg,
    sband_amg,
    sband_ass_amg,
    bor_amg,
    bor_ass_amg,
    sbor_amg,
    sbor_ass_amg,
    bxor_amg,
    bxor_ass_amg,
    sbxor_amg,
    sbxor_ass_amg,
    ncmp_amg,
    scmp_amg,
    compl_amg,
    scompl_amg,
    atan2_amg,
    cos_amg,
    sin_amg,
    exp_amg,
    log_amg,
    sqrt_amg,
    repeat_amg,
    repeat_ass_amg,
    concat_amg,
    concat_ass_amg,
    smart_amg,
    ftest_amg,
    regexp_amg,
    max_amg_code

};

#define NofAMmeth max_amg_code
# 5675 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2



struct am_table {
  U8 flags;
  U8 fallback;
  U16 spare;
  U32 was_ok_sub;
  CV* table[max_amg_code];
};
struct am_table_short {
  U8 flags;
  U8 fallback;
  U16 spare;
  U32 was_ok_sub;
};
typedef struct am_table AMT;
typedef struct am_table_short AMTS;

#define AMGfallNEVER 1
#define AMGfallNO 2
#define AMGfallYES 3

#define AMTf_AMAGIC 1
#define AMT_AMAGIC(amt) ((amt)->flags & AMTf_AMAGIC)
#define AMT_AMAGIC_on(amt) ((amt)->flags |= AMTf_AMAGIC)
#define AMT_AMAGIC_off(amt) ((amt)->flags &= ~AMTf_AMAGIC)

#define StashHANDLER(stash,meth) gv_handler((stash),CAT2(meth,_amg))
# 5736 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERLDB_ALL (PERLDBf_SUB | PERLDBf_LINE | PERLDBf_NOOPT | PERLDBf_INTER | PERLDBf_SUBLINE| PERLDBf_SINGLE| PERLDBf_NAMEEVAL| PERLDBf_NAMEANON | PERLDBf_SAVESRC)





#define PERLDBf_SUB 0x01
#define PERLDBf_LINE 0x02
#define PERLDBf_NOOPT 0x04
#define PERLDBf_INTER 0x08

#define PERLDBf_SUBLINE 0x10
#define PERLDBf_SINGLE 0x20
#define PERLDBf_NONAME 0x40
#define PERLDBf_GOTO 0x80
#define PERLDBf_NAMEEVAL 0x100
#define PERLDBf_NAMEANON 0x200
#define PERLDBf_SAVESRC 0x400
#define PERLDBf_SAVESRC_NOSUBS 0x800
#define PERLDBf_SAVESRC_INVALID 0x1000

#define PERLDB_SUB (PL_perldb & PERLDBf_SUB)
#define PERLDB_LINE (PL_perldb & PERLDBf_LINE)
#define PERLDB_NOOPT (PL_perldb & PERLDBf_NOOPT)
#define PERLDB_INTER (PL_perldb & PERLDBf_INTER)
#define PERLDB_SUBLINE (PL_perldb & PERLDBf_SUBLINE)
#define PERLDB_SINGLE (PL_perldb & PERLDBf_SINGLE)
#define PERLDB_SUB_NN (PL_perldb & PERLDBf_NONAME)
#define PERLDB_GOTO (PL_perldb & PERLDBf_GOTO)
#define PERLDB_NAMEEVAL (PL_perldb & PERLDBf_NAMEEVAL)
#define PERLDB_NAMEANON (PL_perldb & PERLDBf_NAMEANON)
#define PERLDB_SAVESRC (PL_perldb & PERLDBf_SAVESRC)
#define PERLDB_SAVESRC_NOSUBS (PL_perldb & PERLDBf_SAVESRC_NOSUBS)
#define PERLDB_SAVESRC_INVALID (PL_perldb & PERLDBf_SAVESRC_INVALID)





#define IN_LOCALE_RUNTIME cBOOL(CopHINTS_get(PL_curcop) & HINT_LOCALE)


#define IN_SOME_LOCALE_FORM_RUNTIME cBOOL(CopHINTS_get(PL_curcop) & (HINT_LOCALE|HINT_LOCALE_PARTIAL))


#define IN_LOCALE_COMPILETIME cBOOL(PL_hints & HINT_LOCALE)
#define IN_SOME_LOCALE_FORM_COMPILETIME cBOOL(PL_hints & (HINT_LOCALE|HINT_LOCALE_PARTIAL))


#define IN_LOCALE (IN_PERL_COMPILETIME ? IN_LOCALE_COMPILETIME : IN_LOCALE_RUNTIME)

#define IN_SOME_LOCALE_FORM (IN_PERL_COMPILETIME ? IN_SOME_LOCALE_FORM_COMPILETIME : IN_SOME_LOCALE_FORM_RUNTIME)



#define IN_LC_ALL_COMPILETIME IN_LOCALE_COMPILETIME
#define IN_LC_ALL_RUNTIME IN_LOCALE_RUNTIME

#define IN_LC_PARTIAL_COMPILETIME cBOOL(PL_hints & HINT_LOCALE_PARTIAL)
#define IN_LC_PARTIAL_RUNTIME cBOOL(CopHINTS_get(PL_curcop) & HINT_LOCALE_PARTIAL)


#define IN_LC_COMPILETIME(category) (IN_LC_ALL_COMPILETIME || (IN_LC_PARTIAL_COMPILETIME && _is_in_locale_category(TRUE, (category))))


#define IN_LC_RUNTIME(category) (IN_LC_ALL_RUNTIME || (IN_LC_PARTIAL_RUNTIME && _is_in_locale_category(FALSE, (category))))


#define IN_LC(category) (IN_LC_COMPILETIME(category) || IN_LC_RUNTIME(category))
# 5971 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define _NOT_IN_NUMERIC_STANDARD (! PL_numeric_standard)




#define _NOT_IN_NUMERIC_UNDERLYING (! PL_numeric_local && PL_numeric_standard < 2)


#define DECLARATION_FOR_LC_NUMERIC_MANIPULATION void (*_restore_LC_NUMERIC_function)(pTHX) = NULL


#define STORE_LC_NUMERIC_SET_TO_NEEDED() if (IN_LC(LC_NUMERIC)) { if (_NOT_IN_NUMERIC_UNDERLYING) { set_numeric_local(); _restore_LC_NUMERIC_function = &Perl_set_numeric_standard; } } else { if (_NOT_IN_NUMERIC_STANDARD) { SET_NUMERIC_STANDARD(); _restore_LC_NUMERIC_function = &Perl_set_numeric_local; } }
# 5996 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define RESTORE_LC_NUMERIC() if (_restore_LC_NUMERIC_function) { _restore_LC_NUMERIC_function(aTHX); }






#define SET_NUMERIC_STANDARD() STMT_START { if (_NOT_IN_NUMERIC_STANDARD) set_numeric_standard(); } STMT_END



#define SET_NUMERIC_UNDERLYING() STMT_START { if (_NOT_IN_NUMERIC_UNDERLYING) set_numeric_local(); } STMT_END





#define STORE_LC_NUMERIC_UNDERLYING_SET_STANDARD() bool _was_local = _NOT_IN_NUMERIC_STANDARD; if (_was_local) set_numeric_standard();





#define STORE_LC_NUMERIC_STANDARD_SET_UNDERLYING() bool _was_standard = _NOT_IN_NUMERIC_UNDERLYING && IN_LC(LC_NUMERIC); if (_was_standard) set_numeric_local();






#define STORE_LC_NUMERIC_FORCE_TO_UNDERLYING() if (_NOT_IN_NUMERIC_UNDERLYING) { set_numeric_local(); _restore_LC_NUMERIC_function = &Perl_set_numeric_standard; }






#define LOCK_LC_NUMERIC_STANDARD() (__ASSERT_(PL_numeric_standard) PL_numeric_standard = 2)



#define UNLOCK_LC_NUMERIC_STANDARD() (__ASSERT_(PL_numeric_standard == 2) PL_numeric_standard = 1)



#define RESTORE_LC_NUMERIC_UNDERLYING() if (_was_local) set_numeric_local();


#define RESTORE_LC_NUMERIC_STANDARD() if (_restore_LC_NUMERIC_function) { _restore_LC_NUMERIC_function(aTHX); }
# 6067 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define Atof my_atof


#define DECLARATION_FOR_STORE_LC_NUMERIC_SET_TO_NEEDED DECLARATION_FOR_LC_NUMERIC_MANIPULATION

#define DECLARE_STORE_LC_NUMERIC_SET_TO_NEEDED() DECLARATION_FOR_STORE_LC_NUMERIC_SET_TO_NEEDED; STORE_LC_NUMERIC_SET_TO_NEEDED();


#define LOCK_NUMERIC_STANDARD() LOCK_LC_NUMERIC_STANDARD()
#define RESTORE_NUMERIC_LOCAL() RESTORE_LC_NUMERIC_UNDERLYING()
#define RESTORE_NUMERIC_STANDARD() RESTORE_LC_NUMERIC_STANDARD()
#define SET_NUMERIC_LOCAL() SET_NUMERIC_UNDERLYING()
#define STORE_NUMERIC_LOCAL_SET_STANDARD() STORE_LC_NUMERIC_UNDERLYING_SET_STANDARD()

#define STORE_NUMERIC_STANDARD_SET_LOCAL() STORE_LC_NUMERIC_STANDARD_SET_UNDERLYING()

#define STORE_NUMERIC_STANDARD_FORCE_LOCAL() STORE_LC_NUMERIC_FORCE_TO_UNDERLYING()

#define UNLOCK_NUMERIC_STANDARD() UNLOCK_LC_NUMERIC_STANDARD()
# 6098 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define Perl_strtod(s,e) strtod(s, e)
# 6118 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define Strtol strtol
# 6131 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define Atol atol
# 6152 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define Strtoul strtoul





#define Atoul(s) Strtoul(s, NULL, 10)



#define PERL_SCRIPT_MODE "r"







#define PERL_STACK_OVERFLOW_CHECK() NOOP
# 6182 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_ASYNC_CHECK() if (UNLIKELY(PL_sig_pending)) PL_signalhook(aTHX)
# 6197 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_ALLOC_CHECK(p) NOOP



# 1 "/usr/include/sys/ipc.h" 1 3 4
# 71 "/usr/include/sys/ipc.h" 3 4
#define _SYS_IPC_H_ 
# 124 "/usr/include/sys/ipc.h" 3 4
#define ipc_perm __ipc_perm_old
# 133 "/usr/include/sys/ipc.h" 3 4
struct __ipc_perm_old {
 __uint16_t cuid;
 __uint16_t cgid;
 __uint16_t uid;
 __uint16_t gid;
 mode_t mode;
 __uint16_t seq;
 key_t key;
};







#define IPC_CREAT 001000
#define IPC_EXCL 002000
#define IPC_NOWAIT 004000


#define IPC_PRIVATE ((key_t)0)


#define IPC_RMID 0
#define IPC_SET 1
#define IPC_STAT 2





#define IPC_R 000400
#define IPC_W 000200
#define IPC_M 010000








key_t ftok(const char *, int);

# 6202 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 1 "/usr/include/sys/sem.h" 1 3 4
# 32 "/usr/include/sys/sem.h" 3 4
#define _SYS_SEM_H_ 
# 98 "/usr/include/sys/sem.h" 3 4
#define semid_ds __semid_ds_old



struct __semid_ds_old {
 struct __ipc_perm_old sem_perm;
 __int32_t sem_base;
 unsigned short sem_nsems;
 time_t sem_otime;
 __int32_t sem_pad1;
 time_t sem_ctime;


 __int32_t sem_pad2;
 __int32_t sem_pad3[4];
};





#define GETNCNT 3
#define GETPID 4
#define GETVAL 5
#define GETALL 6
#define GETZCNT 7
#define SETVAL 8
#define SETALL 9



struct sem {
 unsigned short semval;
 pid_t sempid;
 unsigned short semncnt;
 unsigned short semzcnt;
};





struct sembuf {
 unsigned short sem_num;
 short sem_op;
 short sem_flg;
};




#define SEM_UNDO 010000
# 161 "/usr/include/sys/sem.h" 3 4
#define MAX_SOPS 5
# 184 "/usr/include/sys/sem.h" 3 4
union semun {
 int val;
 struct __semid_ds_old *buf;
 unsigned short *array;
};
typedef union semun semun_t;





#define SEM_A 0200
#define SEM_R 0400








int semsys(int, ...);

int semctl(int, int, int, ...) ;
int semget(key_t, int, int);
int semop(int, struct sembuf *, size_t);

# 6203 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 6220 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define Semctl(id,num,cmd,semun) semctl(id, num, cmd, semun)
# 6264 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define START_MY_CXT static int my_cxt_index = -1;
#define MY_CXT_INDEX my_cxt_index
#define MY_CXT_INIT_ARG &my_cxt_index





#define MY_CXT_INIT my_cxt_t *my_cxtp = (my_cxt_t*)Perl_my_cxt_init(aTHX_ MY_CXT_INIT_ARG, sizeof(my_cxt_t)); PERL_UNUSED_VAR(my_cxtp)



#define MY_CXT_INIT_INTERP(my_perl) my_cxt_t *my_cxtp = (my_cxt_t*)Perl_my_cxt_init(my_perl, MY_CXT_INIT_ARG, sizeof(my_cxt_t)); PERL_UNUSED_VAR(my_cxtp)






#define dMY_CXT my_cxt_t *my_cxtp = (my_cxt_t *)PL_my_cxt_list[MY_CXT_INDEX]

#define dMY_CXT_INTERP(my_perl) my_cxt_t *my_cxtp = (my_cxt_t *)(my_perl)->Imy_cxt_list[MY_CXT_INDEX]



#define MY_CXT_CLONE my_cxt_t *my_cxtp = (my_cxt_t*)SvPVX(newSV(sizeof(my_cxt_t)-1)); void * old_my_cxtp = PL_my_cxt_list[MY_CXT_INDEX]; PL_my_cxt_list[MY_CXT_INDEX] = my_cxtp; Copy(old_my_cxtp, my_cxtp, 1, my_cxt_t);
# 6299 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define MY_CXT (*my_cxtp)



#define pMY_CXT my_cxt_t *my_cxtp
#define pMY_CXT_ pMY_CXT,
#define _pMY_CXT ,pMY_CXT
#define aMY_CXT my_cxtp
#define aMY_CXT_ aMY_CXT,
#define _aMY_CXT ,aMY_CXT
# 6338 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
# 1 "/usr/include/sys/file.h" 1 3 4
# 59 "/usr/include/sys/file.h" 3 4
#define _SYS_FILE_H_ 



# 1 "/usr/include/sys/fcntl.h" 1 3 4
# 65 "/usr/include/sys/fcntl.h" 3 4
#define _SYS_FCNTL_H_ 
# 104 "/usr/include/sys/fcntl.h" 3 4
#define O_RDONLY 0x0000
#define O_WRONLY 0x0001
#define O_RDWR 0x0002
#define O_ACCMODE 0x0003
# 118 "/usr/include/sys/fcntl.h" 3 4
#define FREAD 0x0001
#define FWRITE 0x0002

#define O_NONBLOCK 0x0004
#define O_APPEND 0x0008
#define O_SYNC 0x0080

#define O_SHLOCK 0x0010
#define O_EXLOCK 0x0020
#define O_ASYNC 0x0040
#define O_FSYNC O_SYNC
#define O_NOFOLLOW 0x0100

#define O_CREAT 0x0200
#define O_TRUNC 0x0400
#define O_EXCL 0x0800

#define O_EVTONLY 0x8000




#define O_DIRECTORY 0x100000



#define O_NOCTTY 0
# 154 "/usr/include/sys/fcntl.h" 3 4
#define FAPPEND O_APPEND
#define FASYNC O_ASYNC
#define FFSYNC O_FSYNC
#define FNONBLOCK O_NONBLOCK
#define FNDELAY O_NONBLOCK
#define O_NDELAY O_NONBLOCK







#define CPF_OVERWRITE 1
#define CPF_IGNORE_MODE 2
#define CPF_MASK (CPF_OVERWRITE|CPF_IGNORE_MODE)







#define F_DUPFD 0
#define F_GETFD 1
#define F_SETFD 2
#define F_GETFL 3
#define F_SETFL 4
#define F_GETOWN 5
#define F_SETOWN 6
#define F_GETLK 7
#define F_SETLK 8
#define F_SETLKW 9

#define F_CHKCLEAN 41
#define F_PREALLOCATE 42
#define F_SETSIZE 43
#define F_RDADVISE 44
#define F_RDAHEAD 45
#define F_READBOOTSTRAP 46
#define F_WRITEBOOTSTRAP 47
#define F_NOCACHE 48
#define F_LOG2PHYS 49
#define F_GETPATH 50
#define F_FULLFSYNC 51
#define F_PATHPKG_CHECK 52
#define F_FREEZE_FS 53
#define F_THAW_FS 54
#define F_GLOBAL_NOCACHE 55


#define FCNTL_FS_SPECIFIC_BASE 0x00010000



#define FD_CLOEXEC 1


#define F_RDLCK 1
#define F_UNLCK 2
#define F_WRLCK 3
# 277 "/usr/include/sys/fcntl.h" 3 4
#define F_ALLOCATECONTIG 0x00000002
#define F_ALLOCATEALL 0x00000004



#define F_PEOFPOSMODE 3

#define F_VOLPOSMODE 4






struct flock {
 off_t l_start;
 off_t l_len;
 pid_t l_pid;
 short l_type;
 short l_whence;
};







struct radvisory {
       off_t ra_offset;
       int ra_count;
};



#define LOCK_SH 0x01
#define LOCK_EX 0x02
#define LOCK_NB 0x04
#define LOCK_UN 0x08



typedef struct fstore {
 unsigned int fst_flags;
 int fst_posmode;
 off_t fst_offset;
 off_t fst_length;
 off_t fst_bytesalloc;
} fstore_t;



typedef struct fbootstraptransfer {
  off_t fbt_offset;
  size_t fbt_length;
  void *fbt_buffer;
} fbootstraptransfer_t;
# 354 "/usr/include/sys/fcntl.h" 3 4
#pragma pack(4)

struct log2phys {
 unsigned int l2p_flags;
 off_t l2p_contigbytes;
 off_t l2p_devoffset;
};

#pragma pack()

#define O_POPUP 0x80000000
#define O_ALERT 0x20000000
# 375 "/usr/include/sys/fcntl.h" 3 4
typedef enum {
 FILESEC_OWNER = 1,
 FILESEC_GROUP = 2,
 FILESEC_UUID = 3,
 FILESEC_MODE = 4,
 FILESEC_ACL = 5,
 FILESEC_GRPUUID = 6,


 FILESEC_ACL_RAW = 100,
 FILESEC_ACL_ALLOCSIZE = 101
} filesec_property_t;


#define FILESEC_GUID FILESEC_UUID



int open(const char *, int, ...);
int creat(const char *, mode_t);
int fcntl(int, int, ...);

int openx_np(const char *, int, filesec_t);
int flock(int, int);
filesec_t filesec_init(void);
filesec_t filesec_dup(filesec_t);
void filesec_free(filesec_t);
int filesec_get_property(filesec_t, filesec_property_t, void *);
int filesec_set_property(filesec_t, filesec_property_t, const void *);
int filesec_unset_property(filesec_t, filesec_property_t);
int filesec_query_property(filesec_t, filesec_property_t, int *);
#define _FILESEC_UNSET_PROPERTY ((void *)0)
#define _FILESEC_REMOVE_ACL ((void *)1)


# 64 "/usr/include/sys/file.h" 2 3 4

# 1 "/usr/include/sys/queue.h" 1 3 4
# 58 "/usr/include/sys/queue.h" 3 4
#define _SYS_QUEUE_H_ 
# 132 "/usr/include/sys/queue.h" 3 4
#define SLIST_HEAD(name,type) struct name { struct type *slh_first; }




#define SLIST_ENTRY(type) struct { struct type *sle_next; }







#define SLIST_EMPTY(head) ((head)->slh_first == NULL)

#define SLIST_FIRST(head) ((head)->slh_first)

#define SLIST_FOREACH(var,head,field) for((var) = (head)->slh_first; (var); (var) = (var)->field.sle_next)


#define SLIST_INIT(head) { (head)->slh_first = NULL; }



#define SLIST_INSERT_AFTER(slistelm,elm,field) do { (elm)->field.sle_next = (slistelm)->field.sle_next; (slistelm)->field.sle_next = (elm); } while (0)




#define SLIST_INSERT_HEAD(head,elm,field) do { (elm)->field.sle_next = (head)->slh_first; (head)->slh_first = (elm); } while (0)




#define SLIST_NEXT(elm,field) ((elm)->field.sle_next)

#define SLIST_REMOVE_HEAD(head,field) do { (head)->slh_first = (head)->slh_first->field.sle_next; } while (0)



#define SLIST_REMOVE(head,elm,type,field) do { if ((head)->slh_first == (elm)) { SLIST_REMOVE_HEAD((head), field); } else { struct type *curelm = (head)->slh_first; while( curelm->field.sle_next != (elm) ) curelm = curelm->field.sle_next; curelm->field.sle_next = curelm->field.sle_next->field.sle_next; } } while (0)
# 188 "/usr/include/sys/queue.h" 3 4
#define STAILQ_HEAD(name,type) struct name { struct type *stqh_first; struct type **stqh_last; }





#define STAILQ_HEAD_INITIALIZER(head) { NULL, &(head).stqh_first }


#define STAILQ_ENTRY(type) struct { struct type *stqe_next; }







#define STAILQ_EMPTY(head) ((head)->stqh_first == NULL)

#define STAILQ_INIT(head) do { (head)->stqh_first = NULL; (head)->stqh_last = &(head)->stqh_first; } while (0)




#define STAILQ_FIRST(head) ((head)->stqh_first)
#define STAILQ_LAST(head) (*(head)->stqh_last)

#define STAILQ_INSERT_HEAD(head,elm,field) do { if (((elm)->field.stqe_next = (head)->stqh_first) == NULL) (head)->stqh_last = &(elm)->field.stqe_next; (head)->stqh_first = (elm); } while (0)





#define STAILQ_INSERT_TAIL(head,elm,field) do { (elm)->field.stqe_next = NULL; *(head)->stqh_last = (elm); (head)->stqh_last = &(elm)->field.stqe_next; } while (0)





#define STAILQ_INSERT_AFTER(head,tqelm,elm,field) do { if (((elm)->field.stqe_next = (tqelm)->field.stqe_next) == NULL) (head)->stqh_last = &(elm)->field.stqe_next; (tqelm)->field.stqe_next = (elm); } while (0)





#define STAILQ_NEXT(elm,field) ((elm)->field.stqe_next)

#define STAILQ_REMOVE_HEAD(head,field) do { if (((head)->stqh_first = (head)->stqh_first->field.stqe_next) == NULL) (head)->stqh_last = &(head)->stqh_first; } while (0)





#define STAILQ_REMOVE_HEAD_UNTIL(head,elm,field) do { if (((head)->stqh_first = (elm)->field.stqe_next) == NULL) (head)->stqh_last = &(head)->stqh_first; } while (0)





#define STAILQ_REMOVE(head,elm,type,field) do { if ((head)->stqh_first == (elm)) { STAILQ_REMOVE_HEAD(head, field); } else { struct type *curelm = (head)->stqh_first; while( curelm->field.stqe_next != (elm) ) curelm = curelm->field.stqe_next; if((curelm->field.stqe_next = curelm->field.stqe_next->field.stqe_next) == NULL) (head)->stqh_last = &(curelm)->field.stqe_next; } } while (0)
# 264 "/usr/include/sys/queue.h" 3 4
#define LIST_HEAD(name,type) struct name { struct type *lh_first; }




#define LIST_HEAD_INITIALIZER(head) { NULL }


#define LIST_ENTRY(type) struct { struct type *le_next; struct type **le_prev; }
# 282 "/usr/include/sys/queue.h" 3 4
#define LIST_EMPTY(head) ((head)->lh_first == NULL)

#define LIST_FIRST(head) ((head)->lh_first)

#define LIST_FOREACH(var,head,field) for((var) = (head)->lh_first; (var); (var) = (var)->field.le_next)


#define LIST_INIT(head) do { (head)->lh_first = NULL; } while (0)



#define LIST_INSERT_AFTER(listelm,elm,field) do { if (((elm)->field.le_next = (listelm)->field.le_next) != NULL) (listelm)->field.le_next->field.le_prev = &(elm)->field.le_next; (listelm)->field.le_next = (elm); (elm)->field.le_prev = &(listelm)->field.le_next; } while (0)







#define LIST_INSERT_BEFORE(listelm,elm,field) do { (elm)->field.le_prev = (listelm)->field.le_prev; (elm)->field.le_next = (listelm); *(listelm)->field.le_prev = (elm); (listelm)->field.le_prev = &(elm)->field.le_next; } while (0)






#define LIST_INSERT_HEAD(head,elm,field) do { if (((elm)->field.le_next = (head)->lh_first) != NULL) (head)->lh_first->field.le_prev = &(elm)->field.le_next; (head)->lh_first = (elm); (elm)->field.le_prev = &(head)->lh_first; } while (0)






#define LIST_NEXT(elm,field) ((elm)->field.le_next)

#define LIST_REMOVE(elm,field) do { if ((elm)->field.le_next != NULL) (elm)->field.le_next->field.le_prev = (elm)->field.le_prev; *(elm)->field.le_prev = (elm)->field.le_next; } while (0)
# 327 "/usr/include/sys/queue.h" 3 4
#define TAILQ_HEAD(name,type) struct name { struct type *tqh_first; struct type **tqh_last; }





#define TAILQ_HEAD_INITIALIZER(head) { NULL, &(head).tqh_first }


#define TAILQ_ENTRY(type) struct { struct type *tqe_next; struct type **tqe_prev; }
# 345 "/usr/include/sys/queue.h" 3 4
#define TAILQ_EMPTY(head) ((head)->tqh_first == NULL)

#define TAILQ_FOREACH(var,head,field) for (var = TAILQ_FIRST(head); var; var = TAILQ_NEXT(var, field))


#define TAILQ_FOREACH_REVERSE(var,head,field,headname) for (var = TAILQ_LAST(head, headname); var; var = TAILQ_PREV(var, headname, field))



#define TAILQ_FIRST(head) ((head)->tqh_first)

#define TAILQ_LAST(head,headname) (*(((struct headname *)((head)->tqh_last))->tqh_last))


#define TAILQ_NEXT(elm,field) ((elm)->field.tqe_next)

#define TAILQ_PREV(elm,headname,field) (*(((struct headname *)((elm)->field.tqe_prev))->tqh_last))


#define TAILQ_INIT(head) do { (head)->tqh_first = NULL; (head)->tqh_last = &(head)->tqh_first; } while (0)




#define TAILQ_INSERT_HEAD(head,elm,field) do { if (((elm)->field.tqe_next = (head)->tqh_first) != NULL) (head)->tqh_first->field.tqe_prev = &(elm)->field.tqe_next; else (head)->tqh_last = &(elm)->field.tqe_next; (head)->tqh_first = (elm); (elm)->field.tqe_prev = &(head)->tqh_first; } while (0)
# 379 "/usr/include/sys/queue.h" 3 4
#define TAILQ_INSERT_TAIL(head,elm,field) do { (elm)->field.tqe_next = NULL; (elm)->field.tqe_prev = (head)->tqh_last; *(head)->tqh_last = (elm); (head)->tqh_last = &(elm)->field.tqe_next; } while (0)






#define TAILQ_INSERT_AFTER(head,listelm,elm,field) do { if (((elm)->field.tqe_next = (listelm)->field.tqe_next) != NULL) (elm)->field.tqe_next->field.tqe_prev = &(elm)->field.tqe_next; else (head)->tqh_last = &(elm)->field.tqe_next; (listelm)->field.tqe_next = (elm); (elm)->field.tqe_prev = &(listelm)->field.tqe_next; } while (0)
# 396 "/usr/include/sys/queue.h" 3 4
#define TAILQ_INSERT_BEFORE(listelm,elm,field) do { (elm)->field.tqe_prev = (listelm)->field.tqe_prev; (elm)->field.tqe_next = (listelm); *(listelm)->field.tqe_prev = (elm); (listelm)->field.tqe_prev = &(elm)->field.tqe_next; } while (0)






#define TAILQ_REMOVE(head,elm,field) do { if (((elm)->field.tqe_next) != NULL) (elm)->field.tqe_next->field.tqe_prev = (elm)->field.tqe_prev; else (head)->tqh_last = (elm)->field.tqe_prev; *(elm)->field.tqe_prev = (elm)->field.tqe_next; } while (0)
# 415 "/usr/include/sys/queue.h" 3 4
#define CIRCLEQ_HEAD(name,type) struct name { struct type *cqh_first; struct type *cqh_last; }





#define CIRCLEQ_ENTRY(type) struct { struct type *cqe_next; struct type *cqe_prev; }
# 430 "/usr/include/sys/queue.h" 3 4
#define CIRCLEQ_EMPTY(head) ((head)->cqh_first == (void *)(head))

#define CIRCLEQ_FIRST(head) ((head)->cqh_first)

#define CIRCLEQ_FOREACH(var,head,field) for((var) = (head)->cqh_first; (var) != (void *)(head); (var) = (var)->field.cqe_next)




#define CIRCLEQ_INIT(head) do { (head)->cqh_first = (void *)(head); (head)->cqh_last = (void *)(head); } while (0)




#define CIRCLEQ_INSERT_AFTER(head,listelm,elm,field) do { (elm)->field.cqe_next = (listelm)->field.cqe_next; (elm)->field.cqe_prev = (listelm); if ((listelm)->field.cqe_next == (void *)(head)) (head)->cqh_last = (elm); else (listelm)->field.cqe_next->field.cqe_prev = (elm); (listelm)->field.cqe_next = (elm); } while (0)
# 454 "/usr/include/sys/queue.h" 3 4
#define CIRCLEQ_INSERT_BEFORE(head,listelm,elm,field) do { (elm)->field.cqe_next = (listelm); (elm)->field.cqe_prev = (listelm)->field.cqe_prev; if ((listelm)->field.cqe_prev == (void *)(head)) (head)->cqh_first = (elm); else (listelm)->field.cqe_prev->field.cqe_next = (elm); (listelm)->field.cqe_prev = (elm); } while (0)
# 464 "/usr/include/sys/queue.h" 3 4
#define CIRCLEQ_INSERT_HEAD(head,elm,field) do { (elm)->field.cqe_next = (head)->cqh_first; (elm)->field.cqe_prev = (void *)(head); if ((head)->cqh_last == (void *)(head)) (head)->cqh_last = (elm); else (head)->cqh_first->field.cqe_prev = (elm); (head)->cqh_first = (elm); } while (0)
# 474 "/usr/include/sys/queue.h" 3 4
#define CIRCLEQ_INSERT_TAIL(head,elm,field) do { (elm)->field.cqe_next = (void *)(head); (elm)->field.cqe_prev = (head)->cqh_last; if ((head)->cqh_first == (void *)(head)) (head)->cqh_first = (elm); else (head)->cqh_last->field.cqe_next = (elm); (head)->cqh_last = (elm); } while (0)
# 484 "/usr/include/sys/queue.h" 3 4
#define CIRCLEQ_LAST(head) ((head)->cqh_last)

#define CIRCLEQ_NEXT(elm,field) ((elm)->field.cqe_next)

#define CIRCLEQ_PREV(elm,field) ((elm)->field.cqe_prev)

#define CIRCLEQ_REMOVE(head,elm,field) do { if ((elm)->field.cqe_next == (void *)(head)) (head)->cqh_last = (elm)->field.cqe_prev; else (elm)->field.cqe_next->field.cqe_prev = (elm)->field.cqe_prev; if ((elm)->field.cqe_prev == (void *)(head)) (head)->cqh_first = (elm)->field.cqe_next; else (elm)->field.cqe_prev->field.cqe_next = (elm)->field.cqe_next; } while (0)
# 66 "/usr/include/sys/file.h" 2 3 4



#pragma pack(4)


struct extern_file {
 struct { struct extern_file *le_next; struct extern_file **le_prev; } f_list;
 short f_flag;
 short f_type;
 short f_count;
 short f_msgcount;
 struct ucred *f_cred;
 void * f_ops;
 off_t f_offset;
 caddr_t f_data;
};

#pragma pack()
# 6339 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h" 2
# 6354 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define O_BINARY 0



#define O_TEXT 0
# 6383 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define EXEC_ARGV_CAST(x) (char **)x


#define IS_NUMBER_IN_UV 0x01


#define IS_NUMBER_GREATER_THAN_UV_MAX 0x02
#define IS_NUMBER_NOT_INT 0x04
#define IS_NUMBER_NEG 0x08
#define IS_NUMBER_INFINITY 0x10
#define IS_NUMBER_NAN 0x20
#define IS_NUMBER_TRAILING 0x40

#define GROK_NUMERIC_RADIX(sp,send) grok_numeric_radix(sp, send)


#define PERL_SCAN_ALLOW_UNDERSCORES 0x01
#define PERL_SCAN_DISALLOW_PREFIX 0x02
#define PERL_SCAN_SILENT_ILLDIGIT 0x04
#define PERL_SCAN_SILENT_NON_PORTABLE 0x08

#define PERL_SCAN_TRAILING 0x10



#define PERL_SCAN_GREATER_THAN_UV_MAX 0x02






#define PERL_GPROF_MONCONTROL(x) 
# 6424 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define NEXT_LINE_CHAR NEXT_LINE_NATIVE


#define UNICODE_LINE_SEPA_0 0xE2
#define UNICODE_LINE_SEPA_1 0x80
#define UNICODE_LINE_SEPA_2 0xA8
#define UNICODE_PARA_SEPA_0 0xE2
#define UNICODE_PARA_SEPA_1 0x80
#define UNICODE_PARA_SEPA_2 0xA9


#define PIPESOCK_MODE 



#define SOCKET_OPEN_MODE PIPESOCK_MODE



#define PIPE_OPEN_MODE PIPESOCK_MODE


#define PERL_MAGIC_UTF8_CACHESIZE 2

#define PERL_UNICODE_STDIN_FLAG 0x0001
#define PERL_UNICODE_STDOUT_FLAG 0x0002
#define PERL_UNICODE_STDERR_FLAG 0x0004
#define PERL_UNICODE_IN_FLAG 0x0008
#define PERL_UNICODE_OUT_FLAG 0x0010
#define PERL_UNICODE_ARGV_FLAG 0x0020
#define PERL_UNICODE_LOCALE_FLAG 0x0040
#define PERL_UNICODE_WIDESYSCALLS_FLAG 0x0080
#define PERL_UNICODE_UTF8CACHEASSERT_FLAG 0x0100

#define PERL_UNICODE_STD_FLAG (PERL_UNICODE_STDIN_FLAG | PERL_UNICODE_STDOUT_FLAG | PERL_UNICODE_STDERR_FLAG)




#define PERL_UNICODE_INOUT_FLAG (PERL_UNICODE_IN_FLAG | PERL_UNICODE_OUT_FLAG)



#define PERL_UNICODE_DEFAULT_FLAGS (PERL_UNICODE_STD_FLAG | PERL_UNICODE_INOUT_FLAG | PERL_UNICODE_LOCALE_FLAG)




#define PERL_UNICODE_ALL_FLAGS 0x01ff

#define PERL_UNICODE_STDIN 'I'
#define PERL_UNICODE_STDOUT 'O'
#define PERL_UNICODE_STDERR 'E'
#define PERL_UNICODE_STD 'S'
#define PERL_UNICODE_IN 'i'
#define PERL_UNICODE_OUT 'o'
#define PERL_UNICODE_INOUT 'D'
#define PERL_UNICODE_ARGV 'A'
#define PERL_UNICODE_LOCALE 'L'
#define PERL_UNICODE_WIDESYSCALLS 'W'
#define PERL_UNICODE_UTF8CACHEASSERT 'a'

#define PERL_SIGNALS_UNSAFE_FLAG 0x0001



#define PERL_ABS(x) ((x) < 0 ? -(x) : (x))





#define do_open(g,n,l,a,rm,rp,sf) do_openn(g, n, l, a, rm, rp, sf, (SV **) NULL, 0)


#define do_exec(cmd) do_exec3(cmd,0,0)




#define do_aexec(really,mark,sp) do_aexec5(really, mark, sp, 0, 0)




#define IS_SAFE_SYSCALL(p,len,what,op_name) (S_is_safe_syscall(aTHX_ (p), (len), (what), (op_name)))

#define IS_SAFE_PATHNAME(p,len,op_name) IS_SAFE_SYSCALL((p), (len), "pathname", (op_name))
# 6524 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define PERL_PV_ESCAPE_QUOTE 0x000001
#define PERL_PV_PRETTY_QUOTE PERL_PV_ESCAPE_QUOTE

#define PERL_PV_PRETTY_ELLIPSES 0x000002
#define PERL_PV_PRETTY_LTGT 0x000004
#define PERL_PV_PRETTY_EXACTSIZE 0x000008

#define PERL_PV_ESCAPE_UNI 0x000100
#define PERL_PV_ESCAPE_UNI_DETECT 0x000200
#define PERL_PV_ESCAPE_NONASCII 0x000400
#define PERL_PV_ESCAPE_FIRSTCHAR 0x000800

#define PERL_PV_ESCAPE_ALL 0x001000
#define PERL_PV_ESCAPE_NOBACKSLASH 0x002000
#define PERL_PV_ESCAPE_NOCLEAR 0x004000
#define PERL_PV_PRETTY_NOCLEAR PERL_PV_ESCAPE_NOCLEAR
#define PERL_PV_ESCAPE_RE 0x008000

#define PERL_PV_ESCAPE_DWIM 0x010000



#define PERL_PV_PRETTY_DUMP PERL_PV_PRETTY_ELLIPSES|PERL_PV_PRETTY_QUOTE
#define PERL_PV_PRETTY_REGPROP PERL_PV_PRETTY_ELLIPSES|PERL_PV_PRETTY_LTGT|PERL_PV_ESCAPE_RE|PERL_PV_ESCAPE_NONASCII
# 6558 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define DOUBLE_BIG_ENDIAN 
# 6568 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define NV_IMPLICIT_BIT 
# 6581 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define LONGDOUBLE_BIG_ENDIAN 
# 6594 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define LONGDOUBLE_DOUBLEDOUBLE 
# 6604 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perl.h"
#define NV_BIG_ENDIAN 
# 80 "Socket6.xs" 2
# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/XSUB.h" 1
# 12 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/XSUB.h"
#define _INC_PERL_XSUB_H 1
# 106 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/XSUB.h"
#define ST(off) PL_stack_base[ax + (off)]
# 126 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/XSUB.h"
#define XSPROTO(name) void name(pTHX_ CV* cv)

#undef XS
#undef XS_EXTERNAL
#undef XS_INTERNAL
# 141 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/XSUB.h"
#define XS_EXTERNAL(name) void name(pTHX_ CV* cv __attribute__unused__)
#define XS_INTERNAL(name) STATIC void name(pTHX_ CV* cv __attribute__unused__)
# 156 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/XSUB.h"
#define XS(name) XS_EXTERNAL(name)

#define dAX const I32 ax = (I32)(MARK - PL_stack_base + 1)

#define dAXMARK I32 ax = POPMARK; SV **mark = PL_stack_base + ax++



#define dITEMS I32 items = (I32)(SP - MARK)






#define dXSARGS dSP; dAXMARK; dITEMS







#define dXSBOOTARGSXSAPIVERCHK I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK; SV **mark = PL_stack_base + ax; dSP; dITEMS


#define dXSBOOTARGSAPIVERCHK I32 ax = XS_APIVERSION_SETXSUBFN_POPMARK_BOOTCHECK; SV **mark = PL_stack_base + ax; dSP; dITEMS





#define dXSBOOTARGSNOVERCHK I32 ax = XS_SETXSUBFN_POPMARK; SV **mark = PL_stack_base + ax; dSP; dITEMS




#define dXSTARG SV * const targ = ((PL_op->op_private & OPpENTERSUB_HASTARG) ? PAD_SV(PL_op->op_targ) : sv_newmortal())



#define XSprePUSH (sp = PL_stack_base + ax - 1)

#define XSANY CvXSUBANY(cv)

#define dXSI32 I32 ix = XSANY.any_i32





#define XSINTERFACE_CVT(ret,name) ret (*name)()
#define XSINTERFACE_CVT_ANON(ret) ret (*)()

#define dXSFUNCTION(ret) XSINTERFACE_CVT(ret,XSFUNCTION)
#define XSINTERFACE_FUNC(ret,cv,f) ((XSINTERFACE_CVT_ANON(ret))(f))
#define XSINTERFACE_FUNC_SET(cv,f) CvXSUBANY(cv).any_dxptr = (void (*) (pTHX_ void*))(f)


#define dUNDERBAR dNOOP
#define UNDERBAR find_rundefsv()
# 316 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/XSUB.h"
#define XST_mIV(i,v) (ST(i) = sv_2mortal(newSViv(v)) )
#define XST_mUV(i,v) (ST(i) = sv_2mortal(newSVuv(v)) )
#define XST_mNV(i,v) (ST(i) = sv_2mortal(newSVnv(v)) )
#define XST_mPV(i,v) (ST(i) = sv_2mortal(newSVpv(v,0)))
#define XST_mPVN(i,v,n) (ST(i) = newSVpvn_flags(v,n, SVs_TEMP))
#define XST_mNO(i) (ST(i) = &PL_sv_no )
#define XST_mYES(i) (ST(i) = &PL_sv_yes )
#define XST_mUNDEF(i) (ST(i) = &PL_sv_undef)

#define XSRETURN(off) STMT_START { const IV tmpXSoff = (off); PL_stack_sp = PL_stack_base + ax + (tmpXSoff - 1); return; } STMT_END






#define XSRETURN_IV(v) STMT_START { XST_mIV(0,v); XSRETURN(1); } STMT_END
#define XSRETURN_UV(v) STMT_START { XST_mUV(0,v); XSRETURN(1); } STMT_END
#define XSRETURN_NV(v) STMT_START { XST_mNV(0,v); XSRETURN(1); } STMT_END
#define XSRETURN_PV(v) STMT_START { XST_mPV(0,v); XSRETURN(1); } STMT_END
#define XSRETURN_PVN(v,n) STMT_START { XST_mPVN(0,v,n); XSRETURN(1); } STMT_END
#define XSRETURN_NO STMT_START { XST_mNO(0); XSRETURN(1); } STMT_END
#define XSRETURN_YES STMT_START { XST_mYES(0); XSRETURN(1); } STMT_END
#define XSRETURN_UNDEF STMT_START { XST_mUNDEF(0); XSRETURN(1); } STMT_END
#define XSRETURN_EMPTY STMT_START { XSRETURN(0); } STMT_END

#define newXSproto(a,b,c,d) newXS_flags(a,b,c,d,0)


#define XS_VERSION_BOOTCHECK Perl_xs_handshake(HS_KEY(FALSE, FALSE, "", XS_VERSION), HS_CXT, __FILE__, items, ax, XS_VERSION)






#define XS_APIVERSION_BOOTCHECK Perl_xs_handshake(HS_KEY(FALSE, FALSE, "v" PERL_API_VERSION_STRING, ""), HS_CXT, __FILE__, items, ax, "v" PERL_API_VERSION_STRING)





#define XS_BOTHVERSION_BOOTCHECK Perl_xs_handshake(HS_KEY(FALSE, FALSE, "v" PERL_API_VERSION_STRING, XS_VERSION), HS_CXT, __FILE__, items, ax, "v" PERL_API_VERSION_STRING, XS_VERSION)
# 367 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/XSUB.h"
#define XS_APIVERSION_POPMARK_BOOTCHECK Perl_xs_handshake(HS_KEY(FALSE, TRUE, "v" PERL_API_VERSION_STRING, ""), HS_CXT, __FILE__, "v" PERL_API_VERSION_STRING)



#define XS_BOTHVERSION_POPMARK_BOOTCHECK Perl_xs_handshake(HS_KEY(FALSE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION), HS_CXT, __FILE__, "v" PERL_API_VERSION_STRING, XS_VERSION)







#define XS_APIVERSION_SETXSUBFN_POPMARK_BOOTCHECK Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, ""), HS_CXT, __FILE__, "v" PERL_API_VERSION_STRING)



#define XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION), HS_CXT, __FILE__, "v" PERL_API_VERSION_STRING, XS_VERSION)
# 395 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/XSUB.h"
#define XS_SETXSUBFN_POPMARK Perl_xs_handshake(HS_KEY(TRUE, TRUE, "", "") | HSf_NOCHK, HS_CXT, __FILE__)
# 411 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/XSUB.h"
#define DBM_setFilter(db_type,code) STMT_START { if (db_type) RETVAL = sv_mortalcopy(db_type) ; ST(0) = RETVAL ; if (db_type && (code == &PL_sv_undef)) { SvREFCNT_dec_NN(db_type) ; db_type = NULL ; } else if (code) { if (db_type) sv_setsv(db_type, code) ; else db_type = newSVsv(code) ; } } STMT_END
# 428 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/XSUB.h"
#define DBM_ckFilter(arg,type,name) STMT_START { if (db->type) { if (db->filtering) { croak("recursion detected in %s", name) ; } ENTER ; SAVETMPS ; SAVEINT(db->filtering) ; db->filtering = TRUE ; SAVE_DEFSV ; if (name[7] == 's') arg = newSVsv(arg); DEFSV_set(arg) ; SvTEMP_off(arg) ; PUSHMARK(SP) ; PUTBACK ; (void) perl_call_sv(db->type, G_DISCARD); SPAGAIN ; PUTBACK ; FREETMPS ; LEAVE ; if (name[7] == 's'){ arg = sv_2mortal(arg); } } } STMT_END
# 456 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/XSUB.h"
#define VTBL_sv &PL_vtbl_sv
#define VTBL_env &PL_vtbl_env
#define VTBL_envelem &PL_vtbl_envelem
#define VTBL_sigelem &PL_vtbl_sigelem
#define VTBL_pack &PL_vtbl_pack
#define VTBL_packelem &PL_vtbl_packelem
#define VTBL_dbline &PL_vtbl_dbline
#define VTBL_isa &PL_vtbl_isa
#define VTBL_isaelem &PL_vtbl_isaelem
#define VTBL_arylen &PL_vtbl_arylen
#define VTBL_glob &PL_vtbl_glob
#define VTBL_mglob &PL_vtbl_mglob
#define VTBL_nkeys &PL_vtbl_nkeys
#define VTBL_taint &PL_vtbl_taint
#define VTBL_substr &PL_vtbl_substr
#define VTBL_vec &PL_vtbl_vec
#define VTBL_pos &PL_vtbl_pos
#define VTBL_bm &PL_vtbl_bm
#define VTBL_fm &PL_vtbl_fm
#define VTBL_uvar &PL_vtbl_uvar
#define VTBL_defelem &PL_vtbl_defelem
#define VTBL_regexp &PL_vtbl_regexp
#define VTBL_regdata &PL_vtbl_regdata
#define VTBL_regdatum &PL_vtbl_regdatum

#define VTBL_collxfrm &PL_vtbl_collxfrm

#define VTBL_amagic &PL_vtbl_amagic
#define VTBL_amagicelem &PL_vtbl_amagicelem


# 1 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlapi.h" 1
# 21 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/perlapi.h"
#define __perlapi_h__ 
# 488 "/opt/local/lib/perl5/5.22/darwin-thread-multi-2level/CORE/XSUB.h" 2


#undef aTHX
#undef aTHX_
#define aTHX PERL_GET_THX
#define aTHX_ aTHX,
# 81 "Socket6.xs" 2

# 1 "config.h" 1







#define HAVE_GETADDRINFO 1


#define HAVE_GETHOSTBYNAME2 1


#define HAVE_GETIPNODEBYADDR 1


#define HAVE_GETIPNODEBYNAME 1


#define HAVE_GETNAMEINFO 1


#define HAVE_INET_NTOP 1


#define HAVE_INET_PTON 1


#define HAVE_PL_SV_UNDEF 1


#define HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID 1


#define HAVE_SOCKADDR_SA_LEN 1


#define HAVE_SOCKLEN_T 1


#define PACKAGE_BUGREPORT ""


#define PACKAGE_NAME ""


#define PACKAGE_STRING ""


#define PACKAGE_TARNAME ""


#define PACKAGE_URL ""


#define PACKAGE_VERSION ""
# 83 "Socket6.xs" 2


#undef HAVE_INET_NTOP
# 100 "Socket6.xs"
# 1 "inet_ntop.c" 1
# 21 "inet_ntop.c"
#define NS_INT16SZ 2
#define NS_IN6ADDRSZ 16







#define SOCKLEN_T socklen_t




static const char *inet_ntop4(const unsigned char *src, char *dst,
                              size_t size);


static const char *inet_ntop6(const unsigned char *src, char *dst,
                              size_t size);
# 51 "inet_ntop.c"
const char *
inet_ntop(int af, const void *src, char *dst, socklen_t size)
{
        switch (af) {
        case 2:
                return (inet_ntop4(src, dst, (size_t)size));

        case 30:
                return (inet_ntop6(src, dst, (size_t)size));

        default:
                (*__error()) = 47;
                return (((void *)0));
        }

}
# 79 "inet_ntop.c"
static const char *
inet_ntop4(const unsigned char *src, char *dst, size_t size)
{
        static const char *fmt = "%u.%u.%u.%u";
        char tmp[sizeof "255.255.255.255"];

        if ((size_t)sprintf(tmp, fmt, src[0], src[1], src[2], src[3]) >= size)
        {
                (*__error()) = 28;
                return (((void *)0));
        }
        strcpy(dst, tmp);

        return (dst);
}
# 102 "inet_ntop.c"
static const char *
inet_ntop6(const unsigned char *src, char *dst, size_t size)
{







        char tmp[sizeof "ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"], *tp;
        struct { int base, len; } best, cur;
        unsigned int words[16 / 2];
        int i;






        memset(words, '\0', sizeof words);
        for (i = 0; i < 16; i++)
                words[i / 2] |= (src[i] << ((1 - (i % 2)) << 3));
        best.base = -1;
        cur.base = -1;
        for (i = 0; i < (16 / 2); i++) {
                if (words[i] == 0) {
                        if (cur.base == -1)
                                cur.base = i, cur.len = 1;
                        else
                                cur.len++;
                } else {
                        if (cur.base != -1) {
                                if (best.base == -1 || cur.len > best.len)
                                        best = cur;
                                cur.base = -1;
                        }
                }
        }
        if (cur.base != -1) {
                if (best.base == -1 || cur.len > best.len)
                        best = cur;
        }
        if (best.base != -1 && best.len < 2)
                best.base = -1;




        tp = tmp;
        for (i = 0; i < (16 / 2); i++) {

                if (best.base != -1 && i >= best.base &&
                    i < (best.base + best.len)) {
                        if (i == best.base)
                                *tp++ = ':';
                        continue;
                }

                if (i != 0)
                        *tp++ = ':';

                if (i == 6 && best.base == 0 &&
                    (best.len == 6 || (best.len == 5 && words[5] == 0xffff))) {
                        if (!inet_ntop4(src+12, tp,
                                        sizeof tmp - (tp - tmp)))
                                return (((void *)0));
                        tp += strlen(tp);
                        break;
                }
                tp += sprintf(tp, "%x", words[i]);
        }

        if (best.base != -1 && (best.base + best.len) ==
            (16 / 2))
                *tp++ = ':';
        *tp++ = '\0';




        if ((size_t)(tp - tmp) > size) {
                (*__error()) = 28;
                return (((void *)0));
        }
        strcpy(dst, tmp);
        return (dst);
}
# 101 "Socket6.xs" 2
#define HAVE_INET_NTOP 1
# 112 "Socket6.xs"
static int
not_here(char *s)
{
    Perl_croak_nocontext("Socket6::%s not implemented on this architecture", s);
    return -1;
}

static double
constant(char *name, int arg)
{
    (*__error()) = 0;
    switch (*name) {
    case 'A':
 if ((!strcmp(name,"AF_INET6")))

     return 30;



 if ((!strcmp(name,"AI_ADDRCONFIG")))

     return 0x00000400;



 if ((!strcmp(name,"AI_ALL")))

     return 0x00000100;



 if ((!strcmp(name,"AI_CANONNAME")))

     return 0x00000002;



 if ((!strcmp(name,"AI_NUMERICHOST")))

     return 0x00000004;



 if ((!strcmp(name,"AI_NUMERICSERV")))



     goto not_there;

 if ((!strcmp(name,"AI_DEFAULT")))

     return (0x00000200 | 0x00000400);



 if ((!strcmp(name,"AI_MASK")))

     return (0x00000001 | 0x00000002 | 0x00000004);



 if ((!strcmp(name,"AI_PASSIVE")))

     return 0x00000001;



 if ((!strcmp(name,"AI_V4MAPPED")))

     return 0x00000800;



 if ((!strcmp(name,"AI_V4MAPPED_CFG")))

     return 0x00000200;



 break;
    case 'E':
 if ((!strcmp(name,"EAI_ADDRFAMILY")))

     return 1;



 if ((!strcmp(name,"EAI_AGAIN")))

     return 2;



 if ((!strcmp(name,"EAI_BADFLAGS")))

     return 3;



 if ((!strcmp(name,"EAI_FAIL")))

     return 4;



 if ((!strcmp(name,"EAI_FAMILY")))

     return 5;



 if ((!strcmp(name,"EAI_MEMORY")))

     return 6;



 if ((!strcmp(name,"EAI_NODATA")))

     return 7;



 if ((!strcmp(name,"EAI_NONAME")))

     return 8;



 if ((!strcmp(name,"EAI_SERVICE")))

     return 9;



 if ((!strcmp(name,"EAI_SOCKTYPE")))

     return 10;



 if ((!strcmp(name,"EAI_SYSTEM")))

     return 11;



 if ((!strcmp(name,"EAI_BADHINTS")))

     return 12;



 if ((!strcmp(name,"EAI_PROTOCOL")))

     return 13;



 break;
    case 'I':
 if ((!strcmp(name,"IP_AUTH_TRANS_LEVEL")))



     goto not_there;

 if ((!strcmp(name,"IP_AUTH_NETWORK_LEVEL")))



     goto not_there;

 if ((!strcmp(name,"IP_ESP_TRANS_LEVEL")))



     goto not_there;

 if ((!strcmp(name,"IP_EPS_NETWORK_LEVEL")))



     goto not_there;

 if ((!strcmp(name,"IPPROTO_IP")))

     return 0;



 if ((!strcmp(name,"IPPROTO_IPV6")))

     return 41;



 if ((!strcmp(name,"IPSEC_LEVEL_AVAIL")))



     goto not_there;

 if ((!strcmp(name,"IPSEC_LEVEL_BYPASS")))



     goto not_there;

 if ((!strcmp(name,"IPSEC_LEVEL_DEFAULT")))

     return 0;



 if ((!strcmp(name,"IPSEC_LEVEL_NONE")))



     goto not_there;

 if ((!strcmp(name,"IPSEC_LEVEL_REQUIRE")))

     return 2;



 if ((!strcmp(name,"IPSEC_LEVEL_UNIQUE")))

     return 3;



 if ((!strcmp(name,"IPSEC_LEVEL_USE")))

     return 1;



 if ((!strcmp(name,"IPV6_AUTH_TRANS_LEVEL")))



     goto not_there;

 if ((!strcmp(name,"IPV6_AUTH_NETWORK_LEVEL")))



     goto not_there;

 if ((!strcmp(name,"IPV6_ESP_TRANS_LEVEL")))



     goto not_there;

 if ((!strcmp(name,"IPV6_EPS_NETWORK_LEVEL")))



     goto not_there;

 break;
    case 'N':
 if ((!strcmp(name,"NI_NOFQDN")))

     return 0x00000001;



 if ((!strcmp(name,"NI_NUMERICHOST")))

     return 0x00000002;



 if ((!strcmp(name,"NI_NAMEREQD")))

     return 0x00000004;



 if ((!strcmp(name,"NI_NUMERICSERV")))

     return 0x00000008;



 if ((!strcmp(name,"NI_DGRAM")))

     return 0x00000010;



 if ((!strcmp(name,"NI_WITHSCOPEID")))

     return 0x00000020;



  break;
    case 'P':
 if ((!strcmp(name,"PF_INET6")))

     return 30;



 break;
    }
    (*__error()) = 22;
    return 0;

not_there:
    (*__error()) = 2;
    return 0;
}
# 442 "Socket6.c"
# 453 "Socket6.c"
#define PERL_VERSION_DECIMAL(r,v,s) (r*1000000 + v*1000 + s)


#define PERL_DECIMAL_VERSION PERL_VERSION_DECIMAL(PERL_REVISION,PERL_VERSION,PERL_SUBVERSION)



#define PERL_VERSION_GE(r,v,s) (PERL_DECIMAL_VERSION >= PERL_VERSION_DECIMAL(r,v,s))



#define PERL_VERSION_LE(r,v,s) (PERL_DECIMAL_VERSION <= PERL_VERSION_DECIMAL(r,v,s))
# 528 "Socket6.c"
#undef XS_EUPXS




#define XS_EUPXS(name) XS_INTERNAL(name)
# 574 "Socket6.c"
#define newXSproto_portable(name,c_impl,file,proto) newXS_flags(name, c_impl, file, proto, 0)







#define newXS_deffile(a,b) Perl_newXS_deffile(aTHX_ a,b)
# 586 "Socket6.c"

static void XS_Socket6_constant(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)));
static void XS_Socket6_constant(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)))
{
    extern int Perl___notused(void); SV **sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp); I32 ax = (*(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Imarkstack_ptr)--); SV **mark = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax++; I32 items = (I32)(sp - mark);
    if (items != 2)
       Perl_croak_xs_usage(cv, "name, arg");
    {
 char * name = (char *)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_flags & (0x00000400|0x00200000)) == 0x00000400) ? (((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_u.svu_pv) : Perl_sv_2pv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)],0,2))
;
 int arg = (int)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)])->sv_flags & (0x00000100|0x00200000)) == 0x00000100) ? ((XPVIV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)])->sv_any)->xiv_u.xivu_iv : Perl_sv_2iv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)],2))
;
 double RETVAL;
 SV * const targ = (((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Iop)->op_private & 0x04) ? ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Icurpad)[(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Iop)->op_targ]) : Perl_sv_newmortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key))));

 RETVAL = constant(name, arg);
 (sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax - 1); (void)( { Perl_sv_setnv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), targ,(NV)((double)RETVAL)); (void)( { (void)( { if (__builtin_expect(((((targ)->sv_flags & 0x00400000)) ? (_Bool)1 : (_Bool)0),(0))) Perl_mg_set(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), targ); } ); (*++sp = (targ)); } ); } );
    }
    (void)( { const IV tmpXSoff = (1); (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp) = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax + (tmpXSoff - 1); return; } );
}


static void XS_Socket6_gethostbyname2(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)));
static void XS_Socket6_gethostbyname2(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)))
{
    extern int Perl___notused(void); SV **sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp); I32 ax = (*(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Imarkstack_ptr)--); SV **mark = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax++; I32 items = (I32)(sp - mark);
    if (items != 2)
       Perl_croak_xs_usage(cv, "host, af");
    ((void)sizeof(ax));
    sp -= items;
    {
 char * host = (char *)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_flags & (0x00000400|0x00200000)) == 0x00000400) ? (((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_u.svu_pv) : Perl_sv_2pv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)],0,2))
;
 int af = (int)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)])->sv_flags & (0x00000100|0x00200000)) == 0x00000100) ? ((XPVIV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)])->sv_any)->xiv_u.xivu_iv : Perl_sv_2iv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)],2))
;
# 444 "Socket6.xs"
{

 struct hostent *phe;
 int count, i;

 if ((phe = gethostbyname2(host, af)) != ((void *)0)) {
  for (count = 0; phe->h_addr_list[count]; ++count);
  (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(4 + count)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (4 + count)); ((void)sizeof(sp)); } } );
  (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (char *) phe->h_name,strlen(phe->h_name)))));

  (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (char *) phe->h_aliases,sizeof(char *)))));

  (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSViv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (IV) phe->h_addrtype))));
  (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSViv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (IV) phe->h_length))));
  for (i = 0; i < count; ++i) {
   (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (char *)phe->h_addr_list[i],phe->h_length))));

  }
 }



}
# 646 "Socket6.c"
 (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp) = sp;
 return;
    }
}


static void XS_Socket6_inet_pton(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)));
static void XS_Socket6_inet_pton(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)))
{
    extern int Perl___notused(void); SV **sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp); I32 ax = (*(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Imarkstack_ptr)--); SV **mark = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax++; I32 items = (I32)(sp - mark);
    if (items != 2)
       Perl_croak_xs_usage(cv, "af, host");
    {
 int af = (int)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_flags & (0x00000100|0x00200000)) == 0x00000100) ? ((XPVIV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_any)->xiv_u.xivu_iv : Perl_sv_2iv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)],2))
;
 char * host = (char *)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)])->sv_flags & (0x00000400|0x00200000)) == 0x00000400) ? (((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)])->sv_u.svu_pv) : Perl_sv_2pv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)],0,2))
;
# 473 "Socket6.xs"
{

 union {

  struct in6_addr addr6;

  struct in_addr addr4;
 } ip_address;
 int len;
 int ok;

 switch (af) {

 case 30:
  len = sizeof(struct in6_addr);
  break;

 case 2:
  len = sizeof(struct in_addr);
  break;
 default:
  Perl_croak_nocontext("Bad address family for %s, got %d",
   "Socket6::inet_pton", af);
  break;
 }
 ok = inet_pton(af, host, &ip_address);

 (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)] = Perl_sv_newmortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)));
 if (ok == 1) {
  Perl_sv_setpvn(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)],(char *)&ip_address,len);
 }



}
# 700 "Socket6.c"
    }
    (void)( { const IV tmpXSoff = (1); (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp) = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax + (tmpXSoff - 1); return; } );
}


static void XS_Socket6_inet_ntop(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)));
static void XS_Socket6_inet_ntop(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)))
{
    extern int Perl___notused(void); SV **sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp); I32 ax = (*(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Imarkstack_ptr)--); SV **mark = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax++; I32 items = (I32)(sp - mark);
    if (items != 2)
       Perl_croak_xs_usage(cv, "af, address_sv");
    {
 int af = (int)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_flags & (0x00000100|0x00200000)) == 0x00000100) ? ((XPVIV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_any)->xiv_u.xivu_iv : Perl_sv_2iv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)],2))
;
 SV * address_sv = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)]
;
# 514 "Socket6.xs"
{

 STRLEN addrlen, alen;

 struct in6_addr addr;
 char addr_str[46];




 char * address = ((((address_sv)->sv_flags & (0x00000400|0x00200000)) == 0x00000400) ? ((addrlen = ((XPV*) (address_sv)->sv_any)->xpv_cur), ((address_sv)->sv_u.svu_pv)) : Perl_sv_2pv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), address_sv,&addrlen,2));

 switch (af) {
 case 2:
  alen = sizeof(struct in_addr);
  break;

 case 30:
  alen = sizeof(struct in6_addr);
  break;

 default:
  Perl_croak_nocontext("Unsupported address family for %s, af is %d",
        "Socket6::inet_ntop", af);
 }


 if (alen > sizeof(addr) || alen != addrlen) {
  Perl_croak_nocontext("Bad arg length for %s, length is %d, should be %d",
        "Socket6::inet_ntop",
        addrlen, alen);
 }

 ((void)(__builtin_expect((((((sizeof(char) > ((size_t)1 << 8*(sizeof(size_t) - sizeof(alen)))) ? (size_t)(alen) : ((size_t)~0)/sizeof(char)) > ((size_t)~0)/sizeof(char))) ? (_Bool)1 : (_Bool)0),(0)) && (S_croak_memory_wrap(),0)), (void)memcpy((char*)(&addr),(const char*)(address), (alen) * sizeof(char)));
 addr_str[0] = 0;
 inet_ntop(af, &addr, addr_str, sizeof addr_str);

 (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)] = Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), addr_str,strlen(addr_str)));



}
# 760 "Socket6.c"
    }
    (void)( { const IV tmpXSoff = (1); (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp) = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax + (tmpXSoff - 1); return; } );
}


static void XS_Socket6_pack_sockaddr_in6(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)));
static void XS_Socket6_pack_sockaddr_in6(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)))
{
    extern int Perl___notused(void); SV **sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp); I32 ax = (*(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Imarkstack_ptr)--); SV **mark = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax++; I32 items = (I32)(sp - mark);
    if (items != 2)
       Perl_croak_xs_usage(cv, "port, ip6_address");
    {
 unsigned short port = (unsigned short)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_flags & (0x00000100|0x80000000|0x00200000)) == (0x00000100|0x80000000)) ? ((XPVUV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_any)->xuv_u.xivu_uv : Perl_sv_2uv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)],2))
;
 char * ip6_address = (char *)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)])->sv_flags & (0x00000400|0x00200000)) == 0x00000400) ? (((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)])->sv_u.svu_pv) : Perl_sv_2pv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)],0,2))
;
# 562 "Socket6.xs"
{

 struct sockaddr_in6 sin;

 ((void)(__builtin_expect((((((sizeof(char) > ((size_t)1 << 8*(sizeof(size_t) - sizeof(sizeof sin)))) ? (size_t)(sizeof sin) : ((size_t)~0)/sizeof(char)) > ((size_t)~0)/sizeof(char))) ? (_Bool)1 : (_Bool)0),(0)) && (S_croak_memory_wrap(),0)), (void)memset((char*)(&sin),0,(sizeof sin) * sizeof(char)));

 sin.sin6_len = sizeof sin;

 sin.sin6_family = 30;
 sin.sin6_port = ((uint16_t)(port));
 ((void)(__builtin_expect((((((sizeof(char) > ((size_t)1 << 8*(sizeof(size_t) - sizeof(sizeof sin.sin6_addr)))) ? (size_t)(sizeof sin.sin6_addr) : ((size_t)~0)/sizeof(char)) > ((size_t)~0)/sizeof(char))) ? (_Bool)1 : (_Bool)0),(0)) && (S_croak_memory_wrap(),0)), (void)memcpy((char*)(&sin.sin6_addr),(const char*)(ip6_address), (sizeof sin.sin6_addr) * sizeof(char)));

 (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)] = Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (char *)&sin,sizeof sin));



}
# 795 "Socket6.c"
    }
    (void)( { const IV tmpXSoff = (1); (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp) = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax + (tmpXSoff - 1); return; } );
}


static void XS_Socket6_pack_sockaddr_in6_all(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)));
static void XS_Socket6_pack_sockaddr_in6_all(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)))
{
    extern int Perl___notused(void); SV **sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp); I32 ax = (*(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Imarkstack_ptr)--); SV **mark = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax++; I32 items = (I32)(sp - mark);
    if (items != 4)
       Perl_croak_xs_usage(cv, "port, flowinfo, ip6_address, scope_id");
    {
 unsigned short port = (unsigned short)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_flags & (0x00000100|0x80000000|0x00200000)) == (0x00000100|0x80000000)) ? ((XPVUV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_any)->xuv_u.xivu_uv : Perl_sv_2uv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)],2))
;
 unsigned long flowinfo = (unsigned long)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)])->sv_flags & (0x00000100|0x80000000|0x00200000)) == (0x00000100|0x80000000)) ? ((XPVUV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)])->sv_any)->xuv_u.xivu_uv : Perl_sv_2uv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)],2))
;
 char * ip6_address = (char *)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (2)])->sv_flags & (0x00000400|0x00200000)) == 0x00000400) ? (((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (2)])->sv_u.svu_pv) : Perl_sv_2pv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (2)],0,2))
;
 unsigned long scope_id = (unsigned long)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (3)])->sv_flags & (0x00000100|0x80000000|0x00200000)) == (0x00000100|0x80000000)) ? ((XPVUV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (3)])->sv_any)->xuv_u.xivu_uv : Perl_sv_2uv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (3)],2))
;
# 587 "Socket6.xs"
{

 struct sockaddr_in6 sin;

 ((void)(__builtin_expect((((((sizeof(char) > ((size_t)1 << 8*(sizeof(size_t) - sizeof(sizeof sin)))) ? (size_t)(sizeof sin) : ((size_t)~0)/sizeof(char)) > ((size_t)~0)/sizeof(char))) ? (_Bool)1 : (_Bool)0),(0)) && (S_croak_memory_wrap(),0)), (void)memset((char*)(&sin),0,(sizeof sin) * sizeof(char)));

 sin.sin6_len = sizeof sin;

 sin.sin6_family = 30;
 sin.sin6_port = ((uint16_t)(port));
 sin.sin6_flowinfo = ((uint32_t)(flowinfo));
 ((void)(__builtin_expect((((((sizeof(char) > ((size_t)1 << 8*(sizeof(size_t) - sizeof(sizeof sin.sin6_addr)))) ? (size_t)(sizeof sin.sin6_addr) : ((size_t)~0)/sizeof(char)) > ((size_t)~0)/sizeof(char))) ? (_Bool)1 : (_Bool)0),(0)) && (S_croak_memory_wrap(),0)), (void)memcpy((char*)(&sin.sin6_addr),(const char*)(ip6_address), (sizeof sin.sin6_addr) * sizeof(char)));

 sin.sin6_scope_id = scope_id;


 (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)] = Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (char *)&sin,sizeof sin));



}
# 838 "Socket6.c"
    }
    (void)( { const IV tmpXSoff = (1); (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp) = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax + (tmpXSoff - 1); return; } );
}


static void XS_Socket6_unpack_sockaddr_in6(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)));
static void XS_Socket6_unpack_sockaddr_in6(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)))
{
    extern int Perl___notused(void); SV **sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp); I32 ax = (*(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Imarkstack_ptr)--); SV **mark = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax++; I32 items = (I32)(sp - mark);
    if (items != 1)
       Perl_croak_xs_usage(cv, "sin_sv");
    ((void)sizeof(ax));
    sp -= items;
    {
 SV * sin_sv = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)]
;
# 613 "Socket6.xs"
{

 STRLEN sockaddrlen;
 struct sockaddr_in6 addr;
 unsigned short port;
 struct in6_addr ip6_address;
 char * sin = ((((sin_sv)->sv_flags & (0x00000400|0x00200000)) == 0x00000400) ? ((sockaddrlen = ((XPV*) (sin_sv)->sv_any)->xpv_cur), ((sin_sv)->sv_u.svu_pv)) : Perl_sv_2pv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sin_sv,&sockaddrlen,2));
 if (sockaddrlen != sizeof(addr)) {
  Perl_croak_nocontext("Bad arg length for %s, length is %d, should be %d",
        "Socket6::unpack_sockaddr_in6",
        sockaddrlen, sizeof(addr));
 }
 ((void)(__builtin_expect((((((sizeof(char) > ((size_t)1 << 8*(sizeof(size_t) - sizeof(sizeof addr)))) ? (size_t)(sizeof addr) : ((size_t)~0)/sizeof(char)) > ((size_t)~0)/sizeof(char))) ? (_Bool)1 : (_Bool)0),(0)) && (S_croak_memory_wrap(),0)), (void)memcpy((char*)(&addr),(const char*)(sin), (sizeof addr) * sizeof(char)));
 if ( addr.sin6_family != 30 ) {
  Perl_croak_nocontext("Bad address family for %s, got %d, should be %d",
        "Socket6::unpack_sockaddr_in6",
        addr.sin6_family,
        30);
 }
 port = ((uint16_t)(addr.sin6_port));
 ip6_address = addr.sin6_addr;

 (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(2)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (2)); ((void)sizeof(sp)); } } );
 (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSViv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (IV) port))));
 (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (char *)&ip6_address,sizeof ip6_address))));



}
# 885 "Socket6.c"
 (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp) = sp;
 return;
    }
}


static void XS_Socket6_unpack_sockaddr_in6_all(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)));
static void XS_Socket6_unpack_sockaddr_in6_all(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)))
{
    extern int Perl___notused(void); SV **sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp); I32 ax = (*(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Imarkstack_ptr)--); SV **mark = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax++; I32 items = (I32)(sp - mark);
    if (items != 1)
       Perl_croak_xs_usage(cv, "sin_sv");
    ((void)sizeof(ax));
    sp -= items;
    {
 SV * sin_sv = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)]
;
# 647 "Socket6.xs"
{

 STRLEN sockaddrlen;
 struct sockaddr_in6 addr;
 unsigned short port;
 unsigned long flowinfo;
 struct in6_addr ip6_address;
 unsigned long scope_id;
 char * sin = ((((sin_sv)->sv_flags & (0x00000400|0x00200000)) == 0x00000400) ? ((sockaddrlen = ((XPV*) (sin_sv)->sv_any)->xpv_cur), ((sin_sv)->sv_u.svu_pv)) : Perl_sv_2pv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sin_sv,&sockaddrlen,2));
 if (sockaddrlen != sizeof(addr)) {
  Perl_croak_nocontext("Bad arg length for %s, length is %d, should be %d",
        "Socket6::unpack_sockaddr_in6",
        sockaddrlen, sizeof(addr));
 }
 ((void)(__builtin_expect((((((sizeof(char) > ((size_t)1 << 8*(sizeof(size_t) - sizeof(sizeof addr)))) ? (size_t)(sizeof addr) : ((size_t)~0)/sizeof(char)) > ((size_t)~0)/sizeof(char))) ? (_Bool)1 : (_Bool)0),(0)) && (S_croak_memory_wrap(),0)), (void)memcpy((char*)(&addr),(const char*)(sin), (sizeof addr) * sizeof(char)));
 if ( addr.sin6_family != 30 ) {
  Perl_croak_nocontext("Bad address family for %s, got %d, should be %d",
        "Socket6::unpack_sockaddr_in6",
        addr.sin6_family,
        30);
 }
 port = ((uint16_t)(addr.sin6_port));
 flowinfo = ((uint32_t)(addr.sin6_flowinfo));
 ip6_address = addr.sin6_addr;

 scope_id = addr.sin6_scope_id;




 (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(5)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (5)); ((void)sizeof(sp)); } } );
 (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSViv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (IV) port))));
 (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSViv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (IV) flowinfo))));
 (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (char *)&ip6_address,sizeof ip6_address))));
 (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSViv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (IV) scope_id))));



}
# 943 "Socket6.c"
 (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp) = sp;
 return;
    }
}


static void XS_Socket6_in6addr_any(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)));
static void XS_Socket6_in6addr_any(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)))
{
    extern int Perl___notused(void); SV **sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp); I32 ax = (*(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Imarkstack_ptr)--); SV **mark = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax++; I32 items = (I32)(sp - mark);
    if (items != 0)
       Perl_croak_xs_usage(cv, "");
    {
# 690 "Socket6.xs"
{

 (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)] = Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (char *)&in6addr_any,sizeof in6addr_any));



}
# 965 "Socket6.c"
    }
    (void)( { const IV tmpXSoff = (1); (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp) = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax + (tmpXSoff - 1); return; } );
}


static void XS_Socket6_in6addr_loopback(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)));
static void XS_Socket6_in6addr_loopback(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)))
{
    extern int Perl___notused(void); SV **sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp); I32 ax = (*(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Imarkstack_ptr)--); SV **mark = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax++; I32 items = (I32)(sp - mark);
    if (items != 0)
       Perl_croak_xs_usage(cv, "");
    {
# 701 "Socket6.xs"
{

 (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)] = Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (char *)&in6addr_loopback,sizeof in6addr_loopback));




}
# 987 "Socket6.c"
    }
    (void)( { const IV tmpXSoff = (1); (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp) = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax + (tmpXSoff - 1); return; } );
}


static void XS_Socket6_getaddrinfo(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)));
static void XS_Socket6_getaddrinfo(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)))
{
    extern int Perl___notused(void); SV **sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp); I32 ax = (*(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Imarkstack_ptr)--); SV **mark = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax++; I32 items = (I32)(sp - mark);
    if (items < 2 || items > 6)
       Perl_croak_xs_usage(cv, "host, port, family=0, socktype=0, protocol=0, flags=0");
    ((void)sizeof(ax));
    sp -= items;
    {
 char * host = (char *)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_flags & (0x00000400|0x00200000)) == 0x00000400) ? (((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_u.svu_pv) : Perl_sv_2pv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)],0,2))
;
 char * port = (char *)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)])->sv_flags & (0x00000400|0x00200000)) == 0x00000400) ? (((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)])->sv_u.svu_pv) : Perl_sv_2pv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)],0,2))
;
 int family;
 int socktype;
 int protocol;
 int flags;

 if (items < 3)
     family = 0;
 else {
     family = (int)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (2)])->sv_flags & (0x00000100|0x00200000)) == 0x00000100) ? ((XPVIV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (2)])->sv_any)->xiv_u.xivu_iv : Perl_sv_2iv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (2)],2))
;
 }

 if (items < 4)
     socktype = 0;
 else {
     socktype = (int)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (3)])->sv_flags & (0x00000100|0x00200000)) == 0x00000100) ? ((XPVIV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (3)])->sv_any)->xiv_u.xivu_iv : Perl_sv_2iv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (3)],2))
;
 }

 if (items < 5)
     protocol = 0;
 else {
     protocol = (int)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (4)])->sv_flags & (0x00000100|0x00200000)) == 0x00000100) ? ((XPVIV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (4)])->sv_any)->xiv_u.xivu_iv : Perl_sv_2iv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (4)],2))
;
 }

 if (items < 6)
     flags = 0;
 else {
     flags = (int)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (5)])->sv_flags & (0x00000100|0x00200000)) == 0x00000100) ? ((XPVIV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (5)])->sv_any)->xiv_u.xivu_iv : Perl_sv_2iv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (5)],2))
;
 }
# 719 "Socket6.xs"
{

 struct addrinfo hints, * res;
 int err;
 int count;
 const char *error;
 ;

 ((void)(__builtin_expect((((((sizeof(char) > ((size_t)1 << 8*(sizeof(size_t) - sizeof(sizeof hints)))) ? (size_t)(sizeof hints) : ((size_t)~0)/sizeof(char)) > ((size_t)~0)/sizeof(char))) ? (_Bool)1 : (_Bool)0),(0)) && (S_croak_memory_wrap(),0)), (void)memset((char*)(&hints),0,(sizeof hints) * sizeof(char)));
 hints.ai_flags = flags;
 hints.ai_family = family;
 hints.ai_socktype = socktype;
 hints.ai_protocol = protocol;
 ;
 err = getaddrinfo(*host ? host : 0, *port ? port : 0, &hints, &res);
 ;

 if (err == 0) {
  struct addrinfo * p;
  count = 0;
  for (p = res; p; p = p->ai_next)
   ++count;
  (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(5 * count)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (5 * count)); ((void)sizeof(sp)); } } );
  for (p = res; p; p = p->ai_next) {
   (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSViv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (IV) p->ai_family))));
   (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSViv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (IV) p->ai_socktype))));
   (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSViv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (IV) p->ai_protocol))));
   (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (char *)p->ai_addr,p->ai_addrlen))));

   if (p->ai_canonname)
    (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (char *)p->ai_canonname,strlen(p->ai_canonname)))));

   else
    (*++sp = (&(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Isv_undef)));
  }
  freeaddrinfo(res);
 } else {
  SV *error_sv = Perl_sv_newmortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)));
  ((void)(((svtype)((error_sv)->sv_flags & 0xff)) >= (SVt_PVNV) || (Perl_sv_upgrade(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), error_sv,SVt_PVNV),1)));
  error = gai_strerror(err);
  Perl_sv_setpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), error_sv,error);
  (void)( { ((void)0); ((void)0); (((XPVIV*) (error_sv)->sv_any)->xiv_u.xivu_iv = (err)); } ); ( (error_sv)->sv_flags |= (0x00000100|0x00001000));
  (*++sp = (error_sv));
 }



}
# 1087 "Socket6.c"
 (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp) = sp;
 return;
    }
}


static void XS_Socket6_getnameinfo(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)));
static void XS_Socket6_getnameinfo(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)))
{
    extern int Perl___notused(void); SV **sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp); I32 ax = (*(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Imarkstack_ptr)--); SV **mark = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax++; I32 items = (I32)(sp - mark);
    if (items < 1 || items > 2)
       Perl_croak_xs_usage(cv, "sin_sv, flags = 0");
    ((void)sizeof(ax));
    sp -= items;
    {
 SV * sin_sv = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)]
;
 int flags;

 if (items < 2)
     flags = 0;
 else {
     flags = (int)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)])->sv_flags & (0x00000100|0x00200000)) == 0x00000100) ? ((XPVIV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)])->sv_any)->xiv_u.xivu_iv : Perl_sv_2iv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)],2))
;
 }
# 773 "Socket6.xs"
{

 STRLEN sockaddrlen;
 struct sockaddr * sin = (struct sockaddr *)((((sin_sv)->sv_flags & (0x00000400|0x00200000)) == 0x00000400) ? ((sockaddrlen = ((XPV*) (sin_sv)->sv_any)->xpv_cur), ((sin_sv)->sv_u.svu_pv)) : Perl_sv_2pv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sin_sv,&sockaddrlen,2));
 char host[1025];
 char port[32];
 int err;
 const char *error;
 ;

 ;
 if (items < 2) {
  err = getnameinfo(sin, sockaddrlen, host, sizeof host,
      port, sizeof port, 0);
  if (err)
   err = getnameinfo(sin, sockaddrlen, host, sizeof host,
       port, sizeof port, 0x00000008);
  if (err)
   err = getnameinfo(sin, sockaddrlen, host, sizeof host,
       port, sizeof port, 0x00000002);
  if (err)
   err = getnameinfo(sin, sockaddrlen, host, sizeof host,
       port, sizeof port,
       0x00000002|0x00000008);
 } else {
  err = getnameinfo(sin, sockaddrlen, host, sizeof host,
      port, sizeof port, flags);
 }
 ;

 if (err == 0) {
  (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(2)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (2)); ((void)sizeof(sp)); } } );
  (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), host,strlen(host)))));
  (*++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), port,strlen(port)))));
 } else {
  SV *error_sv = Perl_sv_newmortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)));
  ((void)(((svtype)((error_sv)->sv_flags & 0xff)) >= (SVt_PVNV) || (Perl_sv_upgrade(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), error_sv,SVt_PVNV),1)));
  error = gai_strerror(err);
  Perl_sv_setpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), error_sv,error);
  (void)( { ((void)0); ((void)0); (((XPVIV*) (error_sv)->sv_any)->xiv_u.xivu_iv = (err)); } ); ( (error_sv)->sv_flags |= (0x00000100|0x00001000));
  (*++sp = (error_sv));
 }



}
# 1160 "Socket6.c"
 (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp) = sp;
 return;
    }
}


static void XS_Socket6_gai_strerror(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)));
static void XS_Socket6_gai_strerror(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)))
{
    extern int Perl___notused(void); SV **sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp); I32 ax = (*(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Imarkstack_ptr)--); SV **mark = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax++; I32 items = (I32)(sp - mark);
    if (items < 0 || items > 1)
       Perl_croak_xs_usage(cv, "errcode = 0");
    {
 int errcode;
 char * RETVAL;
 SV * const targ = (((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Iop)->op_private & 0x04) ? ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Icurpad)[(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Iop)->op_targ]) : Perl_sv_newmortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key))));

 if (items < 1)
     errcode = 0;
 else {
     errcode = (int)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_flags & (0x00000100|0x00200000)) == 0x00000100) ? ((XPVIV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_any)->xiv_u.xivu_iv : Perl_sv_2iv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)],2))
;
 }
# 824 "Socket6.xs"
 RETVAL = (char *)gai_strerror(errcode);
# 1186 "Socket6.c"
 Perl_sv_setpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), targ,RETVAL); (sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax - 1); (void)( { (void)( { if (__builtin_expect(((((targ)->sv_flags & 0x00400000)) ? (_Bool)1 : (_Bool)0),(0))) Perl_mg_set(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), targ); } ); (*++sp = (targ)); } );
    }
    (void)( { const IV tmpXSoff = (1); (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp) = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax + (tmpXSoff - 1); return; } );
}


static void XS_Socket6_getipnodebyname(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)));
static void XS_Socket6_getipnodebyname(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)))
{
    extern int Perl___notused(void); SV **sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp); I32 ax = (*(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Imarkstack_ptr)--); SV **mark = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax++; I32 items = (I32)(sp - mark);
    if (items < 1 || items > 3)
       Perl_croak_xs_usage(cv, "hostname, family=0, flags=0");
    ((void)sizeof(ax));
    sp -= items;
    {
 char * hostname = (char *)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_flags & (0x00000400|0x00200000)) == 0x00000400) ? (((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_u.svu_pv) : Perl_sv_2pv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)],0,2))
;
 int family;
 int flags;
# 834 "Socket6.xs"

 struct hostent *he;
 int err;
 char **p;
 SV *temp, *address_ref, *alias_ref;
 AV *address_list, *alias_list;
# 1214 "Socket6.c"

 if (items < 2)
     family = 0;
 else {
     family = (int)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)])->sv_flags & (0x00000100|0x00200000)) == 0x00000100) ? ((XPVIV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)])->sv_any)->xiv_u.xivu_iv : Perl_sv_2iv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)],2))
;
 }

 if (items < 3)
     flags = 0;
 else {
     flags = (int)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (2)])->sv_flags & (0x00000100|0x00200000)) == 0x00000100) ? ((XPVIV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (2)])->sv_any)->xiv_u.xivu_iv : Perl_sv_2iv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (2)],2))
;
 }
# 842 "Socket6.xs"
{

 he = getipnodebyname(hostname, family, flags, &err);

 if (err == 0) {
  (void)( { (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(1)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (1)); ((void)sizeof(sp)); } } ); *++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), he->h_name,strlen(he->h_name)))); } );
  (void)( { (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(1)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (1)); ((void)sizeof(sp)); } } ); *++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSViv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), he->h_addrtype))); } );
  (void)( { (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(1)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (1)); ((void)sizeof(sp)); } } ); *++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSViv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), he->h_length))); } );

  address_list = ((AV *)({ void *_p = (Perl_newSV_type(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), SVt_PVAV)); _p; }));
  for(p = he->h_addr_list; *p != ((void *)0); p++) {
   temp = Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), *p,he->h_length);
   Perl_av_push(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), address_list,temp);
  }
  address_ref = Perl_newRV_noinc(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (SV*) address_list);
  (void)( { (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(1)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (1)); ((void)sizeof(sp)); } } ); *++sp = (address_ref); } );

  alias_list = ((AV *)({ void *_p = (Perl_newSV_type(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), SVt_PVAV)); _p; }));
  for(p = he->h_aliases; *p != ((void *)0); p++) {
   temp = Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), *p,strlen(*p));
   Perl_av_push(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), alias_list,temp);
  }
  alias_ref = Perl_newRV_noinc(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (SV*) alias_list);
  (void)( { (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(1)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (1)); ((void)sizeof(sp)); } } ); *++sp = (alias_ref); } );
  freehostent(he);
 } else {
  (void)( { (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(1)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (1)); ((void)sizeof(sp)); } } ); *++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSViv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), err))); } );
 }



}
# 1262 "Socket6.c"
 (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp) = sp;
 return;
    }
}


static void XS_Socket6_getipnodebyaddr(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)));
static void XS_Socket6_getipnodebyaddr(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)))
{
    extern int Perl___notused(void); SV **sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp); I32 ax = (*(((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Imarkstack_ptr)--); SV **mark = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax++; I32 items = (I32)(sp - mark);
    if (items != 2)
       Perl_croak_xs_usage(cv, "family, address_sv");
    ((void)sizeof(ax));
    sp -= items;
    {
 int family = (int)(((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_flags & (0x00000100|0x00200000)) == 0x00000100) ? ((XPVIV*) ((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)])->sv_any)->xiv_u.xivu_iv : Perl_sv_2iv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (0)],2))
;
 SV * address_sv = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base)[ax + (1)]
;
# 880 "Socket6.xs"

 STRLEN addrlen;
 struct hostent *he;
 int err, alen;
 char **p;
 SV *temp, *address_ref, *alias_ref;
 AV *address_list, *alias_list;
 struct in6_addr addr;
 char *addr_buffer;
# 1293 "Socket6.c"
# 891 "Socket6.xs"
{

 addr_buffer = ((((address_sv)->sv_flags & (0x00000400|0x00200000)) == 0x00000400) ? ((addrlen = ((XPV*) (address_sv)->sv_any)->xpv_cur), ((address_sv)->sv_u.svu_pv)) : Perl_sv_2pv_flags(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), address_sv,&addrlen,2));

 switch(family) {

 case 2:
  alen = sizeof(struct in_addr);
  break;
 case 30:
  alen = sizeof(struct in6_addr);
  break;
 default:
  Perl_croak_nocontext("Unsupported address family for %s, af is %d",
      "Socket6::getipnodebyaddr", family);
 }

 if (alen > sizeof(addr) || alen != addrlen) {
  Perl_croak_nocontext("Arg length mismatch in %s, length is %d, should be %d\n",
      "Socket6::getipnodebyaddr", addrlen, alen);
 }

 ((void)(__builtin_expect((((((sizeof(char) > ((size_t)1 << 8*(sizeof(size_t) - sizeof(sizeof(addr))))) ? (size_t)(sizeof(addr)) : ((size_t)~0)/sizeof(char)) > ((size_t)~0)/sizeof(char))) ? (_Bool)1 : (_Bool)0),(0)) && (S_croak_memory_wrap(),0)), (void)memcpy((char*)(&addr),(const char*)(addr_buffer), (sizeof(addr)) * sizeof(char)));

 he = getipnodebyaddr(addr_buffer, alen, family, &err);

 if (err == 0) {
  (void)( { (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(1)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (1)); ((void)sizeof(sp)); } } ); *++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), he->h_name,strlen(he->h_name)))); } );
  (void)( { (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(1)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (1)); ((void)sizeof(sp)); } } ); *++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSViv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), he->h_addrtype))); } );
  (void)( { (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(1)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (1)); ((void)sizeof(sp)); } } ); *++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSViv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), he->h_length))); } );

  address_list = ((AV *)({ void *_p = (Perl_newSV_type(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), SVt_PVAV)); _p; }));
  for(p = he->h_addr_list; *p != ((void *)0); p++) {
   temp = Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), *p,he->h_length);
   Perl_av_push(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), address_list,temp);
  }
  address_ref = Perl_newRV_noinc(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (SV*) address_list);
  (void)( { (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(1)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (1)); ((void)sizeof(sp)); } } ); *++sp = (address_ref); } );

  alias_list = ((AV *)({ void *_p = (Perl_newSV_type(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), SVt_PVAV)); _p; }));
  for(p = he->h_aliases; *p != ((void *)0); p++) {
   temp = Perl_newSVpv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), *p,strlen(*p));
   Perl_av_push(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), alias_list,temp);
  }
  alias_ref = Perl_newRV_noinc(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), (SV*) alias_list);
  (void)( { (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(1)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (1)); ((void)sizeof(sp)); } } ); *++sp = (alias_ref); } );
  freehostent(he);
 } else {
  (void)( { (void)( { if (__builtin_expect((((((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_max) - sp < (ssize_t)(1)) ? (_Bool)1 : (_Bool)0),(0))) { sp = Perl_stack_grow(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), sp,sp,(ssize_t) (1)); ((void)sizeof(sp)); } } ); *++sp = (Perl_sv_2mortal(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), Perl_newSViv(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), err))); } );
 }



}
# 1349 "Socket6.c"
 (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp) = sp;
 return;
    }
}




void boot_Socket6(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)));
void boot_Socket6(PerlInterpreter* my_perl __attribute__((unused)), CV* cv __attribute__((unused)))
{



    extern int Perl___notused(void); I32 ax = Perl_xs_handshake((((sizeof(PerlInterpreter)) << 16) | ((sizeof("" "0.27" "")-1) > 0xFF ? (Perl_croak_nocontext("panic: handshake overflow"), 0xFF) : (sizeof("" "0.27" "")-1) << 8) | ((((1)) ? (_Bool)1 : (_Bool)0) ? 0x00000020 : 0) | ((((1)) ? (_Bool)1 : (_Bool)0) ? 0x00000080 : 0) | ((((1)) ? (_Bool)1 : (_Bool)0) ? 0x00000040 : 0) | ((sizeof("" "v" "5" "." "22" "." "0" "")-1) > 0x0000001F ? (Perl_croak_nocontext("panic: handshake overflow"), 0x0000001F) : (sizeof("" "v" "5" "." "22" "." "0" "")-1))), ((PerlInterpreter *)pthread_getspecific(PL_thr_key)), "Socket6.c", "v" "5" "." "22" "." "0", "0.27"); SV **mark = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_base) + ax; SV **sp = (((PerlInterpreter *)pthread_getspecific(PL_thr_key))->Istack_sp); I32 items = (I32)(sp - mark);




    const char* file = "Socket6.c";


    ((void)sizeof(file));

    ((void)sizeof(cv));
    ((void)sizeof(items));







        Perl_newXS_deffile(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), "Socket6::constant",XS_Socket6_constant);
        Perl_newXS_deffile(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), "Socket6::gethostbyname2",XS_Socket6_gethostbyname2);
        Perl_newXS_deffile(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), "Socket6::inet_pton",XS_Socket6_inet_pton);
        Perl_newXS_deffile(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), "Socket6::inet_ntop",XS_Socket6_inet_ntop);
        Perl_newXS_deffile(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), "Socket6::pack_sockaddr_in6",XS_Socket6_pack_sockaddr_in6);
        Perl_newXS_deffile(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), "Socket6::pack_sockaddr_in6_all",XS_Socket6_pack_sockaddr_in6_all);
        Perl_newXS_deffile(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), "Socket6::unpack_sockaddr_in6",XS_Socket6_unpack_sockaddr_in6);
        Perl_newXS_deffile(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), "Socket6::unpack_sockaddr_in6_all",XS_Socket6_unpack_sockaddr_in6_all);
        Perl_newXS_deffile(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), "Socket6::in6addr_any",XS_Socket6_in6addr_any);
        Perl_newXS_deffile(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), "Socket6::in6addr_loopback",XS_Socket6_in6addr_loopback);
        Perl_newXS_deffile(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), "Socket6::getaddrinfo",XS_Socket6_getaddrinfo);
        Perl_newXS_deffile(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), "Socket6::getnameinfo",XS_Socket6_getnameinfo);
        Perl_newXS_deffile(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), "Socket6::gai_strerror",XS_Socket6_gai_strerror);
        Perl_newXS_deffile(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), "Socket6::getipnodebyname",XS_Socket6_getipnodebyname);
        Perl_newXS_deffile(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), "Socket6::getipnodebyaddr",XS_Socket6_getipnodebyaddr);







    Perl_xs_boot_epilog(((PerlInterpreter *)pthread_getspecific(PL_thr_key)), ax);

}
