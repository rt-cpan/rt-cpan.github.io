diff --git a/lib/Convert/NLS_DATE_FORMAT.pm b/lib/Convert/NLS_DATE_FORMAT.pm
index f114efd..30b3f20 100644
--- a/lib/Convert/NLS_DATE_FORMAT.pm
+++ b/lib/Convert/NLS_DATE_FORMAT.pm
@@ -71,20 +71,36 @@ our @formats = (
 my %formats = generate_formats();
 
 sub oracle2posix {
-    my $oracle_format = shift;
-    my $posix_format = $oracle_format;
-    my $c = 0;
-    while (my $key = $formats[$c++]) {
-        my $value = $formats[$c++];
-	if ($value) {
-	    if ($key =~ m/^[ap]m$/i) {
-		$posix_format =~ s/(?<!%)$key/$value/g;
-	    } else {
-		$posix_format =~ s/(?<!%)$key/$value/gi;
-	    }
-	}
+    # oracle format uses double quotes for
+    # escaping
+    return join '', 
+            map { _oracle2posix( $_ ) } 
+            split /(".*?")/, shift;
+}
+
+# convert a bit that is either escaped or not
+sub _oracle2posix {
+    my $string = shift;
+
+    # escaped, strip the quotes and return as-is
+    return $string if $string =~ s/^"(.*?)"$/$1/;
+
+    for my $i ( 0..$#formats/2 ) {
+        my ( $key, $value ) = @formats[ 2* $i, 2*$i + 1 ];
+
+        $key = qr/$key/i unless $key =~ m/^[ap]m$/i;
+
+        if ( $string =~ /(?<!%)$key/ ) {
+            if ( $value ) {
+                $string =~ s/(?<!%)$key/$value/g;
+            }
+            else {
+                warn "Oracle format '$key' has no POSIX equivalent\n";
+            }
+        }
     }
-    return $posix_format;
+
+    return $string;
 }
 
 sub posix2oracle {
diff --git a/t/oracle2posix.t b/t/oracle2posix.t
index ca32ef0..5f3dbbb 100644
--- a/t/oracle2posix.t
+++ b/t/oracle2posix.t
@@ -1,12 +1,6 @@
-# Before `make install' is performed this script should be runnable with
-# `make test'. After `make install' it should work as `perl Convert-NLS_DATE_FORMAT.t'
-
-#########################
-
-# change 'tests => 1' to 'tests => last_test_to_print';
+use Test::More;
+use Convert::NLS_DATE_FORMAT;
 
-use Test;
-BEGIN {
 our %tests = (
     'YYYY-MM-DD HH24:MI:SS TZR'    => '%Y-%m-%d %H:%M:%S %Z',
     'YYYY-MM-DD HH24:MI:SS TZHTZM' => '%Y-%m-%d %H:%M:%S %z',
@@ -25,16 +19,17 @@ our %tests = (
     'DD-MON-RR HH.MI.SSXFF AM'     => '%d-%b-%y %I.%M.%S.%6N %p',
     'DD-MON-RR HH.MI.SSXFF3 AM'    => '%d-%b-%y %I.%M.%S.%3N %p',
 );
-};
-BEGIN { plan tests => scalar(keys %tests) + 1 };
-use Convert::NLS_DATE_FORMAT;
-ok(1); # If we made it this far, we're ok.
 
-#########################
+plan tests => scalar(keys %tests) + 3;
 
-# Insert your test code below, the Test::More module is use()ed here so read
-# its man page ( perldoc Test::More ) for help writing this test script.
+pass; # If we made it this far, we're ok.
 
 while (my ($nls, $strf) = each %tests) {
-    ok(Convert::NLS_DATE_FORMAT::oracle2posix($nls), $strf, $nls);
+    is Convert::NLS_DATE_FORMAT::oracle2posix($nls) => $strf, $nls;
 }
+
+is Convert::NLS_DATE_FORMAT::oracle2posix( 'YEAR-MM-DD"T"HH24:MI:SS' ),
+    'YEAR-%m-%dT%H:%M:%S', "using YEAR";
+
+is Convert::NLS_DATE_FORMAT::oracle2posix( 'YYYY-MM-DD"T"HH24:MI:SS' ),
+    '%Y-%m-%dT%H:%M:%S', "escaped character";
