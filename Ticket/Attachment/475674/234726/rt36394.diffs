diff -ru POE-1.0002/CHANGES POE-1.0002.crf/CHANGES
--- POE-1.0002/CHANGES	2008-05-11 16:31:53.000000000 -0600
+++ POE-1.0002.crf/CHANGES	2008-06-20 07:21:36.000000000 -0600
@@ -275,7 +275,7 @@
     to "gracefully" die at the end of _stop's dispatch.
     
     SIGDIE propagation follows the normal rules with one new addition:
-    The signal also proragates from the target session upwards through
+    The signal also propagates from the target session upwards through
     parent, grandparent, and so on. It will not be dispatched to children
     of ancestor sessions. It will not be dispatched to POE::Kernel
     itself.
@@ -295,7 +295,7 @@
   poe/t/20_resources/00_base/filehandles.pm M;
   poe/t/10_units/02_pipes/03_twoway.t M
 
-    Patch from Martin Ferrari to fix tests not honouring the "don't use
+    Patch from Martin Ferrari to fix tests not honoring the "don't use
     the network" flag. RT #33276 
 
   2008-02-20 10:18:36 (r2272) by bingosnet; poe/lib/POE/Filter/HTTPD.pm M
@@ -387,7 +387,7 @@
 
   2007-12-08 02:27:54 (r2257) by gwyn17; poe/lib/POE.pm M
 
-    Mid-sized documenation update
+    Mid-sized documentation update
 
   2007-12-03 06:45:05 (r2256) by rcaputo; poe/lib/POE/Session.pm M
 
Only in POE-1.0002.crf: CHANGES.bak
diff -ru POE-1.0002/examples/create.perl POE-1.0002.crf/examples/create.perl
--- POE-1.0002/examples/create.perl	2006-09-07 22:55:54.000000000 -0600
+++ POE-1.0002.crf/examples/create.perl	2008-06-20 07:23:21.000000000 -0600
@@ -22,7 +22,7 @@
 # This section defines the event handler (or state) subs for the
 # sessions that this program calls "child" sessions.  Each sub does
 # just one thing, possibly passing execution to other event handlers
-# through one of the supported event-passing mechanims.
+# through one of the supported event-passing mechanisms.
 
 #------------------------------------------------------------------------------
 # Newly created sessions are not ready to run until the kernel
Only in POE-1.0002.crf/examples: create.perl.bak
diff -ru POE-1.0002/examples/sessions.perl POE-1.0002.crf/examples/sessions.perl
--- POE-1.0002/examples/sessions.perl	2006-09-07 22:55:54.000000000 -0600
+++ POE-1.0002.crf/examples/sessions.perl	2008-06-20 07:30:00.000000000 -0600
@@ -26,7 +26,7 @@
 # This section defines the event handler (or state) subs for the
 # sessions that this program calls "child" sessions.  Each sub does
 # just one thing, possibly passing execution to other event handlers
-# through one of the supported event-passing mechanims.
+# through one of the supported event-passing mechanisms.
 
 #------------------------------------------------------------------------------
 # Newly created sessions are not ready to run until the kernel
Only in POE-1.0002.crf/examples: sessions.perl.bak
diff -ru POE-1.0002/examples/thrash.perl POE-1.0002.crf/examples/thrash.perl
--- POE-1.0002/examples/thrash.perl	2006-09-07 22:55:54.000000000 -0600
+++ POE-1.0002.crf/examples/thrash.perl	2008-06-20 07:23:39.000000000 -0600
@@ -28,7 +28,7 @@
 my $server_port = 31415;
 
 ###############################################################################
-# This is a single client session.  It uses two separater wheels: a
+# This is a single client session.  It uses two separator wheels: a
 # SocketFactory to establish a connection, and a ReadWrite to process
 # data once the connection is made
 
@@ -190,7 +190,7 @@
 
   # Start five clients.  NOTE: This would not work if clients used
   # IO::Socket to connect to the server, because IO::Socket's connect
-  # blocks.  It would wait for the server to accept a connectino
+  # blocks.  It would wait for the server to accept a connecting
   # before continuing, which would never happen since this loop is
   # holding up the event queue.  The program can only get away with
   # this loop because SocketFactory connections do not block.
Only in POE-1.0002.crf/examples: thrash.perl.bak
diff -ru POE-1.0002/lib/POE/Component/Client/TCP.pm POE-1.0002.crf/lib/POE/Component/Client/TCP.pm
--- POE-1.0002/lib/POE/Component/Client/TCP.pm	2007-08-18 18:59:35.000000000 -0600
+++ POE-1.0002.crf/lib/POE/Component/Client/TCP.pm	2008-06-20 07:14:43.000000000 -0600
@@ -457,7 +457,7 @@
 =item new
 
 The new() method can accept quite a lot of parameters.  It will return
-the session ID of the accecptor session.  One must use callbacks to 
+the session ID of the acceptor session.  One must use callbacks to 
 check for errors rather than the return value of new().
 
 =back
Only in POE-1.0002.crf/lib/POE/Component/Client: TCP.pm.bak
diff -ru POE-1.0002/lib/POE/Component/Server/TCP.pm POE-1.0002.crf/lib/POE/Component/Server/TCP.pm
--- POE-1.0002/lib/POE/Component/Server/TCP.pm	2007-08-18 18:59:35.000000000 -0600
+++ POE-1.0002.crf/lib/POE/Component/Server/TCP.pm	2008-06-20 07:14:20.000000000 -0600
@@ -484,7 +484,7 @@
     }
 }
 
-# Test if a Filter can be loaded, return sucess or failure
+# Test if a Filter can be loaded, return success or failure
 sub _test_filter {
     my $filter = shift;
     my $eval = eval {
@@ -654,7 +654,7 @@
 =item new
 
 The new() method can accept quite a lot of parameters.  It will return
-the session ID of the accecptor session.  One must use callbacks to
+the session ID of the acceptor session.  One must use callbacks to
 check for errors rather than the return value of new().
 
 POE::Component::Server::TCP supplies common defaults for most
@@ -929,7 +929,7 @@
 =item Concurrency => SCALAR
 
 Controls the number of connections that may be open at the same time.
-Defaults to -1, which means unlimited number of simutaneous connections.
+Defaults to -1, which means unlimited number of simultaneous connections.
 0 means no connections.  This value may be set via the
 C<set_concurrency> event, see L<EVENTS>.
 
Only in POE-1.0002.crf/lib/POE/Component/Server: TCP.pm.bak
diff -ru POE-1.0002/lib/POE/Filter/Reference.pm POE-1.0002.crf/lib/POE/Filter/Reference.pm
--- POE-1.0002/lib/POE/Filter/Reference.pm	2008-05-04 02:02:09.000000000 -0600
+++ POE-1.0002.crf/lib/POE/Filter/Reference.pm	2008-06-20 07:05:31.000000000 -0600
@@ -370,7 +370,7 @@
 
 =head1 AUTHORS & COPYRIGHTS
 
-The Reference filter was contributed by Arturn Bergman, with changes
+The Reference filter was contributed by Artur Bergman, with changes
 by Philip Gwyn.
 
 Please see L<POE> for more information about authors and contributors.
Only in POE-1.0002.crf/lib/POE/Filter: Reference.pm.bak
diff -ru POE-1.0002/lib/POE/Filter.pm POE-1.0002.crf/lib/POE/Filter.pm
--- POE-1.0002/lib/POE/Filter.pm	2008-05-04 02:02:09.000000000 -0600
+++ POE-1.0002.crf/lib/POE/Filter.pm	2008-06-20 06:48:18.000000000 -0600
@@ -166,7 +166,7 @@
 
 =head2 get ARRAYREF
 
-get() is the greedy form of get_one().  It accpets an array reference
+get() is the greedy form of get_one().  It accepts an array reference
 containing unprocessed stream chunks, and it adds that data to the
 filter's internal buffer.  It then parses as many full records as
 possible from the buffer and returns them in another array reference.
diff -ru POE-1.0002/lib/POE/Kernel.pm POE-1.0002.crf/lib/POE/Kernel.pm
--- POE-1.0002/lib/POE/Kernel.pm	2008-04-28 12:10:16.000000000 -0600
+++ POE-1.0002.crf/lib/POE/Kernel.pm	2008-06-20 07:13:05.000000000 -0600
@@ -932,7 +932,7 @@
         }
       }
 
-      # Step 2: Propagate the signal to the explict watchers in the
+      # Step 2: Propagate the signal to the explicit watchers in the
       # child tree.  Ensure the full tree is touched regardless
       # whether there are explicit watchers.
 
@@ -2707,7 +2707,7 @@
 
 =item Aliases.
 
-Session aliases are an application-controled way of addressing a
+Session aliases are an application-controlled way of addressing a
 session.  Aliases act as passive event watchers.  As long as a session
 has an alias, some other session may send events to that session by
 that name.  Aliases keep sessions alive as long as a process has
@@ -2784,7 +2784,7 @@
 
 An application creates an event with L</post>, L</yield>, L</call> or
 even L</signal>.  POE::Kernel creates events in response external
-stimulous (signals, select, etc).
+stimulus (signals, select, etc).
 
 TODO - discuss the POE::Kernel queue
 
@@ -2918,7 +2918,7 @@
 =head3 ID
 
 ID() returns the kernel's unique identifier.  Every POE::Kernel
-instance is assigned a (hopefully) globaly unique ID at birth.
+instance is assigned a (hopefully) globally unique ID at birth.
 
   % perl -wl -MPOE -e 'print $poe_kernel->ID'
   poerbook.local-46c89ad800000e21
@@ -3066,7 +3066,7 @@
     }
   );
 
-As with post(), yield() returns right away, and the enquered
+As with post(), yield() returns right away, and the enqueued
 EVENT_NAME is dispatched later.  This may be confusing if you're
 already familiar with threading.
 
@@ -3137,7 +3137,7 @@
 
 Timer interfaces are further divided into two groups.  One group identifies
 timers by the names of their associated events.  Another group identifies
-timers by a unique identifyer returned by the timer constructors.
+timers by a unique identifier returned by the timer constructors.
 Technically, the two are both name-based, but the "identifier-based" timers
 provide a second, more specific handle to identify individual timers.
 
@@ -3609,7 +3609,7 @@
   );
 
 Kernels also maintain a global session namespace or dictionary from which
-may be used to map a symblic aliases to a session. Once an alias is mapping
+may be used to map a symbolic aliases to a session. Once an alias is mapping
 has been created, that alias may be used to refer to the session wherever a
 session may be specified.
 
@@ -3633,7 +3633,7 @@
 
 =head3 alias_set ALIAS
 
-alias_set() maps an ALIAS in POE::Kernel's dictonary to the
+alias_set() maps an ALIAS in POE::Kernel's dictionary to the
 current session. The ALIAS may then be used nearly everywhere a session
 reference, stringified reference, or ID is expected.
 
@@ -3727,7 +3727,7 @@
 =head3 ID_session_to_id SESSION_REFERENCE
 
 ID_session_to_id() converts a blessed or stringified SESSION_REFERENCE
-into a session ID.  It's more practical for strigified references, as
+into a session ID.  It's more practical for stringified references, as
 programs can call the POE::Session ID() method on the blessed ones.
 These statements are equivalent:
 
@@ -3873,7 +3873,7 @@
 
 select_pause_write() pauses a FILE_HANDLE output watcher the same way
 select_pause_read() does for input.  Please see select_pause_read()
-for further discusssion.
+for further discussion.
 
 TODO - Practical example here.
 
@@ -4062,7 +4062,7 @@
 
 =item 4
 
-The parent session receves _child ('create'), the new
+The parent session receives _child ('create'), the new
 session reference, and the new session's _start's return value.
 
 =item 5
@@ -4177,13 +4177,13 @@
 
 =item EPERM ("Operation not permitted").
 
-The current session is alreay a
+The current session is already a
 child of POE::Kernel, so it may not be detached.
 
 =back
 
 detach_child() will generate L</_parent> and/or L</_child> events to the
-appropriate sessions.  See L</"Session Manaement Events"> for a detailed
+appropriate sessions.  See L</"Session Management Events"> for a detailed
 explanation of these events.  See
 L<above|/"When a session is detached from its parent:">
 for the order the events are generated.
@@ -4295,7 +4295,7 @@
 POE::Kernel is the parent of sessions 2 and 3.  Session 2 is the
 parent of sessions 4 and 5.  And session 3 is the parent of 6 and 7.
 
-A signal sent to Session 2 may also be dispatched to sessionl 4 and 5
+A signal sent to Session 2 may also be dispatched to session 4 and 5
 because they are 2's children.  Sessions 4 and 5 will only receive the
 signal if they have registered the appropriate watcher.  If the signal is
 terminal, and none of the signal watchers in sessions 2, 4 and 5 called
@@ -4386,7 +4386,7 @@
 C<DIE> signal.
 
 When exception handling is enabled (the default), POE::Kernel wraps state
-invocation in C<eval{}>.  If the event handler raises an exception, generaly
+invocation in C<eval{}>.  If the event handler raises an exception, generally
 with C<die>, POE::Kernel will dispatch a C<DIE> signal to the event's
 destination session.
 
@@ -4416,7 +4416,7 @@
 
 =item from_state
 
-State from which the orignal event was sent.
+State from which the original event was sent.
 That is, C<$_[CALLER_STATE]> in the function that died.
 
 =item file
@@ -4431,7 +4431,7 @@
 
 =back
 
-I<Note that the preceeding discussion assumes you are using
+I<Note that the preceding discussion assumes you are using
 L<POE::Session|POE::Session>'s call semantics.>
 
 Note that the C<DIE> signal is sent to the session that raised the
@@ -4578,7 +4578,7 @@
 =head3 signal SESSION, SIGNAL_NAME [, ARGS_LIST]
 
 signal() posts a SIGNAL_NAME signal to a specific SESSION with an
-optional ARGS_LIST that will be passed to every intersted handler.  As
+optional ARGS_LIST that will be passed to every interested handler.  As
 mentioned elsewhere, the signal may be delivered to SESSION's
 children, grandchildren, and so on.  And if SESSION is the POE::Kernel
 itself, then all interested sessions will receive the signal.
@@ -4737,7 +4737,7 @@
 some cases, such as failing to handle a terminal signal.)
 
 Negative reference counters are legal.  They still must be incremented
-back to zero before a session is elegible for stopping.
+back to zero before a session is eligible for stopping.
 
   sub handle_request {
     # Among other things, hold a reference count on the sender.
@@ -4768,7 +4768,7 @@
     $_[KERNEL]->refcount_increment( $requester_id, "pending request");
   }
 
-The reqester's $_[SENDER]->ID is remembered and removed from the hear
+The requester's $_[SENDER]->ID is remembered and removed from the hear
 (lest there be memory leaks).  It's used to decrement the reference
 counter that was incremented at the start of the request.
 
@@ -4893,7 +4893,7 @@
 
 On a related note, POE will shut down if the widget in
 C<$poe_main_window> is destroyed.  This can be changed with POE::Kernel's
-C</signal_ui_destroy>() methode
+C</signal_ui_destroy>() method
 
 =head1 DEBUGGING POE AND PROGRAMS USING IT
 
@@ -4904,7 +4904,7 @@
 is, in most production cases.
 
 Traces are verbose reminders of what's going on within POE.  Each is
-prefixed with a four-character field describing the POE subsustem that
+prefixed with a four-character field describing the POE subsystem that
 generated it.
 
 Assertions (asserts) are quiet but deadly, both in performance (they
@@ -4996,7 +4996,7 @@
 ASSERT_RETVALS upgrades failure codes from POE::Kernel's methods from
 advisory return values to fatal errors.  Most programmers don't check
 the values these methods return, so ASSERT_RETVALS is a quick way to
-validate one's assumption that all's correct.
+validate one's assumption that all is correct.
 
 Prefix: <rv>
 
@@ -5080,7 +5080,7 @@
 
 TRACE_PROFILE enables basic profiling within POE's event dispatcher.
 When enabled, POE counts the number of times each event is dispatched.
-At the end of a run, POE will display a table fo each event name and
+At the end of a run, POE will display a table for each event name and
 its dispatch count.
 
 See TRACE_STATISTICS for more profiling.
Only in POE-1.0002.crf/lib/POE: Kernel.pm.bak
diff -ru POE-1.0002/lib/POE/Loop.pm POE-1.0002.crf/lib/POE/Loop.pm
--- POE-1.0002/lib/POE/Loop.pm	2008-03-10 00:08:04.000000000 -0600
+++ POE-1.0002.crf/lib/POE/Loop.pm	2008-06-20 07:00:01.000000000 -0600
@@ -350,7 +350,7 @@
 frequent use cases.  As mentioned above, NEXT_EVENT_TIME is in UNIX
 epoch time and may have subsecond accuracy.
 
-loop_resume_time_watcher() is used by bridges that set tiem watchers
+loop_resume_time_watcher() is used by bridges that set them watchers
 in the underlying event loop.  For example, POE::Loop::Gtk implements
 it this way:
 
@@ -530,7 +530,7 @@
 POE::Kernel, then that will be used.  End of story.
 
 If one isn't, POE::Kernel searches for an external event loop module
-in %INC.  For each module in %INC, cooresponding POE::XS::Loop and
+in %INC.  For each module in %INC, corresponding POE::XS::Loop and
 POE::Loop subclasses are tried.
 
 For example, if IO::Poll is loaded, POE::Kernel tries
Only in POE-1.0002.crf/lib/POE: Loop.pm.bak
diff -ru POE-1.0002/lib/POE/Resource/Signals.pm POE-1.0002.crf/lib/POE/Resource/Signals.pm
--- POE-1.0002/lib/POE/Resource/Signals.pm	2008-04-02 10:35:06.000000000 -0600
+++ POE-1.0002.crf/lib/POE/Resource/Signals.pm	2008-06-20 07:02:58.000000000 -0600
@@ -99,7 +99,7 @@
 
   # Initialize this to a true value so our waitpid() loop can run at
   # least once.  Starts false when running in an Apache handler so our
-  # SIGCHLD hijinx don't interfere with the web server.
+  # SIGCHLD hijinks don't interfere with the web server.
   $kr_child_procs = exists($INC{'Apache.pm'}) ? 0 : ( USE_SIGCHLD ? 0 : 1 );
 
   $poe_kernel->[KR_SIGNALS] = \%kr_signals;
Only in POE-1.0002.crf/lib/POE/Resource: Signals.pm.bak
diff -ru POE-1.0002/lib/POE/Wheel/ReadLine.pm POE-1.0002.crf/lib/POE/Wheel/ReadLine.pm
--- POE-1.0002/lib/POE/Wheel/ReadLine.pm	2008-05-04 02:02:09.000000000 -0600
+++ POE-1.0002.crf/lib/POE/Wheel/ReadLine.pm	2008-06-20 07:35:46.000000000 -0600
@@ -730,7 +730,7 @@
   }
 
   # Terminal size.
-  # We initialise the values once on startup,
+  # We initialize the values once on startup,
   # and then from then on, we check them on every entry into
   # the input state engine (so that we have valid values) and
   # before handing control back to the user (so that they get
Only in POE-1.0002.crf/lib/POE/Wheel: ReadLine.pm.bak
diff -ru POE-1.0002/lib/POE/Wheel/Run.pm POE-1.0002.crf/lib/POE/Wheel/Run.pm
--- POE-1.0002/lib/POE/Wheel/Run.pm	2008-04-02 10:37:15.000000000 -0600
+++ POE-1.0002.crf/lib/POE/Wheel/Run.pm	2008-06-20 07:19:25.000000000 -0600
@@ -355,7 +355,7 @@
     close $stderr_read if defined $stderr_read;
 
     # Win32 needs the stdio handles closed before they're reopened
-    # because the standard handles aren't dup'd.
+    # because the standard handles aren't duped.
 
     # Redirect STDIN from the read end of the stdin pipe.
     close STDIN if POE::Kernel::RUNNING_IN_HELL;
@@ -391,7 +391,7 @@
       # based on the true win32 handles For the exec these get
       # remembered, so manipulation of STDIN/OUT/ERR is not enough.
       # Only necessary for the exec, as Perl CODE subroutine goes
-      # through 0/1/2 which are correct.  But ofcourse that coderef
+      # through 0/1/2 which are correct.  But of course that coderef
       # might invoke exec, so better do it regardless.
       # HACK: Using Win32::Console as nothing else exposes SetStdHandle
       Win32::Console::_SetStdHandle(
Only in POE-1.0002.crf/lib/POE/Wheel: Run.pm.bak
diff -ru POE-1.0002/lib/POE/Wheel.pm POE-1.0002.crf/lib/POE/Wheel.pm
--- POE-1.0002/lib/POE/Wheel.pm	2008-03-10 00:08:04.000000000 -0600
+++ POE-1.0002.crf/lib/POE/Wheel.pm	2008-06-20 07:15:51.000000000 -0600
@@ -210,7 +210,7 @@
 put() sends one or more RECORDs to the wheel for transmitting.  Each
 RECORD is serialized by the wheel's associated POE::Filter so that it
 will be ready to transmit.  The serialized stream may be transmitted
-immeditately by the wheel's POE::Driver object, or it may be buffered
+immediately by the wheel's POE::Driver object, or it may be buffered
 in the POE::Driver until it can be flushed to the output filehandle.
 
 Most wheels use POE::Filter::Line and POE::Driver::SysRW by default,
@@ -221,7 +221,7 @@
 These functions expose information that is common to all wheels.  They
 are not methods, so they should B<not> be called as methods.
 
-  my $new_wheel_id = POE::Wheel::allcoate_wheel_id();
+  my $new_wheel_id = POE::Wheel::allocate_wheel_id();
   POE::Wheel::free_wheel_id($new_wheel_id);
 
 =head3 allocate_wheel_id
@@ -288,7 +288,7 @@
 L<POE::Driver> - A base class for file access drivers that POE::Wheel
 may use.
 
-L<POE::Filter> - A base class for data parsers and marshallers that
+L<POE::Filter> - A base class for data parsers and marshalers that
 POE::Wheel may use.
 
 L<POE::Wheel::Curses> - Non-blocking input for Curses.
Only in POE-1.0002.crf/lib/POE: Wheel.pm.bak
diff -ru POE-1.0002/lib/POE.pm POE-1.0002.crf/lib/POE.pm
--- POE-1.0002/lib/POE.pm	2008-05-11 16:29:45.000000000 -0600
+++ POE-1.0002.crf/lib/POE.pm	2008-06-20 06:57:16.000000000 -0600
@@ -270,7 +270,7 @@
 
 L<POE::Queue|POE::Queue>, L<POE::Resource|POE::Resource>, L<POE::Loop|POE::Loop>, and L<POE::API|POE::API> document the
 concepts and sometimes the standard interfaces behind multiple
-subclasess.  You're encouraged to have a look.
+subclasses.  You're encouraged to have a look.
 
 =head2 Helper Classes
 
@@ -353,7 +353,7 @@
 
 One of POE's design goals is to be as portable as possible.  That's
 why it's written in "Plain Perl".  XS versions of POE modules are
-avaliable as third-party distributions.  Parts of POE that require
+available as third-party distributions.  Parts of POE that require
 nonstandard libraries are optional, and not having those libraries
 should not prevent POE from installing.
 
@@ -366,7 +366,7 @@
 POE has also been tested on Windows XP, using the latest version of
 ActiveState Perl and Cygwin Perl.  Support for the Neopolitan Perls
 (Vanilla, Strawberry and Chocolate) is still early, but there should
-be no major showstoppers.
+be no major show stoppers.
 
 OS/2 and MacOS 9 have been reported to work in the past, but nobody
 seems to be testing there anymore.  Reports and patches are still
Only in POE-1.0002.crf/lib: POE.pm.bak
diff -ru POE-1.0002/mylib/Devel/Null.pm POE-1.0002.crf/mylib/Devel/Null.pm
--- POE-1.0002/mylib/Devel/Null.pm	2006-05-01 08:28:26.000000000 -0600
+++ POE-1.0002.crf/mylib/Devel/Null.pm	2008-06-20 07:37:43.000000000 -0600
@@ -15,7 +15,7 @@
 use Carp;
 
 # This bit traces execution immediately before a given condition.
-# It's used to find out where in hell something went worng.
+# It's used to find out where in hell something went wrong.
 my @trace = ("no step") x 16;
 
 sub DB {
Only in POE-1.0002.crf/mylib/Devel: Null.pm.bak
diff -ru POE-1.0002/mylib/Makefile-5005.pm POE-1.0002.crf/mylib/Makefile-5005.pm
--- POE-1.0002/mylib/Makefile-5005.pm	2008-03-10 02:32:45.000000000 -0600
+++ POE-1.0002.crf/mylib/Makefile-5005.pm	2008-06-20 07:22:38.000000000 -0600
@@ -22,7 +22,7 @@
 open(TOUCH, ">>CHANGES") and close TOUCH;
 open(TOUCH, ">>META.yml") and close TOUCH;
 
-### Some advisory dependancy testing.
+### Some advisory dependency testing.
 
 sub check_for_modules {
   my ($dep_type, @modules) = @_;
Only in POE-1.0002.crf/mylib: Makefile-5005.pm.bak
diff -ru POE-1.0002/t/10_units/03_base/15_kernel_internal.t POE-1.0002.crf/t/10_units/03_base/15_kernel_internal.t
--- POE-1.0002/t/10_units/03_base/15_kernel_internal.t	2006-11-02 13:21:52.000000000 -0700
+++ POE-1.0002.crf/t/10_units/03_base/15_kernel_internal.t	2008-06-20 07:26:13.000000000 -0600
@@ -32,7 +32,7 @@
 BEGIN { use_ok("POE::Kernel"); }
 
 # The expected size of the queue when the kernel is idle (without any
-# user generated/requesed events)
+# user generated/requested events)
 {
   my $base_size = $poe_kernel->_idle_queue_size();
   $poe_kernel->_idle_queue_grow();
Only in POE-1.0002.crf/t/10_units/03_base: 15_kernel_internal.t.bak
diff -ru POE-1.0002/t/20_resources/00_base/events.pm POE-1.0002.crf/t/20_resources/00_base/events.pm
--- POE-1.0002/t/20_resources/00_base/events.pm	2006-11-02 13:21:58.000000000 -0700
+++ POE-1.0002.crf/t/20_resources/00_base/events.pm	2008-06-20 07:25:28.000000000 -0600
@@ -15,7 +15,7 @@
 
 # This subsystem is still very closely tied to POE::Kernel, so we
 # can't call initialize ourselves.  TODO Separate it, if possible,
-# enough to make this feasable.
+# enough to make this feasible.
 
 { # Create a new event, and verify that it's good.
 
Only in POE-1.0002.crf/t/20_resources/00_base: events.pm.bak
diff -ru POE-1.0002/t/20_resources/00_base/filehandles.pm POE-1.0002.crf/t/20_resources/00_base/filehandles.pm
--- POE-1.0002/t/20_resources/00_base/filehandles.pm	2008-02-26 22:01:05.000000000 -0700
+++ POE-1.0002.crf/t/20_resources/00_base/filehandles.pm	2008-06-20 07:25:51.000000000 -0600
@@ -39,7 +39,7 @@
 
 plan tests => 192;
 
-### Factoried out common tests
+### Factored out common tests
 
 # 1 subtest
 sub verify_handle_structure {
Only in POE-1.0002.crf/t/20_resources/00_base: filehandles.pm.bak
diff -ru POE-1.0002/t/30_loops/00_base/wheel_readwrite.pm POE-1.0002.crf/t/30_loops/00_base/wheel_readwrite.pm
--- POE-1.0002/t/30_loops/00_base/wheel_readwrite.pm	2006-11-02 13:22:01.000000000 -0700
+++ POE-1.0002.crf/t/30_loops/00_base/wheel_readwrite.pm	2008-06-20 07:25:16.000000000 -0600
@@ -17,7 +17,7 @@
       set_high_mark set_low_mark get_driver_out_octets get_driver_out_messages
       ID pause_input resume_input shutdown_input shutdown_output ));
 
-# checks new() fails appropiately
+# checks new() fails appropriately
 sub test_new {
   my ($name, @args) = @_;
   eval { POE::Wheel::ReadWrite->new(@args) };
Only in POE-1.0002.crf/t/30_loops/00_base: wheel_readwrite.pm.bak
