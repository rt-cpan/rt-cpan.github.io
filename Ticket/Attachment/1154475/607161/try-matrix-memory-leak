#!/usr/bin/perl -w
use strict;
use Math::GSL::Matrix qw(:all);

#
# This program demonstrates a memory leak if the underlying GSL Matrix
# object isn't freed.  Each pass through the main loop leaks about another
# 8 megabytes; this can be seen by watching the Perl process size.
#

# prototypes
sub foo();

	for (my $i = 0 ; $i < 100000 ; ++$i)
	{
	print "allocating another 1000 x 1000 matrix\n";
	foo();
	sleep(1);
	}

########################################

sub foo()
{
my $M = Math::GSL::Matrix->new(1000, 1000);

# Do we need to explicitly free the underlying GSL matrix object
# in order to avoid a memory leak?  Or does this happen automagically
# when Perl garbage-collects $M (some time after goes out of scope at
# the end of this function)
}
