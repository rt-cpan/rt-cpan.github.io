diff -ruN Class-Autouse-1.24/t/05_base.t Class-Autouse-1.24p1/t/05_base.t
--- Class-Autouse-1.24/t/05_base.t	2006-01-13 07:30:10.000000000 +0100
+++ Class-Autouse-1.24p1/t/05_base.t	2006-01-16 13:52:22.539678000 +0100
@@ -16,7 +16,7 @@
 	}
 }
 
-use Test::More tests => 4;
+use Test::More tests => 5;
 use Class::Autouse ();
 
 
@@ -36,7 +36,12 @@
 #####################################################################
 # Autoloading BOTH of them may fail (nope...)
 
+# uncomment the following line to make the test pass
+# require baseD;
+
 use_ok( 'Class::Autouse' => 'baseC', 'baseD' );
 is( baseD->dummy, 3, 'Calling method in baseD interacts with baseC correctly' );
 
+is( baseD->new->getC1, undef, 'Accessing fields of base class' );
+
 1;
diff -ruN Class-Autouse-1.24/t/modules/baseC.pm Class-Autouse-1.24p1/t/modules/baseC.pm
--- Class-Autouse-1.24/t/modules/baseC.pm	2006-01-13 07:30:10.000000000 +0100
+++ Class-Autouse-1.24p1/t/modules/baseC.pm	2006-01-16 13:47:11.938775000 +0100
@@ -1,5 +1,7 @@
 package baseC;
 
+use fields qw(C1 C2);
+
 sub dummy { 3 };
 
 1;
diff -ruN Class-Autouse-1.24/t/modules/baseD.pm Class-Autouse-1.24p1/t/modules/baseD.pm
--- Class-Autouse-1.24/t/modules/baseD.pm	2006-01-13 07:30:10.000000000 +0100
+++ Class-Autouse-1.24p1/t/modules/baseD.pm	2006-01-16 13:43:44.698114000 +0100
@@ -2,4 +2,16 @@
 
 use base 'baseC';
 
+use fields qw(D1 D2);
+
+sub new
+{
+  return fields::new(shift);
+}
+
+sub getC1
+{
+  shift->{C1};
+}
+
 1;
