diff --git a/lib/Win32/TieRegistry.pm b/lib/Win32/TieRegistry.pm
index 19f9fdf..9791175 100644
--- a/lib/Win32/TieRegistry.pm
+++ b/lib/Win32/TieRegistry.pm
@@ -2523,14 +2523,14 @@ Examples:
 
 =item $object_ref= $obj_or_hash_ref->ObjectRef
 
-For a simple object, just returns itself [C<$obj == $obj->ObjectRef>].
+For a simple object, just returns itself [C<< $obj == $obj->ObjectRef >>].
 
 For a reference to a tied hash [if it is also an object], C<ObjectRef>
 returns the simple object that the hash is tied to.
 
 This is primarilly useful when debugging since typing C<x $Registry>
 will try to display your I<entire> registry contents to your screen.
-But the debugger command C<x $Registry->ObjectRef> will just dump
+But the debugger command C<< x $Registry->ObjectRef >> will just dump
 the implementation details of the underlying object to your screen.
 
 =item Flush( $bFlush )
@@ -2784,9 +2784,9 @@ C<Handle()> return C<"NONE">.
 
 Returns a string describing the path of key names to this
 Registry key.  The string is built so that if it were passed
-to C<$Registry->Open()>, it would reopen the same Registry key
+to C<< $Registry->Open() >>, it would reopen the same Registry key
 [except in the rare case where one of the key names contains
-C<$key->Delimiter>].
+C<< $key->Delimiter >>].
 
 =item Machine
 
@@ -2834,7 +2834,7 @@ object.  Used to promote a simple object into a combined object
 and hash ref.
 
 If already a reference to a tied hash [that is also an object],
-it just returns itself [C<$ref == $ref->TiedRef>].
+it just returns itself [C<< $ref == $ref->TiedRef >>].
 
 Mostly used internally.
 
@@ -3111,7 +3111,7 @@ items are the supported keys for this options hash:
 =item Delimiter
 
 Specifies the delimiter to be used to parse C<$subKey> and to be
-used in the new object.  Defaults to C<$key->Delimiter>.
+used in the new object.  Defaults to C<< $key->Delimiter >>.
 
 =item Access
 
@@ -3300,7 +3300,7 @@ to this "default" usage is that Perl does not support checking
 the module version when you use it.
 
 Alternately, you can specify a list of arguments on the C<use>
-line that will be passed to the C<Win32::TieRegistry->import()>
+line that will be passed to the C<< Win32::TieRegistry->import() >>
 method to control what items to import into your package.  These
 arguments fall into the following broad categories:
 
