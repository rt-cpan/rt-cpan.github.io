Description: fix spelling mistakes
Origin: vendor
Author: gregor herrmann <gregoa@debian.org>
Last-Update: 2018-01-20

--- a/lib/Syntax/Keyword/Try.pm
+++ b/lib/Syntax/Keyword/Try.pm
@@ -95,13 +95,13 @@
       STATEMENTS...
    }
 
-A C<catch> statement provides a block of code to the preceeding C<try>
+A C<catch> statement provides a block of code to the preceding C<try>
 statement that will be invoked in the case that the main block of code throws
 an exception. The C<catch> block can inspect the raised exception by looking
 in C<$@> in the usual way.
 
 Presence of this C<catch> statement causes any exception thrown by the
-preceeding C<try> block to be non-fatal to the surrounding code. If the
+preceding C<try> block to be non-fatal to the surrounding code. If the
 C<catch> block wishes to optionally handle some exceptions but not others, it
 can re-raise it (or another exception) by calling C<die> in the usual manner.
 
@@ -121,10 +121,10 @@
       STATEMENTS...
    }
 
-A C<finally> statement provides a block of code to the preceeding C<try>
+A C<finally> statement provides a block of code to the preceding C<try>
 statement (or C<try/catch> pair) which is executed afterwards, both in the
 case of a normal execution or a thrown exception. This code block may be used
-to provide whatever clean-up operations might be required by preceeding code.
+to provide whatever clean-up operations might be required by preceding code.
 
 Because it is executed during a stack cleanup operation, a C<finally {}> block
 may not cause the containing function to return, or to alter the return value
