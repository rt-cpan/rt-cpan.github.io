Description: spelling fixes
Origin: vendor
Author: gregor herrmann <gregoa@debian.org>
Last-Update: 2016-12-25

--- a/lib/Sah/SchemaR/rinci/function_meta.pm
+++ b/lib/Sah/SchemaR/rinci/function_meta.pm
@@ -186,7 +186,7 @@
 
 This module is automatically generated by Dist::Zilla::Plugin::Sah::Schemas during distribution build.
 
-A Sah::SchemaR::* module is useful if a client wants to quickly lookup the base type of a schema wihout having to do any extra resolving. With Sah::Schema::*, one might need to do several lookups if a schema is based on another schema, and so on. Compare for example L<Sah::Schema::poseven> vs L<Sah::SchemaR::poseven>, where in Sah::SchemaR::poseven one can immediately get that the base type is C<int>. Currently L<Perinci::Sub::Complete> uses Sah::SchemaR::* instead of Sah::Schema::* for reduced startup overhead when doing tab completion.
+A Sah::SchemaR::* module is useful if a client wants to quickly lookup the base type of a schema without having to do any extra resolving. With Sah::Schema::*, one might need to do several lookups if a schema is based on another schema, and so on. Compare for example L<Sah::Schema::poseven> vs L<Sah::SchemaR::poseven>, where in Sah::SchemaR::poseven one can immediately get that the base type is C<int>. Currently L<Perinci::Sub::Complete> uses Sah::SchemaR::* instead of Sah::Schema::* for reduced startup overhead when doing tab completion.
 
 =head1 HOMEPAGE
 
--- a/lib/Sah/SchemaR/rinci/meta.pm
+++ b/lib/Sah/SchemaR/rinci/meta.pm
@@ -74,7 +74,7 @@
 
 This module is automatically generated by Dist::Zilla::Plugin::Sah::Schemas during distribution build.
 
-A Sah::SchemaR::* module is useful if a client wants to quickly lookup the base type of a schema wihout having to do any extra resolving. With Sah::Schema::*, one might need to do several lookups if a schema is based on another schema, and so on. Compare for example L<Sah::Schema::poseven> vs L<Sah::SchemaR::poseven>, where in Sah::SchemaR::poseven one can immediately get that the base type is C<int>. Currently L<Perinci::Sub::Complete> uses Sah::SchemaR::* instead of Sah::Schema::* for reduced startup overhead when doing tab completion.
+A Sah::SchemaR::* module is useful if a client wants to quickly lookup the base type of a schema without having to do any extra resolving. With Sah::Schema::*, one might need to do several lookups if a schema is based on another schema, and so on. Compare for example L<Sah::Schema::poseven> vs L<Sah::SchemaR::poseven>, where in Sah::SchemaR::poseven one can immediately get that the base type is C<int>. Currently L<Perinci::Sub::Complete> uses Sah::SchemaR::* instead of Sah::Schema::* for reduced startup overhead when doing tab completion.
 
 =head1 HOMEPAGE
 
--- a/lib/Sah/SchemaR/rinci/result_meta.pm
+++ b/lib/Sah/SchemaR/rinci/result_meta.pm
@@ -56,7 +56,7 @@
 
 This module is automatically generated by Dist::Zilla::Plugin::Sah::Schemas during distribution build.
 
-A Sah::SchemaR::* module is useful if a client wants to quickly lookup the base type of a schema wihout having to do any extra resolving. With Sah::Schema::*, one might need to do several lookups if a schema is based on another schema, and so on. Compare for example L<Sah::Schema::poseven> vs L<Sah::SchemaR::poseven>, where in Sah::SchemaR::poseven one can immediately get that the base type is C<int>. Currently L<Perinci::Sub::Complete> uses Sah::SchemaR::* instead of Sah::Schema::* for reduced startup overhead when doing tab completion.
+A Sah::SchemaR::* module is useful if a client wants to quickly lookup the base type of a schema without having to do any extra resolving. With Sah::Schema::*, one might need to do several lookups if a schema is based on another schema, and so on. Compare for example L<Sah::Schema::poseven> vs L<Sah::SchemaR::poseven>, where in Sah::SchemaR::poseven one can immediately get that the base type is C<int>. Currently L<Perinci::Sub::Complete> uses Sah::SchemaR::* instead of Sah::Schema::* for reduced startup overhead when doing tab completion.
 
 =head1 HOMEPAGE
 
