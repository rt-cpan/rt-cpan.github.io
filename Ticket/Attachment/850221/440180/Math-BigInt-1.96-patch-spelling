diff -ur Math-BigInt-1.96-orig//BUGS Math-BigInt-1.96-spelling//BUGS
--- Math-BigInt-1.96-orig//BUGS	2010-09-03 17:08:51.000000000 +0200
+++ Math-BigInt-1.96-spelling//BUGS	2010-11-02 14:13:20.173072900 +0100
@@ -4,7 +4,7 @@
 * TODO BUGS:
   + implement test for the upgrading bug in bsub()
 
-* NaN handling in comparisations slightly broken. See also [perl #33106].
+* NaN handling in comparisons slightly broken. See also [perl #33106].
 
 * General:
   + BigInt can not the IEEE '-0'. Currently there are no plans to add this. If
@@ -13,7 +13,7 @@
 * BigFloat:
   + comparing (<=> or == or !=) a BigFloat to a BigInt don't work yet
   + new is first running the entire number trough _split, then again the parts
-    to construct BigInts. Could be a bit more optimzed.
+    to construct BigInts. Could be a bit more optimized.
   + fdiv() using F (fallback) mode does not work properly in all cases of
     local (aka $x's or $y's) A or P settings. Not definite test case yet, but
     it might calculate not enough digits to satisfy the rounding needs.
diff -ur Math-BigInt-1.96-orig//CHANGES Math-BigInt-1.96-spelling//CHANGES
--- Math-BigInt-1.96-orig//CHANGES	2010-09-28 06:36:09.000000000 +0200
+++ Math-BigInt-1.96-spelling//CHANGES	2010-11-02 14:24:08.859931800 +0100
@@ -12,8 +12,8 @@
 2001-07-09 v0.06 Tels
  * first release
 2001-07-15 v0.07 Tels
- * applied Philip Newtons speling and doc patch(s) 
- * accidentily had the old, slow mul() code in. Oups.
+ * applied Philip Newtons spelling and doc patch(s) 
+ * accidentally had the old, slow mul() code in. Oups.
  * fixed also a bug in that new code
  * also the speedup in mul() occurs with $x having lots of zeros, not $y.
  * first argument is always classname, so removed checks and shift
@@ -89,7 +89,7 @@
  * some cleanup of old code, added some more comments
 2002-08-21 v0.32 Tels
  * fixed bug in _rsft() that did not set result to 0 in some cases
- * _modinv() now works, thanx to the all-positive algorithmn
+ * _modinv() now works, thanx to the all-positive algorithm
  * much more tests in bigintc.t (taken over from FastCalc)
 2002-09-09 v0.33 Tels
  * _fac() keep $n as scalar if possible
@@ -271,13 +271,13 @@
  * added bfloor(), bceil()
 2001-07-09 v1.16 Tels
  * is_positive(), is_negative()
- * various pod fixes (overlong =item, speling erorrs etc)
+ * various pod fixes (overlong =item, spelling erorrs etc)
  * removed internal _set() and the tests for it
  * infinity support for fcmp(), fpow()
  * nailed the bug in fdiv() that caused fsqrt() to fail. fsqr() works now, too.
  * more tests 
 2001-07-15 v1.17 Tels
- * applied Philip Newtons speling and doc patch(s) 
+ * applied Philip Newtons spelling and doc patch(s) 
  * added bone()
  * tests for bnan() and bone()
 2001-08-02 v1.19 Tels
@@ -365,7 +365,7 @@
 2002-06-10 v1.34 Tels
  * upgrade used badd() instead of bmul() inside bmul() (again! arg!)
 2002-07-07 v1.35 Tels
- * bfround() used accidentily BigInt math; is now about 5.6 times faster for
+ * bfround() used accidentally BigInt math; is now about 5.6 times faster for
    small numbers
  * bdiv()/badd() etc skip objectify() if possible and are thus faster
  * doc for accuracy()/precision()
@@ -489,7 +489,7 @@
  * fix bug #21586: Incorrect result when comparing with NaN
  * fix bug #15896: "==" overloading is broken for "NaN"
 2007-04-09 v1.54 Tels
- * fix bug #21747: Re: wierdity in bignum... (powers and high precision):
+ * fix bug #21747: Re: weirdity in bignum... (powers and high precision):
    infinite loops for blog() (and consequently bpow()) if you requested
    an accuracy greater than 67 digits (uses _log() now, and not blog())
    Thanx to darconc!
@@ -554,11 +554,11 @@
  * bxor/band/bior work now correctly for subclasses
  * ++ and -- are now a tad (ca 5%) faster
 2001-02-16 v1.12 Tels
- * accidentily dropped self-multiply test in bigintpm.t
+ * accidentally dropped self-multiply test in bigintpm.t
  * fixed bug in overloading cmp
  * after correcting the overload for 'cmp', I got a lot of test failings and
-   finally dicsovered that the bstr()'s return of '[+-][0-9]+' instead of
-   Perls ways of '[-]?[0-9]+' breaks string comparisations with numbers :(
+   finally discovered that the bstr()'s return of '[+-][0-9]+' instead of
+   Perls ways of '[-]?[0-9]+' breaks string comparisons with numbers :(
    F.i. ok() from Test.pm uses 'eq' and you can not do ok($a,3*3) where $a
    is a BigInt. IMNSHO clearly wrong. And only changing the way cmp is
    overloaded would lead to the curios situation that the following:
@@ -603,7 +603,7 @@
  * documented BigInts behaviour of bmod/bdiv and use integer
 2001-03-30 v1.21 Tels
  * bool() works now under 5_005
- * bug in bsub where numbers with at least 6 trailig digits after any op failed
+ * bug in bsub where numbers with at least 6 trailing digits after any op failed
 2001-04-05 v1.22 Tels
  * documented Peters OS/390 patch/changes (fix was in for quite some time)
  * fixed bug Math::BigInt->new(Math::BigFloat->new(3));
@@ -611,7 +611,7 @@
  * $x->digit($n) to query fast value of Nth digit
  * as_number()
 2001-04-07 v1.23 Tels
- * speling errors in pod
+ * spelling errors in pod
 2001-04-23 v1.3 Tels
  * added (compatible to MBF) mantissa(), exponent() & parts() as well as tests
  * _trailing_zeros()
@@ -652,14 +652,14 @@
  * fixed bior(), bxor(), band() for $x->bxxx(NaN,0), added modify() to them
 2001-07-04 v1.36 Tels
  * is_positive(), is_negative()
- * various pod fixes (overlong =item, speling erorrs etc)
+ * various pod fixes (overlong =item, spelling erorrs etc)
  * torn out the bones from under the flesh and moved them to Math::BigInt::Calc
  * added Math::BigInt::Calc, Math::BigInt::Small (and Math::BigInt::BitVect)
  * fixed tests for bacmp() (could never fail)
  * removed internal _set() and tests for it
  * +-inf handling in bcmp(), bpow()
 2001-07-15 v1.37 Tels
- * applied Philip Newtons speling and doc patch(s)
+ * applied Philip Newtons spelling and doc patch(s)
  * Benjamin Trott: _split() is faster for numbers that need no splitting
  * Benjamin Trott: don't take shortcut in badd(), or Pari won't work 
  * allow use Math::BigInt lib => 'Pari,BitVect,Foo,Bar';
@@ -781,11 +781,11 @@
  * speedups in bpow(), bmodin() and bmodpow()
 2002-07-07 v1.60 Tels
  * shortcuts to avoid calls to objectify for add/sub/mul/div/mod/pow/bcmp etc
- * fix overloaded bcmp() so that the obectify()-avoidance kicks in
+ * fix overloaded bcmp() so that the objectify()-avoidance kicks in
  * avoid calling round() when BigFloat requested 'no rounding please'
  * bcmp()'s shortcut for comparing x <=> 0, 0 <=> 0, 0 <=> $y was making things
    slower than just handing the compare to Calc. Even more so for Pari et al.
- * $x->acuracy() and $x->precision() returned undef, instead of 0 if
+ * $x->accuracy() and $x->precision() returned undef, instead of 0 if
    A/P of $x was 0 and global A/P was undef.
  * $x->bmod() did not modify $x in place when returning NaN/inf/-inf
  * some binary ops (band/bxor/bior/bpow) were not properly rounding the result
@@ -799,8 +799,8 @@
  * make testsuite so that it will pass under FastCalc easily
 2002-08-21 v1.62 Tels
  * bcmp()/bacmp() upgrade now if requested
- * bmodinv() uses an all-positive algorithmn, speeding it up by about 5-8%
-   and allowing to implement the same algorithmn in Calc for factor 4 speedup
+ * bmodinv() uses an all-positive algorithm, speeding it up by about 5-8%
+   and allowing to implement the same algorithm in Calc for factor 4 speedup
 2002-09-08 v1.63 Tels
  * bsqrt() did not modify $x but returned new object when lib does not have
    a _sqrt() routine (BareCalc, BitVect and Pari are affected, Calc, FastCalc
@@ -850,13 +850,13 @@
    for "small" values (Calc and GMP)
  * small change for overload::constant
  * bfac(): do 0 or 1 check only if CALC cannot do _fac() (thus faster)
- * removed a needless _copy in bmod() with megative arguments (slightly faster)
+ * removed a needless _copy in bmod() with negative arguments (slightly faster)
 2003-12-26 v1.68 Tels
  * bfac(inf) is inf, not NaN 
  * added alias names: as_int() (as_number()), is_pos(), is_neg() and doc
  * factored out all the emulation code and moved it to Math::BigInt::CalcEmu
  * binary/hexadecimal input was twice as slow as v1.66 due to a typo in v1.67
- * streamlined overload for bolean context (20% faster "... if $x;")
+ * streamlined overload for boolean context (20% faster "... if $x;")
  * round() was missing a croak() in path testing for wrong roundmode
  * badd(): optimize away setting of sign if it is already right
  * bdec() is about 10% faster for negative numbers
@@ -898,7 +898,7 @@
    makes some ops (bsstr(), bneg etc) about 2% faster for small numbers
  * restrict low-level math library names to sane chars to avoid
    exploitation of eval()
- * fill_can_cache() accidentily did checks for 'or' & 'xor'
+ * fill_can_cache() accidentally did checks for 'or' & 'xor'
  * inline _fill_can_cache
  * add _register_callback() to notify subclasses of lower math lib changes
  * bgcd() is now about 10% faster
diff -ur Math-BigInt-1.96-orig//HISTORY Math-BigInt-1.96-spelling//HISTORY
--- Math-BigInt-1.96-orig//HISTORY	2010-09-03 17:08:51.000000000 +0200
+++ Math-BigInt-1.96-spelling//HISTORY	2010-11-02 14:23:19.012991800 +0100
@@ -46,7 +46,7 @@
   + Math::BigInt->new(10) / Math::BigFloat->new(2) returned NaN (ditto for
     other subclasses of Math::BigInt)
   + $a = new Math::BigInt; creates now a +0, while "" still gives a NaN
-    This supresses all warnings on undef arguments. Wether this is better...	
+    This suppresses all warnings on undef arguments. Wether this is better...	
   + import() would always use "Math::BigInt" and clash with Exporter
   + use Math::BigInt qw(bneg); $a = bneg('1234'); etc did not work at all
   + $x->xxx() now modifies $x in all cases of modifiers and actually returns
diff -ur Math-BigInt-1.96-orig//TODO Math-BigInt-1.96-spelling//TODO
--- Math-BigInt-1.96-orig//TODO	2010-09-03 17:08:51.000000000 +0200
+++ Math-BigInt-1.96-spelling//TODO	2010-11-02 14:36:30.644622600 +0100
@@ -15,7 +15,7 @@
  * tests for frsft() and flsft() with $n != 2
  * blog() is still quite slow for non-integer results. See if we can reuse the
    integer calculation somehow
- * finish broot() by using different algorithmn
+ * finish broot() by using different algorithm
  * hexadecimal integers work, but what about '0xABC.DEF'? Really needed?
 
 Math::BigInt:
@@ -38,7 +38,7 @@
 	$x->bsqrt(3,0,'odd');		# $x = 0, but _a is not 3!
 	ok ($x + '12345','12300');	# fails (12346 instead of 12300)
 
-   The shortcuts in code that return $x->bzero() or similiar things need to
+   The shortcuts in code that return $x->bzero() or similar things need to
    do $x->bzero($a,$p); and this needs tests.
    Update: Should now work for most things. Check for completeness.
 
diff -ur Math-BigInt-1.96-orig//examples/bigprimes.pl Math-BigInt-1.96-spelling//examples/bigprimes.pl
--- Math-BigInt-1.96-orig//examples/bigprimes.pl	2010-09-03 17:08:51.000000000 +0200
+++ Math-BigInt-1.96-spelling//examples/bigprimes.pl	2010-11-02 14:22:37.057181800 +0100
@@ -22,7 +22,7 @@
 my $two = Math::BigInt->new(2);
 
 # some new() are to make stop Perl from calculating things like 1234 ** 4321
-# at compile time. (we want to see run-time behaviuor)
+# at compile time. (we want to see run-time behaviour)
 # Also there is len(), since the old BigInt has not got length() and we want
 # this script to be comparable between old and new version.
 
@@ -63,7 +63,7 @@
 ok (len($q[3]),'1031');
 
 ##############################################################################
-# some real wierd primes:
+# some real weird primes:
 
 # (2^3833-1)/(14193959303*340789152474053904109001)
 $x = Math::BigInt->new('340789152474053904109001');
diff -ur Math-BigInt-1.96-orig//lib/Math/BigFloat.pm Math-BigInt-1.96-spelling//lib/Math/BigFloat.pm
--- Math-BigInt-1.96-orig//lib/Math/BigFloat.pm	2010-09-28 06:34:04.000000000 +0200
+++ Math-BigInt-1.96-spelling//lib/Math/BigFloat.pm	2010-11-02 14:36:30.628997400 +0100
@@ -149,7 +149,7 @@
     $self->{sign} = $wanted->sign();
     return $self->bnorm();
     }
-  # else: got a string or something maskerading as number (with overload)
+  # else: got a string or something masquerading as number (with overload)
 
   # handle '+inf', '-inf' first
   if ($wanted =~ /^[+-]?inf\z/)
@@ -353,7 +353,7 @@
   }
 
 ##############################################################################
-# string conversation
+# string conversion
 
 sub bstr 
   {
@@ -1141,7 +1141,7 @@
   # in case of $x == 1, result is 0
   return $x->bzero() if $x->is_one();
 
-  # XXX TODO: rewrite this in a similiar manner to bexp()
+  # XXX TODO: rewrite this in a similar manner to bexp()
 
   # http://www.efunda.com/math/taylor_series/logarithmic.cfm?search_string=log
 
@@ -2128,7 +2128,7 @@
     }
  
   # sqrt(2) = 1.4 because sqrt(2*100) = 1.4*10; so we can increase the accuracy
-  # of the result by multipyling the input by 100 and then divide the integer
+  # of the result by multiplying the input by 100 and then divide the integer
   # result of sqrt(input) by 10. Rounding afterwards returns the real result.
 
   # The following steps will transform 123.456 (in $x) into 123456 (in $y1)
@@ -3943,7 +3943,7 @@
 accuracy lest a operation consumes all resources, each operation produces
 no more than the requested number of digits.
 
-If there is no gloabl precision or accuracy set, B<and> the operation in
+If there is no global precision or accuracy set, B<and> the operation in
 question was not called with a requested precision or accuracy, B<and> the
 input $x has no accuracy or precision set, then a fallback parameter will
 be used. For historical reasons, it is called C<div_scale> and can be accessed
diff -ur Math-BigInt-1.96-orig//lib/Math/BigInt/Calc.pm Math-BigInt-1.96-spelling//lib/Math/BigInt/Calc.pm
--- Math-BigInt-1.96-orig//lib/Math/BigInt/Calc.pm	2010-09-28 06:34:18.000000000 +0200
+++ Math-BigInt-1.96-spelling//lib/Math/BigInt/Calc.pm	2010-11-02 14:29:40.591472200 +0100
@@ -189,7 +189,7 @@
   $XOR_MASK = __PACKAGE__->_new( ( 2 ** $XOR_BITS ));
   $OR_MASK = __PACKAGE__->_new( ( 2 ** $OR_BITS ));
 
-  # We can compute the approximate lenght no faster than the real length:
+  # We can compute the approximate length no faster than the real length:
   *_alen = \&_len;
   }
 
@@ -595,7 +595,7 @@
 
   my ($c,$x,$yorg) = @_;
   
-  # the general div algorithmn here is about O(N*N) and thus quite slow, so
+  # the general div algorithm here is about O(N*N) and thus quite slow, so
   # we first check for some special cases and use shortcuts to handle them.
 
   # This works, because we store the numbers in a chunked format where each
@@ -785,7 +785,7 @@
   my ($c,$x,$yorg) = @_;
 
   use integer;
-  # the general div algorithmn here is about O(N*N) and thus quite slow, so
+  # the general div algorithm here is about O(N*N) and thus quite slow, so
   # we first check for some special cases and use shortcuts to handle them.
 
   # This works, because we store the numbers in a chunked format where each
@@ -976,7 +976,7 @@
   # in list context
   my ($c,$x,$yorg) = @_;
 
-  # the general div algorithmn here is about O(N*N) and thus quite slow, so
+  # the general div algorithm here is about O(N*N) and thus quite slow, so
   # we first check for some special cases and use shortcuts to handle them.
 
   # This works, because we store the numbers in a chunked format where each
@@ -2028,7 +2028,7 @@
     # reset step to 2
     $step = _two();
     # add two, because $trial cannot be exactly the result (otherwise we would
-    # alrady have found it)
+    # already have found it)
     _add($c, $trial, $step);
  
     # and now add more and more (2,4,6,8,10 etc)
diff -ur Math-BigInt-1.96-orig//lib/Math/BigInt.pm Math-BigInt-1.96-spelling//lib/Math/BigInt.pm
--- Math-BigInt-1.96-orig//lib/Math/BigInt.pm	2010-09-28 06:33:56.000000000 +0200
+++ Math-BigInt-1.96-spelling//lib/Math/BigInt.pm	2010-11-02 14:36:30.738373800 +0100
@@ -6,7 +6,7 @@
 #
 
 # The following hash values are used:
-#   value: unsigned int with actual value (as a Math::BigInt::Calc or similiar)
+#   value: unsigned int with actual value (as a Math::BigInt::Calc or similar)
 #   sign : +,-,NaN,+inf,-inf
 #   _a   : accuracy
 #   _p   : precision
@@ -799,7 +799,7 @@
   }
 
 ##############################################################################
-# string conversation
+# string conversion
 
 sub bsstr
   {
@@ -1787,7 +1787,7 @@
   {
   # Modular inverse.  given a number which is (hopefully) relatively
   # prime to the modulus, calculate its inverse using Euclid's
-  # alogrithm.  If the number is not relatively prime to the modulus
+  # algorithm.  If the number is not relatively prime to the modulus
   # (i.e. their gcd is not one) then NaN is returned.
 
   # set up parameters
@@ -3099,7 +3099,7 @@
   # will warn if Math::BigInt::GMP cannot be found
   use Math::BigInt lib => 'GMP';
 
-  # to supress the warning use this:
+  # to suppress the warning use this:
   # use Math::BigInt try => 'GMP';
 
   # dies if GMP cannot be loaded:
@@ -3230,7 +3230,7 @@
   $x->as_int();		   # return as BigInt (in BigInt: same as copy())
   $x->numify();		   # return as scalar (might overflow!)
   
-  # conversation to string (do not modify their argument)
+  # conversion to string (do not modify their argument)
   $x->bstr();		   # normalized string (e.g. '3')
   $x->bsstr();		   # norm. string in scientific notation (e.g. '3E0')
   $x->as_hex();		   # as signed hexadecimal string with prefixed 0x
@@ -3269,7 +3269,7 @@
 and results in an integer, including hexadecimal and binary numbers.
 
 Scalars holding numbers may also be passed, but note that non-integer numbers
-may already have lost precision due to the conversation to float. Quote
+may already have lost precision due to the conversion to float. Quote
 your input if you want BigInt to see all the digits:
 
 	$x = Math::BigInt->new(12345678890123456789);	# bad
@@ -3988,7 +3988,7 @@
 	$x->modify('bpowd');
 
 This method returns 0 if the object can be modified with the given
-peration, or 1 if not.
+operation, or 1 if not.
 
 This is used for instance by L<Math::BigInt::Constant>.
 
@@ -4715,7 +4715,7 @@
 
 	use bignum;
 
-Also good for oneliners:
+Also good for one-liners:
 
 	perl -Mbignum -le 'print 2 ** 255'
 
@@ -4877,7 +4877,7 @@
 
 The quotient is always the greatest integer less than or equal to the
 real-valued quotient of the two operands, and the remainder (when it is
-nonzero) always has the same sign as the second operand; so, for
+non-zero) always has the same sign as the second operand; so, for
 example,
 
 	  1 / 4  => ( 0, 1)
diff -ur Math-BigInt-1.96-orig//t/bigintpm.inc Math-BigInt-1.96-spelling//t/bigintpm.inc
--- Math-BigInt-1.96-orig//t/bigintpm.inc	2010-09-13 16:28:42.000000000 +0200
+++ Math-BigInt-1.96-spelling//t/bigintpm.inc	2010-11-02 14:37:34.707942600 +0100
@@ -443,7 +443,7 @@
 $x = $class->new($z); is ($x->bsstr(),'1e+129');
 
 ###############################################################################
-# test for whitespace inlcuding newlines to be handled correctly
+# test for whitespace including newlines to be handled correctly
 
 # is ($Math::BigInt::strict,1);		# the default
 
@@ -525,7 +525,7 @@
 
 ###############################################################################
 ###############################################################################
-# the followin tests only make sense with Math::BigInt::Calc or BareCalc or
+# the following tests only make sense with Math::BigInt::Calc or BareCalc or
 # FastCalc
 
 exit if $CALC !~ /^Math::BigInt::(|Bare|Fast)Calc$/; # for Pari et al.
diff -ur Math-BigInt-1.96-orig//t/inf_nan.t Math-BigInt-1.96-spelling//t/inf_nan.t
--- Math-BigInt-1.96-orig//t/inf_nan.t	2010-09-13 16:24:03.000000000 +0200
+++ Math-BigInt-1.96-spelling//t/inf_nan.t	2010-11-02 14:12:50.110380500 +0100
@@ -303,7 +303,7 @@
   }
 
 #############################################################################
-# overloaded comparisations
+# overloaded comparisons
 
 # these are disabled for now, since Perl itself can't seem to make up it's
 # mind what NaN actually is, see [perl #33106].
diff -ur Math-BigInt-1.96-orig//t/mbimbf.inc Math-BigInt-1.96-spelling//t/mbimbf.inc
--- Math-BigInt-1.96-orig//t/mbimbf.inc	2010-09-13 16:28:42.000000000 +0200
+++ Math-BigInt-1.96-spelling//t/mbimbf.inc	2010-11-02 14:36:30.535246200 +0100
@@ -280,8 +280,8 @@
 
 $x = $mbf->new('123.456');
 $y = $mbf->new('654.321');
-$x->{_a} = 5;		# $x->accuracy(5) would round $x straightaway
-$y->{_a} = 4;		# $y->accuracy(4) would round $x straightaway
+$x->{_a} = 5;		# $x->accuracy(5) would round $x straight away
+$y->{_a} = 4;		# $y->accuracy(4) would round $x straight away
 
 $z = $x + $y;		is ($z,'777.8');
 $z = $y - $x;		is ($z,'530.9');
@@ -296,8 +296,8 @@
 
 $x = $mbi->new(123456);
 $y = $mbi->new(654321);
-$x->{_a} = 5;		# $x->accuracy(5) would round $x straightaway
-$y->{_a} = 4;		# $y->accuracy(4) would round $x straightaway
+$x->{_a} = 5;		# $x->accuracy(5) would round $x straight away
+$y->{_a} = 4;		# $y->accuracy(4) would round $x straight away
 
 $z = $x + $y; 		is ($z,777800);
 $z = $y - $x; 		is ($z,530900);
@@ -590,7 +590,7 @@
 is ($y->{_a}, undef); is ($y->{_p}, undef);
 
 ###############################################################################
-# math with two numbers with differen A and P
+# math with two numbers with different A and P
 
 $x = $mbf->new(12345); $x->accuracy(4);		# '12340'
 $y = $mbf->new(12345); $y->accuracy(2);		# '12000'
diff -ur Math-BigInt-1.96-orig//t/mbimbf.t Math-BigInt-1.96-spelling//t/mbimbf.t
--- Math-BigInt-1.96-orig//t/mbimbf.t	2010-09-13 16:28:42.000000000 +0200
+++ Math-BigInt-1.96-spelling//t/mbimbf.t	2010-11-02 14:36:30.582121800 +0100
@@ -18,7 +18,7 @@
 require 't/mbimbf.inc';
 
 # some tests that won't work with subclasses, since the things are only
-# garantied in the Math::BigInt/BigFloat (unless subclass chooses to support
+# guaranteed in the Math::BigInt/BigFloat (unless subclass chooses to support
 # this)
 
 Math::BigInt->round_mode('even');	# reset for tests
