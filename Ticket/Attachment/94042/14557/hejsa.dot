digraph test {
	graph [rankdir=LR, overlap=false];
	node [label="\N", shape=plaintext];
	topnode [label=Query];
	Query [label="<port0>NodeTag type|<port1>CmdType commandType|<port2>QuerySource querySource|<port3>bool canSetTag|<port4>Node * utilityStmt|<p\
ort5>int resultRelation|<port6>RangeVar * into|<port7>bool hasAggs|<port8>bool hasSubLinks|<port9>List * rtable|<port10>FromExpr\
 * jointree|<port11>List * rowMarks|<port12>List * targetList|<port13>List * groupClause|<port14>Node * havingQual|<port15>List \
* distinctClause|<port16>List * sortClause|<port17>Node * limitOffset|<port18>Node * limitCount|<port19>Node * setOperations|<po\
rt20>List * resultRelations|<port21>List * base_rel_list|<port22>List * other_rel_list|<port23>List * join_rel_list|<port24>List\
 * equi_key_list|<port25>List * in_info_list|<port26>List * query_pathkeys|<port27>bool hasJoinRTEs", shape=record];
	RangeVar [label="<port0>NodeTag type|<port1>char * catalogname|<port2>char * schemaname|<port3>char * relname|<port4>InhOption inhOpt|<port5>bool\
 istemp|<port6>Alias * alias", shape=record];
	FromExpr [label="<port0>NodeTag type|<port1>List * fromlist|<port2>Node * quals", shape=record];
	Alias [label="<port0>NodeTag type|<port1>char * aliasname|<port2>List * colnames", shape=record];
	Query:port10 -> FromExpr;
	Query:port6 -> RangeVar;
	RangeVar:port6 -> Alias;
	topnode -> Query;
}
