PERL_DL_NONLAZY=1 /Users/loganbell/perl5/perlbrew/perls/perl-5.14.0/bin/perl "-MExtUtils::Command::MM" "-e" "test_harness(1, 'blib/lib', 'blib/arch')" t/*.t
# 
# These tests were ran with:
# Net::DNS::VERSION:               0.66
# set environment variable NET_DNS_DEBUG to get all versions
t/00-load.t ................ 
1..87
ok 1 - use Net::DNS;
ok 2 - use Net::DNS::Resolver::Recurse;
ok 3 - use Net::DNS::Nameserver;
ok 4 - use Net::DNS::Resolver::Cygwin;
ok 5 - Net::DNS::RR::IPSECKEY is not loaded
ok 6 - Net::DNS::RR::AFSDB is not loaded
ok 7 - Net::DNS::RR::EID is not loaded
ok 8 - Net::DNS::RR::HIP is not loaded
ok 9 - Net::DNS::RR::SRV is not loaded
ok 10 - Net::DNS::RR::KX is not loaded
ok 11 - Net::DNS::RR::RP is not loaded
ok 12 - Net::DNS::RR::MINFO is not loaded
ok 13 - Net::DNS::RR::MR is not loaded
ok 14 - Net::DNS::RR::MB is not loaded
ok 15 - Net::DNS::RR::APL is not loaded
ok 16 - Net::DNS::RR::NIMLOC is not loaded
ok 17 - Net::DNS::RR::PTR is not loaded
ok 18 - Net::DNS::RR::SSHFP is not loaded
ok 19 - Net::DNS::RR::SPF is not loaded
ok 20 - Net::DNS::RR::CERT is not loaded
ok 21 - Net::DNS::RR::HINFO is not loaded
ok 22 - Net::DNS::RR::TXT is not loaded
ok 23 - Net::DNS::RR::DHCID is not loaded
ok 24 - Net::DNS::RR::NULL is not loaded
ok 25 - Net::DNS::RR::OPT is not loaded
ok 26 - Net::DNS::RR::NS is not loaded
ok 27 - Net::DNS::RR::LOC is not loaded
ok 28 - Net::DNS::RR::TSIG is not loaded
ok 29 - Net::DNS::RR::DNAME is not loaded
ok 30 - Net::DNS::RR::NSAP is not loaded
ok 31 - Net::DNS::RR::PX is not loaded
ok 32 - Net::DNS::RR::TKEY is not loaded
ok 33 - Net::DNS::RR::AAAA is not loaded
ok 34 - Net::DNS::RR::X25 is not loaded
ok 35 - Net::DNS::RR::A is not loaded
ok 36 - Net::DNS::RR::ISDN is not loaded
ok 37 - Net::DNS::RR::MG is not loaded
ok 38 - Net::DNS::RR::CNAME is not loaded
ok 39 - Net::DNS::RR::NAPTR is not loaded
ok 40 - Net::DNS::RR::SOA is not loaded
ok 41 - Net::DNS::RR::MX is not loaded
ok 42 - Net::DNS::RR::RT is not loaded
ok 43 - Net::DNS::RR::IPSECKEY loaded
ok 44 - Net::DNS::RR::AFSDB loaded
ok 45 - Net::DNS::RR::EID loaded
ok 46 - Net::DNS::RR::HIP loaded
ok 47 - Net::DNS::RR::SRV loaded
ok 48 - Net::DNS::RR::KX loaded
ok 49 - Net::DNS::RR::RP loaded
ok 50 - Net::DNS::RR::MINFO loaded
ok 51 - Net::DNS::RR::MR loaded
ok 52 - Net::DNS::RR::MB loaded
ok 53 - Net::DNS::RR::APL loaded
ok 54 - Net::DNS::RR::NIMLOC loaded
ok 55 - Net::DNS::RR::PTR loaded
ok 56 - Net::DNS::RR::SSHFP loaded
ok 57 - Net::DNS::RR::SPF loaded
ok 58 - Net::DNS::RR::CERT loaded
ok 59 - Net::DNS::RR::HINFO loaded
ok 60 - Net::DNS::RR::TXT loaded
ok 61 - Net::DNS::RR::DHCID loaded
ok 62 - Net::DNS::RR::NULL loaded
ok 63 - Net::DNS::RR::OPT loaded
ok 64 - Net::DNS::RR::NS loaded
ok 65 - Net::DNS::RR::LOC loaded
ok 66 - Net::DNS::RR::TSIG loaded
ok 67 - Net::DNS::RR::DNAME loaded
ok 68 - Net::DNS::RR::NSAP loaded
ok 69 - Net::DNS::RR::PX loaded
ok 70 - Net::DNS::RR::TKEY loaded
ok 71 - Net::DNS::RR::AAAA loaded
ok 72 - Net::DNS::RR::X25 loaded
ok 73 - Net::DNS::RR::A loaded
ok 74 - Net::DNS::RR::ISDN loaded
ok 75 - Net::DNS::RR::MG loaded
ok 76 - Net::DNS::RR::CNAME loaded
ok 77 - Net::DNS::RR::NAPTR loaded
ok 78 - Net::DNS::RR::SOA loaded
ok 79 - Net::DNS::RR::MX loaded
ok 80 - Net::DNS::RR::RT loaded
ok 81 - mx is imported
ok 82 - yxrrset is imported
ok 83 - nxrrset is imported
ok 84 - yxdomain is imported
ok 85 - nxdomain is imported
ok 86 - rr_add is imported
ok 87 - rr_del is imported
ok
t/00-pod.t ................. 
1..55
ok 1 - POD test for blib/lib/Net/DNS.pm
ok 2 - POD test for blib/lib/Net/DNS/Domain.pm
ok 3 - POD test for blib/lib/Net/DNS/FAQ.pod
ok 4 - POD test for blib/lib/Net/DNS/Header.pm
ok 5 - POD test for blib/lib/Net/DNS/Nameserver.pm
ok 6 - POD test for blib/lib/Net/DNS/Packet.pm
ok 7 - POD test for blib/lib/Net/DNS/Question.pm
ok 8 - POD test for blib/lib/Net/DNS/Resolver.pm
ok 9 - POD test for blib/lib/Net/DNS/RR.pm
ok 10 - POD test for blib/lib/Net/DNS/Update.pm
ok 11 - POD test for blib/lib/Net/DNS/Resolver/Base.pm
ok 12 - POD test for blib/lib/Net/DNS/Resolver/Cygwin.pm
ok 13 - POD test for blib/lib/Net/DNS/Resolver/Recurse.pm
ok 14 - POD test for blib/lib/Net/DNS/Resolver/UNIX.pm
ok 15 - POD test for blib/lib/Net/DNS/Resolver/Win32.pm
ok 16 - POD test for blib/lib/Net/DNS/RR/A.pm
ok 17 - POD test for blib/lib/Net/DNS/RR/AAAA.pm
ok 18 - POD test for blib/lib/Net/DNS/RR/AFSDB.pm
ok 19 - POD test for blib/lib/Net/DNS/RR/APL.pm
ok 20 - POD test for blib/lib/Net/DNS/RR/CERT.pm
ok 21 - POD test for blib/lib/Net/DNS/RR/CNAME.pm
ok 22 - POD test for blib/lib/Net/DNS/RR/DHCID.pm
ok 23 - POD test for blib/lib/Net/DNS/RR/DNAME.pm
ok 24 - POD test for blib/lib/Net/DNS/RR/EID.pm
ok 25 - POD test for blib/lib/Net/DNS/RR/HINFO.pm
ok 26 - POD test for blib/lib/Net/DNS/RR/HIP.pm
ok 27 - POD test for blib/lib/Net/DNS/RR/IPSECKEY.pm
ok 28 - POD test for blib/lib/Net/DNS/RR/ISDN.pm
ok 29 - POD test for blib/lib/Net/DNS/RR/KX.pm
ok 30 - POD test for blib/lib/Net/DNS/RR/LOC.pm
ok 31 - POD test for blib/lib/Net/DNS/RR/MB.pm
ok 32 - POD test for blib/lib/Net/DNS/RR/MG.pm
ok 33 - POD test for blib/lib/Net/DNS/RR/MINFO.pm
ok 34 - POD test for blib/lib/Net/DNS/RR/MR.pm
ok 35 - POD test for blib/lib/Net/DNS/RR/MX.pm
ok 36 - POD test for blib/lib/Net/DNS/RR/NAPTR.pm
ok 37 - POD test for blib/lib/Net/DNS/RR/NIMLOC.pm
ok 38 - POD test for blib/lib/Net/DNS/RR/NS.pm
ok 39 - POD test for blib/lib/Net/DNS/RR/NSAP.pm
ok 40 - POD test for blib/lib/Net/DNS/RR/NULL.pm
ok 41 - POD test for blib/lib/Net/DNS/RR/OPT.pm
ok 42 - POD test for blib/lib/Net/DNS/RR/PTR.pm
ok 43 - POD test for blib/lib/Net/DNS/RR/PX.pm
ok 44 - POD test for blib/lib/Net/DNS/RR/RP.pm
ok 45 - POD test for blib/lib/Net/DNS/RR/RT.pm
ok 46 - POD test for blib/lib/Net/DNS/RR/SOA.pm
ok 47 - POD test for blib/lib/Net/DNS/RR/SPF.pm
ok 48 - POD test for blib/lib/Net/DNS/RR/SRV.pm
ok 49 - POD test for blib/lib/Net/DNS/RR/SSHFP.pm
ok 50 - POD test for blib/lib/Net/DNS/RR/TKEY.pm
ok 51 - POD test for blib/lib/Net/DNS/RR/TSIG.pm
ok 52 - POD test for blib/lib/Net/DNS/RR/TXT.pm
ok 53 - POD test for blib/lib/Net/DNS/RR/Unknown.pm
ok 54 - POD test for blib/lib/Net/DNS/RR/X25.pm
ok 55 - POD test for blib/lib/Net/DNS/RR/APL/ApItem.pm
ok
t/00-version.t ............. 
1..107
ok 1 - blib/lib/Net/DNS.pm has a version
ok 2 - blib/lib/Net/DNS/Domain.pm has a version
ok 3 - blib/lib/Net/DNS/Domain.pm: version has reasonable value
ok 4 - blib/lib/Net/DNS/Header.pm has a version
ok 5 - blib/lib/Net/DNS/Header.pm: version has reasonable value
ok 6 - blib/lib/Net/DNS/Nameserver.pm has a version
ok 7 - blib/lib/Net/DNS/Nameserver.pm: version has reasonable value
ok 8 - blib/lib/Net/DNS/Packet.pm has a version
ok 9 - blib/lib/Net/DNS/Packet.pm: version has reasonable value
ok 10 - blib/lib/Net/DNS/Question.pm has a version
ok 11 - blib/lib/Net/DNS/Question.pm: version has reasonable value
ok 12 - blib/lib/Net/DNS/Resolver.pm has a version
ok 13 - blib/lib/Net/DNS/Resolver.pm: version has reasonable value
ok 14 - blib/lib/Net/DNS/RR.pm has a version
ok 15 - blib/lib/Net/DNS/RR.pm: version has reasonable value
ok 16 - blib/lib/Net/DNS/Update.pm has a version
ok 17 - blib/lib/Net/DNS/Update.pm: version has reasonable value
ok 18 - blib/lib/Net/DNS/Resolver/Base.pm has a version
ok 19 - blib/lib/Net/DNS/Resolver/Base.pm: version has reasonable value
ok 20 - blib/lib/Net/DNS/Resolver/Cygwin.pm has a version
ok 21 - blib/lib/Net/DNS/Resolver/Cygwin.pm: version has reasonable value
ok 22 - blib/lib/Net/DNS/Resolver/Recurse.pm has a version
ok 23 - blib/lib/Net/DNS/Resolver/Recurse.pm: version has reasonable value
ok 24 - blib/lib/Net/DNS/Resolver/UNIX.pm has a version
ok 25 - blib/lib/Net/DNS/Resolver/UNIX.pm: version has reasonable value
ok 26 - blib/lib/Net/DNS/Resolver/Win32.pm has a version
ok 27 - blib/lib/Net/DNS/Resolver/Win32.pm: version has reasonable value
ok 28 - blib/lib/Net/DNS/RR/A.pm has a version
ok 29 - blib/lib/Net/DNS/RR/A.pm: version has reasonable value
ok 30 - blib/lib/Net/DNS/RR/AAAA.pm has a version
ok 31 - blib/lib/Net/DNS/RR/AAAA.pm: version has reasonable value
ok 32 - blib/lib/Net/DNS/RR/AFSDB.pm has a version
ok 33 - blib/lib/Net/DNS/RR/AFSDB.pm: version has reasonable value
ok 34 - blib/lib/Net/DNS/RR/APL.pm has a version
ok 35 - blib/lib/Net/DNS/RR/APL.pm: version has reasonable value
ok 36 - blib/lib/Net/DNS/RR/CERT.pm has a version
ok 37 - blib/lib/Net/DNS/RR/CERT.pm: version has reasonable value
ok 38 - blib/lib/Net/DNS/RR/CNAME.pm has a version
ok 39 - blib/lib/Net/DNS/RR/CNAME.pm: version has reasonable value
ok 40 - blib/lib/Net/DNS/RR/DHCID.pm has a version
ok 41 - blib/lib/Net/DNS/RR/DHCID.pm: version has reasonable value
ok 42 - blib/lib/Net/DNS/RR/DNAME.pm has a version
ok 43 - blib/lib/Net/DNS/RR/DNAME.pm: version has reasonable value
ok 44 - blib/lib/Net/DNS/RR/EID.pm has a version
ok 45 - blib/lib/Net/DNS/RR/EID.pm: version has reasonable value
ok 46 - blib/lib/Net/DNS/RR/HINFO.pm has a version
ok 47 - blib/lib/Net/DNS/RR/HINFO.pm: version has reasonable value
ok 48 - blib/lib/Net/DNS/RR/HIP.pm has a version
ok 49 - blib/lib/Net/DNS/RR/HIP.pm: version has reasonable value
ok 50 - blib/lib/Net/DNS/RR/IPSECKEY.pm has a version
ok 51 - blib/lib/Net/DNS/RR/IPSECKEY.pm: version has reasonable value
ok 52 - blib/lib/Net/DNS/RR/ISDN.pm has a version
ok 53 - blib/lib/Net/DNS/RR/ISDN.pm: version has reasonable value
ok 54 - blib/lib/Net/DNS/RR/KX.pm has a version
ok 55 - blib/lib/Net/DNS/RR/KX.pm: version has reasonable value
ok 56 - blib/lib/Net/DNS/RR/LOC.pm has a version
ok 57 - blib/lib/Net/DNS/RR/LOC.pm: version has reasonable value
ok 58 - blib/lib/Net/DNS/RR/MB.pm has a version
ok 59 - blib/lib/Net/DNS/RR/MB.pm: version has reasonable value
ok 60 - blib/lib/Net/DNS/RR/MG.pm has a version
ok 61 - blib/lib/Net/DNS/RR/MG.pm: version has reasonable value
ok 62 - blib/lib/Net/DNS/RR/MINFO.pm has a version
ok 63 - blib/lib/Net/DNS/RR/MINFO.pm: version has reasonable value
ok 64 - blib/lib/Net/DNS/RR/MR.pm has a version
ok 65 - blib/lib/Net/DNS/RR/MR.pm: version has reasonable value
ok 66 - blib/lib/Net/DNS/RR/MX.pm has a version
ok 67 - blib/lib/Net/DNS/RR/MX.pm: version has reasonable value
ok 68 - blib/lib/Net/DNS/RR/NAPTR.pm has a version
ok 69 - blib/lib/Net/DNS/RR/NAPTR.pm: version has reasonable value
ok 70 - blib/lib/Net/DNS/RR/NIMLOC.pm has a version
ok 71 - blib/lib/Net/DNS/RR/NIMLOC.pm: version has reasonable value
ok 72 - blib/lib/Net/DNS/RR/NS.pm has a version
ok 73 - blib/lib/Net/DNS/RR/NS.pm: version has reasonable value
ok 74 - blib/lib/Net/DNS/RR/NSAP.pm has a version
ok 75 - blib/lib/Net/DNS/RR/NSAP.pm: version has reasonable value
ok 76 - blib/lib/Net/DNS/RR/NULL.pm has a version
ok 77 - blib/lib/Net/DNS/RR/NULL.pm: version has reasonable value
ok 78 - blib/lib/Net/DNS/RR/OPT.pm has a version
ok 79 - blib/lib/Net/DNS/RR/OPT.pm: version has reasonable value
ok 80 - blib/lib/Net/DNS/RR/PTR.pm has a version
ok 81 - blib/lib/Net/DNS/RR/PTR.pm: version has reasonable value
ok 82 - blib/lib/Net/DNS/RR/PX.pm has a version
ok 83 - blib/lib/Net/DNS/RR/PX.pm: version has reasonable value
ok 84 - blib/lib/Net/DNS/RR/RP.pm has a version
ok 85 - blib/lib/Net/DNS/RR/RP.pm: version has reasonable value
ok 86 - blib/lib/Net/DNS/RR/RT.pm has a version
ok 87 - blib/lib/Net/DNS/RR/RT.pm: version has reasonable value
ok 88 - blib/lib/Net/DNS/RR/SOA.pm has a version
ok 89 - blib/lib/Net/DNS/RR/SOA.pm: version has reasonable value
ok 90 - blib/lib/Net/DNS/RR/SPF.pm has a version
ok 91 - blib/lib/Net/DNS/RR/SPF.pm: version has reasonable value
ok 92 - blib/lib/Net/DNS/RR/SRV.pm has a version
ok 93 - blib/lib/Net/DNS/RR/SRV.pm: version has reasonable value
ok 94 - blib/lib/Net/DNS/RR/SSHFP.pm has a version
ok 95 - blib/lib/Net/DNS/RR/SSHFP.pm: version has reasonable value
ok 96 - blib/lib/Net/DNS/RR/TKEY.pm has a version
ok 97 - blib/lib/Net/DNS/RR/TKEY.pm: version has reasonable value
ok 98 - blib/lib/Net/DNS/RR/TSIG.pm has a version
ok 99 - blib/lib/Net/DNS/RR/TSIG.pm: version has reasonable value
ok 100 - blib/lib/Net/DNS/RR/TXT.pm has a version
ok 101 - blib/lib/Net/DNS/RR/TXT.pm: version has reasonable value
ok 102 - blib/lib/Net/DNS/RR/Unknown.pm has a version
ok 103 - blib/lib/Net/DNS/RR/Unknown.pm: version has reasonable value
ok 104 - blib/lib/Net/DNS/RR/X25.pm has a version
ok 105 - blib/lib/Net/DNS/RR/X25.pm: version has reasonable value
ok 106 - blib/lib/Net/DNS/RR/APL/ApItem.pm has a version
ok 107 - blib/lib/Net/DNS/RR/APL/ApItem.pm: version has reasonable value
ok
# 
# 
# Executing heuristic to see if have unlimited view of the Internet
# If the heuristic fails this could have various reasons probably having
# nothing to do with bugs in Net::DNS
# 
# 
t/001-connection-checks.t .. 
1..1
ok 1 - Dummy
ok
t/01-resolver-env.t ........ 
1..17
ok 1 - use Net::DNS;
ok 2 - new() returned something
ok 3 - nameservers() works
ok 4 - Nameserver set correctly
ok 5 - Nameserver set correctly
ok 6 - Search set correctly
ok 7 - Search set correctly
ok 8 - Local domain works
ok 9 - Retransmit works
ok 10 - Retry works
ok 11 - Debug works
ok 12 - absence dnssec() sets cdflag to 0
ok 13 - absence of dnssec() sets adflag to 0
ok 14 - Correct warning in absense of Net::DNS::SEC
ok 15 - dnssec() sets udppacketsize to 2048
ok 16 - dnssec() sets cdflag to 0
ok 17 - dnssec() sets adflag to 1
ok
t/01-resolver-file.t ....... 
1..8
ok 1 - use Net::DNS;
ok 2 - new() returned something
ok 3 - nameservers() works
ok 4 - Nameserver set correctly
ok 5 - Nameserver set correctly
ok 6 - Search set correctly
ok 7 - Search set correctly
ok 8 - Local domain works
ok
t/01-resolver-flags.t ...... 
1..7
ok 1 - use Net::DNS;
ok 2 # skip No Net::DNS::SEC installed
ok 3 # skip No Net::DNS::SEC installed
ok 4 # skip No Net::DNS::SEC installed
ok 5 - Default cdflag  off
ok 6 - toggle cdflag  on
ok 7 - toggle cdflag  off
ok
t/01-resolver-opt.t ........ 
1..62
ok 1 - use Net::DNS;
ok 2 - new() returned something
ok 3 - new() returns an object of the correct class. isa Net::DNS::Resolver
ok 4 - nameservers() works
ok 5 - Nameserver set correctly
ok 6 - Nameserver set correctly
ok 7 - Search set correctly
ok 8 - Search set correctly
ok 9 - Local domain works
ok 10 - Error thrown trying to open non-existant file.
ok 11 - Net::DNS::Resolver->new returned undef
ok 12 - persistent_tcp is correct
ok 13 - cdflag is correct
ok 14 - stayopen is correct
ok 15 - srcaddr is correct
ok 16 - domain is correct
ok 17 - debug is correct
ok 18 - defnames is correct
ok 19 - searchlist is correct
ok 20 - retrans is correct
ok 21 - tcp_timeout is correct
ok 22 - nameservers is correct
ok 23 - port is correct
ok 24 - usevc is correct
ok 25 - adflag is correct
ok 26 - retry is correct
ok 27 - igntc is correct
ok 28 - recurse is correct
ok 29 - dnsrch is correct
ok 30 - dnssec is correct
ok 31 - udp_timeout is correct
ok 32 - srcport is correct
ok 33 - Invalid input caught
ok 34 - No resolver returned
ok 35 - Invalid input caught
ok 36 - No resolver returned
ok 37 - Invalid input caught
ok 38 - No resolver returned
ok 39 - Invalid input caught
ok 40 - No resolver returned
ok 41 - Invalid input caught
ok 42 - No resolver returned
ok 43 - Invalid input caught
ok 44 - No resolver returned
ok 45 - Invalid input caught
ok 46 - No resolver returned
ok 47 - Invalid input caught
ok 48 - No resolver returned
ok 49 - Invalid input caught
ok 50 - No resolver returned
ok 51 - Invalid input caught
ok 52 - No resolver returned
ok 53 - errorstring is not set
ok 54 - cdflag is not set
ok 55 - querytime is not set
ok 56 - axfr_sel is not set
ok 57 - udppacketsize is not set
ok 58 - axfr_rr is not set
ok 59 - answerfrom is not set
ok 60 - answersize is not set
ok 61 - axfr_soa_count is not set
ok 62 - tsig_rr is not set
ok
t/01-resolver.t ............ 
1..49
ok 1 - use Net::DNS;
ok 2 - new() returned something
ok 3 - new() returns an object of the correct class. isa Net::DNS::Resolver
ok 4 - nameservers() works
ok 5 - setting searchlist returns correctly.
ok 6 - setting searchlist stickts.
ok 7 - setting persistent_tcp returns correctly
ok 8 - setting persistent_tcp sticks
ok 9 - setting cdflag returns correctly
ok 10 - setting cdflag sticks
ok 11 - setting stayopen returns correctly
ok 12 - setting stayopen sticks
ok 13 - setting srcaddr returns correctly
ok 14 - setting srcaddr sticks
ok 15 - setting domain returns correctly
ok 16 - setting domain sticks
ok 17 - setting debug returns correctly
ok 18 - setting debug sticks
ok 19 - setting defnames returns correctly
ok 20 - setting defnames sticks
ok 21 - setting retrans returns correctly
ok 22 - setting retrans sticks
ok 23 - setting tcp_timeout returns correctly
ok 24 - setting tcp_timeout sticks
ok 25 - setting port returns correctly
ok 26 - setting port sticks
ok 27 - setting usevc returns correctly
ok 28 - setting usevc sticks
ok 29 - setting adflag returns correctly
ok 30 - setting adflag sticks
ok 31 - setting force_v4 returns correctly
ok 32 - setting force_v4 sticks
ok 33 - setting retry returns correctly
ok 34 - setting retry sticks
ok 35 - setting igntc returns correctly
ok 36 - setting igntc sticks
ok 37 - setting recurse returns correctly
ok 38 - setting recurse sticks
ok 39 - setting dnsrch returns correctly
ok 40 - setting dnsrch sticks
ok 41 - setting dnssec returns correctly
ok 42 - setting dnssec sticks
ok 43 - setting udp_timeout returns correctly
ok 44 - setting udp_timeout sticks
ok 45 - setting srcport returns correctly
ok 46 - setting srcport sticks
ok 47 # skip Tests may not run succesful from private IP(192.168.1.100)
ok 48 # skip Tests may not run succesful from private IP(192.168.1.100)
ok 49 # skip Tests may not run succesful from private IP(192.168.1.100)
ok
# character encoding: ISO-8859-1
# Net::DNS::Domain is included for testing only. Failures can safely be ignored
t/02-domain.t .............. 
1..42
ok 1 - use Net::DNS::Domain;
ok 2 - object returned by new() constructor isa Net::DNS::Domain
ok 3 - empty argument list	(domain identifier undefined at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Domain.pm line 78)
ok 4 - argument undefined	(domain identifier undefined at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Domain.pm line 78)
ok 5 - domain labels separated by dots
ok 6 - \. devoid of special meaning
ok 7 - \\ devoid of special meaning
ok 8 - \\\. devoid of special meaning
ok 9 - \092 devoid of special meaning
ok 10 - ignore gratuitous trailing dots
ok 11 - ignore interior null label
ok 12 - DNS root represented as single dot
ok 13 - DNS root wire-format representation
ok 14 - null domain label	(unexpected null domain label at t/02-domain.t line 116)
ok 15 - long domain label	(64 octet domain label truncated at t/02-domain.t line 127)
ok 16 - 63 octet LDH character label
ok 17 - simple wire-format encoding
ok 18 - compressed wire-format encoding
ok 19 - compressed wire-format encoding
ok 20 - simple wire-format decoding
ok 21 - compressed wire-format decoding
ok 22 - compressed wire-format decoding
ok 23 - encoding decoded compressed data
ok 24 - bad compression pointer	(corrupt wire-format data at t/02-domain.t line 175)
ok 25 - name compression loop	(corrupt wire-format data at t/02-domain.t line 184)
ok 26 - corrupt wire-format	(corrupt wire-format label at t/02-domain.t line 197)
ok 27 - C0 controls:	\000\001\002\003\004\005\006\007\008\009\010\011\012\013\014\015
ok 28 - C0 controls:	\016\017\018\019\020\021\022\023\024\025\026\027\028\029\030\031
ok 29 - G0 graphics:	\032!\"\#\$%&'\(\)*+,-\./
ok 30 - G0 graphics:	0123456789:\;<=>?
ok 31 - G0 graphics:	\@ABCDEFGHIJKLMNO
ok 32 - G0 graphics:	PQRSTUVWXYZ[\\]^_
ok 33 - G0 graphics:	`abcdefghijklmno
ok 34 - G0 graphics:	pqrstuvwxyz{|}~\127
ok 35 - 8-bit codes:	\128\129\130\131\132\133\134\135\136\137\138\139\140\141\142\143
ok 36 - 8-bit codes:	\144\145\146\147\148\149\150\151\152\153\154\155\156\157\158\159
ok 37 - 8-bit codes:	\160\161\162\163\164\165\166\167\168\169\170\171\172\173\174\175
ok 38 - 8-bit codes:	\176\177\178\179\180\181\182\183\184\185\186\187\188\189\190\191
ok 39 - 8-bit codes:	\192\193\194\195\196\197\198\199\200\201\202\203\204\205\206\207
ok 40 - 8-bit codes:	\208\209\210\211\212\213\214\215\216\217\218\219\220\221\222\223
ok 41 - 8-bit codes:	\224\225\226\227\228\229\230\231\232\233\234\235\236\237\238\239
ok 42 - 8-bit codes:	\240\241\242\243\244\245\246\247\248\249\250\251\252\253\254\255
ok
t/02-header.t .............. 
1..18
ok 1 - use Net::DNS;
ok 2 - new() returned something
ok 3 - id() works
ok 4 - qr() works
ok 5 - opcode() works
ok 6 - aa() works
ok 7 - tc() works
ok 8 - rd() works
ok 9 - cd() works
ok 10 - ra() works
ok 11 - rcode() works
ok 12 - Headers are the same
ok 13 - string() has opcode correct
ok 14 - string() has ancount correct
ok 15 - zocount works
ok 16 - prcount works
ok 17 - upcount works
ok 18 - adcount works
ok
t/03-question.t ............ 
1..204
ok 1 - use Net::DNS::Question;
ok 2 - object returned by new() constructor isa Net::DNS::Question
ok 3 - $question->string returns text representation of object
ok 4 - new() argument undefined or absent	( example.com.,	A,	undef	)
ok 5 - new() argument undefined or absent	( example.com.,	A,		)
ok 6 - new() argument undefined or absent	( example.com.,	undef,	IN	)
ok 7 - new() argument undefined or absent	( example.com.,		IN	)
ok 8 - new() argument undefined or absent	( example.com.,	undef,	undef	)
ok 9 - new() argument undefined or absent	( example.com. 			)
ok 10 - new() arguments in zone file order	( example.com.,	IN,	A	)
ok 11 - new() arguments in zone file order	( example.com.,	IN,	TYPE1	)
ok 12 - new() arguments in zone file order	( example.com.,	IN,	ANY	)
ok 13 - new() arguments in zone file order	( example.com.,	CLASS1,	A	)
ok 14 - new() arguments in zone file order	( example.com.,	CLASS1,	TYPE1	)
ok 15 - new() arguments in zone file order	( example.com.,	CLASS1,	ANY	)
ok 16 - new() arguments in zone file order	( example.com.,	ANY,	A	)
ok 17 - new() arguments in zone file order	( example.com.,	ANY,	TYPE1	)
ok 18 - new() arguments in zone file order	( example.com.,	ANY,	ANY	)
ok 19 - parse() object isa Net::DNS::Question
ok 20 - parse() object matches input data
ok 21 - in list context, parse() returned object isa Net::DNS::Question
ok 22 - in list context, parse() provides offset to next data
ok 23 - exception raised for incomplete data
ok 24 - exception raised for incomplete data
ok 25 - exception raised for incomplete data
ok 26 - exception raised for incomplete data
ok 27 - exception raised for incomplete data
ok 28 - exception raised for incomplete data
ok 29 - exception raised for incomplete data
ok 30 - exception raised for incomplete data
ok 31 - exception raised for incomplete data
ok 32 - exception raised for incomplete data
ok 33 - exception raised for incomplete data
ok 34 - exception raised for incomplete data
ok 35 - exception raised for incomplete data
ok 36 - exception raised for incomplete data
ok 37 - exception raised for incomplete data
ok 38 - exception raised for incomplete data
ok 39 - exception raised for incomplete data
ok 40 - exception raised for unparsable data
ok 41 - exception raised for unparsable data
ok 42 - exception raised for unparsable data
ok 43 - example.com.	CH	A
ok 44 - example.com.	CH	AAAA
ok 45 - example.com.	CH	MX
ok 46 - example.com.	CH	NS
ok 47 - example.com.	CH	SOA
ok 48 - example.com.	CH	ANY
ok 49 - example.com.	IN	A
ok 50 - example.com.	IN	AAAA
ok 51 - example.com.	IN	MX
ok 52 - example.com.	IN	NS
ok 53 - example.com.	IN	SOA
ok 54 - example.com.	IN	ANY
ok 55 - example.com.	ANY	A
ok 56 - example.com.	ANY	AAAA
ok 57 - example.com.	ANY	MX
ok 58 - example.com.	ANY	NS
ok 59 - example.com.	ANY	SOA
ok 60 - example.com.	ANY	ANY
ok 61 - call qname('')
ok 62 - qname() is ''
ok 63 - call qname('P')
ok 64 - qname() is 'P'
ok 65 - call qname('Q.')
ok 66 - qname() is 'Q'
ok 67 - call qname('.')
ok 68 - qname() is ''
ok 69 - call qtype('')
ok 70 - qtype() is ''
ok 71 - call qtype('P')
ok 72 - qtype() is 'P'
ok 73 - call qtype('Q.')
ok 74 - qtype() is 'Q'
ok 75 - call qtype('.')
ok 76 - qtype() is ''
ok 77 - call qclass('')
ok 78 - qclass() is ''
ok 79 - call qclass('P')
ok 80 - qclass() is 'P'
ok 81 - call qclass('Q.')
ok 82 - qclass() is 'Q'
ok 83 - call qclass('.')
ok 84 - qclass() is ''
ok 85 - call zname('')
ok 86 - zname() is ''
ok 87 - call zname('P')
ok 88 - zname() is 'P'
ok 89 - call zname('Q.')
ok 90 - zname() is 'Q'
ok 91 - call zname('.')
ok 92 - zname() is ''
ok 93 - call ztype('')
ok 94 - ztype() is ''
ok 95 - call ztype('P')
ok 96 - ztype() is 'P'
ok 97 - call ztype('Q.')
ok 98 - ztype() is 'Q'
ok 99 - call ztype('.')
ok 100 - ztype() is ''
ok 101 - call zclass('')
ok 102 - zclass() is ''
ok 103 - call zclass('P')
ok 104 - zclass() is 'P'
ok 105 - call zclass('Q.')
ok 106 - zclass() is 'Q'
ok 107 - call zclass('.')
ok 108 - zclass() is ''
ok 109 - IPv4 PTR query
ok 110 - NS query in IPv4 space
ok 111 - SOA query in IPv4 space
ok 112 - ANY query in IPv4 space
ok 113 - IPv4 address
ok 114 - IP6v4 syntax
ok 115 - IPv4 address
ok 116 - IP6v4 syntax
ok 117 - IPv4 prefix 0
ok 118 - IPv4 prefix 10
ok 119 - IPv4 prefix 10.2
ok 120 - IPv4 prefix 10.2.3
ok 121 - IPv4 prefix /1
ok 122 - IPv4 prefix /2
ok 123 - IPv4 prefix /3
ok 124 - IPv4 prefix /4
ok 125 - IPv4 prefix /5
ok 126 - IPv4 prefix /6
ok 127 - IPv4 prefix /7
ok 128 - IPv4 prefix /8
ok 129 - IPv4 prefix /9
ok 130 - IPv4 prefix /10
ok 131 - IPv4 prefix /11
ok 132 - IPv4 prefix /12
ok 133 - IPv4 prefix /13
ok 134 - IPv4 prefix /14
ok 135 - IPv4 prefix /15
ok 136 - IPv4 prefix /16
ok 137 - IPv4 prefix /17
ok 138 - IPv4 prefix /18
ok 139 - IPv4 prefix /19
ok 140 - IPv4 prefix /20
ok 141 - IPv4 prefix /21
ok 142 - IPv4 prefix /22
ok 143 - IPv4 prefix /23
ok 144 - IPv4 prefix /24
ok 145 - IPv4 prefix /25
ok 146 - IPv4 prefix /26
ok 147 - IPv4 prefix /27
ok 148 - IPv4 prefix /28
ok 149 - IPv4 prefix /29
ok 150 - IPv4 prefix /30
ok 151 - IPv4 prefix /31
ok 152 - IPv4 prefix /32
ok 153 - IPv6 PTR query
ok 154 - IPv6 PTR query
ok 155 - NS query in IPv6 space
ok 156 - SOA query in IPv6 space
ok 157 - ANY query in IPv6 space
ok 158 - ::x (not IPv6)
ok 159 - IPv6 prefix :
ok 160 - IPv6 prefix 1:
ok 161 - IPv6 prefix 1:2
ok 162 - IPv6 prefix 1:2:3
ok 163 - IPv6 prefix 1:2:3:4
ok 164 - IPv6 prefix /1
ok 165 - IPv6 prefix /2
ok 166 - IPv6 prefix /3
ok 167 - IPv6 prefix /4
ok 168 - IPv6 prefix /5
ok 169 - IPv6 prefix /6
ok 170 - IPv6 prefix /7
ok 171 - IPv6 prefix /8
ok 172 - IPv6 prefix /124
ok 173 - IPv6 prefix /125
ok 174 - IPv6 prefix /126
ok 175 - IPv6 prefix /127
ok 176 - IPv6 prefix /128
ok 177 - expand 1:2:3:4:5:6::
ok 178 - expand 1:2:3:4:5::8
ok 179 - expand 1:2:3:4:5::
ok 180 - expand 1:2:3:4::7:8
ok 181 - expand 1:2:3:4::8
ok 182 - expand 1:2:3:4::
ok 183 - expand 1:2:3::6:7:8
ok 184 - expand 1:2:3::7:8
ok 185 - expand 1:2:3::8
ok 186 - expand 1:2:3::
ok 187 - expand 1:2::5:6:7:8
ok 188 - expand 1:2::6:7:8
ok 189 - expand 1:2::7:8
ok 190 - expand 1:2::8
ok 191 - expand 1:2::
ok 192 - expand 1::4:5:6:7:8
ok 193 - expand 1::5:6:7:8
ok 194 - expand 1::6:7:8
ok 195 - expand 1::7:8
ok 196 - expand 1::8
ok 197 - expand 1::
ok 198 - expand ::3:4:5:6:7:8
ok 199 - expand ::4:5:6:7:8
ok 200 - expand ::5:6:7:8
ok 201 - expand ::6:7:8
ok 202 - expand ::7:8
ok 203 - expand ::8
ok 204 - expand ::
ok
t/04-packet-unique-push.t .. 
1..77
ok 1 - use Net::DNS;
ok 2 - unique_push, case sensitivity test 1
ok 3 - unique_push, case sensitivity test 2
ok 4 - additional right
ok 5 - answer right
ok 6 - authority right
ok 7 - additional right
ok 8 - answer right
ok 9 - authority right
ok 10 - additional right
ok 11 - answer right
ok 12 - authority right
ok 13 - additional right
ok 14 - answer right
ok 15 - authority right
ok 16 - additional right
ok 17 - answer right
ok 18 - authority right
ok 19 - additional right
ok 20 - answer right
ok 21 - authority right
ok 22 - additional right
ok 23 - answer right
ok 24 - authority right
ok 25 - additional right
ok 26 - answer right
ok 27 - authority right
ok 28 - additional right
ok 29 - answer right
ok 30 - authority right
ok 31 - additional right
ok 32 - answer right
ok 33 - authority right
ok 34 - additional right
ok 35 - answer right
ok 36 - authority right
ok 37 - additional right
ok 38 - answer right
ok 39 - authority right
ok 40 - additional right
ok 41 - answer right
ok 42 - authority right
ok 43 - additional right
ok 44 - answer right
ok 45 - authority right
ok 46 - additional right
ok 47 - answer right
ok 48 - authority right
ok 49 - additional right
ok 50 - answer right
ok 51 - authority right
ok 52 - additional right
ok 53 - answer right
ok 54 - authority right
ok 55 - additional right
ok 56 - answer right
ok 57 - authority right
ok 58 - additional right
ok 59 - answer right
ok 60 - authority right
ok 61 - additional right
ok 62 - answer right
ok 63 - authority right
ok 64 - additional right
ok 65 - answer right
ok 66 - authority right
ok 67 - additional right
ok 68 - answer right
ok 69 - authority right
ok 70 - additional right
ok 71 - answer right
ok 72 - authority right
ok 73 - additional right
ok 74 - answer right
ok 75 - authority right
ok 76
ok 77
ok
Use of qw(...) as parentheses is deprecated at t/04-packet.t line 43.
t/04-packet.t .............. 
1..78
ok 1 - new() object isa Net::DNS::Packet
ok 2 - $packet->string
ok 3 - create query packet
ok 4 - packet->header() method works
ok 5 - header() returns header object
ok 6 - packet->question() returns single element list
ok 7 - list element is a question object
ok 8 - question object correct
ok 9 - create empty packet
ok 10 - question() returns empty list
ok 11 - answer() returns empty list
ok 12 - authority() returns empty list
ok 13 - additional() returns empty list
ok 14 - packet->data() method works
ok 15 - implicit question in empty packet
ok 16 - parse() object isa Net::DNS::Packet
ok 17 - decoded packet matches original
ok 18 - truncated (29 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 131.
ok 19 - truncated (28 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 131.
ok 20 - truncated (27 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 131.
ok 21 - truncated (26 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 131.
ok 22 - truncated (25 octets):	Exception: corrupt or incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 128.
ok 23 - truncated (24 octets):	Exception: corrupt or incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 128.
ok 24 - truncated (23 octets):	Exception: corrupt or incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 128.
ok 25 - truncated (22 octets):	Exception: corrupt or incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 128.
ok 26 - truncated (21 octets):	Exception: corrupt or incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 128.
ok 27 - truncated (20 octets):	Exception: corrupt or incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 128.
ok 28 - truncated (19 octets):	Exception: corrupt or incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 128.
ok 29 - truncated (18 octets):	Exception: corrupt or incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 128.
ok 30 - truncated (17 octets):	Exception: corrupt or incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 128.
ok 31 - truncated (16 octets):	Exception: corrupt or incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 128.
ok 32 - truncated (15 octets):	Exception: corrupt or incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 128.
ok 33 - truncated (14 octets):	Exception: corrupt or incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 128.
ok 34 - truncated (13 octets):	Exception: corrupt or incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 128.
ok 35 - truncated (12 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Question.pm line 131.
ok 36 - truncated (11 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Header.pm line 94.
ok 37 - truncated (10 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Header.pm line 94.
ok 38 - truncated (9 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Header.pm line 94.
ok 39 - truncated (8 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Header.pm line 94.
ok 40 - truncated (7 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Header.pm line 94.
ok 41 - truncated (6 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Header.pm line 94.
ok 42 - truncated (5 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Header.pm line 94.
ok 43 - truncated (4 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Header.pm line 94.
ok 44 - truncated (3 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Header.pm line 94.
ok 45 - truncated (2 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Header.pm line 94.
ok 46 - truncated (1 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Header.pm line 94.
ok 47 - truncated (0 octets):	Exception: incomplete data at /Users/loganbell/.cpanm/work/1315540098.4068/Net-DNS-0.66/blib/lib/Net/DNS/Header.pm line 94.
ok 48 - push first RR into answer section
ok 49 - push() returns answer RR count
ok 50 - push second RR into answer section
ok 51 - push() returns answer RR count
ok 52 - push first RR into authority section
ok 53 - push() returns authority RR count
ok 54 - push second RR into authority section
ok 55 - push() returns authority RR count
ok 56 - push first RR into additional section
ok 57 - push() returns additional RR count
ok 58 - push second RR into additional section
ok 59 - push() returns additional RR count
ok 60 - parse() from data buffer works
ok 61 - check header->qdcount correct
ok 62 - check header->ancount correct
ok 63 - check header->nscount correct
ok 64 - check header->arcount correct
ok 65 - check content of question section
ok 66 - check content of answer section
ok 67 - check content of authority section
ok 68 - check content of additional section
ok 69 - pop() RR from question section
ok 70 - pop() RR from answer section
ok 71 - pop() RR from authority section
ok 72 - pop() RR from additional section
ok 73 - check question count in synthetic packet header
ok 74 - check answer count in synthetic packet header
ok 75 - check authority count in synthetic packet header
ok 76 - check additional count in synthetic packet header
ok 77 - Additional section packet is EDNS0 type
ok 78 - EDNS0 packet size correct
ok
Use of qw(...) as parentheses is deprecated at t/05-apl.t line 16.
Use of qw(...) as parentheses is deprecated at t/05-apl.t line 21.
t/05-apl.t ................. 
1..18
ok 1 - String read/write correct for 1:192.168.32.0/21
ok 2 - String read/write correct for !1:192.168.32.0/21
ok 3 - String read/write correct for 2:FF00:0:0:0:0:0:0:0/8
ok 4 - Incorrect format not parsed
ok 5 - Incorrect format not parsed
ok 6 - Incorrect format not parsed
ok 7 - 1:192.168.42.0/26 compares
ok 8 - 1:192.168.42.0/26 compares
ok 9 - 1:192.168.42.64/26 compares
ok 10 - 1:192.168.42.64/26 compares
ok 11 - 1:192.168.42.128/25 compares
ok 12 - 1:192.168.42.128/25 compares
ok 13 - 1:224.0.0.0/4 compares
ok 14 - 1:224.0.0.0/4 compares
ok 15 - 2:FF00:0:0:0:0:0:0:0/8 compares
ok 16 - 2:FF00:0:0:0:0:0:0:0/8 compares
ok 17 - Packet content parsed
ok 18 - String parsing of APL RR
192.168.32.021 !192.168.38.028 
ok
t/05-rr-opt.t .............. 
1..7
ok 1 - use Net::DNS;
ok 2 - DO bit set
ok 3 - Clearing do, leaving the other bits 
ok 4 - DO bit cleared
ok 5 - Clearing do, leaving the other bits 
ok 6 - Size read
ok 7 - Size set
ok
t/05-rr-rrsort.t ........... 
1..22
ok 1 - SRV RR1 created
ok 2 - SRV RR2 created
ok 3 - SRV RR3 created
ok 4 - SRV RR4 created
ok 5 - SRV RR5 created
ok 6 - SRV RR6 created
ok 7 - SRV RR7 created
ok 8 - SRV RR8 created
ok 9 - A RR9 created
ok 10 - rrsort returns rrerly whith undefined arguments
ok 11 - rrsort returns properly whith undefined attribute (1)
ok 12 - rrsort returns properly whith undefined attribute (2)
ok 13 - rrsort returns properly whith undefined attribute (3)
ok 14 - rrsort returns properly whith undefined attribute (3)
ok 15 - rrsort correctly maintains RRs test 2
ok 16 - Sorting on SRV priority works
ok 17 - Default SRV sort works
ok 18 - Weight sorted SRV sort works
ok 19 - rrsort correctly maintains RRs test 1
ok 20 - rrsort correctly maintains RRs test 3
ok 21 - MX sorting
ok 22 - NS sorting
ok
t/05-rr-sshfp.t ............ skipped: Digest::BubbleBabble not installed.
t/05-rr-txt.t .............. 
1..38
ok 1 - use Net::DNS;
ok 2 - Double-quoted null string -- Stimulus 
ok 3 - Double-quoted null string -- Response ( rdatastr ) 
""
--------------
$VAR1 = bless( {
                 'rdlength' => 0,
                 'ttl' => '43201',
                 'name' => 'foo.example.com',
                 'class' => 'IN',
                 'type' => 'TXT',
                 'char_str_list' => [
                                      ''
                                    ],
                 'rdata' => ''
               }, 'Net::DNS::RR::TXT' );

==============================
ok 4 - Double-quoted null string -- char_str_list equality
ok 5 - Single-quoted null string -- Stimulus 
ok 6 - Single-quoted null string -- Response ( rdatastr ) 


''
--------------
$VAR1 = bless( {
                 'rdlength' => 0,
                 'ttl' => '43201',
                 'name' => 'foo.example.com',
                 'class' => 'IN',
                 'type' => 'TXT',
                 'char_str_list' => [
                                      ''
                                    ],
                 'rdata' => ''
               }, 'Net::DNS::RR::TXT' );

==============================
ok 7 - Single-quoted null string -- char_str_list equality
ok 8 - Double-quoted whitespace string -- Stimulus 
ok 9 - Double-quoted whitespace string -- Response ( rdatastr ) 


" 	"
--------------
$VAR1 = bless( {
                 'rdlength' => 0,
                 'ttl' => '43201',
                 'name' => 'foo.example.com',
                 'class' => 'IN',
                 'type' => 'TXT',
                 'char_str_list' => [
                                      ' 	'
                                    ],
                 'rdata' => ''
               }, 'Net::DNS::RR::TXT' );

==============================
ok 10 - Double-quoted whitespace string -- char_str_list equality
ok 11 - unquoted single string -- Stimulus 
ok 12 - unquoted single string -- Response ( rdatastr ) 


noquotes
--------------
$VAR1 = bless( {
                 'rdlength' => 0,
                 'ttl' => '43201',
                 'name' => 'foo.example.com',
                 'class' => 'IN',
                 'type' => 'TXT',
                 'char_str_list' => [
                                      'noquotes'
                                    ],
                 'rdata' => ''
               }, 'Net::DNS::RR::TXT' );

==============================
ok 13 - unquoted single string -- char_str_list equality
ok 14 - Double-quoted single string -- Stimulus 
ok 15 - Double-quoted single string -- Response ( rdatastr ) 


"yes_quotes"
--------------
$VAR1 = bless( {
                 'rdlength' => 0,
                 'ttl' => '43201',
                 'name' => 'foo.example.com',
                 'class' => 'IN',
                 'type' => 'TXT',
                 'char_str_list' => [
                                      'yes_quotes'
                                    ],
                 'rdata' => ''
               }, 'Net::DNS::RR::TXT' );

==============================
ok 16 - Double-quoted single string -- char_str_list equality
ok 17 - Quoted, escaped double-quote -- Stimulus 
ok 18 - Quoted, escaped double-quote -- Response ( rdatastr ) 


"escaped \" quote"
--------------
$VAR1 = bless( {
                 'rdlength' => 0,
                 'ttl' => '43201',
                 'name' => 'foo.example.com',
                 'class' => 'IN',
                 'type' => 'TXT',
                 'char_str_list' => [
                                      'escaped " quote'
                                    ],
                 'rdata' => ''
               }, 'Net::DNS::RR::TXT' );

==============================
ok 19 - Quoted, escaped double-quote -- char_str_list equality
ok 20 - Two unquoted strings -- Stimulus 
ok 21 - Two unquoted strings -- Response ( rdatastr ) 


two tokens
--------------
$VAR1 = bless( {
                 'rdlength' => 0,
                 'ttl' => '43201',
                 'name' => 'foo.example.com',
                 'class' => 'IN',
                 'type' => 'TXT',
                 'char_str_list' => [
                                      'two',
                                      'tokens'
                                    ],
                 'rdata' => ''
               }, 'Net::DNS::RR::TXT' );

==============================
ok 22 - Two unquoted strings -- char_str_list equality
ok 23 - Unbalanced quotes work -- Stimulus 
ok 24 - Unbalanced quotes work -- Response ( rdatastr ) 


"missing quote
--------------
$VAR1 = bless( {
                 'rdlength' => 0,
                 'ttl' => '43201',
                 'name' => 'foo.example.com',
                 'class' => 'IN',
                 'type' => 'TXT',
                 'char_str_list' => [],
                 'rdata' => ''
               }, 'Net::DNS::RR::TXT' );

==============================
ok 25 - Unbalanced quotes work -- char_str_list equality
ok 26 - Semi Colon -- Stimulus 
ok 27 - Semi Colon -- Response ( rdatastr ) 


\;
--------------
$VAR1 = bless( {
                 'rdlength' => 0,
                 'ttl' => '43201',
                 'name' => 'foo.example.com',
                 'class' => 'IN',
                 'type' => 'TXT',
                 'char_str_list' => [
                                      ';'
                                    ],
                 'rdata' => ''
               }, 'Net::DNS::RR::TXT' );

==============================
ok 28 - Semi Colon -- char_str_list equality
ok 29 - RR->new_from_hash with txtdata -- Stimulus
ok 30 - RR->new_from_hash with txtdata -- Response (rdatastr())
ok 31 - TXT->rr_rdata
ok 32 - Character string in quotes 1
ok 33 - Character string in quotes 2
ok 34 - Failed parsing of to many HINFO strings
ok 35 - Character string in quotes 3
ok 36 - Character string in quotes 4
ok 37 - char_str_list[0] returns unescaped ;
ok 38 - string method returns escaped ;
ok
t/05-rr-unknown.t .......... 
1..19
ok 1 - use Net::DNS;
ok 2 - typesbyname(TYPE10226) returns 10226
ok 3 - typesbyval(10226) returns TYPE10226
ok 4 -        typesbyval(1) returns A
ok 5 - typesbyval(typebyname(TYPE001)) returns A
ok 6 - Fails on large TYPE code
ok 7 - classesbyname(CLASS124) returns 124
ok 8 - classesbyval(125) returns CLASS125
ok 9 - classesbyval(1) returns IN
ok 10 - classesbyval(typebyname(CLASS04)) returns HS
ok 11 - Fails on large CLASS code
ok 12 - TYPE01 parsed OK
ok 13 - CLASS01 parsed OK
ok 14 - Unknown RR representation for A parsed OK
ok 15 - Fails on inconsistent length and hex presentation
ok 16 - Fully unknown RR parsed correctly
ok 17 - Fully unknown RR in unknown CLASS parsed correctly
ok 18 - Packet read from a packet dumped by bind...
ok 19 - ATMA, is known but undefined
ok
t/05-rr-various.t .......... 
1..7
ok 1 - Stripdot does its magic in precense of escapes test 1
ok 2 - Stripdot does its magic in precense of escapes test 2
ok 3 - Stripdot handles empty strings as it should
ok 4 - v4compat AAAA records parsed correctly
ok 5 - New from string and new from hash creation 
ok 6 - Lets have cafe:babe:0:0:0:0:0:1
ok 7 - Failed to parse 5.5.5.5 1200 IN NAPTR    100 100 "u" "E2U+X-ADDRESS" "!^(.*)$!data:,CN=East test;ST=CT;C=United States;uid=ast1;intrunk=dms500!" .
ok
# Number of RRs: 33 Number of methods: 127
t/05-rr.t .................. 
1..421
ok 1 - use Net::DNS;
ok 2 - Packet created
ok 3 - SOA - minimum() correct for hash based creation
ok 4 - SOA - serial() correct for hash based creation
ok 5 - SOA - mname() correct for hash based creation
ok 6 - SOA - retry() correct for hash based creation
ok 7 - SOA - refresh() correct for hash based creation
ok 8 - SOA - type() correct for hash based creation
ok 9 - SOA - rname() correct for hash based creation
ok 10 - SOA - expire() correct for hash based creation
ok 11 - A - address() correct for hash based creation
ok 12 - A - type() correct for hash based creation
ok 13 - AAAA - address() correct for hash based creation
ok 14 - AAAA - type() correct for hash based creation
ok 15 - AFSDB - subtype() correct for hash based creation
ok 16 - AFSDB - hostname() correct for hash based creation
ok 17 - AFSDB - type() correct for hash based creation
ok 18 - CNAME - type() correct for hash based creation
ok 19 - CNAME - cname() correct for hash based creation
ok 20 - DNAME - dname() correct for hash based creation
ok 21 - DNAME - type() correct for hash based creation
ok 22 - HINFO - cpu() correct for hash based creation
ok 23 - HINFO - type() correct for hash based creation
ok 24 - HINFO - os() correct for hash based creation
ok 25 - ISDN - sa() correct for hash based creation
ok 26 - ISDN - address() correct for hash based creation
ok 27 - ISDN - type() correct for hash based creation
ok 28 - MB - madname() correct for hash based creation
ok 29 - MB - type() correct for hash based creation
ok 30 - MG - mgmname() correct for hash based creation
ok 31 - MG - type() correct for hash based creation
ok 32 - MINFO - rmailbx() correct for hash based creation
ok 33 - MINFO - type() correct for hash based creation
ok 34 - MINFO - emailbx() correct for hash based creation
ok 35 - MR - newname() correct for hash based creation
ok 36 - MR - type() correct for hash based creation
ok 37 - MX - preference() correct for hash based creation
ok 38 - MX - type() correct for hash based creation
ok 39 - MX - exchange() correct for hash based creation
ok 40 - NAPTR - preference() correct for hash based creation
ok 41 - NAPTR - flags() correct for hash based creation
ok 42 - NAPTR - regexp() correct for hash based creation
ok 43 - NAPTR - order() correct for hash based creation
ok 44 - NAPTR - type() correct for hash based creation
ok 45 - NAPTR - service() correct for hash based creation
ok 46 - NAPTR - replacement() correct for hash based creation
ok 47 - NS - nsdname() correct for hash based creation
ok 48 - NS - type() correct for hash based creation
ok 49 - NSAP - dfi() correct for hash based creation
ok 50 - NSAP - area() correct for hash based creation
ok 51 - NSAP - idi() correct for hash based creation
ok 52 - NSAP - sel() correct for hash based creation
ok 53 - NSAP - afi() correct for hash based creation
ok 54 - NSAP - type() correct for hash based creation
ok 55 - NSAP - id() correct for hash based creation
ok 56 - NSAP - aa() correct for hash based creation
ok 57 - NSAP - rd() correct for hash based creation
ok 58 - PTR - ptrdname() correct for hash based creation
ok 59 - PTR - type() correct for hash based creation
ok 60 - PX - preference() correct for hash based creation
ok 61 - PX - map822() correct for hash based creation
ok 62 - PX - mapx400() correct for hash based creation
ok 63 - PX - type() correct for hash based creation
ok 64 - RP - txtdname() correct for hash based creation
ok 65 - RP - type() correct for hash based creation
ok 66 - RP - mbox() correct for hash based creation
ok 67 - RT - preference() correct for hash based creation
ok 68 - RT - type() correct for hash based creation
ok 69 - RT - intermediate() correct for hash based creation
ok 70 - SRV - priority() correct for hash based creation
ok 71 - SRV - target() correct for hash based creation
ok 72 - SRV - weight() correct for hash based creation
ok 73 - SRV - type() correct for hash based creation
ok 74 - SRV - port() correct for hash based creation
ok 75 - TXT - txtdata() correct for hash based creation
ok 76 - TXT - type() correct for hash based creation
ok 77 - X25 - psdn() correct for hash based creation
ok 78 - X25 - type() correct for hash based creation
ok 79 - LOC - longitude() correct for hash based creation
ok 80 - LOC - version() correct for hash based creation
ok 81 - LOC - size() correct for hash based creation
ok 82 - LOC - horiz_pre() correct for hash based creation
ok 83 - LOC - latitude() correct for hash based creation
ok 84 - LOC - vert_pre() correct for hash based creation
ok 85 - LOC - type() correct for hash based creation
ok 86 - LOC - altitude() correct for hash based creation
ok 87 - CERT - algorithm() correct for hash based creation
ok 88 - CERT - format() correct for hash based creation
ok 89 - CERT - certificate() correct for hash based creation
ok 90 - CERT - tag() correct for hash based creation
ok 91 - CERT - type() correct for hash based creation
ok 92 - SPF - txtdata() correct for hash based creation
ok 93 - SPF - type() correct for hash based creation
ok 94 - IPSECKEY - algorithm() correct for hash based creation
ok 95 - IPSECKEY - precedence() correct for hash based creation
ok 96 - IPSECKEY - gateway() correct for hash based creation
ok 97 - IPSECKEY - gatetype() correct for hash based creation
ok 98 - IPSECKEY - pubkey() correct for hash based creation
ok 99 - IPSECKEY - type() correct for hash based creation
ok 100 - IPSECKEY - algorithm() correct for hash based creation
ok 101 - IPSECKEY - precedence() correct for hash based creation
ok 102 - IPSECKEY - gateway() correct for hash based creation
ok 103 - IPSECKEY - gatetype() correct for hash based creation
ok 104 - IPSECKEY - pubkey() correct for hash based creation
ok 105 - IPSECKEY - type() correct for hash based creation
ok 106 - IPSECKEY - algorithm() correct for hash based creation
ok 107 - IPSECKEY - precedence() correct for hash based creation
ok 108 - IPSECKEY - gateway() correct for hash based creation
ok 109 - IPSECKEY - gatetype() correct for hash based creation
ok 110 - IPSECKEY - pubkey() correct for hash based creation
ok 111 - IPSECKEY - type() correct for hash based creation
ok 112 - IPSECKEY - algorithm() correct for hash based creation
ok 113 - IPSECKEY - precedence() correct for hash based creation
ok 114 - IPSECKEY - gateway() correct for hash based creation
ok 115 - IPSECKEY - gatetype() correct for hash based creation
ok 116 - IPSECKEY - pubkey() correct for hash based creation
ok 117 - IPSECKEY - type() correct for hash based creation
ok 118
ok 119 - HIP -  rendezvousservers() correct for hash based creation (HIP specific test)
ok 120 - HIP - pubkey() correct for hash based creation
ok 121 - HIP - hit() correct for hash based creation
ok 122 - HIP - type() correct for hash based creation
ok 123 - HIP - pkalgorithm() correct for hash based creation
ok 124 - DHCID - identifiertype() correct for hash based creation
ok 125 - DHCID - digesttype() correct for hash based creation
ok 126 - DHCID - digest() correct for hash based creation
ok 127 - DHCID - type() correct for hash based creation
ok 128 - KX - preference() correct for hash based creation
ok 129 - KX - type() correct for hash based creation
ok 130 - KX - exchange() correct for hash based creation
ok 131 - Packet has data after pushes
ok 132 - Packet reconstructed from data
ok 133 - Packet returned correct answer section
ok 134 - SOA - RR defined
ok 135 - SOA - name() correct
ok 136 - SOA - class() correct
ok 137 - SOA - ttl() correct
ok 138 - SOA - minimum() correct
ok 139 - SOA - serial() correct
ok 140 - SOA - mname() correct
ok 141 - SOA - retry() correct
ok 142 - SOA - refresh() correct
ok 143 - SOA - type() correct
ok 144 - SOA - rname() correct
ok 145 - SOA - expire() correct
ok 146 - SOA - Parsing from string works
ok 147 - A - RR defined
ok 148 - A - name() correct
ok 149 - A - class() correct
ok 150 - A - ttl() correct
ok 151 - A - address() correct
ok 152 - A - type() correct
ok 153 - A - Parsing from string works
ok 154 - AAAA - RR defined
ok 155 - AAAA - name() correct
ok 156 - AAAA - class() correct
ok 157 - AAAA - ttl() correct
ok 158 - AAAA - address() correct
ok 159 - AAAA - type() correct
ok 160 - AAAA - Parsing from string works
ok 161 - AFSDB - RR defined
ok 162 - AFSDB - name() correct
ok 163 - AFSDB - class() correct
ok 164 - AFSDB - ttl() correct
ok 165 - AFSDB - subtype() correct
ok 166 - AFSDB - hostname() correct
ok 167 - AFSDB - type() correct
ok 168 - AFSDB - Parsing from string works
ok 169 - CNAME - RR defined
ok 170 - CNAME - name() correct
ok 171 - CNAME - class() correct
ok 172 - CNAME - ttl() correct
ok 173 - CNAME - type() correct
ok 174 - CNAME - cname() correct
ok 175 - CNAME - Parsing from string works
ok 176 - DNAME - RR defined
ok 177 - DNAME - name() correct
ok 178 - DNAME - class() correct
ok 179 - DNAME - ttl() correct
ok 180 - DNAME - dname() correct
ok 181 - DNAME - type() correct
ok 182 - DNAME - Parsing from string works
ok 183 - HINFO - RR defined
ok 184 - HINFO - name() correct
ok 185 - HINFO - class() correct
ok 186 - HINFO - ttl() correct
ok 187 - HINFO - cpu() correct
ok 188 - HINFO - type() correct
ok 189 - HINFO - os() correct
ok 190 - HINFO - Parsing from string works
ok 191 - ISDN - RR defined
ok 192 - ISDN - name() correct
ok 193 - ISDN - class() correct
ok 194 - ISDN - ttl() correct
ok 195 - ISDN - sa() correct
ok 196 - ISDN - address() correct
ok 197 - ISDN - type() correct
ok 198 - ISDN - Parsing from string works
ok 199 - MB - RR defined
ok 200 - MB - name() correct
ok 201 - MB - class() correct
ok 202 - MB - ttl() correct
ok 203 - MB - madname() correct
ok 204 - MB - type() correct
ok 205 - MB - Parsing from string works
ok 206 - MG - RR defined
ok 207 - MG - name() correct
ok 208 - MG - class() correct
ok 209 - MG - ttl() correct
ok 210 - MG - mgmname() correct
ok 211 - MG - type() correct
ok 212 - MG - Parsing from string works
ok 213 - MINFO - RR defined
ok 214 - MINFO - name() correct
ok 215 - MINFO - class() correct
ok 216 - MINFO - ttl() correct
ok 217 - MINFO - rmailbx() correct
ok 218 - MINFO - type() correct
ok 219 - MINFO - emailbx() correct
ok 220 - MINFO - Parsing from string works
ok 221 - MR - RR defined
ok 222 - MR - name() correct
ok 223 - MR - class() correct
ok 224 - MR - ttl() correct
ok 225 - MR - newname() correct
ok 226 - MR - type() correct
ok 227 - MR - Parsing from string works
ok 228 - MX - RR defined
ok 229 - MX - name() correct
ok 230 - MX - class() correct
ok 231 - MX - ttl() correct
ok 232 - MX - preference() correct
ok 233 - MX - type() correct
ok 234 - MX - exchange() correct
ok 235 - MX - Parsing from string works
ok 236 - NAPTR - RR defined
ok 237 - NAPTR - name() correct
ok 238 - NAPTR - class() correct
ok 239 - NAPTR - ttl() correct
ok 240 - NAPTR - preference() correct
ok 241 - NAPTR - flags() correct
ok 242 - NAPTR - regexp() correct
ok 243 - NAPTR - order() correct
ok 244 - NAPTR - type() correct
ok 245 - NAPTR - service() correct
ok 246 - NAPTR - replacement() correct
ok 247 - NAPTR - Parsing from string works
ok 248 - NS - RR defined
ok 249 - NS - name() correct
ok 250 - NS - class() correct
ok 251 - NS - ttl() correct
ok 252 - NS - nsdname() correct
ok 253 - NS - type() correct
ok 254 - NS - Parsing from string works
ok 255 - NSAP - RR defined
ok 256 - NSAP - name() correct
ok 257 - NSAP - class() correct
ok 258 - NSAP - ttl() correct
ok 259 - NSAP - dfi() correct
ok 260 - NSAP - area() correct
ok 261 - NSAP - idi() correct
ok 262 - NSAP - sel() correct
ok 263 - NSAP - afi() correct
ok 264 - NSAP - type() correct
ok 265 - NSAP - id() correct
ok 266 - NSAP - aa() correct
ok 267 - NSAP - rd() correct
ok 268 - NSAP - Parsing from string works
ok 269 - PTR - RR defined
ok 270 - PTR - name() correct
ok 271 - PTR - class() correct
ok 272 - PTR - ttl() correct
ok 273 - PTR - ptrdname() correct
ok 274 - PTR - type() correct
ok 275 - PTR - Parsing from string works
ok 276 - PX - RR defined
ok 277 - PX - name() correct
ok 278 - PX - class() correct
ok 279 - PX - ttl() correct
ok 280 - PX - preference() correct
ok 281 - PX - map822() correct
ok 282 - PX - mapx400() correct
ok 283 - PX - type() correct
ok 284 - PX - Parsing from string works
ok 285 - RP - RR defined
ok 286 - RP - name() correct
ok 287 - RP - class() correct
ok 288 - RP - ttl() correct
ok 289 - RP - txtdname() correct
ok 290 - RP - type() correct
ok 291 - RP - mbox() correct
ok 292 - RP - Parsing from string works
ok 293 - RT - RR defined
ok 294 - RT - name() correct
ok 295 - RT - class() correct
ok 296 - RT - ttl() correct
ok 297 - RT - preference() correct
ok 298 - RT - type() correct
ok 299 - RT - intermediate() correct
ok 300 - RT - Parsing from string works
ok 301 - SRV - RR defined
ok 302 - SRV - name() correct
ok 303 - SRV - class() correct
ok 304 - SRV - ttl() correct
ok 305 - SRV - priority() correct
ok 306 - SRV - target() correct
ok 307 - SRV - weight() correct
ok 308 - SRV - type() correct
ok 309 - SRV - port() correct
ok 310 - SRV - Parsing from string works
ok 311 - TXT - RR defined
ok 312 - TXT - name() correct
ok 313 - TXT - class() correct
ok 314 - TXT - ttl() correct
ok 315 - TXT - txtdata() correct
ok 316 - TXT - type() correct
ok 317 - TXT - Parsing from string works
ok 318 - X25 - RR defined
ok 319 - X25 - name() correct
ok 320 - X25 - class() correct
ok 321 - X25 - ttl() correct
ok 322 - X25 - psdn() correct
ok 323 - X25 - type() correct
ok 324 - X25 - Parsing from string works
ok 325 - LOC - RR defined
ok 326 - LOC - name() correct
ok 327 - LOC - class() correct
ok 328 - LOC - ttl() correct
ok 329 - LOC - longitude() correct
ok 330 - LOC - version() correct
ok 331 - LOC - size() correct
ok 332 - LOC - horiz_pre() correct
ok 333 - LOC - latitude() correct
ok 334 - LOC - vert_pre() correct
ok 335 - LOC - type() correct
ok 336 - LOC - altitude() correct
ok 337 - LOC - Parsing from string works
ok 338 - CERT - RR defined
ok 339 - CERT - name() correct
ok 340 - CERT - class() correct
ok 341 - CERT - ttl() correct
ok 342 - CERT - algorithm() correct
ok 343 - CERT - format() correct
ok 344 - CERT - certificate() correct
ok 345 - CERT - tag() correct
ok 346 - CERT - type() correct
ok 347 - CERT - Parsing from string works
ok 348 - SPF - RR defined
ok 349 - SPF - name() correct
ok 350 - SPF - class() correct
ok 351 - SPF - ttl() correct
ok 352 - SPF - txtdata() correct
ok 353 - SPF - type() correct
ok 354 - SPF - Parsing from string works
ok 355 - IPSECKEY - RR defined
ok 356 - IPSECKEY - name() correct
ok 357 - IPSECKEY - class() correct
ok 358 - IPSECKEY - ttl() correct
ok 359 - IPSECKEY - algorithm() correct
ok 360 - IPSECKEY - precedence() correct
ok 361 - IPSECKEY - gatetype() correct
ok 362 - IPSECKEY - pubkey() correct
ok 363 - IPSECKEY - type() correct
ok 364 - IPSECKEY - Parsing from string works
ok 365 - IPSECKEY - RR defined
ok 366 - IPSECKEY - name() correct
ok 367 - IPSECKEY - class() correct
ok 368 - IPSECKEY - ttl() correct
ok 369 - IPSECKEY - algorithm() correct
ok 370 - IPSECKEY - precedence() correct
ok 371 - IPSECKEY - gatetype() correct
ok 372 - IPSECKEY - pubkey() correct
ok 373 - IPSECKEY - type() correct
ok 374 - IPSECKEY - Parsing from string works
ok 375 - IPSECKEY - RR defined
ok 376 - IPSECKEY - name() correct
ok 377 - IPSECKEY - class() correct
ok 378 - IPSECKEY - ttl() correct
ok 379 - IPSECKEY - algorithm() correct
ok 380 - IPSECKEY - precedence() correct
ok 381 - IPSECKEY - gatetype() correct
ok 382 - IPSECKEY - pubkey() correct
ok 383 - IPSECKEY - type() correct
ok 384 - IPSECKEY - Parsing from string works
ok 385 - IPSECKEY - RR defined
ok 386 - IPSECKEY - name() correct
ok 387 - IPSECKEY - class() correct
ok 388 - IPSECKEY - ttl() correct
ok 389 - IPSECKEY - algorithm() correct
ok 390 - IPSECKEY - precedence() correct
ok 391 - IPSECKEY - gateway() correct
ok 392 - IPSECKEY - gatetype() correct
ok 393 - IPSECKEY - pubkey() correct
ok 394 - IPSECKEY - type() correct
ok 395 - IPSECKEY - Parsing from string works
ok 396 - HIP - RR defined
ok 397 - HIP - name() correct
ok 398 - HIP - class() correct
ok 399 - HIP - ttl() correct
ok 400 - HIP - pubkey() correct
ok 401 - HIP - hit() correct
ok 402 - HIP - type() correct
ok 403 - HIP - pkalgorithm() correct
ok 404 - HIP - Parsing from string works
ok 405 - DHCID - RR defined
ok 406 - DHCID - name() correct
ok 407 - DHCID - class() correct
ok 408 - DHCID - ttl() correct
ok 409 - DHCID - identifiertype() correct
ok 410 - DHCID - digesttype() correct
ok 411 - DHCID - digest() correct
ok 412 - DHCID - type() correct
ok 413 - DHCID - Parsing from string works
ok 414 - KX - RR defined
ok 415 - KX - name() correct
ok 416 - KX - class() correct
ok 417 - KX - ttl() correct
ok 418 - KX - preference() correct
ok 419 - KX - type() correct
ok 420 - KX - exchange() correct
ok 421 - KX - Parsing from string works
ok
t/06-update.t .............. 
1..72
ok 1 - use Net::DNS;
ok 2 - new() returned packet
ok 3 - header opcode correct
ok 4 - zname correct
ok 5 - zclass correct
ok 6 - ztype correct
ok 7 - yxrrset() returned RR
ok 8 - yxrrset - right name
ok 9 - yxrrset - right TTL
ok 10 - yxrrset - right class
ok 11 - yxrrset - right type
ok 12 - yxrrset - data empty
ok 13 - yxrrset() returned RR
ok 14 - yxrrset - right name
ok 15 - yxrrset - right TTL
ok 16 - yxrrset - right class
ok 17 - yxrrset - right type
ok 18 - yxrrset - right data
ok 19 - nxrrset() returned RR
ok 20 - nxrrset - right name
ok 21 - nxrrset - right ttl
ok 22 - nxrrset - right class
ok 23 - nxrrset - right type
ok 24 - nxrrset - data empty
ok 25 - yxdomain() returned RR
ok 26 - yxdomain - right name
ok 27 - yxdomain - right ttl
ok 28 - yxdomain - right class
ok 29 - yxdomain - right type
ok 30 - yxdomain - data empty
ok 31 - nxdomain() returned RR
ok 32 - nxdomain - right name
ok 33 - nxdomain - right ttl
ok 34 - nxdomain - right class
ok 35 - nxdomain - right type
ok 36 - nxdomain - data empty
ok 37 - nxdomain() returned RR
ok 38 - nxdomain - right name
ok 39 - nxdomain - right ttl
ok 40 - nxdomain - right class
ok 41 - nxdomain - right type
ok 42 - nxdomain - data empty
ok 43 - rr_add() returned RR
ok 44 - rr_add - right name
ok 45 - rr_add - right ttl
ok 46 - rr_add - right class
ok 47 - rr_add - right type
ok 48 - rr_add - right data
ok 49 - rr_del() returned RR
ok 50 - rr_del - right name
ok 51 - rr_del - right ttl
ok 52 - rr_del - right class
ok 53 - rr_del - right type
ok 54 - rr_del - data empty
ok 55 - rr_del() returned RR
ok 56 - rr_del - right name
ok 57 - rr_del - right ttl
ok 58 - rr_del - right class
ok 59 - rr_del - right type
ok 60 - rr_del - data empty
ok 61 - rr_del() returned RR
ok 62 - rr_del - right name
ok 63 - rr_del - right ttl
ok 64 - rr_del - right class
ok 65 - rr_del - right type
ok 66 - rr_del - right data
ok 67 - packet created
ok 68 - pushed inserted correctly
ok 69 - first class right
ok 70 - second class right
ok 71 - third class right
ok 72 - forth class right
ok
t/07-misc.t ................ 
1..37
ok 1 - use Net::DNS;
ok 2 - RR got made
ok 3 - Name is correct
ok 4 - TTL is correct
ok 5 - CLASS is correct
ok 6 - TYPE is correct
ok 7 - Address is correct
ok 8 - No errors
ok 9 - SRV got made
ok 10 - RR created
ok 11 - Preference works
ok 12 - No evil warning
ok 13
ok 14
ok 15
ok 16
ok 17
ok 18 - First Char string in TXT RR read from wireformat
ok 19 - Second Char string in TXT RR read from wireformat
ok 20 - First arg string in TXT RR read from zonefileformat
ok 21 - Second Char string in TXT RR read from zonefileformat
ok 22 - Escaped " between the  single quotes
ok 23 - _ip_is_ipv4, test 1
ok 24 - _ip_is_ipv4, test 2
ok 25 - _ip_is_ipv4, test 3
ok 26 - _ip_is_ipv4, test 4
ok 27 - _ip_is_ipv4, test 5
ok 28 - _ip_is_ipv6, test 1
ok 29 - _ip_is_ipv6, test 2
ok 30 - _ip_is_ipv6, test 3
ok 31 - _ip_is_ipv6, test 4
ok 32 - _ip_is_ipv6, test 5
ok 33 - _ip_is_ipv6, test 6
ok 34 - _ip_is_ipv6, test 7
ok 35 - _ip_is_ipv6, test 8
ok 36 - _ip_is_ipv6, test 9
ok 37 - _ip_is_ipv6, test 10
ok

#   Failed test 'Correct answer count (with search)'
#   at t/08-online.t line 172.
#          got: '2'
#     expected: '1'

#   Failed test 'Correct name (with search)'
#   at t/08-online.t line 176.
#          got: 'a.t'
#     expected: 'a.t.net-dns.org'

#   Failed test 'Correct answer count (with persistent socket and search)'
#   at t/08-online.t line 261.
#          got: '2'
#     expected: '1'

#   Failed test 'Correct name (with persistent socket and search)'
#   at t/08-online.t line 266.
#          got: 'a.t'
#     expected: 'a.t.net-dns.org'
# Looks like you failed 4 tests of 95.
t/08-online.t .............. 
1..95
ok 1 - use Net::DNS;
ok 2 - Got an answer for a.t.net-dns.org IN A
ok 3 - Only one question
ok 4 - Got single answer
ok 5 - Got question
ok 6 - Question has right name
ok 7 - Question has right type
ok 8 - Question has right class
ok 9
ok 10 - Class correct
ok 11 - name correct (a.t.net-dns.org)
ok 12 - address correct (a.t.net-dns.org)
ok 13 - type correct (a.t.net-dns.org)
ok 14 - Got an answer for mx.t.net-dns.org IN MX
ok 15 - Only one question
ok 16 - Got single answer
ok 17 - Got question
ok 18 - Question has right name
ok 19 - Question has right type
ok 20 - Question has right class
ok 21
ok 22 - Class correct
ok 23 - preference correct (mx.t.net-dns.org)
ok 24 - name correct (mx.t.net-dns.org)
ok 25 - type correct (mx.t.net-dns.org)
ok 26 - exchange correct (mx.t.net-dns.org)
ok 27 - Got an answer for cname.t.net-dns.org IN CNAME
ok 28 - Only one question
ok 29 - Got single answer
ok 30 - Got question
ok 31 - Question has right name
ok 32 - Question has right type
ok 33 - Question has right class
ok 34
ok 35 - Class correct
ok 36 - name correct (cname.t.net-dns.org)
ok 37 - type correct (cname.t.net-dns.org)
ok 38 - cname correct (cname.t.net-dns.org)
ok 39 - Got an answer for txt.t.net-dns.org IN TXT
ok 40 - Only one question
ok 41 - Got single answer
ok 42 - Got question
ok 43 - Question has right name
ok 44 - Question has right type
ok 45 - Question has right class
ok 46
ok 47 - Class correct
ok 48 - txtdata correct (txt.t.net-dns.org)
ok 49 - name correct (txt.t.net-dns.org)
ok 50 - type correct (txt.t.net-dns.org)
ok 51 - mx() seems to be working
ok 52 - mx() works in scalar context
ok 53 - The object isa Net::DNS::Packet
ok 54 - search(198.41.0.4) works
ok 55 - The object isa Net::DNS::Packet
ok 56 - query(198.41.0.4) works
ok 57 - The object isa Net::DNS::Packet
ok 58 - search(2001:500:1::803f:235) works
ok 59 - The object isa Net::DNS::Packet
ok 60 - query(2001:500:1::803f:235) works
ok 61 - The object isa Net::DNS::Packet
ok 62 - Correct answer count (with search)
ok 63 - The object isa Net::DNS::RR::A
ok 64 - Correct name (with search)
ok 65 - The object isa Net::DNS::Packet
not ok 66 - Correct answer count (with search)
ok 67 - The object isa Net::DNS::RR::A
not ok 68 - Correct name (with search)
ok 69 - The object isa Net::DNS::Packet
ok 70 - Correct answer count (with query)
ok 71 - The object isa Net::DNS::RR::A
ok 72 - Correct name (with query)
ok 73 - Socket returned
ok 74 - Socket is ready
ok 75 - Answerfrom defined(68.116.46.115)
ok 76 - Answersize defined(262)
ok 77 - Correct answer count
ok 78 - The object isa Net::DNS::RR::A
ok 79 - Correct name
ok 80 - Persistend UDP socket identified
ok 81 - Persistent socket matches
ok 82 - The object isa Net::DNS::Packet
ok 83 - Correct answer count (with persistent socket and search)
ok 84 - The object isa Net::DNS::RR::A
ok 85 - Correct name (with persistent socket and search)
ok 86 - Persistent socket matches
ok 87 - The object isa Net::DNS::Packet
not ok 88 - Correct answer count (with persistent socket and search)
ok 89 - The object isa Net::DNS::RR::A
not ok 90 - Correct name (with persistent socket and search)
ok 91 - Persistent socket matches
ok 92 - The object isa Net::DNS::Packet
ok 93 - Correct answer count (with persistent socket and query)
ok 94 - The object isa Net::DNS::RR::A
ok 95 - Correct name (with persistent socket and query)
Dubious, test returned 4 (wstat 1024, 0x400)
Failed 4/95 subtests 
t/09-tkey.t ................ 
1..7
ok 1 - use Net::DNS;
ok 2 - new() returned packet
ok 3 - header opcode correct
ok 4 - zname correct
ok 5 - zclass correct
ok 6 - ztype correct
ok 7 - MAC correct
ok
t/10-recurse.t ............. skipped: Cannot run these tests from this IP:192.168.1.100
# Using the  XS compiled dn_expand function 
# 
# disabling XS based dns_expand for a moment.
# 
# Continuing to use the XS based dn_expand()
t/11-escapedchars.t ........ 
1..141
ok 1 - consistent labelcount (3)
ok 2 - labellength for label 0 equals 4
ok 3 - labellength for label 1 equals 3
ok 4 - labellength for label 2 equals 3
ok 5 - Wireinhex for bla\255.foo.org
ok 6 - DN_EXPAND (xs) consistent
ok 7 - DN_EXPAND (pp) consistent
ok 8 - consistent labelcount (3)
ok 9 - labellength for label 0 equals 3
ok 10 - labellength for label 1 equals 4
ok 11 - labellength for label 2 equals 3
ok 12 - Wireinhex for bla.f\xa9oo.org
ok 13 - DN_EXPAND (xs) consistent
ok 14 - DN_EXPAND (pp) consistent
ok 15 - consistent labelcount (3)
ok 16 - labellength for label 0 equals 3
ok 17 - labellength for label 1 equals 4
ok 18 - labellength for label 2 equals 3
ok 19 - Wireinhex for bla.fo\.o.org
ok 20 - DN_EXPAND (xs) consistent
ok 21 - DN_EXPAND (pp) consistent
ok 22 - consistent labelcount (3)
ok 23 - labellength for label 0 equals 5
ok 24 - labellength for label 1 equals 3
ok 25 - labellength for label 2 equals 3
ok 26 - Wireinhex for bla\0000.foo.org
ok 27 - DN_EXPAND (xs) consistent
ok 28 - DN_EXPAND (pp) consistent
ok 29 - consistent labelcount (3)
ok 30 - labellength for label 0 equals 3
ok 31 - labellength for label 1 equals 3
ok 32 - labellength for label 2 equals 3
ok 33 - Wireinhex for bla.fo\o.org
ok 34 - DN_EXPAND (xs) consistent
ok 35 - DN_EXPAND (pp) consistent
ok 36 - consistent labelcount (3)
ok 37 - labellength for label 0 equals 5
ok 38 - labellength for label 1 equals 3
ok 39 - labellength for label 2 equals 3
ok 40 - Wireinhex for bla(*.foo.org
ok 41 - DN_EXPAND (xs) consistent
ok 42 - DN_EXPAND (pp) consistent
ok 43 - consistent labelcount (4)
ok 44 - labellength for label 0 equals 1
ok 45 - labellength for label 1 equals 3
ok 46 - labellength for label 2 equals 3
ok 47 - labellength for label 3 equals 3
ok 48 - Wireinhex for  .bla.foo.org
ok 49 - DN_EXPAND (xs) consistent
ok 50 - DN_EXPAND (pp) consistent
ok 51 - consistent labelcount (2)
ok 52 - labellength for label 0 equals 2
ok 53 - labellength for label 1 equals 3
ok 54 - Wireinhex for \\a.foo
ok 55 - DN_EXPAND (xs) consistent
ok 56 - DN_EXPAND (pp) consistent
ok 57 - consistent labelcount (2)
ok 58 - labellength for label 0 equals 1
ok 59 - labellength for label 1 equals 3
ok 60 - Wireinhex for \\.foo
ok 61 - DN_EXPAND (xs) consistent
ok 62 - DN_EXPAND (pp) consistent
ok 63 - consistent labelcount (2)
ok 64 - labellength for label 0 equals 2
ok 65 - labellength for label 1 equals 3
ok 66 - Wireinhex for a\..foo
ok 67 - DN_EXPAND (xs) consistent
ok 68 - DN_EXPAND (pp) consistent
ok 69 - consistent labelcount (2)
ok 70 - labellength for label 0 equals 5
ok 71 - labellength for label 1 equals 3
ok 72 - Wireinhex for a\.foo.org
ok 73 - DN_EXPAND (xs) consistent
ok 74 - DN_EXPAND (pp) consistent
ok 75 - consistent labelcount (3)
ok 76 - labellength for label 0 equals 1
ok 77 - labellength for label 1 equals 3
ok 78 - labellength for label 2 equals 3
ok 79 - Wireinhex for \..foo.org
ok 80 - DN_EXPAND (xs) consistent
ok 81 - DN_EXPAND (pp) consistent
ok 82 - consistent labelcount (2)
ok 83 - labellength for label 0 equals 1
ok 84 - labellength for label 1 equals 1
ok 85 - Wireinhex for \046.\046
ok 86 - DN_EXPAND (xs) consistent
ok 87 - DN_EXPAND (pp) consistent
ok 88 - consistent labelcount (5)
ok 89 - labellength for label 0 equals 33
ok 90 - labellength for label 1 equals 16
ok 91 - labellength for label 2 equals 8
ok 92 - labellength for label 3 equals 6
ok 93 - labellength for label 4 equals 7
ok 94 - Wireinhex for \000\001\002\003\004\005\006\007\008\009\010\011\012\013\014\015\016\017\018\019\020\021\022\023\024\025\026\027\028\029\030\031\032.\033\034\035\036\037\038\039\040\041\042\043\044\045\046\047\048.\058\059\060\061\062\063\064\065.\091\092\093\094\095\096.\123\124\125\126\127\128\129
ok 95 - DN_EXPAND (xs) consistent
ok 96 - DN_EXPAND (pp) consistent
ok 97 - Correctly dealt escaped backslash from wireformat \\.eg.secret-wg.org
ok 98 - Correctly dealt with NULL bytes in domain names
ok 99 - Correctly dealt escaped backslash from wireformat \e.eg.secret-wg.org
ok 100 - Correctly dealt escaped backslash from wireformat \e.eg.secret-wg.org
ok 101 - Correctly dealt escaped backslash from wireformat \..eg.secret-wg.org
ok 102 - Packet created
ok 103 - Packet has data after pushes
ok 104 - Packet reconstructed from data
ok 105 - Packet returned correct answer section
ok 106 - A - name() correct
ok 107 - A - address() correct
ok 108 - A - type() correct
ok 109 - A - Parsing from string works
ok 110 - AFSDB - subtype() correct
ok 111 - AFSDB - name() correct
ok 112 - AFSDB - hostname() correct
ok 113 - AFSDB - type() correct
ok 114 - AFSDB - Parsing from string works
ok 115 - CNAME - name() correct
ok 116 - CNAME - type() correct
ok 117 - CNAME - cname() correct
ok 118 - CNAME - Parsing from string works
ok 119 - DNAME - dname() correct
ok 120 - DNAME - name() correct
ok 121 - DNAME - type() correct
ok 122 - DNAME - Parsing from string works
ok 123 - MINFO - rmailbx() correct
ok 124 - MINFO - name() correct
ok 125 - MINFO - type() correct
ok 126 - MINFO - emailbx() correct
ok 127 - MINFO - Parsing from string works
ok 128 - NS - nsdname() correct
ok 129 - NS - name() correct
ok 130 - NS - type() correct
ok 131 - NS - Parsing from string works
ok 132 - SOA - minimum() correct
ok 133 - SOA - serial() correct
ok 134 - SOA - mname() correct
ok 135 - SOA - name() correct
ok 136 - SOA - retry() correct
ok 137 - SOA - refresh() correct
ok 138 - SOA - type() correct
ok 139 - SOA - rname() correct
ok 140 - SOA - expire() correct
ok 141 - SOA - Parsing from string works
ok
t/11-inet6.t ............... skipped: Online tests disabled.

123456789112345678921234567893123456789412345678951234567896123...
truncated to 63 octets (RFC1035 2.3.1) at t/12-compression.t line 56
t/12-compression.t ......... 
1..5
ok 1 - XS detected invalid packet
ok 2 - PP detected invalid packet
ok 3 - Type correct
ok 4 - Type correct
ok 5 - Long labels chopped
ok
# Testing availability of 127.0.0.1
t/13-udp-trunc.t ........... 
1..100
ok 1 - use Net::DNS::Nameserver;
ok 2 - UDP-512 reply for	(1 , 1, 1)	 records short enough (512: 79->79)
ok 3 - UDP-512 reply for	(1 , 1, 1)	 received answer
ok 4 - UDP-512 reply for	(1 , 1, 1)	 records complete or sanely truncated
ok 5 - UDP-512 reply for	(5 , 1, 1)	 records short enough (512: 143->143)
ok 6 - UDP-512 reply for	(5 , 1, 1)	 received answer
ok 7 - UDP-512 reply for	(5 , 1, 1)	 records complete or sanely truncated
ok 8 - UDP-512 reply for	(10 , 1, 1)	 records short enough (512: 223->223)
ok 9 - UDP-512 reply for	(10 , 1, 1)	 received answer
ok 10 - UDP-512 reply for	(10 , 1, 1)	 records complete or sanely truncated
ok 11 - UDP-512 reply for	(1 , 1, 30)	 records short enough (512: 551->387)
ok 12 - UDP-512 reply for	(1 , 1, 30)	 received answer
ok 13 - UDP-512 reply for	(1 , 1, 30)	 records complete or sanely truncated
ok 14 - UDP-512 reply for	(40 , 40, 40)	 records short enough (512: 1881->509)
ok 15 - UDP-512 reply for	(40 , 40, 40)	 received answer
ok 16 - UDP-512 reply for	(40 , 40, 40)	 records complete or sanely truncated
ok 17 - UDP-512 reply for	(50 , 1, 1)	 records short enough (512: 863->509)
ok 18 - UDP-512 reply for	(50 , 1, 1)	 received answer
ok 19 - UDP-512 reply for	(50 , 1, 1)	 records complete or sanely truncated
ok 20 - UDP-512 reply for	(1 , 50, 1)	 records short enough (512: 773->505)
ok 21 - UDP-512 reply for	(1 , 50, 1)	 received answer
ok 22 - UDP-512 reply for	(1 , 50, 1)	 records complete or sanely truncated
ok 23 - UDP-512 reply for	(20 , 20, 1)	 records short enough (512: 657->501)
ok 24 - UDP-512 reply for	(20 , 20, 1)	 received answer
ok 25 - UDP-512 reply for	(20 , 20, 1)	 records complete or sanely truncated
ok 26 - UDP-512 reply for	(20 , 1, 50)	 records short enough (512: 1175->367)
ok 27 - UDP-512 reply for	(20 , 1, 50)	 received answer
ok 28 - UDP-512 reply for	(20 , 1, 50)	 records complete or sanely truncated
ok 29 - UDP-512 reply for	(60 , 60, 60)	 records short enough (512: 2801->509)
ok 30 - UDP-512 reply for	(60 , 60, 60)	 received answer
ok 31 - UDP-512 reply for	(60 , 60, 60)	 records complete or sanely truncated
ok 32 - UDP-512 reply for	(60 , 100, 60)	 records short enough (512: 3361->509)
ok 33 - UDP-512 reply for	(60 , 100, 60)	 received answer
ok 34 - UDP-512 reply for	(60 , 100, 60)	 records complete or sanely truncated
ok 35 - UDP-1024 reply for	(1 , 1, 1)	 records short enough (1024: 79->79)
ok 36 - UDP-1024 reply for	(1 , 1, 1)	 received answer
ok 37 - UDP-1024 reply for	(1 , 1, 1)	 records complete or sanely truncated
ok 38 - UDP-1024 reply for	(5 , 1, 1)	 records short enough (1024: 143->143)
ok 39 - UDP-1024 reply for	(5 , 1, 1)	 received answer
ok 40 - UDP-1024 reply for	(5 , 1, 1)	 records complete or sanely truncated
ok 41 - UDP-1024 reply for	(10 , 1, 1)	 records short enough (1024: 223->223)
ok 42 - UDP-1024 reply for	(10 , 1, 1)	 received answer
ok 43 - UDP-1024 reply for	(10 , 1, 1)	 records complete or sanely truncated
ok 44 - UDP-1024 reply for	(1 , 1, 30)	 records short enough (1024: 551->551)
ok 45 - UDP-1024 reply for	(1 , 1, 30)	 received answer
ok 46 - UDP-1024 reply for	(1 , 1, 30)	 records complete or sanely truncated
ok 47 - UDP-1024 reply for	(40 , 40, 40)	 records short enough (1024: 1881->1017)
ok 48 - UDP-1024 reply for	(40 , 40, 40)	 received answer
ok 49 - UDP-1024 reply for	(40 , 40, 40)	 records complete or sanely truncated
ok 50 - UDP-1024 reply for	(50 , 1, 1)	 records short enough (1024: 863->863)
ok 51 - UDP-1024 reply for	(50 , 1, 1)	 received answer
ok 52 - UDP-1024 reply for	(50 , 1, 1)	 records complete or sanely truncated
ok 53 - UDP-1024 reply for	(1 , 50, 1)	 records short enough (1024: 773->773)
ok 54 - UDP-1024 reply for	(1 , 50, 1)	 received answer
ok 55 - UDP-1024 reply for	(1 , 50, 1)	 records complete or sanely truncated
ok 56 - UDP-1024 reply for	(20 , 20, 1)	 records short enough (1024: 657->657)
ok 57 - UDP-1024 reply for	(20 , 20, 1)	 received answer
ok 58 - UDP-1024 reply for	(20 , 20, 1)	 records complete or sanely truncated
ok 59 - UDP-1024 reply for	(20 , 1, 50)	 records short enough (1024: 1175->899)
ok 60 - UDP-1024 reply for	(20 , 1, 50)	 received answer
ok 61 - UDP-1024 reply for	(20 , 1, 50)	 records complete or sanely truncated
ok 62 - UDP-1024 reply for	(60 , 60, 60)	 records short enough (1024: 2801->1007)
ok 63 - UDP-1024 reply for	(60 , 60, 60)	 received answer
ok 64 - UDP-1024 reply for	(60 , 60, 60)	 records complete or sanely truncated
ok 65 - UDP-1024 reply for	(60 , 100, 60)	 records short enough (1024: 3361->1007)
ok 66 - UDP-1024 reply for	(60 , 100, 60)	 received answer
ok 67 - UDP-1024 reply for	(60 , 100, 60)	 records complete or sanely truncated
ok 68 - UDP-2048 reply for	(1 , 1, 1)	 records short enough (2048: 79->79)
ok 69 - UDP-2048 reply for	(1 , 1, 1)	 received answer
ok 70 - UDP-2048 reply for	(1 , 1, 1)	 records complete or sanely truncated
ok 71 - UDP-2048 reply for	(5 , 1, 1)	 records short enough (2048: 143->143)
ok 72 - UDP-2048 reply for	(5 , 1, 1)	 received answer
ok 73 - UDP-2048 reply for	(5 , 1, 1)	 records complete or sanely truncated
ok 74 - UDP-2048 reply for	(10 , 1, 1)	 records short enough (2048: 223->223)
ok 75 - UDP-2048 reply for	(10 , 1, 1)	 received answer
ok 76 - UDP-2048 reply for	(10 , 1, 1)	 records complete or sanely truncated
ok 77 - UDP-2048 reply for	(1 , 1, 30)	 records short enough (2048: 551->551)
ok 78 - UDP-2048 reply for	(1 , 1, 30)	 received answer
ok 79 - UDP-2048 reply for	(1 , 1, 30)	 records complete or sanely truncated
ok 80 - UDP-2048 reply for	(40 , 40, 40)	 records short enough (2048: 1881->1881)
ok 81 - UDP-2048 reply for	(40 , 40, 40)	 received answer
ok 82 - UDP-2048 reply for	(40 , 40, 40)	 records complete or sanely truncated
ok 83 - UDP-2048 reply for	(50 , 1, 1)	 records short enough (2048: 863->863)
ok 84 - UDP-2048 reply for	(50 , 1, 1)	 received answer
ok 85 - UDP-2048 reply for	(50 , 1, 1)	 records complete or sanely truncated
ok 86 - UDP-2048 reply for	(1 , 50, 1)	 records short enough (2048: 773->773)
ok 87 - UDP-2048 reply for	(1 , 50, 1)	 received answer
ok 88 - UDP-2048 reply for	(1 , 50, 1)	 records complete or sanely truncated
ok 89 - UDP-2048 reply for	(20 , 20, 1)	 records short enough (2048: 657->657)
ok 90 - UDP-2048 reply for	(20 , 20, 1)	 received answer
ok 91 - UDP-2048 reply for	(20 , 20, 1)	 records complete or sanely truncated
ok 92 - UDP-2048 reply for	(20 , 1, 50)	 records short enough (2048: 1175->1175)
ok 93 - UDP-2048 reply for	(20 , 1, 50)	 received answer
ok 94 - UDP-2048 reply for	(20 , 1, 50)	 records complete or sanely truncated
ok 95 - UDP-2048 reply for	(60 , 60, 60)	 records short enough (2048: 2801->1841)
ok 96 - UDP-2048 reply for	(60 , 60, 60)	 received answer
ok 97 - UDP-2048 reply for	(60 , 60, 60)	 records complete or sanely truncated
ok 98 - UDP-2048 reply for	(60 , 100, 60)	 records short enough (2048: 3361->2037)
ok 99 - UDP-2048 reply for	(60 , 100, 60)	 received answer
ok 100 - UDP-2048 reply for	(60 , 100, 60)	 records complete or sanely truncated
ok
# Cleaning
t/99-cleanup.t ............. 
1..1
ok 1 - Dummy
ok

Test Summary Report
-------------------
t/08-online.t            (Wstat: 1024 Tests: 95 Failed: 4)
  Failed tests:  66, 68, 88, 90
  Non-zero exit status: 4
Files=32, Tests=1802,  7 wallclock secs ( 0.26 usr  0.07 sys +  4.91 cusr  0.22 csys =  5.46 CPU)
Result: FAIL
Failed 1/32 test programs. 4/1802 subtests failed.
make: *** [test_dynamic] Error 255
