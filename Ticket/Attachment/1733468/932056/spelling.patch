Description: fix spelling mistakes in the POD
Origin: vendor
Author: gregor herrmann <gregoa@debian.org>
Last-Update: 2017-06-19

--- a/lib/Parse/Yapp.pm
+++ b/lib/Parse/Yapp.pm
@@ -129,7 +129,7 @@
 Precedence declarations, introduced by C<%left>, C<%right> and C<%nonassoc>
 specifying associativity, followed by the list of tokens or litterals
 having the same precedence and associativity.
-The precedence beeing the latter declared will be having the highest level.
+The precedence being the latter declared will be having the highest level.
 (see the yacc or bison manuals for a full explanation of how they work,
 as they are implemented exactly the same way in Parse::Yapp)
 
@@ -238,8 +238,8 @@
 $_[1] to $_[n] are the parameters just as $1 to $n in yacc, while
 $_[0] is the parser object itself.
 
-Having $_[0] beeing the parser object itself allows you to call
-parser methods. Thats how the yacc macros are implemented:
+Having $_[0] being the parser object itself allows you to call
+parser methods. That's how the yacc macros are implemented:
 
 	yyerrok is done by calling $_[0]->YYErrok
 	YYERROR is done by calling $_[0]->YYError
@@ -261,7 +261,7 @@
 its semantic value (both can be used to modify their values too, but
 I<know what you are doing> ! See I<Error reporting routine> section for
 an example), a list which contains the tokens the parser expected when
-the failure occured and a reference to the lexer routine.
+the failure occurred and a reference to the lexer routine.
 
 Note that if C<$_[0]-E<gt>YYCurtok> is declared as a C<%nonassoc> token,
 it can be included in C<$_[0]-E<gt>YYExpect> list whenever the input
@@ -283,7 +283,7 @@
 
 where index is an integer. Its value being I<1 .. n> returns the same values
 than I<$_[1] .. $_[n]>, but I<-n .. 0> returns values on the left of the rule
-beeing reduced (It is related to I<$-n .. $0 .. $n> in yacc, but you
+being reduced (It is related to I<$-n .. $0 .. $n> in yacc, but you
 cannot use I<$_[0]> or I<$_[-n]> constructs in Parse::Yapp for obvious reasons)
 
 
@@ -298,11 +298,11 @@
 That's how you can make you parser module reentrant: all of your
 module states and variables are held inside the parser object.
 
-Note: unfortunatly, method calls in Perl have a lot of overhead,
+Note: unfortunately, method calls in Perl have a lot of overhead,
       and when YYData is used, it may be called a huge number
       of times. If your are not a *real* purist and efficiency
       is your concern, you may access directly the user-space
-      in the object: $parser->{USER} wich is a reference to an
+      in the object: $parser->{USER} which is a reference to an
       anonymous hash array, and then benchmark.
 
 If no action is specified for a rule, the equivalant of a default
@@ -387,11 +387,11 @@
 =item C<Error reporting routine>
 
 If you want one, write it knowing that it is passed as parameter
-the parser object. So you can share information whith the lexer
+the parser object. So you can share information with the lexer
 routine quite easily.
 
 You can also use the C<$_[0]-E<gt>YYErrok> method in it, which will
-resume parsing as if no error occured. Of course, since the invalid
+resume parsing as if no error occurred. Of course, since the invalid
 token is still invalid, you're supposed to fix the problem by
 yourself.
 
@@ -461,7 +461,7 @@
     0x08         Parse Stack dump
     0x10         Error Recovery tracing
 
-To have a full debugging ouput, use
+To have a full debugging output, use
 
     debug => 0x1F
 
