Description: fix spelling mistakes
Origin: vendor
Author: gregor herrmann <gregoa@debian.org>
Last-Update: 2015-10-21

--- a/Convert.pm
+++ b/Convert.pm
@@ -325,7 +325,7 @@
 	m64		base 64 0-63 from MIME::Base64
 	iru		base 64 P10 protocol - IRCu daemon
 	url		base 64 url with no %2B %2F expansion of + - /
-	rex		base 64 regular expression varient
+	rex		base 64 regular expression variant
 	id0		base 64 IDentifier style 0
 	id1		base 64 IDentifier style 1
 	xnt		base 64 XML Name Tokens (Nmtoken)
@@ -364,7 +364,7 @@
 
 =head1 BUILT IN NUMBER SETS
 
-Number set varients courtesy of the authors of Math::Base:Cnv and
+Number set variants courtesy of the authors of Math::Base:Cnv and
 Math::BaseConvert.
 
 The functions below return a reference to an array
@@ -383,7 +383,7 @@
   m64 => ['A'..'Z', 'a'..'z', '0'..'9', '+', '/'] # MIMI::Base64
   iru => ['A'..'Z', 'a'..'z', '0'..'9', '[', ']'] # P10 - IRCu
   url => ['A'..'Z', 'a'..'z', '0'..'9', '*', '-'] # url no %2B %2F
-  rex => ['A'..'Z', 'a'..'z', '0'..'9', '!', '-'] # regex varient
+  rex => ['A'..'Z', 'a'..'z', '0'..'9', '!', '-'] # regex variant
   id0 => ['A'..'Z', 'a'..'z', '0'..'9', '_', '-'] # ID 0
   id1 => ['A'..'Z', 'a'..'z', '0'..'9', '.', '_'] # ID 1
   xnt => ['A'..'Z', 'a'..'z', '0'..'9', '.', '-'] # XML (Nmtoken)
@@ -442,7 +442,7 @@
   base as text
 	$converted = convbase($number,'oct');
 
-Conversion to/from arbitary bases i.e.
+Conversion to/from arbitrary bases i.e.
 
   $converted = cnv($number); # dec -> hex (default)
   $converted = cnv($number,oct);	# oct to HEX
@@ -517,7 +517,7 @@
 numeric value for base conversion. It accepts B<base> in any of the forms
 described for B<cnv>.
 
-The return basemap includes upper and lower case varients of the the number
+The return basemap includes upper and lower case variants of the the number
 base in cases such as B<hex> where upper and lower case a..f, A..F map to
 the same numeric value for base conversion.
 
--- a/README
+++ b/README
@@ -25,7 +25,7 @@
             m64             base 64 0-63 from MIME::Base64
             iru             base 64 P10 protocol - IRCu daemon
             url             base 64 url with no %2B %2F expansion of + - /
-            rex             base 64 regular expression varient
+            rex             base 64 regular expression variant
             id0             base 64 IDentifier style 0
             id1             base 64 IDentifier style 1
             xnt             base 64 XML Name Tokens (Nmtoken)
@@ -63,7 +63,7 @@
     sub-directory in this distribution.
 
 BUILT IN NUMBER SETS
-    Number set varients courtesy of the authors of Math::Base:Cnv and
+    Number set variants courtesy of the authors of Math::Base:Cnv and
     Math::BaseConvert.
 
     The functions below return a reference to an array
@@ -82,7 +82,7 @@
       m64 => ['A'..'Z', 'a'..'z', '0'..'9', '+', '/'] # MIMI::Base64
       iru => ['A'..'Z', 'a'..'z', '0'..'9', '[', ']'] # P10 - IRCu
       url => ['A'..'Z', 'a'..'z', '0'..'9', '*', '-'] # url no %2B %2F
-      rex => ['A'..'Z', 'a'..'z', '0'..'9', '!', '-'] # regex varient
+      rex => ['A'..'Z', 'a'..'z', '0'..'9', '!', '-'] # regex variant
       id0 => ['A'..'Z', 'a'..'z', '0'..'9', '_', '-'] # ID 0
       id1 => ['A'..'Z', 'a'..'z', '0'..'9', '.', '_'] # ID 1
       xnt => ['A'..'Z', 'a'..'z', '0'..'9', '.', '-'] # XML (Nmtoken)
@@ -137,7 +137,7 @@
           base as text
                 $converted = convbase($number,'oct');
 
-        Conversion to/from arbitary bases i.e.
+        Conversion to/from arbitrary bases i.e.
 
           $converted = cnv($number); # dec -> hex (default)
           $converted = cnv($number,oct);        # oct to HEX
@@ -205,7 +205,7 @@
         keys of a base to its numeric value for base conversion. It accepts
         base in any of the forms described for cnv.
 
-        The return basemap includes upper and lower case varients of the the
+        The return basemap includes upper and lower case variants of the the
         number base in cases such as hex where upper and lower case a..f,
         A..F map to the same numeric value for base conversion.
 
--- a/lib/Math/Base/Convert/Shortcuts.pm
+++ b/lib/Math/Base/Convert/Shortcuts.pm
@@ -387,7 +387,7 @@
       }
       $map = $bc->{tmap};
     }
-    elsif ($bp == 3) {				# octal varient?
+    elsif ($bp == 3) {				# octal variant?
       $map = $xlt->[$bp];
     } else {
       $map = $xlt->[0]->{$bname};		# standard map
