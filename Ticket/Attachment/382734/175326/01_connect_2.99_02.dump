82$ perl -d -I Mail-IMAPClient-2.99_02/lib t/01_connect

Loading DB routines from perl5db.pl version 1.28
Editor support available.

Enter h or `h h' for help, or `man perldebug' for more help.

main::(t/01_connect:6): $imap = Mail::IMAPClient->new(Debug => 1);
  DB<1> t
Trace = on
  DB<1> c
Mail::IMAPClient::new(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:171):
171:    {   my $class = shift;
Mail::IMAPClient::new(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:172):
172:        my $self  =
173:          { LastError     => "",
174:          , Uid           => 1
175:          , Count         => 0
176:          , Fast_io       => 1
177:          , Clear         => 5
178:          , Maxtemperrors => 'unlimited'
179:          , State         => Unconnected
Mail::IMAPClient::new(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:181):
181:        while(@_)
Mail::IMAPClient::new(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:182):
182:        {   my $k = ucfirst lc shift;
Mail::IMAPClient::new(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:183):
183:            $self->{$k} = shift;
Mail::IMAPClient::new(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:185):
185:        bless $self, ref($class)||$class;
Mail::IMAPClient::new(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:187):
187:        if($self->{Supportedflags})  # unpack into case-less HASH
Mail::IMAPClient::new(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:192):
192:        $self->{Debug_fh} ||= \*STDERR;
Mail::IMAPClient::new(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:193):
193:        select((select($self->{Debug_fh}),$|++)[0]);
Mail::IMAPClient::new(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:195):
195:        $self->_debug("Using Mail::IMAPClient version $Mail::IMAPClient::VERSION " .
196:            "and perl version " . (defined $^V ? join(".",unpack("CCC",$^V)) : "") .
197:            " ($])\n") if $self->Debug;
Mail::IMAPClient::CODE(0x850ebc0)(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:55):
55:          *$datum = sub { @_ > 1 ? $_[0]->{$datum} = $_[1] : $_[0]->{$datum} };
Mail::IMAPClient::_debug(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:40):
40:     {   my $self = shift;
Mail::IMAPClient::_debug(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:41):
41:         return unless $self->Debug;
Mail::IMAPClient::CODE(0x850ebc0)(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:55):
55:          *$datum = sub { @_ > 1 ? $_[0]->{$datum} = $_[1] : $_[0]->{$datum} };
Mail::IMAPClient::_debug(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:42):
42:         my $fh   = $self->{Debug_fh} || \*STDERR;
Mail::IMAPClient::_debug(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:43):
43:         print $fh @_;
Using Mail::IMAPClient version 2.99_02 and perl version 5.8.8 (5.008008)
Mail::IMAPClient::new(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:199):
199:        if($self->{Socket})    { $self->Socket($self->{Socket}) }
Mail::IMAPClient::new(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:202):
202:        $self;
main::(t/01_connect:7): $imap->Debug(1);
Mail::IMAPClient::CODE(0x850ebc0)(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:55):
55:          *$datum = sub { @_ > 1 ? $_[0]->{$datum} = $_[1] : $_[0]->{$datum} };
main::(t/01_connect:8): $imap->Server('louloutte.dyndns.org');
Mail::IMAPClient::CODE(0x850e878)(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:55):
55:          *$datum = sub { @_ > 1 ? $_[0]->{$datum} = $_[1] : $_[0]->{$datum} };
main::(t/01_connect:9): $imap->connect() or croak "Error connecting @!";
Mail::IMAPClient::connect(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:206):
206:    {   my $self = shift;
Mail::IMAPClient::connect(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:207):
207:        %$self = (%$self, @_);
Mail::IMAPClient::connect(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:209):
209:        my $sock = IO::Socket::INET->new
210:          ( PeerAddr => $self->Server
211:          , PeerPort => ( $self->Port   || 'imap(143)')
212:          , Timeout  => ($self->Timeout || 0)
213:          , Proto    => 'tcp'
214:          , Debug    => $self->Debug
215:          );
Mail::IMAPClient::CODE(0x850e878)(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:55):
55:          *$datum = sub { @_ > 1 ? $_[0]->{$datum} = $_[1] : $_[0]->{$datum} };
Mail::IMAPClient::CODE(0x850e800)(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:55):
55:          *$datum = sub { @_ > 1 ? $_[0]->{$datum} = $_[1] : $_[0]->{$datum} };
Mail::IMAPClient::CODE(0x850ead0)(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:55):
55:          *$datum = sub { @_ > 1 ? $_[0]->{$datum} = $_[1] : $_[0]->{$datum} };
Mail::IMAPClient::CODE(0x850ebc0)(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:55):
55:          *$datum = sub { @_ > 1 ? $_[0]->{$datum} = $_[1] : $_[0]->{$datum} };
IO::Socket::INET::new(/usr/lib/perl/5.8/IO/Socket/INET.pm:30):
30:         my $class = shift;
IO::Socket::INET::new(/usr/lib/perl/5.8/IO/Socket/INET.pm:31):
31:         unshift(@_, "PeerAddr") if @_ == 1;
IO::Socket::INET::new(/usr/lib/perl/5.8/IO/Socket/INET.pm:32):
32:         return $class->SUPER::new(@_);
IO::Socket::new(/usr/lib/perl/5.8/IO/Socket.pm:41):
41:         my($class,%arg) = @_;
IO::Socket::new(/usr/lib/perl/5.8/IO/Socket.pm:42):
42:         my $sock = $class->SUPER::new();
IO::Handle::new(/usr/lib/perl/5.8/IO/Handle.pm:53):
53:         my $class = ref($_[0]) || $_[0] || "IO::Handle";
IO::Handle::new(/usr/lib/perl/5.8/IO/Handle.pm:54):
54:         @_ == 1 or croak "usage: new $class";
IO::Handle::new(/usr/lib/perl/5.8/IO/Handle.pm:55):
55:         my $io = gensym;
Symbol::gensym(/usr/share/perl/5.8/Symbol.pm:23):
23:         my $name = "GEN" . $genseq++;
Symbol::gensym(/usr/share/perl/5.8/Symbol.pm:24):
24:         my $ref = \*{$genpkg . $name};
Symbol::gensym(/usr/share/perl/5.8/Symbol.pm:24):
24:         my $ref = \*{$genpkg . $name};
Symbol::gensym(/usr/share/perl/5.8/Symbol.pm:25):
25:         delete $$genpkg{$name};
Symbol::gensym(/usr/share/perl/5.8/Symbol.pm:26):
26:         $ref;
IO::Handle::new(/usr/lib/perl/5.8/IO/Handle.pm:56):
56:         bless $io, $class;
IO::Socket::new(/usr/lib/perl/5.8/IO/Socket.pm:44):
44:         $sock->autoflush(1);
IO::Handle::autoflush(/usr/lib/perl/5.8/IO/Handle.pm:213):
213:        my $old = new SelectSaver qualify($_[0], caller);
Symbol::qualify(/usr/share/perl/5.8/Symbol.pm:39):
39:         my ($name) = @_;
Symbol::qualify(/usr/share/perl/5.8/Symbol.pm:40):
40:         if (!ref($name) && index($name, '::') == -1 && index($name, "'") == -1) {
Symbol::qualify(/usr/share/perl/5.8/Symbol.pm:53):
53:         $name;
SelectSaver::new(/usr/share/perl/5.8/SelectSaver.pm:10):
10:         @_ >= 1 && @_ <= 2 or croak 'usage: new SelectSaver [FILEHANDLE]';
SelectSaver::new(/usr/share/perl/5.8/SelectSaver.pm:11):
11:         my $fh = select;
SelectSaver::new(/usr/share/perl/5.8/SelectSaver.pm:12):
12:         my $self = bless \$fh, $_[0];
SelectSaver::new(/usr/share/perl/5.8/SelectSaver.pm:13):
13:         select qualify($_[1], caller) if @_ > 1;
Symbol::qualify(/usr/share/perl/5.8/Symbol.pm:39):
39:         my ($name) = @_;
Symbol::qualify(/usr/share/perl/5.8/Symbol.pm:40):
40:         if (!ref($name) && index($name, '::') == -1 && index($name, "'") == -1) {
Symbol::qualify(/usr/share/perl/5.8/Symbol.pm:53):
53:         $name;
SelectSaver::new(/usr/share/perl/5.8/SelectSaver.pm:14):
14:         $self;
IO::Handle::autoflush(/usr/lib/perl/5.8/IO/Handle.pm:214):
214:        my $prev = $|;
IO::Handle::autoflush(/usr/lib/perl/5.8/IO/Handle.pm:215):
215:        $| = @_ > 1 ? $_[1] : 1;
IO::Handle::autoflush(/usr/lib/perl/5.8/IO/Handle.pm:216):
216:        $prev;
SelectSaver::DESTROY(/usr/share/perl/5.8/SelectSaver.pm:18):
18:         my $self = $_[0];
SelectSaver::DESTROY(/usr/share/perl/5.8/SelectSaver.pm:19):
19:         select $$self;
IO::Socket::new(/usr/lib/perl/5.8/IO/Socket.pm:46):
46:         ${*$sock}{'io_socket_timeout'} = delete $arg{Timeout};
IO::Socket::new(/usr/lib/perl/5.8/IO/Socket.pm:46):
46:         ${*$sock}{'io_socket_timeout'} = delete $arg{Timeout};
IO::Socket::new(/usr/lib/perl/5.8/IO/Socket.pm:48):
48:         return scalar(%arg) ? $sock->configure(\%arg)
49:                             : $sock;
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:104):
104:        my($sock,$arg) = @_;
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:105):
105:        my($lport,$rport,$laddr,$raddr,$proto,$type);
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:107):
107:        $arg->{LocalAddr} = $arg->{LocalHost}
108:            if exists $arg->{LocalHost} && !exists $arg->{LocalAddr};
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:110):
110:        ($laddr,$lport,$proto) = _sock_info($arg->{LocalAddr},
111:                                            $arg->{LocalPort},
112:                                            $arg->{Proto})
113:                            or return _error($sock, $!, $@);
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:36):
36:       my($addr,$port,$proto) = @_;
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:37):
37:       my $origport = $port;
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:38):
38:       my @proto = ();
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:39):
39:       my @serv = ();
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:41):
41:       $port = $1
42:             if(defined $addr && $addr =~ s,:([\w\(\)/]+)$,,);
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:44):
44:       if(defined $proto  && $proto =~ /\D/) {
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:45):
45:         if(@proto = getprotobyname($proto)) {
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:46):
46:           $proto = $proto[2] || undef;
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:54):
54:       if(defined $port) {
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:71):
71:      return ($addr || undef,
72:              $port || undef,
73:              $proto || undef
74:             );
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:115):
115:        $laddr = defined $laddr ? inet_aton($laddr)
116:                                : INADDR_ANY;
Socket::AUTOLOAD(/usr/lib/perl/5.8/Socket.pm:216):
216:        my($constname);
Socket::AUTOLOAD(/usr/lib/perl/5.8/Socket.pm:217):
217:        ($constname = $AUTOLOAD) =~ s/.*:://;
Socket::AUTOLOAD(/usr/lib/perl/5.8/Socket.pm:218):
218:        croak "&Socket::constant not defined" if $constname eq 'constant';
Socket::AUTOLOAD(/usr/lib/perl/5.8/Socket.pm:219):
219:        my ($error, $val) = constant($constname);
Socket::AUTOLOAD(/usr/lib/perl/5.8/Socket.pm:220):
220:        if ($error) {
Socket::AUTOLOAD(/usr/lib/perl/5.8/Socket.pm:223):
223:        *$AUTOLOAD = sub { $val };
Socket::AUTOLOAD(/usr/lib/perl/5.8/Socket.pm:224):
224:        goto &$AUTOLOAD;
Socket::__ANON__[/usr/lib/perl/5.8/Socket.pm:223](/usr/lib/perl/5.8/Socket.pm:223):
223:        *$AUTOLOAD = sub { $val };
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:118):
118:        return _error($sock, $EINVAL, "Bad hostname '",$arg->{LocalAddr},"'")
119:            unless(defined $laddr);
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:121):
121:        $arg->{PeerAddr} = $arg->{PeerHost}
122:            if exists $arg->{PeerHost} && !exists $arg->{PeerAddr};
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:124):
124:        unless(exists $arg->{Listen}) {
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:125):
125:            ($raddr,$rport,$proto) = _sock_info($arg->{PeerAddr},
126:                                                $arg->{PeerPort},
127:                                                $proto)
128:                            or return _error($sock, $!, $@);
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:36):
36:       my($addr,$port,$proto) = @_;
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:37):
37:       my $origport = $port;
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:38):
38:       my @proto = ();
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:39):
39:       my @serv = ();
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:41):
41:       $port = $1
42:             if(defined $addr && $addr =~ s,:([\w\(\)/]+)$,,);
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:44):
44:       if(defined $proto  && $proto =~ /\D/) {
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:54):
54:       if(defined $port) {
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:55):
55:         my $defport = ($port =~ s,\((\d+)\)$,,) ? $1 : undef;
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:56):
56:         my $pnum = ($port =~ m,^(\d+)$,)[0];
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:58):
58:         @serv = getservbyname($port, $proto[0] || "")
59:             if ($port =~ m,\D,);
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:61):
61:         $port = $serv[2] || $defport || $pnum;
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:62):
62:         unless (defined $port) {
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:67):
67:         $proto = (getprotobyname($serv[3]))[2] || undef
68:             if @serv && !$proto;
IO::Socket::INET::_sock_info(/usr/lib/perl/5.8/IO/Socket/INET.pm:71):
71:      return ($addr || undef,
72:              $port || undef,
73:              $proto || undef
74:             );
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:131):
131:        $proto ||= (getprotobyname('tcp'))[2];
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:133):
133:        my $pname = (getprotobynumber($proto))[0];
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:134):
134:        $type = $arg->{Type} || $socket_type{lc $pname};
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:136):
136:        my @raddr = ();
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:138):
138:        if(defined $raddr) {
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:139):
139:            @raddr = $sock->_get_addr($raddr, $arg->{MultiHomed});
IO::Socket::INET::_get_addr(/usr/lib/perl/5.8/IO/Socket/INET.pm:92):
92:         my($sock,$addr_str, $multi) = @_;
IO::Socket::INET::_get_addr(/usr/lib/perl/5.8/IO/Socket/INET.pm:93):
93:         my @addr;
IO::Socket::INET::_get_addr(/usr/lib/perl/5.8/IO/Socket/INET.pm:94):
94:         if ($multi && $addr_str !~ /^\d+(?:\.\d+){3}$/) {
IO::Socket::INET::_get_addr(/usr/lib/perl/5.8/IO/Socket/INET.pm:97):
97:             my $h = inet_aton($addr_str);
IO::Socket::INET::_get_addr(/usr/lib/perl/5.8/IO/Socket/INET.pm:98):
98:             push(@addr, $h) if defined $h;
IO::Socket::INET::_get_addr(/usr/lib/perl/5.8/IO/Socket/INET.pm:100):
100:        @addr;
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:140):
140:            return _error($sock, $EINVAL, "Bad hostname '",$arg->{PeerAddr},"'")
141:                unless @raddr;
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:144):
144:        while(1) {
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:146):
146:            $sock->socket(AF_INET, $type, $proto) or
147:                return _error($sock, $!, "$!");
Socket::CODE(0x84615a4)(/usr/lib/perl/5.8/Socket.pm:223):
223:        *$AUTOLOAD = sub { $val };
IO::Socket::socket(/usr/lib/perl/5.8/IO/Socket.pm:77):
77:         @_ == 4 or croak 'usage: $sock->socket(DOMAIN, TYPE, PROTOCOL)';
IO::Socket::socket(/usr/lib/perl/5.8/IO/Socket.pm:78):
78:         my($sock,$domain,$type,$protocol) = @_;
IO::Socket::socket(/usr/lib/perl/5.8/IO/Socket.pm:80):
80:         socket($sock,$domain,$type,$protocol) or
81:             return undef;
IO::Socket::socket(/usr/lib/perl/5.8/IO/Socket.pm:83):
83:         ${*$sock}{'io_socket_domain'} = $domain;
IO::Socket::socket(/usr/lib/perl/5.8/IO/Socket.pm:83):
83:         ${*$sock}{'io_socket_domain'} = $domain;
IO::Socket::socket(/usr/lib/perl/5.8/IO/Socket.pm:84):
84:         ${*$sock}{'io_socket_type'}   = $type;
IO::Socket::socket(/usr/lib/perl/5.8/IO/Socket.pm:84):
84:         ${*$sock}{'io_socket_type'}   = $type;
IO::Socket::socket(/usr/lib/perl/5.8/IO/Socket.pm:85):
85:         ${*$sock}{'io_socket_proto'}  = $protocol;
IO::Socket::socket(/usr/lib/perl/5.8/IO/Socket.pm:85):
85:         ${*$sock}{'io_socket_proto'}  = $protocol;
IO::Socket::socket(/usr/lib/perl/5.8/IO/Socket.pm:87):
87:         $sock;
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:149):
149:            if (defined $arg->{Blocking}) {
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:154):
154:            if ($arg->{Reuse} || $arg->{ReuseAddr}) {
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:159):
159:            if ($arg->{ReusePort}) {
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:164):
164:            if ($arg->{Broadcast}) {
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:169):
169:            if($lport || ($laddr ne INADDR_ANY) || exists $arg->{Listen}) {
Socket::CODE(0x86a3604)(/usr/lib/perl/5.8/Socket.pm:223):
223:        *$AUTOLOAD = sub { $val };
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:174):
174:            if(exists $arg->{Listen}) {
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:181):
181:            last unless exists($arg->{PeerAddr});
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:183):
183:            $raddr = shift @raddr;
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:185):
185:            return _error($sock, $EINVAL, 'Cannot determine remote port')
186:                    unless($rport || $type == SOCK_DGRAM || $type == SOCK_RAW);
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:189):
189:                unless($type == SOCK_STREAM || defined $raddr);
Socket::CODE(0x8476f40)(/usr/lib/perl/5.8/Socket.pm:223):
223:        *$AUTOLOAD = sub { $val };
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:191):
191:            return _error($sock, $EINVAL, "Bad hostname '",$arg->{PeerAddr},"'")
192:                unless defined $raddr;
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:197):
197:            undef $@;
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:198):
198:            if ($sock->connect(pack_sockaddr_in($rport, $raddr))) {
IO::Socket::INET::connect(/usr/lib/perl/5.8/IO/Socket/INET.pm:220):
220:        @_ == 2 || @_ == 3 or
221:           croak 'usage: $sock->connect(NAME) or $sock->connect(PORT, ADDR)';
IO::Socket::INET::connect(/usr/lib/perl/5.8/IO/Socket/INET.pm:222):
222:        my $sock = shift;
IO::Socket::INET::connect(/usr/lib/perl/5.8/IO/Socket/INET.pm:223):
223:        return $sock->SUPER::connect(@_ == 1 ? shift : pack_sockaddr_in(@_));
IO::Socket::connect(/usr/lib/perl/5.8/IO/Socket.pm:106):
106:        @_ == 2 or croak 'usage: $sock->connect(NAME)';
IO::Socket::connect(/usr/lib/perl/5.8/IO/Socket.pm:107):
107:        my $sock = shift;
IO::Socket::connect(/usr/lib/perl/5.8/IO/Socket.pm:108):
108:        my $addr = shift;
IO::Socket::connect(/usr/lib/perl/5.8/IO/Socket.pm:109):
109:        my $timeout = ${*$sock}{'io_socket_timeout'};
IO::Socket::connect(/usr/lib/perl/5.8/IO/Socket.pm:109):
109:        my $timeout = ${*$sock}{'io_socket_timeout'};
IO::Socket::connect(/usr/lib/perl/5.8/IO/Socket.pm:110):
110:        my $err;
IO::Socket::connect(/usr/lib/perl/5.8/IO/Socket.pm:111):
111:        my $blocking;
IO::Socket::connect(/usr/lib/perl/5.8/IO/Socket.pm:113):
113:        $blocking = $sock->blocking(0) if $timeout;
IO::Socket::connect(/usr/lib/perl/5.8/IO/Socket.pm:114):
114:        if (!connect($sock, $addr)) {
IO::Socket::connect(/usr/lib/perl/5.8/IO/Socket.pm:137):
137:        $sock->blocking(1) if $blocking;
IO::Socket::connect(/usr/lib/perl/5.8/IO/Socket.pm:139):
139:        $! = $err if $err;
IO::Socket::connect(/usr/lib/perl/5.8/IO/Socket.pm:141):
141:        $err ? undef : $sock;
IO::Socket::INET::configure(/usr/lib/perl/5.8/IO/Socket/INET.pm:200):
200:                return $sock;
Mail::IMAPClient::connect(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:217):
217:        unless($sock)
Mail::IMAPClient::connect(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:222):
222:        $self->Socket($sock);
Mail::IMAPClient::Socket(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:97):
97:     {   my ($self, $sock) = @_;
Mail::IMAPClient::Socket(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:98):
98:         defined $sock
99:            or return $self->{Socket};
Mail::IMAPClient::Socket(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:101):
101:        delete $self->{_fcntl};
Mail::IMAPClient::Socket(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:103):
103:        $self->{_select} = IO::Select->new($_[1]);
IO::Select::new(/usr/lib/perl/5.8/IO/Select.pm:24):
24:      my $self = shift;
IO::Select::new(/usr/lib/perl/5.8/IO/Select.pm:25):
25:      my $type = ref($self) || $self;
IO::Select::new(/usr/lib/perl/5.8/IO/Select.pm:27):
27:      my $vec = bless [undef,0], $type;
IO::Select::new(/usr/lib/perl/5.8/IO/Select.pm:29):
29:      $vec->add(@_)
30:         if @_;
IO::Select::add(/usr/lib/perl/5.8/IO/Select.pm:37):
37:      shift->_update('add', @_);
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:63):
63:      my $vec = shift;
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:64):
64:      my $add = shift eq 'add';
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:66):
66:      my $bits = $vec->[VEC_BITS];
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:67):
67:      $bits = '' unless defined $bits;
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:69):
69:      my $count = 0;
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:70):
70:      my $f;
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:71):
71:      foreach $f (@_)
72:       {
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:73):
73:        my $fn = $vec->_fileno($f);
IO::Select::_fileno(/usr/lib/perl/5.8/IO/Select.pm:55):
55:      my($self, $f) = @_;
IO::Select::_fileno(/usr/lib/perl/5.8/IO/Select.pm:56):
56:      return unless defined $f;
IO::Select::_fileno(/usr/lib/perl/5.8/IO/Select.pm:57):
57:      $f = $f->[0] if ref($f) eq 'ARRAY';
IO::Select::_fileno(/usr/lib/perl/5.8/IO/Select.pm:58):
58:      ($f =~ /^\d+$/) ? $f : fileno($f);
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:74):
74:        next unless defined $fn;
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:75):
75:        my $i = $fn + FIRST_FD;
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:76):
76:        if ($add) {
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:77):
77:          if (defined $vec->[$i]) {
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:81):
81:          $vec->[FD_COUNT]++;
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:82):
82:          vec($bits, $fn, 1) = 1;
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:83):
83:          $vec->[$i] = $f;
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:90):
90:        $count++;
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:92):
92:      $vec->[VEC_BITS] = $vec->[FD_COUNT] ? $bits : undef;
IO::Select::_update(/usr/lib/perl/5.8/IO/Select.pm:93):
93:      $count;
IO::Select::new(/usr/lib/perl/5.8/IO/Select.pm:32):
32:      $vec;
Mail::IMAPClient::connect(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:223):
223:        $self->State(Connected);
Mail::IMAPClient::CODE(0x850e764)(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:55):
55:          *$datum = sub { @_ > 1 ? $_[0]->{$datum} = $_[1] : $_[0]->{$datum} };
Mail::IMAPClient::connect(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:224):
224:        $sock->autoflush(1);
IO::Handle::autoflush(/usr/lib/perl/5.8/IO/Handle.pm:213):
213:        my $old = new SelectSaver qualify($_[0], caller);
Symbol::qualify(/usr/share/perl/5.8/Symbol.pm:39):
39:         my ($name) = @_;
Symbol::qualify(/usr/share/perl/5.8/Symbol.pm:40):
40:         if (!ref($name) && index($name, '::') == -1 && index($name, "'") == -1) {
Symbol::qualify(/usr/share/perl/5.8/Symbol.pm:53):
53:         $name;
SelectSaver::new(/usr/share/perl/5.8/SelectSaver.pm:10):
10:         @_ >= 1 && @_ <= 2 or croak 'usage: new SelectSaver [FILEHANDLE]';
SelectSaver::new(/usr/share/perl/5.8/SelectSaver.pm:11):
11:         my $fh = select;
SelectSaver::new(/usr/share/perl/5.8/SelectSaver.pm:12):
12:         my $self = bless \$fh, $_[0];
SelectSaver::new(/usr/share/perl/5.8/SelectSaver.pm:13):
13:         select qualify($_[1], caller) if @_ > 1;
Symbol::qualify(/usr/share/perl/5.8/Symbol.pm:39):
39:         my ($name) = @_;
Symbol::qualify(/usr/share/perl/5.8/Symbol.pm:40):
40:         if (!ref($name) && index($name, '::') == -1 && index($name, "'") == -1) {
Symbol::qualify(/usr/share/perl/5.8/Symbol.pm:53):
53:         $name;
SelectSaver::new(/usr/share/perl/5.8/SelectSaver.pm:14):
14:         $self;
IO::Handle::autoflush(/usr/lib/perl/5.8/IO/Handle.pm:214):
214:        my $prev = $|;
IO::Handle::autoflush(/usr/lib/perl/5.8/IO/Handle.pm:215):
215:        $| = @_ > 1 ? $_[1] : 1;
IO::Handle::autoflush(/usr/lib/perl/5.8/IO/Handle.pm:216):
216:        $prev;
SelectSaver::DESTROY(/usr/share/perl/5.8/SelectSaver.pm:18):
18:         my $self = $_[0];
SelectSaver::DESTROY(/usr/share/perl/5.8/SelectSaver.pm:19):
19:         select $$self;
Mail::IMAPClient::connect(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:226):
226:        my $code;
227:      LINE:
Mail::IMAPClient::connect(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:228):
228:        while(my $output = $self->_read_line)
Mail::IMAPClient::_read_line(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:1274):
1274:   {   my ($self, $literal_callback, $output_callback) = @_;
Mail::IMAPClient::_read_line(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:1276):
1276:       my $sh = $self->Socket;
Mail::IMAPClient::Socket(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:97):
97:     {   my ($self, $sock) = @_;
Mail::IMAPClient::Socket(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:98):
98:         defined $sock
99:            or return $self->{Socket};
Mail::IMAPClient::_read_line(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:1277):
1277:       unless($self->IsConnected && $self->Socket)
Mail::IMAPClient::IsConnected(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:2816):
2816:   sub IsConnected     { shift->State >= Connected }
Mail::IMAPClient::CODE(0x850e764)(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:55):
55:          *$datum = sub { @_ > 1 ? $_[0]->{$datum} = $_[1] : $_[0]->{$datum} };
Mail::IMAPClient::Socket(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:97):
97:     {   my ($self, $sock) = @_;
Mail::IMAPClient::Socket(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:98):
98:         defined $sock
99:            or return $self->{Socket};
Mail::IMAPClient::_read_line(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:1278):
1278:       {   $self->LastError("NO Not connected.");
Mail::IMAPClient::LastError(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:60):
60:     {   my $self = shift;
Mail::IMAPClient::LastError(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:61):
61:         $self->{LastError} = shift if @_;
Mail::IMAPClient::LastError(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:62):
62:         $@ = $self->{LastError};
Mail::IMAPClient::_read_line(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:1279):
1279:           return undef;
Mail::IMAPClient::connect(Mail-IMAPClient-2.99_02/lib/Mail/IMAPClient.pm:238):
238:        $code or return undef;
Carp::croak(/usr/share/perl/5.8/Carp.pm:102):
102:    sub croak   { die  shortmess @_ }
Carp::shortmess(/usr/share/perl/5.8/Carp.pm:86):
86:             local($@, $!);
Carp::shortmess(/usr/share/perl/5.8/Carp.pm:86):
86:             local($@, $!);
Carp::shortmess(/usr/share/perl/5.8/Carp.pm:89):
89:             require Carp::Heavy unless $INC{"Carp/Heavy.pm"};
Carp::shortmess(/usr/share/perl/5.8/Carp.pm:92):
92:         my $call_pack = caller();
Carp::shortmess(/usr/share/perl/5.8/Carp.pm:93):
93:         local @CARP_NOT = caller();
Carp::shortmess(/usr/share/perl/5.8/Carp.pm:94):
94:         shortmess_heavy(@_);
Carp::shortmess_heavy(/usr/share/perl/5.8/Carp/Heavy.pm:177):
177:      return longmess_heavy(@_) if $Verbose;
Carp::shortmess_heavy(/usr/share/perl/5.8/Carp/Heavy.pm:178):
178:      return @_ if ref($_[0]); # don't break references as exceptions
Carp::shortmess_heavy(/usr/share/perl/5.8/Carp/Heavy.pm:179):
179:      my $i = short_error_loc();
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:160):
160:      my $cache;
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:161):
161:      my $i = 1;
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:162):
162:      my $lvl = $CarpLevel;
163:      {
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:164):
164:        my $called = caller($i++);
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:164):
164:        my $called = caller($i++);
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:165):
165:        my $caller = caller($i);
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:166):
166:        return 0 unless defined($caller); # What happened?
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:167):
167:        redo if $Internal{$caller};
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:168):
168:        redo if $CarpInternal{$called};
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:164):
164:        my $called = caller($i++);
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:165):
165:        my $caller = caller($i);
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:166):
166:        return 0 unless defined($caller); # What happened?
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:167):
167:        redo if $Internal{$caller};
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:168):
168:        redo if $CarpInternal{$called};
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:164):
164:        my $called = caller($i++);
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:165):
165:        my $caller = caller($i);
Carp::short_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:166):
166:        return 0 unless defined($caller); # What happened?
Carp::shortmess_heavy(/usr/share/perl/5.8/Carp/Heavy.pm:180):
180:      if ($i) {
Carp::shortmess_heavy(/usr/share/perl/5.8/Carp/Heavy.pm:184):
184:        longmess_heavy(@_);
Carp::longmess_heavy(/usr/share/perl/5.8/Carp/Heavy.pm:115):
115:      return @_ if ref($_[0]); # don't break references as exceptions
Carp::longmess_heavy(/usr/share/perl/5.8/Carp/Heavy.pm:116):
116:      my $i = long_error_loc();
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:91):
91:       my $i;
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:92):
92:       my $lvl = $CarpLevel;
93:       {
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:94):
94:         my $pkg = caller(++$i);
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:94):
94:         my $pkg = caller(++$i);
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:95):
95:         unless(defined($pkg)) {
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:107):
107:        redo if $CarpInternal{$pkg};
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:94):
94:         my $pkg = caller(++$i);
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:95):
95:         unless(defined($pkg)) {
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:107):
107:        redo if $CarpInternal{$pkg};
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:94):
94:         my $pkg = caller(++$i);
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:95):
95:         unless(defined($pkg)) {
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:107):
107:        redo if $CarpInternal{$pkg};
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:94):
94:         my $pkg = caller(++$i);
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:95):
95:         unless(defined($pkg)) {
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:107):
107:        redo if $CarpInternal{$pkg};
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:108):
108:        redo unless 0 > --$lvl;
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:109):
109:        redo if $Internal{$pkg};
Carp::long_error_loc(/usr/share/perl/5.8/Carp/Heavy.pm:111):
111:      return $i - 1;
Carp::longmess_heavy(/usr/share/perl/5.8/Carp/Heavy.pm:117):
117:      return ret_backtrace($i, @_);
Carp::ret_backtrace(/usr/share/perl/5.8/Carp/Heavy.pm:123):
123:      my ($i, @error) = @_;
Carp::ret_backtrace(/usr/share/perl/5.8/Carp/Heavy.pm:124):
124:      my $mess;
Carp::ret_backtrace(/usr/share/perl/5.8/Carp/Heavy.pm:125):
125:      my $err = join '', @error;
Carp::ret_backtrace(/usr/share/perl/5.8/Carp/Heavy.pm:126):
126:      $i++;
Carp::ret_backtrace(/usr/share/perl/5.8/Carp/Heavy.pm:128):
128:      my $tid_msg = '';
Carp::ret_backtrace(/usr/share/perl/5.8/Carp/Heavy.pm:129):
129:      if (defined &Thread::tid) {
Carp::ret_backtrace(/usr/share/perl/5.8/Carp/Heavy.pm:134):
134:      my %i = caller_info($i);
Carp::caller_info(/usr/share/perl/5.8/Carp/Heavy.pm:12):
12:       my $i = shift(@_) + 1;
13:       package DB;
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
Carp::caller_info(/usr/share/perl/5.8/Carp/Heavy.pm:73):
73:       my $info = shift;
Carp::caller_info(/usr/share/perl/5.8/Carp/Heavy.pm:74):
74:       if (defined($info->{evaltext})) {
Carp::caller_info(/usr/share/perl/5.8/Carp/Heavy.pm:85):
85:       return ($info->{sub} eq '(eval)') ? 'eval {...}' : $info->{sub};
Carp::caller_info(/usr/share/perl/5.8/Carp/Heavy.pm:39):
39:       my $arg = shift;
Carp::caller_info(/usr/share/perl/5.8/Carp/Heavy.pm:40):
40:       if (ref($arg)) {
Carp::caller_info(/usr/share/perl/5.8/Carp/Heavy.pm:45):
45:       $arg =~ s/'/\\'/g;
Carp::caller_info(/usr/share/perl/5.8/Carp/Heavy.pm:46):
46:       $arg = str_len_trim($arg, $MaxArgLen);
Carp::str_len_trim(/usr/share/perl/5.8/Carp/Heavy.pm:190):
190:      my $str = shift;
Carp::str_len_trim(/usr/share/perl/5.8/Carp/Heavy.pm:191):
191:      my $max = shift || 0;
Carp::str_len_trim(/usr/share/perl/5.8/Carp/Heavy.pm:192):
192:      if (2 < $max and $max < length($str)) {
Carp::str_len_trim(/usr/share/perl/5.8/Carp/Heavy.pm:195):
195:      return $str;
Carp::caller_info(/usr/share/perl/5.8/Carp/Heavy.pm:49):
49:       $arg = "'$arg'" unless $arg =~ /^-?[\d.]+\z/;
Carp::caller_info(/usr/share/perl/5.8/Carp/Heavy.pm:55):
55:         or $arg =~ s/([[:cntrl:]]|[[:^ascii:]])/sprintf("\\x{%x}",ord($1))/eg;
Carp::caller_info(/usr/share/perl/5.8/Carp/Heavy.pm:56):
56:       return $arg;
Carp::ret_backtrace(/usr/share/perl/5.8/Carp/Heavy.pm:135):
135:      $mess = "$err at $i{file} line $i{line}$tid_msg\n";
Carp::ret_backtrace(/usr/share/perl/5.8/Carp/Heavy.pm:137):
137:      while (my %i = caller_info(++$i)) {
Carp::caller_info(/usr/share/perl/5.8/Carp/Heavy.pm:12):
12:       my $i = shift(@_) + 1;
13:       package DB;
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
Carp::ret_backtrace(/usr/share/perl/5.8/Carp/Heavy.pm:141):
141:      return $mess;
Error connecting @! at t/01_connect line 9
 at t/01_connect line 9
Debugged program terminated.  Use q to quit or R to restart,
  use o inhibit_exit to avoid stopping after program termination,
  h q, h R or h o to get additional info.  
  DB<1>  q
IO::Handle::DESTROY(/usr/lib/perl/5.8/IO/Handle.pm:75):
75:     sub DESTROY {}
IO::Handle::DESTROY(/usr/lib/perl/5.8/IO/Handle.pm:75):
75:     sub DESTROY {}
Config::DESTROY(/usr/lib/perl/5.8/Config.pm:62):
62:     sub DESTROY { }
IO::Handle::DESTROY(/usr/lib/perl/5.8/IO/Handle.pm:75):
75:     sub DESTROY {}
IO::Handle::DESTROY(/usr/lib/perl/5.8/IO/Handle.pm:75):
75:     sub DESTROY {}
83$ 

