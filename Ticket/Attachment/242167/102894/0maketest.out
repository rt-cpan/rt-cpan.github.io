/usr/bin/perl.exe "-MExtUtils::Command::MM" "-e" "test_harness(1, 'inc', 'blib/lib', 'blib/arch')" t/*.t
t/00_api.....1..63
ok 1 - Class 'File::Flat' is loaded
ok 2 - Class 'File::Flat::Object' is loaded
ok 3 - File::Flat->can('errstr')
ok 4 - File::Flat->can('remove')
ok 5 - File::Flat->can('move')
ok 6 - File::Flat->can('isBinary')
ok 7 - File::Flat->can('getAppendHandle')
ok 8 - File::Flat->can('append')
ok 9 - File::Flat->can('getWriteHandle')
ok 10 - File::Flat->can('getReadHandle')
ok 11 - File::Flat->can('canExecute')
ok 12 - File::Flat->can('copy')
ok 13 - File::Flat->can('canWrite')
ok 14 - File::Flat->can('slurp')
ok 15 - File::Flat->can('overwrite')
ok 16 - File::Flat->can('read')
ok 17 - File::Flat->can('isaDirectory')
ok 18 - File::Flat->can('canOpen')
ok 19 - File::Flat->can('isText')
ok 20 - File::Flat->can('write')
ok 21 - File::Flat->can('canRemove')
ok 22 - File::Flat->can('canReadWrite')
ok 23 - File::Flat->can('truncate')
ok 24 - File::Flat->can('makeDirectory')
ok 25 - File::Flat->can('isaFile')
ok 26 - File::Flat->can('open')
ok 27 - File::Flat->can('prune')
ok 28 - File::Flat->can('fileSize')
ok 29 - File::Flat->can('getReadWriteHandle')
ok 30 - File::Flat->can('exists')
ok 31 - File::Flat->can('canRead')
ok 32 - No unknown public methods in 'File::Flat'
ok 33 - File::Flat::Object->can('new')
ok 34 - File::Flat::Object->can('errstr')
ok 35 - File::Flat::Object->can('remove')
ok 36 - File::Flat::Object->can('move')
ok 37 - File::Flat::Object->can('isBinary')
ok 38 - File::Flat::Object->can('getAppendHandle')
ok 39 - File::Flat::Object->can('append')
ok 40 - File::Flat::Object->can('getWriteHandle')
ok 41 - File::Flat::Object->can('getReadHandle')
ok 42 - File::Flat::Object->can('canExecute')
ok 43 - File::Flat::Object->can('copy')
ok 44 - File::Flat::Object->can('canWrite')
ok 45 - File::Flat::Object->can('slurp')
ok 46 - File::Flat::Object->can('overwrite')
ok 47 - File::Flat::Object->can('read')
ok 48 - File::Flat::Object->can('isaDirectory')
ok 49 - File::Flat::Object->can('canOpen')
ok 50 - File::Flat::Object->can('isText')
ok 51 - File::Flat::Object->can('write')
ok 52 - File::Flat::Object->can('canRemove')
ok 53 - File::Flat::Object->can('canReadWrite')
ok 54 - File::Flat::Object->can('truncate')
ok 55 - File::Flat::Object->can('makeDirectory')
ok 56 - File::Flat::Object->can('isaFile')
ok 57 - File::Flat::Object->can('open')
ok 58 - File::Flat::Object->can('prune')
ok 59 - File::Flat::Object->can('fileSize')
ok 60 - File::Flat::Object->can('getReadWriteHandle')
ok 61 - File::Flat::Object->can('exists')
ok 62 - File::Flat::Object->can('canRead')
ok 63 - No unknown public methods in 'File::Flat::Object'
ok
t/01_main....1..269
ok 1 - Your perl is new enough
ok 2 - use File::Flat;
ok 3 - ff_text exists
ok 4 - ff_binary exists
ok 5 - ff_content exists
ok 6 - ->_error returns undef
ok 7 - ->_error sets error message
ok 8 - ->errstr retrieves error message
ok 9 - Static ->exists doesn't see missing file
ok 10 - Static ->exists sees mode 000 file
ok 11 - Static ->exists sees mode 400 file
ok 12 - Static ->exists sees mode 700 file
ok 13 - Static ->exists sees . directory
ok 14 - Static ->exists sees mode 000 directory
ok 15 - Static ->isaFile returns false for missing file
ok 16 - Static ->isaFile returns true for mode 000 file
ok 17 - Static ->isaFile returns true for mode 700 file
ok 18 - Static ->isaFile returns false for current directory
ok 19 - Static ->isaFile returns false for subdirectory
ok 20 - Static ->isaDirectory returns false for missing directory
ok 21 - Static ->isaDirectory returns false for mode 000 file
ok 22 - Static ->isaDirectory returns false for mode 700 file
ok 23 - Static ->isaDirectory returns true for current directory
ok 24 - Static ->isaDirectory returns true for readable subdirectory
ok 25 - Static ->isaDirectory return true for unreadable subdirectory
ok 26 - Static ->canRead returns false for missing file
ok 27 - Static ->canRead returns false for mode 000 file
ok 28 - Static ->canRead returns true for mode 400 file
ok 29 - Static ->canRead returns false for mode 200 file
ok 30 - Static ->canRead returns false for mode 100 file
ok 31 - Static ->canRead returns true for mode 500 file
ok 32 - Static ->canRead returns true for mode 300 file
ok 33 - Static ->canRead returns true for mode 700 file
ok 34 - Static ->canRead returns true for current directory
ok 35 - Static ->canRead returns true for readable subdirectory
ok 36 - Static ->canRead returns false for unreadable subdirectory
ok 37 - Static ->canWrite returns true for missing, creatable, file
ok 38 - Static ->canWrite returns false for mode 000 file
ok 39 - Static ->canWrite returns false for mode 400 file
ok 40 - Static ->canWrite returns true for mode 200 file
ok 41 - Static ->canWrite returns false for mode 100 file
ok 42 - Static ->canWrite returns true for mode 500 file
ok 43 - Static ->canWrite returns false for mode 300 file
ok 44 - Static ->canWrite returns true for mode 700 file
ok 45 - Static ->canWrite returns true for current directory
ok 46 - Static ->canWrite returns true for writable subdirectory
ok 47 - Static ->canWrite returns false for unwritable subdirectory

#     Failed test (t/01_main.t at line 253)
not ok 48 - Static ->canWrite returns false for missing, non-creatable file
ok 49 - Static ->canReadWrite returns false for missing file
ok 50 - Static ->canReadWrite returns false for mode 000 file
ok 51 - Static ->canReadWrite returns false for mode 400 file
ok 52 - Static ->canReadWrite returns false for mode 200 file
ok 53 - Static ->canReadWrite returns false for mode 100 file
ok 54 - Static ->canReadWrite returns true for mode 500 file
ok 55 - Static ->canReadWrite returns false for mode 300 file
ok 56 - Static ->canReadWrite returns true for mode 700 file
ok 57 - Static ->canReadWrite returns true for current directory
ok 58 - Static ->canReadWrite returns true for readwritable subdirectory
ok 59 - Static ->canReadWrite returns false for unreadwritable subdirectory
ok 60 - Static ->canExecute returns false for missing file
ok 61 - Static ->canExecute returns false for mode 000 file
ok 62 - Static ->canExecute returns false for mode 400 file
ok 63 - Static ->canExecute returns false for mode 200 file
ok 64 - Static ->canExecute returns true for mode 100 file
ok 65 - Static ->canExecute returns false for mode 500 file
ok 66 - Static ->canExecute returns true for mode 300 file
ok 67 - Static ->canExecute returns true for mode 700 file
ok 68 - Static ->canExecute returns true for current directory
ok 69 - Static ->canExecute returns true for executable subdirectory
ok 70 - Static ->canExecute returns false for unexecutable subdirectory
ok 71 - Static ->canOpen returns false for missing file
ok 72 - Static ->canOpen returns false for mode 000 file
ok 73 - Static ->canOpen returns true for mode 400 file
ok 74 - Static ->canOpen returns false for mode 200 file
ok 75 - Static ->canOpen returns false for mode 100 file
ok 76 - Static ->canOpen returns true for mode 500 file
ok 77 - Static ->canOpen returns true for mode 300 file
ok 78 - Static ->canOpen returns true for mode 700 file
ok 79 - Static ->canOpen returns false for current directory
ok 80 - Static ->canOpen returns false for readable subdirectory
ok 81 - Static ->canOpen returns false for unreadable subdirectory
ok 82 - Static ->isText returns false for missing file
ok 83 - Static ->isText returns false for binary file
ok 84 - Static ->isText returns true for text file
ok 85 - Static ->isText returns false for good subdirectory
ok 86 - Static ->isText returns false for bad subdirectory
ok 87 - Static ->isBinary returns false for missing file

#     Failed test (t/01_main.t at line 362)

#     Failed test (t/01_main.t at line 363)

#     Failed test (t/01_main.t at line 364)
ok 88 - Static ->isBinary returns true for binary file
ok 89 - Static ->isBinary returns false for text file
ok 90 - Static ->isBinary return false for good subdirectory
ok 91 - Static ->isBinary returns false for bad subdirectory
ok 92 - Static ->open call returns undef on bad file name
ok 93 - Static ->getReadHandle returns undef on bad file name
ok 94 - Static ->getWriteHandle returns undef on bad file name
ok 95 - Static ->getAppendHandle returns undef on bad file name
ok 96 - Static ->getReadWriteHandle returns undef on bad file name
ok 97 - The object isa IO::File
ok 98 - The object isa IO::File
ok 99 - The object isa IO::File
ok 100 - The object isa IO::File
ok 101 - The object isa IO::File
ok 102 - ->copy() returns error
ok 103 - ->copy( file ) returns error
not ok 104 - Static ->copy returns true correctly for same directory copy
not ok 105 - Static ->copy actually created the file for same directory copy
not ok 106 - Static ->copy copies the file without breaking it

#     Failed test (t/01_main.t at line 367)

#     Failed test (t/01_main.t at line 368)
not ok 107 - Static ->copy returns true correctly for single sub-directory copy
not ok 108 - Static ->copy actually created the file for single sub-directory copy

#     Failed test (t/01_main.t at line 371)

#     Failed test (t/01_main.t at line 372)

#     Failed test (t/01_main.t at line 381)
not ok 109 - Static ->copy returns true correctly for multiple sub-directory copy

#     Failed test (t/01_main.t at line 383)

#     Failed test (t/01_main.t at line 384)
not ok 110 - Static ->copy actually created the file for multiple sub-directory copy
ok 111 - Static ->copy return undef when file does not exist
not ok 112 - ->copy( dir, dir ) returns true
not ok 113 - ->copy( dir, dir ): New dir exists

#     Failed test (t/01_main.t at line 388)

#     Failed test (t/01_main.t at line 390)

#     Failed test (t/01_main.t at line 393)

#     Failed test (t/01_main.t at line 395)

#     Failed test (t/01_main.t at line 396)

#     Failed test (t/01_main.t at line 461)

#     Failed test (t/01_main.t at line 462)

#     Failed test (t/01_main.t at line 463)
not ok 114 - ->copy( dir, dir ): Files within directory were copied
not ok 115 - Static ->move for move to existing directory returns true 
ok 116 - Static ->move for move to existing directory actually removes the old file
not ok 117 - Static ->move for move to existing directory actually creates the new file
not ok 118 - Static ->move for move to new directory returns true 
ok 119 - Static ->move for move to new directory actually removes the old file
not ok 120 - Static ->move for move to new directory actually creates the new file
not ok 121 - Static ->move moved the file without breaking it
ok 122 - Content tester works
ok 123 - Static ->slurp returns error on no arguments
ok 124 - Static ->slurp returns error on bad file
ok 125 - Static ->slurp returns defined
ok 126 - Static ->slurp returns something
ok 127 - Static ->slurp returns a scalar reference
ok 128 - Static ->slurp returns content
ok 129 - Static ->slurp returns the correct file contents
ok 130 - Static ->read returns error on no arguments
ok 131 - Static ->read returns error on bad file
ok 132 - Static ->read doesn't error on good file
ok 133 - Static ->read returns true on good file
ok 134 - Static ->read returns a reference on good file
ok 135 - Static ->read returns an array ref on good file
ok 136 - Static ->read returns the correct length of data
ok 137 - Static ->read returns the expected content
ok 138 - Static ->read (array context) returns error on no arguments
ok 139 - Static ->read (array context) returns error on bad file
ok 140 - Static ->read (array context) doesn't error on good file
ok 141 - Static ->read (array context) returns the correct length of data
ok 142 - Static ->read (array context) returns the expected content
ok 143 - ->write() fails correctly
ok 144 - ->write( file ) fails correctly
ok 145 - ->write( file ) doesn't actually create a file
not ok 146 - ->File::Flat->write( file, string ) returns true
not ok 147 - ->write( file, string ) actually creates a file
not ok 148 - ->write( file, string ) writes the correct content

#     Failed test (t/01_main.t at line 466)

#     Failed test (t/01_main.t at line 467)

#     Failed test (t/01_main.t at line 468)
not ok 149 - ->File::Flat->write( file, string_ref ) returns true
not ok 150 - ->write( file, string_ref ) actually creates a file
not ok 151 - ->write( file, string_ref ) writes the correct content

#     Failed test (t/01_main.t at line 471)

#     Failed test (t/01_main.t at line 472)

#     Failed test (t/01_main.t at line 473)
not ok 152 - ->write( file, array_ref ) returns true
not ok 153 - ->write( file, array_ref ) actually creates a file
not ok 154 - ->write( file, array_ref ) writes the correct content

#     Failed test (t/01_main.t at line 478)
Can't call method "close" on an undefined value at t/01_main.t line 480.
# Looks like you planned 269 tests but only ran 156.
# Looks like your test died just after 156.
ok 155 - ->write( handle ) fails correctly
not ok 156 - Got write handle for test
dubious
	Test returned status 255 (wstat 65280, 0xff00)
DIED. FAILED tests 48, 104-110, 112-115, 117-118, 120-121, 146-154, 156-269
	Failed 139/269 tests, 48.33% okay
t/99_pod.....1..0 # Skip Test::Pod 1.00 required for testing POD
skipped
        all skipped: Test::Pod 1.00 required for testing POD
Failed Test Stat Wstat Total Fail  Failed  List of Failed
-------------------------------------------------------------------------------
t/01_main.t  255 65280   269  252  93.68%  48 104-110 112-115 117-118 120-121
                                           146-154 156-269
1 test skipped.
Failed 1/3 test scripts, 66.67% okay. 139/332 subtests failed, 58.13% okay.
make: *** [test_dynamic] Error 14
