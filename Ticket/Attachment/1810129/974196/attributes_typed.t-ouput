#####################################################
### Keyword macro defined at lib/Dios.pm line 1057:
###
###    class  <class name>  <bases>  <block>
###
### Converted code at t/attributes_typed.t line 42:
###
###    class  Typeful  {
###    has         Int  $.int_attr where { $_ > 0 } is rw;
###    has  Array[Num]  $.aon_attr                  is rw;
###    has         Int  @.aoi_attr                  is rw;
###    has         Int  %.hoi_attr                  is rw;
###
###    method direct_assignment {
###        ::ok  eval { $int_attr = 1;           1; } => 'Int attr assigned correctly';
###        ::ok !eval { $int_attr = 0;           1; } => 'Int attr 0 assignment failed as expected';
###        ::ok !eval { $int_attr = 'str';       1; } => 'Int attr str assignment failed as expected';
###
###        ::ok  eval { $aon_attr = [1,2,3];     1; } => 'AoN attr assigned correctly';
###        ::ok !eval { $aon_attr = [1,2,'str']; 1; } => 'AoN attr assignment failed as expected';
###
###        ::ok  eval { @aoi_attr = (1,2,3);     1; } => 'AoI attr assigned correctly';
###        eval {
###            ::ok !eval { @aoi_attr = (1,2,'str'); 1; } => 'AoI attr assignment failed as expected';
###            1;
###        };
###
###        eval {
###            ::ok !eval { $aoi_attr[0] = 'str'; 1; } => 'AoI attr elem assignment failed as expected';
###            1;
###        };
###
###        ::ok  eval { %hoi_attr = (a=>1, b=>-99);   1; } => 'HoI attr assigned correctly';
###
###        eval {
###            ::ok !eval { %hoi_attr = (a=>1, b=>'z');   1; } => 'HoI attr assignment failed as expected';
###            1;
###        };
###
###        1;
###    }
###}
###
### Into:
###
###     { package Typeful; use Object::InsideOut ; do {
###     has Int $.int_attr where { $_ > 0 } is rw;
###     has Array[Num] $.aon_attr is rw;
###     has Int @.aoi_attr is rw;
###     has Int %.hoi_attr is rw;
###    
###     method direct_assignment {
###     ::ok eval { $int_attr = 1; 1; } => 'Int attr assigned correctly';
###     ::ok !eval { $int_attr = 0; 1; } => 'Int attr 0 assignment failed as expected';
###     ::ok !eval { $int_attr = 'str'; 1; } => 'Int attr str assignment failed as expected';
###    
###     ::ok eval { $aon_attr = [1,2,3]; 1; } => 'AoN attr assigned correctly';
###     ::ok !eval { $aon_attr = [1,2,'str']; 1; } => 'AoN attr assignment failed as expected';
###    
###     ::ok eval { @aoi_attr = (1,2,3); 1; } => 'AoI attr assigned correctly';
###     eval {
###     ::ok !eval { @aoi_attr = (1,2,'str'); 1; } => 'AoI attr assignment failed as expected';
###     1;
###     };
###    
###     eval {
###     ::ok !eval { $aoi_attr[0] = 'str'; 1; } => 'AoI attr elem assignment failed as expected';
###     1;
###     };
###    
###     ::ok eval { %hoi_attr = (a=>1, b=>-99); 1; } => 'HoI attr assigned correctly';
###    
###     eval {
###     ::ok !eval { %hoi_attr = (a=>1, b=>'z'); 1; } => 'HoI attr assignment failed as expected';
###     1;
###     };
###    
###     1;
###     }
###    } } 
###
#####################################################
#####################################################
### Keyword macro defined at lib/Dios.pm line 1213:
###
###    has  <type>  <variable>  <constraint>  <traits>  <handles>  <init>
###
### Converted code at t/attributes_typed.t line 9:
###
###    has          Int  $.int_attr where { $_ > 0 } is rw
###
### Into:
###
###     { no warnings; $Dios::_internal::attr_validator_1 = Dios::Types::validator_for(q{Int}, 'Value (%s) for $int_attr attribute', sub { $_ > 0 } ); } my @_Dios__attr_int_attr : Field Std(Name=>q{int_attr}) :Type( sub{ $Dios::_internal::attr_validator_1->(shift) }) :Arg(Name=>q{int_attr} ) :Type( sub{ $Dios::_internal::attr_validator_1->(shift) }) ; ; 
###
#####################################################
#####################################################
### Keyword macro defined at lib/Dios.pm line 1213:
###
###    has  <type>  <variable>  <constraint>  <traits>  <handles>  <init>
###
### Converted code at t/attributes_typed.t line 10:
###
###    has   Array[Num]  $.aon_attr                  is rw
###
### Into:
###
###     { no warnings; $Dios::_internal::attr_validator_2 = Dios::Types::validator_for(q{Array[Num]}, 'Value (%s) for $aon_attr attribute', ); } my @_Dios__attr_aon_attr : Field Std(Name=>q{aon_attr}) :Type( sub{ $Dios::_internal::attr_validator_2->(shift) }) :Arg(Name=>q{aon_attr} ) :Type( sub{ $Dios::_internal::attr_validator_2->(shift) }) ; ; 
###
#####################################################
#####################################################
### Keyword macro defined at lib/Dios.pm line 1213:
###
###    has  <type>  <variable>  <constraint>  <traits>  <handles>  <init>
###
### Converted code at t/attributes_typed.t line 11:
###
###    has          Int  @.aoi_attr                  is rw
###
### Into:
###
###     { no warnings; $Dios::_internal::attr_validator_3 = Dios::Types::validator_for(q{Array[Int]}, 'Value (%s) for @aoi_attr attribute', ); } my @_Dios__attr_aoi_attr : Field Std(Name=>q{aoi_attr}) :Type( sub{ $Dios::_internal::attr_validator_3->(shift) }) :DEFAULT(___i_n_i_t__aoi_attr___($self)) :Arg(Name=>q{aoi_attr} ) :Type( sub{ $Dios::_internal::attr_validator_3->(shift) }) ; sub ___i_n_i_t__aoi_attr___ { my ($self) = @_; [()] }; 
###
#####################################################
#####################################################
### Keyword macro defined at lib/Dios.pm line 1213:
###
###    has  <type>  <variable>  <constraint>  <traits>  <handles>  <init>
###
### Converted code at t/attributes_typed.t line 12:
###
###    has          Int  %.hoi_attr                  is rw
###
### Into:
###
###     { no warnings; $Dios::_internal::attr_validator_4 = Dios::Types::validator_for(q{Hash[Int]}, 'Value (%s) for %hoi_attr attribute', ); } my @_Dios__attr_hoi_attr : Field Std(Name=>q{hoi_attr}) :Type( sub{ $Dios::_internal::attr_validator_4->(shift) }) :DEFAULT(___i_n_i_t__hoi_attr___($self)) :Arg(Name=>q{hoi_attr} ) :Type( sub{ $Dios::_internal::attr_validator_4->(shift) }) ; sub ___i_n_i_t__hoi_attr___ { my ($self) = @_; +{()} }; 
###
#####################################################
#####################################################
### Keyword macro defined at lib/Dios.pm line 1117:
###
###    method  <sub name>  <parameter list>  <attrs>  <block>
###
### Converted code at t/attributes_typed.t line 41:
###
###    method  direct_assignment {
###        ::ok  eval { $int_attr = 1;           1; } => 'Int attr assigned correctly';
###        ::ok !eval { $int_attr = 0;           1; } => 'Int attr 0 assignment failed as expected';
###        ::ok !eval { $int_attr = 'str';       1; } => 'Int attr str assignment failed as expected';
###
###        ::ok  eval { $aon_attr = [1,2,3];     1; } => 'AoN attr assigned correctly';
###        ::ok !eval { $aon_attr = [1,2,'str']; 1; } => 'AoN attr assignment failed as expected';
###
###        ::ok  eval { @aoi_attr = (1,2,3);     1; } => 'AoI attr assigned correctly';
###        eval {
###            ::ok !eval { @aoi_attr = (1,2,'str'); 1; } => 'AoI attr assignment failed as expected';
###            1;
###        };
###
###        eval {
###            ::ok !eval { $aoi_attr[0] = 'str'; 1; } => 'AoI attr elem assignment failed as expected';
###            1;
###        };
###
###        ::ok  eval { %hoi_attr = (a=>1, b=>-99);   1; } => 'HoI attr assigned correctly';
###
###        eval {
###            ::ok !eval { %hoi_attr = (a=>1, b=>'z');   1; } => 'HoI attr assignment failed as expected';
###            1;
###        };
###
###        1;
###    }
###
### Into:
###
###    sub direct_assignment;sub direct_assignment { use experimental 'refaliasing'; \ my $int_attr = \ $_Dios__attr_int_attr[${$_[0]}]; Dios::Types::_set_var_type(q{Int}, \$int_attr, 'Value (%s) for $int_attr attribute', sub { $_ > 0 } ); \ my $aon_attr = \ $_Dios__attr_aon_attr[${$_[0]}]; Dios::Types::_set_var_type(q{Array[Num]}, \$aon_attr, 'Value (%s) for $aon_attr attribute', ); \ my @aoi_attr = $_Dios__attr_aoi_attr[${$_[0]}]; Dios::Types::_set_var_type(q{Int}, \@aoi_attr, 'Value (%s) for @aoi_attr attribute', ); \ my %hoi_attr = $_Dios__attr_hoi_attr[${$_[0]}]; Dios::Types::_set_var_type(q{Int}, \%hoi_attr, 'Value (%s) for %hoi_attr attribute', ); { my $self; $self = ( !@_ ? Dios::_error(q{No argument found for invocant $self in call to method direct_assignment}) : shift) ; Dios::_error(ucfirst(q{method direct_assignment takes no arguments})) if @_;; do {
###     ::ok eval { $int_attr = 1; 1; } => 'Int attr assigned correctly';
###     ::ok !eval { $int_attr = 0; 1; } => 'Int attr 0 assignment failed as expected';
###     ::ok !eval { $int_attr = 'str'; 1; } => 'Int attr str assignment failed as expected';
###    
###     ::ok eval { $aon_attr = [1,2,3]; 1; } => 'AoN attr assigned correctly';
###     ::ok !eval { $aon_attr = [1,2,'str']; 1; } => 'AoN attr assignment failed as expected';
###    
###     ::ok eval { @aoi_attr = (1,2,3); 1; } => 'AoI attr assigned correctly';
###     eval {
###     ::ok !eval { @aoi_attr = (1,2,'str'); 1; } => 'AoI attr assignment failed as expected';
###     1;
###     };
###    
###     eval {
###     ::ok !eval { $aoi_attr[0] = 'str'; 1; } => 'AoI attr elem assignment failed as expected';
###     1;
###     };
###    
###     ::ok eval { %hoi_attr = (a=>1, b=>-99); 1; } => 'HoI attr assigned correctly';
###    
###     eval {
###     ::ok !eval { %hoi_attr = (a=>1, b=>'z'); 1; } => 'HoI attr assignment failed as expected';
###     1;
###     };
###    
###     1;
###     } } } 
###
#####################################################
1..5
# Subtest: int_attr tests
    ok 1 - Int attr set correctly
    ok 2 - Non-int int_attr failed as expected
    ok 3 - Int set_int_attr succeeded as expected
    ok 4 - Non-int set_int_attr failed as expected
    1..4
ok 1 - int_attr tests
# Subtest: aon_attr tests
    ok 1 - aon attr set correctly
    ok 2 - Non-array aon_attr failed as expected
    ok 3 - Non-num aon_attr failed as expected
    ok 4 - aon set_aon_attr succeeded as expected
    ok 5 - Non-num set_aon_attr failed as expected
    1..5
ok 2 - aon_attr tests
# Subtest: aoi_attr tests
    ok 1 - aoi attr set correctly
    ok 2 - Non-array aoi_attr failed as expected
    ok 3 - Non-num aoi_attr failed as expected
    ok 4 - aoi set_aoi_attr succeeded as expected
    ok 5 - Non-num set_aoi_attr failed as expected
    1..5
ok 3 - aoi_attr tests
# Subtest: hoi_attr tests
    ok 1 - hoi attr set correctly
    ok 2 - Non-array hoi_attr failed as expected
    ok 3 - Non-num hoi_attr failed as expected
    ok 4 - hoi set_hoi_attr succeeded as expected
    ok 5 - Non-num set_hoi failed as expected
    1..5
ok 4 - hoi_attr tests
# Subtest: Direct assignment

