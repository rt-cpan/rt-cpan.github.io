diff --git a/Build.PL b/Build.PL
index 557c8f6..33088a5 100644
--- a/Build.PL
+++ b/Build.PL
@@ -8,6 +8,7 @@ my $build = Module::Build->new(
     requires        => {
         'Devel::Declare'    => '0.001006',
         'Test::More'        => '0.62',
+        'Sub::Name'         => 0,
     },
     
     dist_author     => 'Michael G Schwern <schwern@pobox.com>',
diff --git a/Changes b/Changes
index f12236c..c7fdc0d 100644
--- a/Changes
+++ b/Changes
@@ -1,3 +1,6 @@
+0.03
+    Use Sub::Name so that generated code is follow-able in stack traces
+
 0.02  Wed Dec 26 02:07:26 PST 2007
     Doc Fix
     * Forgot the "use Method::Signatures" in the SYNOPSIS
diff --git a/lib/Method/Signatures.pm b/lib/Method/Signatures.pm
index adb7901..6cb0ef0 100644
--- a/lib/Method/Signatures.pm
+++ b/lib/Method/Signatures.pm
@@ -1,6 +1,7 @@
 package Method::Signatures;
 
 use Devel::Declare;
+use Sub::Name;
 
 our $VERSION = '0.02';
 
@@ -71,7 +72,7 @@ sub import {
                     $name = $caller .'::'. $name;
                 }
                 no strict 'refs';
-                *{$name} = $sub;
+                *{$name} = subname $name, $sub;
             }
             return wantarray ? ($sub, @rest) : $sub;
         }
diff --git a/t/method.t b/t/method.t
index dd18062..e807f89 100644
--- a/t/method.t
+++ b/t/method.t
@@ -2,6 +2,7 @@
 
 use strict;
 use Test::More 'no_plan';
+use Carp;
 
 {
     package Foo;
@@ -35,14 +36,24 @@ use Test::More 'no_plan';
         return CORE::caller;
     };
 
-    #line 39
     method warn($foo, $bar) {
         my $warning = '';
         local $SIG{__WARN__} = sub { $warning = join '', @_; };
+#line 42
         CORE::warn "Testing warn";
         
         return $warning;
     };
+
+    my $calls = 0;
+    method stack() {
+        if($calls++ < 2){
+            return $self->stack();
+        }
+        else {
+            return Carp::longmess("deep inside 'stack'");
+        }
+    };
 }
 
 my $obj = Foo->new( foo => 42, bar => 23 );
@@ -60,3 +71,7 @@ for my $method (qw(no_proto empty_proto echo)) {
 is_deeply [$obj->caller], [__PACKAGE__, $0, __LINE__], 'caller works';
 
 is $obj->warn, "Testing warn at $0 line 42.\n";
+
+my $s = $obj->stack;
+unlike $s, qr/__ANON__/, 'no more __ANON__s in longmess';
+like $s, qr/(Foo::stack.*){2}/s, 'Foo::stack instead';
