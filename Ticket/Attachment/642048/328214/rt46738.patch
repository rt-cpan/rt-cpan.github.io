diff -ruN Locale-Maketext-1.13_82.orig/ChangeLog Locale-Maketext-1.13_82/ChangeLog
--- Locale-Maketext-1.13_82.orig/ChangeLog	2009-06-23 21:29:36.000000000 -0500
+++ Locale-Maketext-1.13_82/ChangeLog	2009-07-30 12:26:19.000000000 -0500
@@ -1,5 +1,10 @@
 Revision history for Perl suite Locale::Maketext
 
+2009-08-01  Adriano Ferreira
+    * Development release 1.13_83
+
+    "Readonly" lexicon support (thanks Dan Muey)
+   
 2009-06-23  Adriano Ferreira
     * Development release 1.13_82
 
diff -ruN Locale-Maketext-1.13_82.orig/MANIFEST Locale-Maketext-1.13_82/MANIFEST
--- Locale-Maketext-1.13_82.orig/MANIFEST	2009-06-23 19:16:50.000000000 -0500
+++ Locale-Maketext-1.13_82/MANIFEST	2009-07-30 13:12:26.000000000 -0500
@@ -12,6 +12,7 @@
 README
 t/00_load.t
 t/01_about_verbose.t
+t/04.use_external_lex_cache.t
 t/10_make.t
 t/20_get.t
 t/30_local.t
diff -ruN Locale-Maketext-1.13_82.orig/lib/Locale/Maketext.pm Locale-Maketext-1.13_82/lib/Locale/Maketext.pm
--- Locale-Maketext-1.13_82.orig/lib/Locale/Maketext.pm	2009-06-23 21:23:47.000000000 -0500
+++ Locale-Maketext-1.13_82/lib/Locale/Maketext.pm	2009-07-30 13:07:35.000000000 -0500
@@ -10,7 +10,7 @@
 BEGIN { unless(defined &DEBUG) { *DEBUG = sub () {0} } }
 # define the constant 'DEBUG' at compile-time
 
-$VERSION = '1.13_82';
+$VERSION = '1.13_83';
 $VERSION = eval $VERSION;
 @ISA = ();
 
@@ -186,27 +186,44 @@
     # Look up the value:
 
     my $value;
-    foreach my $h_r (
-        @{  $isa_scan{ref($handle) || $handle} || $handle->_lex_refs  }
-    ) {
-        DEBUG and warn "* Looking up \"$phrase\" in $h_r\n";
-        if(exists $h_r->{$phrase}) {
-            DEBUG and warn "  Found \"$phrase\" in $h_r\n";
-            unless(ref($value = $h_r->{$phrase})) {
-                # Nonref means it's not yet compiled.  Compile and replace.
-                $value = $h_r->{$phrase} = $handle->_compile($value);
+    if (exists $handle->{'_external_lex_cache'}{$phrase}) {
+        DEBUG and warn "* Using external lex cache version of \"$phrase\"\n";
+        $value = $handle->{'_external_lex_cache'}{$phrase};
+    }
+    else {
+        foreach my $h_r (
+            @{  $isa_scan{ref($handle) || $handle} || $handle->_lex_refs  }
+        ) {        
+            DEBUG and warn "* Looking up \"$phrase\" in $h_r\n";
+            if(exists $h_r->{$phrase}) {
+                DEBUG and warn "  Found \"$phrase\" in $h_r\n";
+                unless(ref($value = $h_r->{$phrase})) {
+                    # Nonref means it's not yet compiled.  Compile and replace.
+                    if ($handle->{'use_external_lex_cache'}) {
+                        $value = $handle->{'_external_lex_cache'}{$phrase} = $handle->_compile($value);
+                    }
+                    else {
+                        $value = $h_r->{$phrase} = $handle->_compile($value);
+                    }
+                }
+                last;
             }
-            last;
-        }
-        elsif($phrase !~ m/^_/s and $h_r->{'_AUTO'}) {
-            # it's an auto lex, and this is an autoable key!
-            DEBUG and warn "  Automaking \"$phrase\" into $h_r\n";
-
-            $value = $h_r->{$phrase} = $handle->_compile($phrase);
-            last;
+            # extending packages need to be able to localize _AUTO and if readonly can't "local $h_r->{'_AUTO'} = 1;" 
+            # but they can "local $handle->{'_external_lex_cache'}{'_AUTO'} = 1;"
+            elsif($phrase !~ m/^_/s and ($handle->{'use_external_lex_cache'} ? ( exists $handle->{'_external_lex_cache'}{'_AUTO'} ? $handle->{'_external_lex_cache'}{'_AUTO'} : $h_r->{'_AUTO'} ) : $h_r->{'_AUTO'})) {
+                # it's an auto lex, and this is an autoable key!
+                DEBUG and warn "  Automaking \"$phrase\" into $h_r\n";
+                if ($handle->{'use_external_lex_cache'}) {
+                    $value = $handle->{'_external_lex_cache'}{$phrase} = $handle->_compile($phrase);
+                }
+                else {
+                    $value = $h_r->{$phrase} = $handle->_compile($phrase);
+                }
+                last;
+            }
+            DEBUG>1 and print "  Not found in $h_r, nor automakable\n";
+            # else keep looking
         }
-        DEBUG>1 and warn "  Not found in $h_r, nor automakable\n";
-        # else keep looking
     }
 
     unless(defined($value)) {
diff -ruN Locale-Maketext-1.13_82.orig/lib/Locale/Maketext.pod Locale-Maketext-1.13_82/lib/Locale/Maketext.pod
--- Locale-Maketext-1.13_82.orig/lib/Locale/Maketext.pod	2009-06-20 14:49:46.000000000 -0500
+++ Locale-Maketext-1.13_82/lib/Locale/Maketext.pod	2009-07-30 12:40:31.000000000 -0500
@@ -937,6 +937,25 @@
 arbitrarily decided to use a leading underscore as a signal
 to distinguish those few.
 
+=head1 READONLY LEXICONS
+
+If your lexicon is a tied hash the simple act of caching the compiled value can be fatal.
+
+For example a L<GDBM_File> GDBM_READER tied hash will die with something like:
+
+   gdbm store returned -1, errno 2, key "..." at ...
+   
+All you need to do is turn on caching outside of the lexicon hash itself like so:
+
+   sub init {
+       my ($lh) = @_;
+       ...
+       $lh->{'use_external_lex_cache'} = 1;   
+       ... 
+   }
+   
+And then instead of storing the compiled value in the lexicon hash it will store it in $lh->{'_external_lex_cache'}
+
 =head1 CONTROLLING LOOKUP FAILURE
 
 If you call $lh->maketext(I<key>, ...parameters...),
diff -ruN Locale-Maketext-1.13_82.orig/t/04.use_external_lex_cache.t Locale-Maketext-1.13_82/t/04.use_external_lex_cache.t
--- Locale-Maketext-1.13_82.orig/t/04.use_external_lex_cache.t	1969-12-31 18:00:00.000000000 -0600
+++ Locale-Maketext-1.13_82/t/04.use_external_lex_cache.t	2009-07-30 13:04:30.000000000 -0500
@@ -0,0 +1,40 @@
+use Test::More tests => 11;
+
+BEGIN { 
+    chdir 't';
+    unshift @INC, qw(lib ../lib);
+    use_ok('Locale::Maketext');
+};
+
+package MyTestLocale;
+
+@MyTestLocale::ISA = qw(Locale::Maketext);
+%MyTestLocale::Lexicon  = ();
+%MyTestLocale::Lexicon = (); # to avoid warnings
+
+package MyTestLocale::fr;
+
+@MyTestLocale::fr::ISA = qw(MyTestLocale);
+
+%MyTestLocale::fr::Lexicon = (
+    '_AUTO' => 1,
+    'Hello World' => 'Bonjour Monde',    
+);
+
+package main;
+
+my $lh = MyTestLocale->get_handle('fr');
+$lh->{'use_external_lex_cache'} = 1;
+ok(exists $MyTestLocale::fr::Lexicon{'Hello World'} && !ref $MyTestLocale::fr::Lexicon{'Hello World'}, 'lex value not a ref');
+
+ok($lh->maketext('Hello World') eq 'Bonjour Monde', 'renders correctly first time');
+ok(exists $lh->{'_external_lex_cache'}{'Hello World'} && ref $lh->{'_external_lex_cache'}{'Hello World'}, 'compiled into lex_cache');
+ok(exists $MyTestLocale::fr::Lexicon{'Hello World'} && !ref $MyTestLocale::fr::Lexicon{'Hello World'}, 'lex value still not a ref');
+
+ok($lh->maketext('Hello World') eq 'Bonjour Monde', 'renders correctly second time time');
+ok(exists $lh->{'_external_lex_cache'}{'Hello World'} && ref $lh->{'_external_lex_cache'}{'Hello World'}, 'still compiled into lex_cache');
+ok(exists $MyTestLocale::fr::Lexicon{'Hello World'} && !ref $MyTestLocale::fr::Lexicon{'Hello World'}, 'lex value still not a ref');
+
+ok($lh->maketext('This is not a key') eq 'This is not a key', '_AUTO renders correctly first time');
+ok(exists $lh->{'_external_lex_cache'}{'This is not a key'} && ref $lh->{'_external_lex_cache'}{'This is not a key'}, '_AUTO compiled into lex_cache');
+ok(!exists $MyTestLocale::fr::Lexicon{'This is not a key'}, '_AUTO lex value not added to lex');
