make[1]: Entering directory `/u02/src/for-perl-5.8.8/version-0.68/vutil'
make[1]: Leaving directory `/u02/src/for-perl-5.8.8/version-0.68/vutil'
PERL_DL_NONLAZY=1 /opt/perl/bin/perl "-MExtUtils::Command::MM" "-e" "test_harness(1, 'blib/lib', 'blib/arch')" t/*.t
t/01base.......ok 1 - use version;
ok 2 - 5.005_03 eq 5.5.30
ok 3 - 1.23 eq "1.230"
ok 4 - "5.005_03" eq "5.005_030"
ok 5 - "v1.23" eq "v1.23.0"
ok 6 - 5.005 eq "5.005"
ok 7 - 5.006.001 eq v5.6.1
ok 8 - alpha version 1.2.3_4 eq v1.2.3_4
ok 9 - Invalid version format (multiple underscores)
ok 10 - Invalid version format (underscores before decimal)
ok 11 - Invalid version format (alpha without decimal)
ok 12 - Version string contains invalid data; ignoring
ok 13 - Version string contains invalid data; ignoring
ok 14 - $version eq "99.000"
ok 15 - $version->numify == 99.0
ok 16 - $version->normal eq v99.0.0
ok 17 - Version string contains invalid data; ignoring
ok 18 - defined $version
ok 19 - boolean
ok 20 - The object isa version
ok 21 - $version eq $version
ok 22 - $version cmp $version == 0
ok 23 - $version == $version
ok 24 - $version ne $new_version
ok 25 - $version lt $new_version
ok 26 - $new_version gt $version
ok 27 - no auto-upgrade
ok 28 - $version eq $new_version
ok 29 - $new_version eq $version
ok 30 - $version ne $new_version
ok 31 - $version lt $new_version
ok 32 - $new_version gt $version
ok 33 - $version eq $new_version
ok 34 - $version == $version
ok 35 - $version < $new_version
ok 36 - $new_version > $version
ok 37 - $version != $new_version
ok 38 - $version < $new_version
ok 39 - $new_version > $version
ok 40 - $version != $new_version
ok 41 - $version->numify() == 5.006001
ok 42 - $version->numify() <= 5.006001
ok 43 - $version->numify() < 5.008
ok 44 - $version eq "1.2.3"
ok 45 - $version->numify == 1.002003
ok 46 - $version eq 2002.9.30.1
ok 47 - $version->numify == 2002.009030001
ok 48 - $version lt $new_version
ok 49 - $new_version gt $version
ok 50 - $version ne $new_version
ok 51 - $version > $new_version
ok 52 - $new_version < $version
ok 53 - $version != $new_version
ok 54 - $version < $new_version
ok 55 - $new_version > $version
ok 56 - $version != $new_version
ok 57 - !$version->is_alpha
ok 58 - $new_version->is_alpha
ok 59 - $version > $new_version
ok 60 - $new_version < $version
ok 61 - $version != $new_version
ok 62 - $version > $new_version
ok 63 - $new_version < $version
ok 64 - $version != $new_version
ok 65 - $version == $new_version
ok 66 - $version == $new_version
ok 67 - $version < $new_version
ok 68 - $version < $new_version
ok 69 - $version > $new_version
ok 70 - noop ++
ok 71 - noop --
ok 72 - noop /
ok 73 - noop *
ok 74 - noop abs
ok 75 - qv("1.2") eq "1.2.0"
ok 76 - qv(1.2) eq "1.2.0"
ok 77 - The object isa version
ok 78 - new from existing object
ok 79 - class->new(v1.2.0) identical
ok 80 - The object isa version
ok 81 - version->new() doesn't clone
ok 82 - $version->new("1.2.3") works too
ok 83 - qw$Revision: 1.2$ eq 1.2.0
ok 84 - qw$Revision: 1.2.3.4$ eq 1.2.3.4
ok 85 - CPAN-style alpha version
ok 86 - 1.23_01 > 1.23
ok 87 - 1.23_01 < 1.24
ok 88 - Replacement eval works with exact version
ok 89 - Called as class method
ok 90 - Replacement eval works with incremented version
ok 91 - Replacement eval works with single digit
ok 92 - Replacement eval works with incremented digit
ok 93 - Replacement handles modules without package or VERSION
ok 94 - Replacement handles modules without package or VERSION
ok 95 - Called as class method
ok 96 - Replacement handles modules without VERSION
ok 97 - Replacement handles modules without VERSION
ok 98 - Replacement handles modules without VERSION
ok 99 - Replacement handles modules without VERSION
ok 100 - "$version" eq 1.2.3
ok 101 - $version == $new_version
ok 102 - $version eq $new_version
ok 103 - v-string initialized qv()
ok 104 - trailing zeros preserved
ok 105 - trailing zeros preserved
ok 106 - trailing zeros preserved
ok 107 - trailing zeros preserved
ok 108 - leading zero inferred
ok 109 - leading space ignored
ok 110 - Undef version comparison \#1
ok 111 - Undef version comparison \#2
ok 112 - Version string 'undef'
ok 113 - Version string 'undef'
ok 114 - Undef version comparison \#3
ok 115 - Undef version comparison \#4
ok 116 - No initializer at all
ok 117 - Undef version comparison \#5
ok 118 - Undef version comparison \#6
ok 119 - Very small version objects
ok 120 - Make sure very small versions don't freak
ok 121 - Comparing vs. version with no decimal
ok 122 - Comparing vs. version with decimal only
ok 123 - Make sure very small versions don't freak
ok 124 - Succeed - required == VERSION
ok 125 - No undef warnings
ok 126 - make sure we cleared qv() properly
ok 127 - make sure we exported qv() properly
ok 128 - The object isa vvv
ok 129 # skip Cannot test locale handling without a comma locale
ok 130 # skip Cannot test locale handling without a comma locale
ok 131 # skip Cannot test locale handling without a comma locale
ok 132 # skip Cannot test locale handling without a comma locale
ok 133 - Only export qv once per package (to prevent redefined warnings).
1..133
ok
        4/133 skipped: Cannot test locale handling without a comma locale
t/02derived....ok 1 - use version;
ok 2 - The object isa version::Empty
ok 3 - Numified correctly
ok 4 - Stringified correctly
ok 5 - Normalified correctly
ok 6 - Comparison vs parent class
ok 7 - Comparison vs parent class
ok 8 - 5.005_03 eq 5.5.30
ok 9 - 1.23 eq "1.230"
ok 10 - "5.005_03" eq "5.005_030"
ok 11 - "v1.23" eq "v1.23.0"
ok 12 - 5.005 eq "5.005"
ok 13 - 5.006.001 eq v5.6.1
ok 14 - alpha version 1.2.3_4 eq v1.2.3_4
ok 15 - Invalid version format (multiple underscores)
ok 16 - Invalid version format (underscores before decimal)
ok 17 - Invalid version format (alpha without decimal)
ok 18 - Version string contains invalid data; ignoring
ok 19 - Version string contains invalid data; ignoring
ok 20 - $version eq "99.000"
ok 21 - $version->numify == 99.0
ok 22 - $version->normal eq v99.0.0
ok 23 - Version string contains invalid data; ignoring
ok 24 - defined $version
ok 25 - boolean
ok 26 - The object isa version::Empty
ok 27 - $version eq $version
ok 28 - $version cmp $version == 0
ok 29 - $version == $version
ok 30 - $version ne $new_version
ok 31 - $version lt $new_version
ok 32 - $new_version gt $version
ok 33 - no auto-upgrade
ok 34 - $version eq $new_version
ok 35 - $new_version eq $version
ok 36 - $version ne $new_version
ok 37 - $version lt $new_version
ok 38 - $new_version gt $version
ok 39 - $version eq $new_version
ok 40 - $version == $version
ok 41 - $version < $new_version
ok 42 - $new_version > $version
ok 43 - $version != $new_version
ok 44 - $version < $new_version
ok 45 - $new_version > $version
ok 46 - $version != $new_version
ok 47 - $version->numify() == 5.006001
ok 48 - $version->numify() <= 5.006001
ok 49 - $version->numify() < 5.008
ok 50 - $version eq "1.2.3"
ok 51 - $version->numify == 1.002003
ok 52 - $version eq 2002.9.30.1
ok 53 - $version->numify == 2002.009030001
ok 54 - $version lt $new_version
ok 55 - $new_version gt $version
ok 56 - $version ne $new_version
ok 57 - $version > $new_version
ok 58 - $new_version < $version
ok 59 - $version != $new_version
ok 60 - $version < $new_version
ok 61 - $new_version > $version
ok 62 - $version != $new_version
ok 63 - !$version->is_alpha
ok 64 - $new_version->is_alpha
ok 65 - $version > $new_version
ok 66 - $new_version < $version
ok 67 - $version != $new_version
ok 68 - $version > $new_version
ok 69 - $new_version < $version
ok 70 - $version != $new_version
ok 71 - $version == $new_version
ok 72 - $version == $new_version
ok 73 - $version < $new_version
ok 74 - $version < $new_version
ok 75 - $version > $new_version
ok 76 - noop ++
ok 77 - noop --
ok 78 - noop /
ok 79 - noop *
ok 80 - noop abs
ok 81 - qv("1.2") eq "1.2.0"
ok 82 - qv(1.2) eq "1.2.0"
ok 83 - The object isa version::Empty
ok 84 - new from existing object
ok 85 - class->new(v1.2.0) identical
ok 86 - The object isa version::Empty
ok 87 - version->new() doesn't clone
ok 88 - $version->new("1.2.3") works too
ok 89 - qw$Revision: 1.2$ eq 1.2.0
ok 90 - qw$Revision: 1.2.3.4$ eq 1.2.3.4
ok 91 - CPAN-style alpha version
ok 92 - 1.23_01 > 1.23
ok 93 - 1.23_01 < 1.24
ok 94 - Replacement eval works with exact version
ok 95 - Called as class method
ok 96 - Replacement eval works with incremented version
ok 97 - Replacement eval works with single digit
ok 98 - Replacement eval works with incremented digit
ok 99 - Replacement handles modules without package or VERSION
ok 100 - Replacement handles modules without package or VERSION
ok 101 - Called as class method
ok 102 - Replacement handles modules without VERSION
ok 103 - Replacement handles modules without VERSION
ok 104 - Replacement handles modules without VERSION
ok 105 - Replacement handles modules without VERSION
ok 106 - "$version" eq 1.2.3
ok 107 - $version == $new_version
ok 108 - $version eq $new_version
ok 109 - v-string initialized qv()
ok 110 - trailing zeros preserved
ok 111 - trailing zeros preserved
ok 112 - trailing zeros preserved
ok 113 - trailing zeros preserved
ok 114 - leading zero inferred
ok 115 - leading space ignored
ok 116 - Undef version comparison \#1
ok 117 - Undef version comparison \#2
ok 118 - Version string 'undef'
ok 119 - Version string 'undef'
ok 120 - Undef version comparison \#3
ok 121 - Undef version comparison \#4
ok 122 - No initializer at all
ok 123 - Undef version comparison \#5
ok 124 - Undef version comparison \#6
ok 125 - Very small version objects
ok 126 - Make sure very small versions don't freak
ok 127 - Comparing vs. version with no decimal
ok 128 - Comparing vs. version with decimal only
ok 129 - Make sure very small versions don't freak
ok 130 - Succeed - required == VERSION
ok 131 - No undef warnings
ok 132 - make sure we cleared qv() properly
ok 133 - make sure we exported qv() properly
ok 134 - The object isa vvv
ok 135 # skip Cannot test locale handling without a comma locale
ok 136 # skip Cannot test locale handling without a comma locale
ok 137 # skip Cannot test locale handling without a comma locale
ok 138 # skip Cannot test locale handling without a comma locale
ok 139 - The object isa version::Bad
ok 140 - Bad subclass numify
ok 141 - Bad subclass normal
ok 142 - Bad subclass stringify
ok 143 - Bad subclass vcmp
1..143
ok
        4/143 skipped: Cannot test locale handling without a comma locale
t/03require....ok 1 - require version;
ok 2 - We don't have the imported qv()
ok 3 - 5.005_03 eq 5.5.30
ok 4 - 1.23 eq "1.230"
ok 5 - "5.005_03" eq "5.005_030"
ok 6 - "v1.23" eq "v1.23.0"
ok 7 - 5.005 eq "5.005"
ok 8 - 5.006.001 eq v5.6.1
ok 9 - alpha version 1.2.3_4 eq v1.2.3_4
ok 10 - Invalid version format (multiple underscores)
ok 11 - Invalid version format (underscores before decimal)
ok 12 - Invalid version format (alpha without decimal)
ok 13 - Version string contains invalid data; ignoring
ok 14 - Version string contains invalid data; ignoring
ok 15 - $version eq "99.000"
ok 16 - $version->numify == 99.0
ok 17 - $version->normal eq v99.0.0
ok 18 - Version string contains invalid data; ignoring
ok 19 - defined $version
ok 20 - boolean
ok 21 - The object isa version
ok 22 - $version eq $version
ok 23 - $version cmp $version == 0
ok 24 - $version == $version
ok 25 - $version ne $new_version
ok 26 - $version lt $new_version
ok 27 - $new_version gt $version
ok 28 - no auto-upgrade
ok 29 - $version eq $new_version
ok 30 - $new_version eq $version
ok 31 - $version ne $new_version
ok 32 - $version lt $new_version
ok 33 - $new_version gt $version
ok 34 - $version eq $new_version
ok 35 - $version == $version
ok 36 - $version < $new_version
ok 37 - $new_version > $version
ok 38 - $version != $new_version
ok 39 - $version < $new_version
ok 40 - $new_version > $version
ok 41 - $version != $new_version
ok 42 - $version->numify() == 5.006001
ok 43 - $version->numify() <= 5.006001
ok 44 - $version->numify() < 5.008
ok 45 - $version eq "1.2.3"
ok 46 - $version->numify == 1.002003
ok 47 - $version eq 2002.9.30.1
ok 48 - $version->numify == 2002.009030001
ok 49 - $version lt $new_version
ok 50 - $new_version gt $version
ok 51 - $version ne $new_version
ok 52 - $version > $new_version
ok 53 - $new_version < $version
ok 54 - $version != $new_version
ok 55 - $version < $new_version
ok 56 - $new_version > $version
ok 57 - $version != $new_version
ok 58 - !$version->is_alpha
ok 59 - $new_version->is_alpha
ok 60 - $version > $new_version
ok 61 - $new_version < $version
ok 62 - $version != $new_version
ok 63 - $version > $new_version
ok 64 - $new_version < $version
ok 65 - $version != $new_version
ok 66 - $version == $new_version
ok 67 - $version == $new_version
ok 68 - $version < $new_version
ok 69 - $version < $new_version
ok 70 - $version > $new_version
ok 71 - noop ++
ok 72 - noop --
ok 73 - noop /
ok 74 - noop *
ok 75 - noop abs
ok 76 # skip version require'd instead of use'd, cannot test qv
ok 77 # skip version require'd instead of use'd, cannot test qv
ok 78 # skip version require'd instead of use'd, cannot test qv
ok 79 - new from existing object
ok 80 - class->new(v1.2.3) identical
ok 81 - The object isa version
ok 82 - version->new() doesn't clone
ok 83 - $version->new("1.2.3") works too
ok 84 - qw$Revision: 1.2$ eq 1.2.0
ok 85 - qw$Revision: 1.2.3.4$ eq 1.2.3.4
ok 86 - CPAN-style alpha version
ok 87 - 1.23_01 > 1.23
ok 88 - 1.23_01 < 1.24
ok 89 - Replacement eval works with exact version
ok 90 - Called as class method
ok 91 - Replacement eval works with incremented version
ok 92 - Replacement eval works with single digit
ok 93 - Replacement eval works with incremented digit
ok 94 - Replacement handles modules without package or VERSION
ok 95 - Replacement handles modules without package or VERSION
ok 96 - Called as class method
ok 97 - Replacement handles modules without VERSION
ok 98 - Replacement handles modules without VERSION
ok 99 - Replacement handles modules without VERSION
ok 100 - Replacement handles modules without VERSION
ok 101 - "$version" eq 1.2.3
ok 102 - $version == $new_version
ok 103 - $version eq $new_version
ok 104 # skip version require'd instead of use'd, cannot test qv
ok 105 - trailing zeros preserved
ok 106 - trailing zeros preserved
ok 107 - trailing zeros preserved
ok 108 - trailing zeros preserved
ok 109 - leading zero inferred
ok 110 - leading space ignored
ok 111 - Undef version comparison \#1
ok 112 - Undef version comparison \#2
ok 113 - Version string 'undef'
ok 114 - Version string 'undef'
ok 115 - Undef version comparison \#3
ok 116 - Undef version comparison \#4
ok 117 - No initializer at all
ok 118 - Undef version comparison \#5
ok 119 - Undef version comparison \#6
ok 120 - Very small version objects
ok 121 - Make sure very small versions don't freak
ok 122 - Comparing vs. version with no decimal
ok 123 - Comparing vs. version with decimal only
ok 124 - Make sure very small versions don't freak
ok 125 - Succeed - required == VERSION
ok 126 - No undef warnings
ok 127 - make sure we cleared qv() properly
ok 128 - make sure we exported qv() properly
ok 129 - The object isa vvv
ok 130 # skip Cannot test locale handling without a comma locale
ok 131 # skip Cannot test locale handling without a comma locale
ok 132 # skip Cannot test locale handling without a comma locale
ok 133 # skip Cannot test locale handling without a comma locale
1..133
ok
        8/133 skipped: various reasons
All tests successful, 16 subtests skipped.
Files=3, Tests=409,  1 wallclock secs ( 0.97 cusr +  0.26 csys =  1.23 CPU)
make[1]: Entering directory `/u02/src/for-perl-5.8.8/version-0.68/vutil'
No tests defined for version::vxs extension.
make[1]: Leaving directory `/u02/src/for-perl-5.8.8/version-0.68/vutil'
