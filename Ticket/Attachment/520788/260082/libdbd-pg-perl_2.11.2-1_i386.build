dpkg-checkbuilddeps: Unmet build dependencies: libpq-dev (>= 8.0) libtest-yaml-meta-perl libperl-critic-perl
W: Unmet build-dependency in source
dpkg-buildpackage: set CFLAGS to default value: -g -O2
dpkg-buildpackage: set CPPFLAGS to default value: 
dpkg-buildpackage: set LDFLAGS to default value: 
dpkg-buildpackage: set FFLAGS to default value: -g -O2
dpkg-buildpackage: set CXXFLAGS to default value: -g -O2
dpkg-buildpackage: source package libdbd-pg-perl
dpkg-buildpackage: source version 2.11.2-1
dpkg-buildpackage: source changed by gregor herrmann <gregoa@debian.org>
dpkg-checkbuilddeps: Unmet build dependencies: libpq-dev (>= 8.0) libtest-yaml-meta-perl libperl-critic-perl
dpkg-buildpackage: warning: Build dependencies/conflicts unsatisfied; aborting.
dpkg-buildpackage: warning: (Use -d flag to override.)
dpkg-buildpackage: warning: This is currently a non-fatal warning with -S, but
dpkg-buildpackage: warning: will probably become fatal in the future.
 fakeroot debian/rules clean
dh clean
make: pg_config: Command not found
make: pg_config: Command not found
   dh_testdir
   dh_auto_clean
   dh_clean
 dpkg-source -b libdbd-pg-perl-2.11.2
dpkg-source: info: using source format `1.0'
dpkg-source: info: building libdbd-pg-perl using existing libdbd-pg-perl_2.11.2.orig.tar.gz
dpkg-source: info: building libdbd-pg-perl in libdbd-pg-perl_2.11.2-1.diff.gz
dpkg-source: info: building libdbd-pg-perl in libdbd-pg-perl_2.11.2-1.dsc
 dpkg-genchanges -S >../libdbd-pg-perl_2.11.2-1_source.changes
dpkg-genchanges: including full source code in upload
dpkg-buildpackage: source only upload (original source is included)
 -> Running in no-targz mode
I: using fakeroot in build.
Current time: Fri Oct 17 16:09:03 CEST 2008
pbuilder-time-stamp: 1224252543
 -> copying local configuration
 -> mounting /proc filesystem
 -> mounting /dev/pts filesystem
 -> policy-rc.d already exists
Obtaining the cached apt archive contents
Installing the build-deps
 -> Attempting to satisfy build-dependencies
 -> Creating pbuilder-satisfydepends-dummy package
Package: pbuilder-satisfydepends-dummy
Version: 0.invalid.0
Architecture: i386
Maintainer: Debian Pbuilder Team <pbuilder-maint@lists.alioth.debian.org>
Description: Dummy package to satisfy dependencies with aptitude - created by pbuilder
 This package was created automatically by pbuilder and should
Depends: perl (>= 5.8.0), debhelper (>= 7), libdbi-perl (>= 1.45), libpq-dev (>= 8.0), perl-modules (>= 5.10) | libversion-perl, libtest-yaml-meta-perl, libperl-critic-perl, libtest-pod-perl, libtest-pod-coverage-perl
dpkg-deb: building package `pbuilder-satisfydepends-dummy' in `/tmp/satisfydepends-aptitude/pbuilder-satisfydepends-dummy.deb'.
Reading package lists...
Building dependency tree...
Reading state information...
aptitude is already the newest version.
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Selecting previously deselected package pbuilder-satisfydepends-dummy.
(Reading database ... 12297 files and directories currently installed.)
Unpacking pbuilder-satisfydepends-dummy (from .../pbuilder-satisfydepends-dummy.deb) ...
dpkg: dependency problems prevent configuration of pbuilder-satisfydepends-dummy:
 pbuilder-satisfydepends-dummy depends on debhelper (>= 7); however:
  Package debhelper is not installed.
 pbuilder-satisfydepends-dummy depends on libdbi-perl (>= 1.45); however:
  Package libdbi-perl is not installed.
 pbuilder-satisfydepends-dummy depends on libpq-dev (>= 8.0); however:
  Package libpq-dev is not installed.
 pbuilder-satisfydepends-dummy depends on libtest-yaml-meta-perl; however:
  Package libtest-yaml-meta-perl is not installed.
 pbuilder-satisfydepends-dummy depends on libperl-critic-perl; however:
  Package libperl-critic-perl is not installed.
 pbuilder-satisfydepends-dummy depends on libtest-pod-perl; however:
  Package libtest-pod-perl is not installed.
 pbuilder-satisfydepends-dummy depends on libtest-pod-coverage-perl; however:
  Package libtest-pod-coverage-perl is not installed.
dpkg: error processing pbuilder-satisfydepends-dummy (--install):
 dependency problems - leaving unconfigured
Errors were encountered while processing:
 pbuilder-satisfydepends-dummy
Reading package lists...
Building dependency tree...
Reading state information...
Reading extended state information...
Initializing package states...
The following NEW packages will be installed:
  comerr-dev{a} debhelper{a} file{a} gettext{a} gettext-base{a} 
  html2text{a} intltool-debian{a} libb-keywords-perl{a} 
  libclass-data-inheritable-perl{a} libclone-perl{a} libconfig-tiny-perl{a} 
  libdbi-perl{a} libdevel-stacktrace-perl{a} libdevel-symdump-perl{a} 
  libexception-class-perl{a} libfile-homedir-perl{a} libfile-spec-perl{a} 
  libfile-which-perl{a} libio-string-perl{a} libio-stringy-perl{a} 
  libkadm55{a} libkeyutils1{a} libkrb5-dev{a} libkrb53{a} 
  liblist-moreutils-perl{a} libmagic1{a} libnet-daemon-perl{a} 
  libparams-util-perl{a} libperl-critic-perl{a} libplrpc-perl{a} 
  libpod-coverage-perl{a} libpod-spell-perl{a} libppi-perl{a} libpq-dev{a} 
  libpq5{a} libreadonly-perl{a} libreadonly-xs-perl{a} libssl-dev{a} 
  libstring-format-perl{a} libtask-weaken-perl{a} 
  libtest-pod-coverage-perl{a} libtest-pod-perl{a} 
  libtest-yaml-meta-perl{a} libtest-yaml-valid-perl{a} libyaml-perl{a} 
  libyaml-syck-perl{a} perltidy{a} po-debconf{a} zlib1g-dev{a} 
The following partially installed packages will be configured:
  pbuilder-satisfydepends-dummy 
0 packages upgraded, 49 newly installed, 0 to remove and 0 not upgraded.
Need to get 0B/11.0MB of archives. After unpacking 33.3MB will be used.
Writing extended state information...
Extracting templates from packages: 61%Extracting templates from packages: 100%
Selecting previously deselected package libmagic1.
(Reading database ... 12297 files and directories currently installed.)
Unpacking libmagic1 (from .../libmagic1_4.26-1_i386.deb) ...
Selecting previously deselected package file.
Unpacking file (from .../archives/file_4.26-1_i386.deb) ...
Selecting previously deselected package html2text.
Unpacking html2text (from .../html2text_1.3.2a-5_i386.deb) ...
Selecting previously deselected package gettext-base.
Unpacking gettext-base (from .../gettext-base_0.17-4_i386.deb) ...
Selecting previously deselected package gettext.
Unpacking gettext (from .../gettext_0.17-4_i386.deb) ...
Selecting previously deselected package intltool-debian.
Unpacking intltool-debian (from .../intltool-debian_0.35.0+20060710.1_all.deb) ...
Selecting previously deselected package po-debconf.
Unpacking po-debconf (from .../po-debconf_1.0.15_all.deb) ...
Selecting previously deselected package debhelper.
Unpacking debhelper (from .../debhelper_7.0.17_all.deb) ...
Selecting previously deselected package libnet-daemon-perl.
Unpacking libnet-daemon-perl (from .../libnet-daemon-perl_0.43-1_all.deb) ...
Selecting previously deselected package libplrpc-perl.
Unpacking libplrpc-perl (from .../libplrpc-perl_0.2020-1_all.deb) ...
Selecting previously deselected package libdbi-perl.
Unpacking libdbi-perl (from .../libdbi-perl_1.607-1_i386.deb) ...
Selecting previously deselected package libkeyutils1.
Unpacking libkeyutils1 (from .../libkeyutils1_1.2-9_i386.deb) ...
Selecting previously deselected package libkrb53.
Unpacking libkrb53 (from .../libkrb53_1.6.dfsg.4~beta1-4_i386.deb) ...
Selecting previously deselected package libpq5.
Unpacking libpq5 (from .../libpq5_8.3.4-2_i386.deb) ...
Selecting previously deselected package zlib1g-dev.
Unpacking zlib1g-dev (from .../zlib1g-dev_1%3a1.2.3.3.dfsg-12_i386.deb) ...
Selecting previously deselected package libssl-dev.
Unpacking libssl-dev (from .../libssl-dev_0.9.8g-13_i386.deb) ...
Selecting previously deselected package libkadm55.
Unpacking libkadm55 (from .../libkadm55_1.6.dfsg.4~beta1-4_i386.deb) ...
Selecting previously deselected package comerr-dev.
Unpacking comerr-dev (from .../comerr-dev_2.1-1.41.3-1_i386.deb) ...
Selecting previously deselected package libkrb5-dev.
Unpacking libkrb5-dev (from .../libkrb5-dev_1.6.dfsg.4~beta1-4_i386.deb) ...
Selecting previously deselected package libpq-dev.
Unpacking libpq-dev (from .../libpq-dev_8.3.4-2_i386.deb) ...
Selecting previously deselected package libyaml-perl.
Unpacking libyaml-perl (from .../libyaml-perl_0.66-1_all.deb) ...
Selecting previously deselected package libyaml-syck-perl.
Unpacking libyaml-syck-perl (from .../libyaml-syck-perl_1.05-1_i386.deb) ...
Selecting previously deselected package libtest-yaml-valid-perl.
Unpacking libtest-yaml-valid-perl (from .../libtest-yaml-valid-perl_0.03-1_all.deb) ...
Selecting previously deselected package libtest-yaml-meta-perl.
Unpacking libtest-yaml-meta-perl (from .../libtest-yaml-meta-perl_0.11-1_all.deb) ...
Selecting previously deselected package libb-keywords-perl.
Unpacking libb-keywords-perl (from .../libb-keywords-perl_1.08-2_all.deb) ...
Selecting previously deselected package libconfig-tiny-perl.
Unpacking libconfig-tiny-perl (from .../libconfig-tiny-perl_2.12-1_all.deb) ...
Selecting previously deselected package libfile-spec-perl.
Unpacking libfile-spec-perl (from .../libfile-spec-perl_3.2701-2+b1_i386.deb) ...
Selecting previously deselected package libio-string-perl.
Unpacking libio-string-perl (from .../libio-string-perl_1.08-2_all.deb) ...
Selecting previously deselected package liblist-moreutils-perl.
Unpacking liblist-moreutils-perl (from .../liblist-moreutils-perl_0.22-1+b1_i386.deb) ...
Selecting previously deselected package libclone-perl.
Unpacking libclone-perl (from .../libclone-perl_0.29-1_i386.deb) ...
Selecting previously deselected package libparams-util-perl.
Unpacking libparams-util-perl (from .../libparams-util-perl_0.33-1_all.deb) ...
Selecting previously deselected package libtask-weaken-perl.
Unpacking libtask-weaken-perl (from .../libtask-weaken-perl_1.02-1_all.deb) ...
Selecting previously deselected package libppi-perl.
Unpacking libppi-perl (from .../libppi-perl_1.203-1_all.deb) ...
Selecting previously deselected package libstring-format-perl.
Unpacking libstring-format-perl (from .../libstring-format-perl_1.14-2_all.deb) ...
Selecting previously deselected package libfile-homedir-perl.
Unpacking libfile-homedir-perl (from .../libfile-homedir-perl_0.80-1_all.deb) ...
Selecting previously deselected package libfile-which-perl.
Unpacking libfile-which-perl (from .../libfile-which-perl_0.05-7_all.deb) ...
Selecting previously deselected package perltidy.
Unpacking perltidy (from .../perltidy_20071205-2_all.deb) ...
Selecting previously deselected package libpod-spell-perl.
Unpacking libpod-spell-perl (from .../libpod-spell-perl_1.01-2_all.deb) ...
Selecting previously deselected package libreadonly-xs-perl.
Unpacking libreadonly-xs-perl (from .../libreadonly-xs-perl_1.04-2+b1_i386.deb) ...
Selecting previously deselected package libreadonly-perl.
Unpacking libreadonly-perl (from .../libreadonly-perl_1.03-2_all.deb) ...
Selecting previously deselected package libclass-data-inheritable-perl.
Unpacking libclass-data-inheritable-perl (from .../libclass-data-inheritable-perl_0.08-1_all.deb) ...
Selecting previously deselected package libdevel-stacktrace-perl.
Unpacking libdevel-stacktrace-perl (from .../libdevel-stacktrace-perl_1.1902-1_all.deb) ...
Selecting previously deselected package libexception-class-perl.
Unpacking libexception-class-perl (from .../libexception-class-perl_1.24-1_all.deb) ...
Selecting previously deselected package libperl-critic-perl.
Unpacking libperl-critic-perl (from .../libperl-critic-perl_1.092-1_all.deb) ...
Selecting previously deselected package libio-stringy-perl.
Unpacking libio-stringy-perl (from .../libio-stringy-perl_2.110-4_all.deb) ...
Selecting previously deselected package libtest-pod-perl.
Unpacking libtest-pod-perl (from .../libtest-pod-perl_1.26-2_all.deb) ...
Selecting previously deselected package libdevel-symdump-perl.
Unpacking libdevel-symdump-perl (from .../libdevel-symdump-perl_2.08-1_all.deb) ...
Selecting previously deselected package libpod-coverage-perl.
Unpacking libpod-coverage-perl (from .../libpod-coverage-perl_0.19-1_all.deb) ...
Selecting previously deselected package libtest-pod-coverage-perl.
Unpacking libtest-pod-coverage-perl (from .../libtest-pod-coverage-perl_1.08-3_all.deb) ...
Processing triggers for man-db ...
Setting up libmagic1 (4.26-1) ...
Setting up file (4.26-1) ...
Setting up html2text (1.3.2a-5) ...
Setting up gettext-base (0.17-4) ...
Setting up gettext (0.17-4) ...
Setting up intltool-debian (0.35.0+20060710.1) ...
Setting up po-debconf (1.0.15) ...
Setting up debhelper (7.0.17) ...
Setting up libnet-daemon-perl (0.43-1) ...
Setting up libplrpc-perl (0.2020-1) ...
Setting up libdbi-perl (1.607-1) ...
Setting up libkeyutils1 (1.2-9) ...
Setting up libkrb53 (1.6.dfsg.4~beta1-4) ...
Setting up libpq5 (8.3.4-2) ...
Setting up zlib1g-dev (1:1.2.3.3.dfsg-12) ...
Setting up libssl-dev (0.9.8g-13) ...
Setting up libkadm55 (1.6.dfsg.4~beta1-4) ...
Setting up comerr-dev (2.1-1.41.3-1) ...
Setting up libkrb5-dev (1.6.dfsg.4~beta1-4) ...
Setting up libpq-dev (8.3.4-2) ...
Setting up libyaml-perl (0.66-1) ...
Setting up libyaml-syck-perl (1.05-1) ...
Setting up libtest-yaml-valid-perl (0.03-1) ...
Setting up libtest-yaml-meta-perl (0.11-1) ...
Setting up libb-keywords-perl (1.08-2) ...
Setting up libconfig-tiny-perl (2.12-1) ...
Setting up libfile-spec-perl (3.2701-2+b1) ...
Setting up libio-string-perl (1.08-2) ...
Setting up liblist-moreutils-perl (0.22-1+b1) ...
Setting up libclone-perl (0.29-1) ...
Setting up libparams-util-perl (0.33-1) ...
Setting up libtask-weaken-perl (1.02-1) ...
Setting up libppi-perl (1.203-1) ...
Setting up libstring-format-perl (1.14-2) ...
Setting up libfile-homedir-perl (0.80-1) ...
Setting up libfile-which-perl (0.05-7) ...
Setting up perltidy (20071205-2) ...
Setting up libpod-spell-perl (1.01-2) ...
Setting up libreadonly-xs-perl (1.04-2+b1) ...
Setting up libreadonly-perl (1.03-2) ...
Setting up libclass-data-inheritable-perl (0.08-1) ...
Setting up libdevel-stacktrace-perl (1.1902-1) ...
Setting up libexception-class-perl (1.24-1) ...
Setting up libperl-critic-perl (1.092-1) ...
Setting up libio-stringy-perl (2.110-4) ...
Setting up libtest-pod-perl (1.26-2) ...
Setting up libdevel-symdump-perl (2.08-1) ...
Setting up libpod-coverage-perl (0.19-1) ...
Setting up libtest-pod-coverage-perl (1.08-3) ...
Setting up pbuilder-satisfydepends-dummy (0.invalid.0) ...
Reading package lists...
Building dependency tree...
Reading state information...
Reading extended state information...
Initializing package states...
Writing extended state information...
 -> Finished parsing the build-deps
Reading package lists...
Building dependency tree...
Reading state information...
The following NEW packages will be installed:
  fakeroot
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 0B/114kB of archives.
After this operation, 451kB of additional disk space will be used.
Selecting previously deselected package fakeroot.
(Reading database ... 15511 files and directories currently installed.)
Unpacking fakeroot (from .../fakeroot_1.10.1_i386.deb) ...
Processing triggers for man-db ...
Setting up fakeroot (1.10.1) ...
Copying back the cached apt archive contents
Copying source file
    -> copying [/home/gregoa/src/svn-pkg-perl/trunk/build-area/libdbd-pg-perl_2.11.2-1.dsc]
    -> copying [/home/gregoa/src/svn-pkg-perl/trunk/build-area/libdbd-pg-perl_2.11.2.orig.tar.gz]
    -> copying [/home/gregoa/src/svn-pkg-perl/trunk/build-area/libdbd-pg-perl_2.11.2-1.diff.gz]
Extracting source
dpkg-source: warning: extracting unsigned source package (libdbd-pg-perl_2.11.2-1.dsc)
dpkg-source: extracting libdbd-pg-perl in libdbd-pg-perl-2.11.2
dpkg-source: info: unpacking libdbd-pg-perl_2.11.2.orig.tar.gz
dpkg-source: info: applying libdbd-pg-perl_2.11.2-1.diff.gz
 -> Building the package
dpkg-buildpackage: set CFLAGS to default value: -g -O2
dpkg-buildpackage: set CPPFLAGS to default value: 
dpkg-buildpackage: set LDFLAGS to default value: 
dpkg-buildpackage: set FFLAGS to default value: -g -O2
dpkg-buildpackage: set CXXFLAGS to default value: -g -O2
dpkg-buildpackage: source package libdbd-pg-perl
dpkg-buildpackage: source version 2.11.2-1
dpkg-buildpackage: source changed by gregor herrmann <gregoa@debian.org>
dpkg-buildpackage: host architecture i386
 fakeroot debian/rules clean
dh clean
   dh_testdir
   dh_auto_clean
   dh_clean
 dpkg-source -b libdbd-pg-perl-2.11.2
dpkg-source: info: using source format `1.0'
dpkg-source: info: building libdbd-pg-perl using existing libdbd-pg-perl_2.11.2.orig.tar.gz
dpkg-source: info: building libdbd-pg-perl in libdbd-pg-perl_2.11.2-1.diff.gz
dpkg-source: info: building libdbd-pg-perl in libdbd-pg-perl_2.11.2-1.dsc
 debian/rules build
TEST_CRITIC=1 dh build
   dh_testdir
   dh_auto_configure
Configuring DBD::Pg 2.11.2
PostgreSQL version: 80304 (default port: 5432)
POSTGRES_HOME: (not set)
POSTGRES_INCLUDE: /usr/include/postgresql
POSTGRES_LIB: /usr/lib
OS: linux
Checking if your kit is complete...
Looks good
Using DBI 1.607 (for perl 5.010000 on i486-linux-gnu-thread-multi) installed in /usr/lib/perl5/auto/DBI/
Writing Makefile for DBD::Pg
   dh_auto_build
make[1]: Entering directory `/tmp/buildd/libdbd-pg-perl-2.11.2'
make[1]: warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.
cp lib/Bundle/DBD/Pg.pm blib/lib/Bundle/DBD/Pg.pm
cp Pg.pm blib/lib/DBD/Pg.pm
/usr/bin/perl -p -e "s/~DRIVER~/Pg/g; s/^do\(/dontdo\(/" /usr/lib/perl5/auto/DBI/Driver.xst > Pg.xsi
/usr/bin/perl /usr/share/perl/5.10/ExtUtils/xsubpp  -typemap /usr/share/perl/5.10/ExtUtils/typemap  Pg.xs > Pg.xsc && mv Pg.xsc Pg.c
cc -c  -I/usr/include/postgresql -I/usr/lib/perl5/auto/DBI -D_REENTRANT -D_GNU_SOURCE -DDEBIAN -fno-strict-aliasing -pipe -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -DPGLIBVERSION=80304 -DPGDEFPORT=5432 -O2 -g  -DPERL_EXTMALLOC_DEF -Dmalloc=Perl_malloc -Dfree=Perl_mfree -Drealloc=Perl_realloc -Dcalloc=Perl_calloc -DVERSION=\"2.11.2\" -DXS_VERSION=\"2.11.2\" -fPIC "-I/usr/lib/perl/5.10/CORE"   Pg.c
cc -c  -I/usr/include/postgresql -I/usr/lib/perl5/auto/DBI -D_REENTRANT -D_GNU_SOURCE -DDEBIAN -fno-strict-aliasing -pipe -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -DPGLIBVERSION=80304 -DPGDEFPORT=5432 -O2 -g  -DPERL_EXTMALLOC_DEF -Dmalloc=Perl_malloc -Dfree=Perl_mfree -Drealloc=Perl_realloc -Dcalloc=Perl_calloc -DVERSION=\"2.11.2\" -DXS_VERSION=\"2.11.2\" -fPIC "-I/usr/lib/perl/5.10/CORE"   dbdimp.c
cc -c  -I/usr/include/postgresql -I/usr/lib/perl5/auto/DBI -D_REENTRANT -D_GNU_SOURCE -DDEBIAN -fno-strict-aliasing -pipe -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -DPGLIBVERSION=80304 -DPGDEFPORT=5432 -O2 -g  -DPERL_EXTMALLOC_DEF -Dmalloc=Perl_malloc -Dfree=Perl_mfree -Drealloc=Perl_realloc -Dcalloc=Perl_calloc -DVERSION=\"2.11.2\" -DXS_VERSION=\"2.11.2\" -fPIC "-I/usr/lib/perl/5.10/CORE"   quote.c
cc -c  -I/usr/include/postgresql -I/usr/lib/perl5/auto/DBI -D_REENTRANT -D_GNU_SOURCE -DDEBIAN -fno-strict-aliasing -pipe -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -DPGLIBVERSION=80304 -DPGDEFPORT=5432 -O2 -g  -DPERL_EXTMALLOC_DEF -Dmalloc=Perl_malloc -Dfree=Perl_mfree -Drealloc=Perl_realloc -Dcalloc=Perl_calloc -DVERSION=\"2.11.2\" -DXS_VERSION=\"2.11.2\" -fPIC "-I/usr/lib/perl/5.10/CORE"   types.c
Running Mkbootstrap for DBD::Pg ()
chmod 644 Pg.bs
rm -f blib/arch/auto/DBD/Pg/Pg.so
cc  -shared -O2 -g -L/usr/local/lib Pg.o dbdimp.o quote.o types.o  -o blib/arch/auto/DBD/Pg/Pg.so 	\
	   -L/usr/lib -lpq -lm  	\
	  
chmod 755 blib/arch/auto/DBD/Pg/Pg.so
cp Pg.bs blib/arch/auto/DBD/Pg/Pg.bs
chmod 644 blib/arch/auto/DBD/Pg/Pg.bs
Manifying blib/man3/Bundle::DBD::Pg.3pm
Manifying blib/man3/DBD::Pg.3pm
make[1]: Leaving directory `/tmp/buildd/libdbd-pg-perl-2.11.2'
   dh_auto_test
make[1]: Entering directory `/tmp/buildd/libdbd-pg-perl-2.11.2'
make[1]: warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.
PGINITDB="" PERL_DL_NONLAZY=1 /usr/bin/perl "-MExtUtils::Command::MM" "-e" "test_harness(0, 'blib/lib', 'blib/arch')" t/*.t
t/00-signature......skipped
        all skipped: Set the environment variable TEST_SIGNATURE to enable this test
t/00basic...........ok
t/01connect.........# 
# DBI                         Version 1.607
# DBD::Pg                     Version 2.11.2
# Perl                        Version 5.10.0
# OS                          linux
# PostgreSQL (compiled)       ?
# PostgreSQL (target)         ?
# PostgreSQL (reported)       ?
# Default port                ?
# DBI_DSN                     ?
# DBI_USER                    <not set>
# Test schema                 dbd_pg_testschema
# LANG                        C
# Adjusted:                   initdb
# Error was: Failed to run initdb (executable probably not available) ENV was:  Final call was: initdb
skipped
        all skipped: Connection to database failed, cannot continue testing
t/01constants.......ok
t/02attribs.........skipped
        all skipped: Connection to database failed, cannot continue testing
t/03dbmethod........skipped
        all skipped: Connection to database failed, cannot continue testing
t/03smethod.........skipped
        all skipped: Connection to database failed, cannot continue testing
t/04misc............skipped
        all skipped: Connection to database failed, cannot continue testing
t/06bytea...........skipped
        all skipped: Connection to database failed, cannot continue testing
t/07copy............skipped
        all skipped: Connection to database failed, cannot continue testing
t/08async...........skipped
        all skipped: Connection to database failed, cannot continue testing
t/09arrays..........skipped
        all skipped: Connection to database failed, cannot continue testing
t/12placeholders....skipped
        all skipped: Connection to database failed, cannot continue testing
t/20savepoints......skipped
        all skipped: Connection to database failed, cannot continue testing
t/99_perlcritic.....# 
# File: Pg.pm (line 169)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: 
# 
# 
# File: Pg.pm (line 191)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $dbname =~ s/\b(?:db|database)\s*=/dbname=/;
# 
# 
# File: Pg.pm (line 194)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $dbname =~ m{dbname\s*=\s*[\"\']([^\"\']+)}
# 
# 
# File: Pg.pm (line 196)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $dbname =~ s/\"/\'/g;
# 
# 
# File: Pg.pm (line 198)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $dbname =~ m{dbname\s*=\s*([^;]+)}
# 
# 
# File: Pg.pm (line 325)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $oid =~ /(\d+)/ or die qq{OID was not numeric?!?\n};
# 
# 
# File: Pg.pm (line 346)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next unless $_->[2] =~ /^nextval\(+'([^']+)'::/o;
# 
# 
# File: Pg.pm (line 407)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $schema =~ /[_%]/ ? 'LIKE ' : '= '
# 
# 
# File: Pg.pm (line 411)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $table =~ /[_%]/ ? 'LIKE ' : '= '
# 
# 
# File: Pg.pm (line 415)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $column =~ /[_%]/ ? 'LIKE ' : '= '
# 
# 
# File: Pg.pm (line 667)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $col_nums =~ s/^\s+//;
# 
# 
# File: Pg.pm (line 668)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: /\s+/, $col_nums
# 
# 
# File: Pg.pm (line 730)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: my $indkey = join ',', split /\s+/, $info->[4];
# 
# 
# File: Pg.pm (line 748)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: my @key_seq = split/\s+/, $info->[4];
# 
# 
# File: Pg.pm (line 787)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: map { $attribs->{$_}{colname} } split /\s+/, $info->[4]
# 
# 
# File: Pg.pm (line 788)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $info->[3] = 2==$attr->{'pg_onerow'} ?
# 
# 
# File: Pg.pm (line 791)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: map { $attribs->{$_}{typename} } split /\s+/, $info->[4]
# 
# 
# File: Pg.pm (line 792)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $info->[6] = 2==$attr->{'pg_onerow'} ?
# 
# 
# File: Pg.pm (line 795)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: split /\s+/, $info->[4]
# 
# 
# File: Pg.pm (line 796)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $info->[4] = 2==$attr->{'pg_onerow'} ?
# 
# 
# File: Pg.pm (line 1121)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $schema =~ /[_%]/ ? 'LIKE ' : '= '
# 
# 
# File: Pg.pm (line 1124)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $table =~ /[_%]/ ? 'LIKE ' : '= '
# 
# 
# File: Pg.pm (line 1129)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $type =~ /\btable\b/i and $type !~ /\bview\b/i
# 
# 
# File: Pg.pm (line 1129)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $type =~ /\btable\b/i and $type !~ /\bview\b/i
# 
# 
# File: Pg.pm (line 1132)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $type =~ /\bview\b/i and $type !~ /\btable\b/i
# 
# 
# File: Pg.pm (line 1132)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $type =~ /\bview\b/i and $type !~ /\btable\b/i
# 
# 
# File: Pg.pm (line 1212)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: /^$row->{NAME}$/i
# 
# 
# File: Pg.pm (line 1549)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: return '00.00.0000' unless $version =~ /^(\d\d?)(\d\d)(\d\d)$/o;
# 
# 
# File: Pg.pm (line 1554)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $simpleversion =~ s/_/./g;
# 
# 
# File: Pg.pm (line 1555)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: /\./, "$simpleversion.0.0.0.0.0.0"
# 

#   Failed test 'Failed Perl::Critic tests for file "Pg.pm": 30'
#   at t/99_perlcritic.t line 160.
# 
# File: Makefile.PL (line 28)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $VERSION =~ /_/
# 
# 
# File: Makefile.PL (line 32)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: /help/
# 
# 
# File: Makefile.PL (line 87)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: my $defaultport = $conf =~ /with-pgport=(\d+)/ ? $1 : 5432;
# 
# 
# File: Makefile.PL (line 132)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $os =~ /Win32/
# 
# 
# File: Makefile.PL (line 210)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $os =~ /Win32/
# 
# 
# File: Makefile.PL (line 212)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $msdir =~ s{"$}{/ms"};
# 
# 
# File: Makefile.PL (line 216)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $Config{dlsrc} =~ /dl_none/
# 
# 
# File: Makefile.PL (line 224)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $string =~ s/(PERL_DL_NONLAZY=1)/PGINITDB="$initdb" $1/g;
# 
# 
# File: Makefile.PL (line 234)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: split /\n/ => $old_constants
# 
# 
# File: Makefile.PL (line 235)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $line =~ /^INC = .*strawberry.*/
# 
# 
# File: Makefile.PL (line 250)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $string =~ s/dependancy/dependency/g;
# 
# 
# File: Makefile.PL (line 251)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $string =~ s{(BASEEXT\)/g)}{$1; s/^do\\\(/dontdo\\\(/};
# 
# 
# File: Makefile.PL (line 301)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $string =~ s/SDEFINES = /SDEFINES =$defines/;
# 
# 
# File: Makefile.PL (line 310)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $output->{EXTRALIBS} !~ /\-lpq/ and $output->{EXTRALIBS} !~ /libpq/
# 
# 
# File: Makefile.PL (line 310)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $output->{EXTRALIBS} !~ /\-lpq/ and $output->{EXTRALIBS} !~ /libpq/
# 

#   Failed test 'Failed Perl::Critic tests for file "Makefile.PL": 15'
#   at t/99_perlcritic.t line 160.
# 
# File: t/00basic.t (line 17)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $DBD::Pg::VERSION, qr/^v?\d+\.\d+\.\d+(?:_\d+)?$/, qq{Found DBD::Pg::VERSION as "$DBD::Pg::VERSION"}
# 

#   Failed test 'Failed Perl::Critic tests for file "t/00basic.t": 1'
#   at t/99_perlcritic.t line 234.
# 
# File: t/01connect.t (line 68)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: my $alias = qr{(database|db|dbname)};
# 
# 
# File: t/01connect.t (line 69)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $ENV{DBI_DSN} !~ /$alias\s*=\s*\S+/
# 
# 
# File: t/01connect.t (line 76)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $err, qr{DBI connect.+failed:}, $t
# 
# 
# File: t/01connect.t (line 82)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $err =~ s/(Previous failure).*/$1/;
# 
# 
# File: t/01connect.t (line 86)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $ENV{DBI_DSN} =~ /$alias\s*=\s*\"/
# 
# 
# File: t/01connect.t (line 103)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $dsn =~ s{host=/.*(dbdpg_test_database/data/socket)}{host=<pwd>/$1};
# 
# 
# File: t/01connect.t (line 147)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $connerror =~ s{\n at t/dbdpg.*}{}m;
# 
# 
# File: t/01connect.t (line 148)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $connerror =~ /create semaphores/
# 

#   Failed test 'Failed Perl::Critic tests for file "t/01connect.t": 8'
#   at t/99_perlcritic.t line 234.
# 
# File: t/02attribs.t (line 211)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: ! length $testdsn or $testdsn !~ /^dbi:Pg:(.+)/
# 
# 
# File: t/02attribs.t (line 217)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $expected =~ s/(db|database)=/dbname=/;
# 
# 
# File: t/02attribs.t (line 262)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $warning, qr{dbd_pg_test_temp}, $t
# 
# 
# File: t/02attribs.t (line 289)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $dbh->{pg_INV_WRITE}, qr/^\d+$/, $t
# 
# 
# File: t/02attribs.t (line 291)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $dbh->{pg_INV_READ}, qr/^\d+$/, $t
# 
# 
# File: t/02attribs.t (line 298)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $dbh->{pg_protocol}, qr/^\d+$/, $t
# 
# 
# File: t/02attribs.t (line 347)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $result, qr/^\d+$/, $t
# 
# 
# File: t/02attribs.t (line 363)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $result, qr/^\d+$/, $t
# 
# 
# File: t/02attribs.t (line 367)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $result, qr/^\d+$/, $t
# 
# 
# File: t/02attribs.t (line 375)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $result, qr/^\d+$/, $t
# 
# 
# File: t/02attribs.t (line 379)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $result, qr/^\d+$/, $t
# 
# 
# File: t/02attribs.t (line 389)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $oldscs, qr/^on|off$/, $t
# 
# 
# File: t/02attribs.t (line 939)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $result, qr/^\d+$/, $t
# 
# 
# File: t/02attribs.t (line 958)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $result, qr/^$expected/, $t
# 
# 
# File: t/02attribs.t (line 1239)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr/^Slonik/, $t
# 
# 
# File: t/02attribs.t (line 1265)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{ERRSTR}, $t
# 
# 
# File: t/02attribs.t (line 1300)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{for Statement "Testing}, $t
# 
# 
# File: t/02attribs.t (line 1307)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{for Statement "Testing}, $t
# 
# 
# File: t/02attribs.t (line 1315)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{with ParamValues}, $t
# 
# 
# File: t/02attribs.t (line 1323)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{with ParamValues: 1='123', 2='456'}, $t
# 
# 
# File: t/02attribs.t (line 1332)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $attrib, qr/^\d$/, $t
# 
# 
# File: t/02attribs.t (line 1483)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{transaction is read-only}, $t
# 
# 
# File: t/02attribs.t (line 1488)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{transaction is read-only}, $t
# 
# 
# File: t/02attribs.t (line 1536)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: skip ('Cannot test database handle "InactiveDestroy" on a non-forking system', 8)
# 

#   Failed test 'Failed Perl::Critic tests for file "t/02attribs.t": 24'
#   at t/99_perlcritic.t line 234.
# 
# File: t/03dbmethod.t (line 68)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{last_insert_id.*least}, $t
# 
# 
# File: t/03dbmethod.t (line 74)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{ERROR}, $t
# 
# 
# File: t/03dbmethod.t (line 81)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{not find}, $t
# 
# 
# File: t/03dbmethod.t (line 88)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{last_insert_id.*hashref}, $t
# 
# 
# File: t/03dbmethod.t (line 103)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{last_insert_id}, $t
# 
# 
# File: t/03dbmethod.t (line 113)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $result, qr{^\d+$}, $t
# 
# 
# File: t/03dbmethod.t (line 122)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $result, qr{^\d+$}, $t
# 
# 
# File: t/03dbmethod.t (line 207)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{last_insert_id}, $t
# 
# 
# File: t/03dbmethod.t (line 435)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $odbcversion, qr{^([1-9]\d|\d[1-9])\.\d\d\.\d\d00$}, $t
# 
# 
# File: t/03dbmethod.t (line 440)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $maxcon, qr{^\d+$}, $t
# 
# 
# File: t/03dbmethod.t (line 537)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $result->{pg_constraint}, qr/score/, $t
# 
# 
# File: t/03dbmethod.t (line 1037)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $result[0], qr/dbd_pg_test/, $t
# 
# 
# File: t/03dbmethod.t (line 1136)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $expected =~ s{\\}{\\\\\\\\};
# 
# 
# File: t/03dbmethod.t (line 1168)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{Invalid input for geometric type}, $t
# 
# 
# File: t/03dbmethod.t (line 1172)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{Invalid input for geometric type}, $t
# 
# 
# File: t/03dbmethod.t (line 1181)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{Invalid input for geometric type}, $t
# 
# 
# File: t/03dbmethod.t (line 1185)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{Invalid input for geometric type}, $t
# 
# 
# File: t/03dbmethod.t (line 1189)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{Invalid input for geometric type}, $t
# 
# 
# File: t/03dbmethod.t (line 1193)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{Invalid input for geometric type}, $t
# 
# 
# File: t/03dbmethod.t (line 1202)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{Invalid input for geometric type}, $t
# 
# 
# File: t/03dbmethod.t (line 1206)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{Invalid input for geometric type}, $t
# 
# 
# File: t/03dbmethod.t (line 1218)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{Invalid input for geometric path type}, $t
# 
# 
# File: t/03dbmethod.t (line 1222)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{Invalid input for geometric path type}, $t
# 
# 
# File: t/03dbmethod.t (line 1231)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{Invalid input for geometric type}, $t
# 
# 
# File: t/03dbmethod.t (line 1235)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{Invalid input for geometric type}, $t
# 
# 
# File: t/03dbmethod.t (line 1247)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{Invalid input for geometric circle type}, $t
# 
# 
# File: t/03dbmethod.t (line 1251)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{Invalid input for geometric circle type}, $t
# 
# 
# File: t/03dbmethod.t (line 1303)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $object, qr/^\d+$/o, $t
# 
# 
# File: t/03dbmethod.t (line 1307)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $object, qr/^\d+$/o, $t
# 
# 
# File: t/03dbmethod.t (line 1311)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $handle, qr/^\d+$/o, $t
# 
# 
# File: t/03dbmethod.t (line 1329)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $handle, qr/^\d+$/o, $t
# 
# 
# File: t/03dbmethod.t (line 1386)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $result, qr/^\d+$/, $t
# 
# 
# File: t/03dbmethod.t (line 1401)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $result, qr/^[A-Z0-9]{5}$/, $t
# 
# 
# File: t/03dbmethod.t (line 1417)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $name =~ /^pg_\w+/ ? $valid++ : $invalid++;
# 

#   Failed test 'Failed Perl::Critic tests for file "t/03dbmethod.t": 34'
#   at t/99_perlcritic.t line 234.
# 
# File: t/03smethod.t (line 37)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{\+ 0}, $t
# 
# 
# File: t/03smethod.t (line 74)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{not a hash}, $t
# 
# 
# File: t/03smethod.t (line 155)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{Cannot bind}, $t
# 
# 
# File: t/03smethod.t (line 158)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{Cannot bind}, $t
# 
# 
# File: t/03smethod.t (line 162)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{needs a reference}, $t
# 
# 
# File: t/03smethod.t (line 165)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{needs a reference}, $t
# 
# 
# File: t/03smethod.t (line 168)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{needs a reference}, $t
# 
# 
# File: t/03smethod.t (line 530)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $result, qr/^[A-Z0-9]{5}$/, $t
# 
# 
# File: t/03smethod.t (line 554)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $name =~ /^pg_\w+/ ? $valid++ : $invalid++;
# 

#   Failed test 'Failed Perl::Critic tests for file "t/03smethod.t": 9'
#   at t/99_perlcritic.t line 234.
# 
# File: t/04misc.t (line 99)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source:  ($info = <$fh>) =~ s/\r//go;
# 
# 
# File: t/04misc.t (line 111)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source:  ($info = <$fh>) =~ s/\r//go;
# 
# 
# File: t/04misc.t (line 138)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source:  ($info = <$fh>) =~ s/\r//go;
# 
# 
# File: t/04misc.t (line 159)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source:  ($info = <$fh>) =~ s/\r//go;
# 
# 
# File: t/04misc.t (line 180)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source:  ($info = <$fh>) =~ s/\r//go;
# 
# 
# File: t/04misc.t (line 219)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source:  ($info = <$fh>) =~ s/\r//go;
# 
# 
# File: t/04misc.t (line 224)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $info =~ s/(Login connection string: ).+/$1/g;
# 
# 
# File: t/04misc.t (line 235)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source:  ($info = <$fh>) =~ s/\r//go;
# 
# 
# File: t/04misc.t (line 240)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $info =~ s/(Login connection string: ).+/$1/g;
# 
# 
# File: t/04misc.t (line 255)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source:  ($info = <$fh>) =~ s/\r//go;
# 
# 
# File: t/04misc.t (line 261)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $info =~ s/(Login connection string: ).+/$1/g;
# 
# 
# File: t/04misc.t (line 282)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: /^dbi:Pg:dbname=template1$/, @result
# 

#   Failed test 'Failed Perl::Critic tests for file "t/04misc.t": 12'
#   at t/99_perlcritic.t line 234.
# 
# File: t/07copy.t (line 178)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{COPY TO command}, $t
# 
# 
# File: t/07copy.t (line 184)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{COPY FROM command}, $t
# 
# 
# File: t/07copy.t (line 190)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{COPY FROM command}, $t
# 
# 
# File: t/07copy.t (line 198)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: sub { $dbh->pg_putcopyend(); }, qr/until a COPY/, $t
# 
# 
# File: t/07copy.t (line 207)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{COPY FROM command}, $t
# 
# 
# File: t/07copy.t (line 215)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{COPY TO command}, $t
# 
# 
# File: t/07copy.t (line 241)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{COPY FROM command}, $t
# 
# 
# File: t/07copy.t (line 247)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{call pg_putcopyend}, $t
# 
# 
# File: t/07copy.t (line 268)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{COPY TO command}, $t
# 
# 
# File: t/07copy.t (line 286)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{read-only}, $t
# 
# 
# File: t/07copy.t (line 307)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{pg_getcopydata}, $t
# 
# 
# File: t/07copy.t (line 313)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{COPY TO command}, $t
# 

#   Failed test 'Failed Perl::Critic tests for file "t/07copy.t": 12'
#   at t/99_perlcritic.t line 234.
# 
# File: t/08async.t (line 72)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{No asynchronous query is running}, $t
# 
# 
# File: t/08async.t (line 112)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{No async}, $t
# 
# 
# File: t/08async.t (line 152)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{previous async}, $t
# 
# 
# File: t/08async.t (line 167)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{No async}, $t
# 
# 
# File: t/08async.t (line 173)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{No async}, $t
# 
# 
# File: t/08async.t (line 179)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{No async}, $t
# 
# 
# File: t/08async.t (line 220)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{previous async}, $t
# 
# 
# File: t/08async.t (line 234)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{No async}, $t
# 
# 
# File: t/08async.t (line 256)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{previous async}, $t
# 
# 
# File: t/08async.t (line 293)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{previous async}, $t
# 
# 
# File: t/08async.t (line 299)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{previous async}, $t
# 
# 
# File: t/08async.t (line 317)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{previous async}, $t
# 
# 
# File: t/08async.t (line 365)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{no statement executing}, $t
# 

#   Failed test 'Failed Perl::Critic tests for file "t/08async.t": 13'
#   at t/99_perlcritic.t line 234.
# 
# File: t/09arrays.t (line 183)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: split /\n\n/ => $array_tests
# 
# 
# File: t/09arrays.t (line 184)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next unless $test =~ /\w/;
# 
# 
# File: t/09arrays.t (line 185)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: my ($input,$expected,$msg) = split /\n/ => $test;
# 
# 
# File: t/09arrays.t (line 187)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $expected =~ s/\s*quote:\s*(.+)//
# 
# 
# File: t/09arrays.t (line 191)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $msg =~ s/NEED (\d+):\s*//
# 
# 
# File: t/09arrays.t (line 206)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $expected =~ /error:\s+(.+)/i
# 
# 
# File: t/09arrays.t (line 207)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{$1}, "Array failed : $msg : $input"
# 
# 
# File: t/09arrays.t (line 208)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{$1}, "Array failed : $msg : $input"
# 
# 
# File: t/09arrays.t (line 221)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $qexpected =~ /error:\s+(.+)/i
# 
# 
# File: t/09arrays.t (line 223)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $errmsg =~ s/bind/quote/;
# 
# 
# File: t/09arrays.t (line 224)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{$errmsg}, "Array quote failed : $msg : $input"
# 
# 
# File: t/09arrays.t (line 225)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{$errmsg}, "Array quote failed : $msg : $input"
# 
# 
# File: t/09arrays.t (line 240)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: split /\n\n/ => $array_tests
# 
# 
# File: t/09arrays.t (line 241)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next unless $test =~ /\w/;
# 
# 
# File: t/09arrays.t (line 242)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: my ($input,$expected,$msg) = split /\n/ => $test;
# 
# 
# File: t/09arrays.t (line 244)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $expected =~ s/\s*quote:\s*(.+)//
# 
# 
# File: t/09arrays.t (line 248)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $msg =~ s/NEED (\d+):\s*//
# 
# 
# File: t/09arrays.t (line 263)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $expected =~ /error:\s+(.+)/i
# 
# 
# File: t/09arrays.t (line 264)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{$1}, "Array failed : $msg : $input"
# 
# 
# File: t/09arrays.t (line 265)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{$1}, "Array failed : $msg : $input"
# 
# 
# File: t/09arrays.t (line 273)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $qexpected =~ s/{}/{''}/;
# 
# 
# File: t/09arrays.t (line 275)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $qexpected =~ s/NULL/undef/g;
# 
# 
# File: t/09arrays.t (line 276)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $qexpected =~ s/\\\\n/\\n/g;
# 
# 
# File: t/09arrays.t (line 277)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $qexpected =~ s/\\\\"/\\"/g;
# 
# 
# File: t/09arrays.t (line 278)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $qexpected =~ s/\\\\i/\\i/g;
# 
# 
# File: t/09arrays.t (line 279)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $msg =~ /closing brace/
# 
# 
# File: t/09arrays.t (line 280)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $qexpected =~ s/]"/}"/;
# 
# 
# File: t/09arrays.t (line 286)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $msg =~ /STOP/
# 
# 
# File: t/09arrays.t (line 455)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: split /\n\n/ => $array_tests_out
# 
# 
# File: t/09arrays.t (line 456)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next unless $test =~ /\w/;
# 
# 
# File: t/09arrays.t (line 457)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: my ($input,$expected,$msg) = split /\n/ => $test;
# 
# 
# File: t/09arrays.t (line 459)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $expected =~ s/\s*quote:\s*(.+)//
# 
# 
# File: t/09arrays.t (line 462)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $msg =~ s/NEED (\d+):\s*//
# 
# 
# File: t/09arrays.t (line 472)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $input =~ /SKIP/ or $test =~ /Fake NULL|boolean/
# 
# 
# File: t/09arrays.t (line 472)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $input =~ /SKIP/ or $test =~ /Fake NULL|boolean/
# 
# 
# File: t/09arrays.t (line 486)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $result =~ /error:\s+(.+)/i
# 
# 
# File: t/09arrays.t (line 487)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{$1}, "Array failed : $msg : $input"
# 

#   Failed test 'Failed Perl::Critic tests for file "t/09arrays.t": 37'
#   at t/99_perlcritic.t line 234.
# 
# File: t/12placeholders.t (line 62)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{when 0 are needed}, $t
# 
# 
# File: t/12placeholders.t (line 92)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{when 0 are needed}, $t
# 
# 
# File: t/12placeholders.t (line 100)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{when 0 are needed}, $t
# 
# 
# File: t/12placeholders.t (line 108)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{when 0 are needed}, $t
# 
# 
# File: t/12placeholders.t (line 137)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: my $expected = $backslash eq 'off' ? qr{unsafe} : qr{};
# 
# 
# File: t/12placeholders.t (line 137)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: my $expected = $backslash eq 'off' ? qr{unsafe} : qr{};
# 
# 
# File: t/12placeholders.t (line 160)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{ERROR}, $t
# 
# 
# File: t/12placeholders.t (line 176)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{unbound placeholder}, $t
# 
# 
# File: t/12placeholders.t (line 207)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{mix placeholder}, $t
# 
# 
# File: t/12placeholders.t (line 217)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{unbound placeholder}, $t
# 
# 
# File: t/12placeholders.t (line 226)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@, qr{unbound placeholder}, $t
# 

#   Failed test 'Failed Perl::Critic tests for file "t/12placeholders.t": 11'
#   at t/99_perlcritic.t line 234.
# 
# File: t/99_perlcritic.t (line 27)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: /^.+\.(t|pl)$/
# 
# 
# File: t/99_perlcritic.t (line 35)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: last if $line =~ /__DATA__/;
# 
# 
# File: t/99_perlcritic.t (line 37)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if $line !~ /\b$func\b/;
# 
# 
# File: t/99_perlcritic.t (line 38)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if $line =~ /$func \w/;
# 
# 
# File: t/99_perlcritic.t (line 39)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if $line =~ /[\$\%]$func/;
# 
# 
# File: t/99_perlcritic.t (line 58)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next unless /File List/;
# 
# 
# File: t/99_perlcritic.t (line 62)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: last if /= Compiling/;
# 
# 
# File: t/99_perlcritic.t (line 64)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: m{^([\w\./-]+) \- }
# 
# 
# File: t/99_perlcritic.t (line 68)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: m{^(t/.+)}
# 
# 
# File: t/99_perlcritic.t (line 78)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next unless /^(\S.+)/;
# 
# 
# File: t/99_perlcritic.t (line 106)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $fileslurp{$file}{$linenum}{$func}, qr{^\s*#?$func \(['\S]}, $t
# 
# 
# File: t/99_perlcritic.t (line 130)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: 
# 
# 
# File: t/99_perlcritic.t (line 133)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if $policy =~ /ProhibitInterpolationOfLiterals/;
# 
# 
# File: t/99_perlcritic.t (line 136)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if $d =~ /Subroutine "SQL_\w+" (?:not exported|is neither)/;
# 
# 
# File: t/99_perlcritic.t (line 137)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if $d =~ /Subroutine "pg_\w+" not exported/;
# 
# 
# File: t/99_perlcritic.t (line 138)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if $d =~ /Subroutine "looks_like_number" not exported/;
# 
# 
# File: t/99_perlcritic.t (line 141)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if $policy =~ /ProhibitCallsToUndeclaredSubs/;
# 
# 
# File: t/99_perlcritic.t (line 142)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if $policy =~ /ProhibitCallsToUnexportedSubs/;
# 
# 
# File: t/99_perlcritic.t (line 143)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if $policy =~ /RequireExplicitPackage/;
# 
# 
# File: t/99_perlcritic.t (line 144)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if $policy =~ /RequireUseStrict/;
# 
# 
# File: t/99_perlcritic.t (line 145)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if $policy =~ /RequireUseWarnings/;
# 
# 
# File: t/99_perlcritic.t (line 146)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if $policy =~ /RequireExplicitPackage/;
# 
# 
# File: t/99_perlcritic.t (line 149)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if $policy =~ /ProhibitHardTabs/ and ($source =~ /sql = qq/i or $source =~ /qw[\(\/]/);
# 
# 
# File: t/99_perlcritic.t (line 149)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $source =~ /sql = qq/i or $source =~ /qw[\(\/]/
# 
# 
# File: t/99_perlcritic.t (line 149)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $source =~ /sql = qq/i or $source =~ /qw[\(\/]/
# 
# 
# File: t/99_perlcritic.t (line 184)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: split /\s+/ => $ok{$f}{sub}
# 
# 
# File: t/99_perlcritic.t (line 185)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: push @{$ok{$f}{OK}} => qr{Subroutine "$foo" (?:is neither|not exported)};
# 
# 
# File: t/99_perlcritic.t (line 196)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: my $testmoreok = qr{Subroutine "$tm" is neither};
# 
# 
# File: t/99_perlcritic.t (line 208)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: 
# 
# 
# File: t/99_perlcritic.t (line 217)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next unless $f =~ /$k/;
# 
# 
# File: t/99_perlcritic.t (line 224)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if $policy =~ /RequireExplicitPackage/ and $filename =~ /setup/;
# 
# 
# File: t/99_perlcritic.t (line 224)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if $policy =~ /RequireExplicitPackage/ and $filename =~ /setup/;
# 

#   Failed test 'Failed Perl::Critic tests for file "t/99_perlcritic.t": 32'
#   at t/99_perlcritic.t line 234.
# 
# File: t/99_pod.t (line 47)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 48)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 49)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 51)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 52)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 53)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 54)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 55)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 56)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 57)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 58)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 59)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 60)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 61)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 62)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 63)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 64)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 65)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 66)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 67)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 68)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 69)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 70)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 71)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 72)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 73)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 74)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 75)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 76)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 77)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 78)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 79)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 80)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 81)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 82)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 83)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 84)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 85)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 86)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 87)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 88)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 89)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 90)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 91)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 92)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 93)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 94)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 95)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 96)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 97)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 98)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 99)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 100)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 101)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 102)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 103)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 104)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 105)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 106)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 107)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 108)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 109)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 110)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 111)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 112)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 113)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 114)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 115)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 116)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 117)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 118)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 119)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 120)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 121)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 122)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 123)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 124)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 125)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 126)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 127)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 128)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 129)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 130)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 131)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 132)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 133)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 134)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 135)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 136)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 137)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 138)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 139)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 140)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 141)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 142)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 143)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 144)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 145)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 146)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 147)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 148)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 149)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 150)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 151)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 152)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 153)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 154)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 155)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 156)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 157)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 158)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 159)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 160)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 161)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 162)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 163)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 164)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 165)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 166)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 167)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 168)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 169)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 170)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 171)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 172)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 173)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 174)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 175)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 176)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 177)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 178)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 179)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 180)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 181)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 182)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 
# 
# File: t/99_pod.t (line 183)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: qr{^CLONE$},
# 

#   Failed test 'Failed Perl::Critic tests for file "t/99_pod.t": 136'
#   at t/99_perlcritic.t line 234.
# 
# File: t/99_spellcheck.t (line 22)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: /^.+\.(t|pl)$/
# 
# 
# File: t/99_spellcheck.t (line 30)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: /^## (.+):/
# 
# 
# File: t/99_spellcheck.t (line 34)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if /^#/ or ! /\w/;
# 
# 
# File: t/99_spellcheck.t (line 34)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: next if /^#/ or ! /\w/;
# 
# 
# File: t/99_spellcheck.t (line 74)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: s{eg/lotest.pl}{};
# 

#   Failed test 'Failed Perl::Critic tests for file "t/99_spellcheck.t": 5'
#   at t/99_perlcritic.t line 234.
# 
# File: t/dbdpg_test_setup.pl (line 58)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: my $alias = qr{(database|db|dbname)};
# 
# 
# File: t/dbdpg_test_setup.pl (line 68)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $testdsn =~ /FAIL!/
# 
# 
# File: t/dbdpg_test_setup.pl (line 82)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $testdsn =~ s/$alias\s*=/$arg->{dbreplace}=/;
# 
# 
# File: t/dbdpg_test_setup.pl (line 85)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $testdsn =~ s/$alias\s*=([\-\w]+)/'db="'.lc $2.'"'/e;
# 
# 
# File: t/dbdpg_test_setup.pl (line 94)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@ =~ /invalid connection option/
# 
# 
# File: t/dbdpg_test_setup.pl (line 122)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $^O !~ /Win32/
# 
# 
# File: t/dbdpg_test_setup.pl (line 141)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $err or $info !~ /\w/
# 
# 
# File: t/dbdpg_test_setup.pl (line 154)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@ =~ /starting up/ or $@ =~ /PGSQL\.\d+/
# 
# 
# File: t/dbdpg_test_setup.pl (line 154)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@ =~ /starting up/ or $@ =~ /PGSQL\.\d+/
# 
# 
# File: t/dbdpg_test_setup.pl (line 182)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $testdsn = $^O =~ /Win32/ ? 'dbi:Pg:host=localhost' : 'dbi:Pg:';
# 
# 
# File: t/dbdpg_test_setup.pl (line 197)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@ =~ /postgres/
# 
# 
# File: t/dbdpg_test_setup.pl (line 205)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $testuser = $^O =~
# 
# 
# File: t/dbdpg_test_setup.pl (line 206)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $testuser = $^O =~
# 
# 
# File: t/dbdpg_test_setup.pl (line 247)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $info !~ /\@postgresql\.org/ and $info !~ /run as root/
# 
# 
# File: t/dbdpg_test_setup.pl (line 247)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $info !~ /\@postgresql\.org/ and $info !~ /run as root/
# 
# 
# File: t/dbdpg_test_setup.pl (line 249)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $info !~ /\w/
# 
# 
# File: t/dbdpg_test_setup.pl (line 274)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $info !~ /\@postgresql\.org/ and $info !~ /run as root/
# 
# 
# File: t/dbdpg_test_setup.pl (line 274)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $info !~ /\@postgresql\.org/ and $info !~ /run as root/
# 
# 
# File: t/dbdpg_test_setup.pl (line 288)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $info =~ /run as root/ or $info =~ /unprivilegierte/
# 
# 
# File: t/dbdpg_test_setup.pl (line 288)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $info =~ /run as root/ or $info =~ /unprivilegierte/
# 
# 
# File: t/dbdpg_test_setup.pl (line 346)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $info =~ /FATAL/
# 
# 
# File: t/dbdpg_test_setup.pl (line 351)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $info =~ /but is not empty/
# 
# 
# File: t/dbdpg_test_setup.pl (line 354)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $info !~ /pg_ctl/
# 
# 
# File: t/dbdpg_test_setup.pl (line 360)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: !$su and $info =~ /owned by user "(.+?)"/
# 
# 
# File: t/dbdpg_test_setup.pl (line 379)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: last if $info !~ /PGSQL\.$testport$/m
# 
# 
# File: t/dbdpg_test_setup.pl (line 380)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: last if $info !~ /PGSQL\.$testport$/m
# 
# 
# File: t/dbdpg_test_setup.pl (line 398)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: print $cfh "listen_addresses='localhost'\n" if $^O =~ /Win32/;
# 
# 
# File: t/dbdpg_test_setup.pl (line 409)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $^O !~ /Win32/
# 
# 
# File: t/dbdpg_test_setup.pl (line 432)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $err or $info !~ /\w/
# 
# 
# File: t/dbdpg_test_setup.pl (line 441)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $^O =~ /Win32/
# 
# 
# File: t/dbdpg_test_setup.pl (line 453)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@ =~ /starting up/ or $@ =~ /PGSQL\.$testport/
# 
# 
# File: t/dbdpg_test_setup.pl (line 453)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@ =~ /starting up/ or $@ =~ /PGSQL\.$testport/
# 
# 
# File: t/dbdpg_test_setup.pl (line 511)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $@ =~ /Permission denied/ and $helpconnect != 16
# 
# 
# File: t/dbdpg_test_setup.pl (line 583)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: 
# 
# 
# File: t/dbdpg_test_setup.pl (line 595)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: /User: (\w+)/         and $testuser = $1;
# 
# 
# File: t/dbdpg_test_setup.pl (line 596)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: /Helpconnect: (\d+)/  and $helpconnect = $1;
# 
# 
# File: t/dbdpg_test_setup.pl (line 597)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: /Testowner: (\w+)/    and $su = $1;
# 
# 
# File: t/dbdpg_test_setup.pl (line 598)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: /Testowneruid: (\d+)/ and $uid = $1;
# 
# 
# File: t/dbdpg_test_setup.pl (line 599)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: /Testdir: (.+)/       and $testdir = $1;
# 
# 
# File: t/dbdpg_test_setup.pl (line 600)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: /pg_ctl: (.+)/        and $pg_ctl = $1;
# 
# 
# File: t/dbdpg_test_setup.pl (line 601)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: /initdb: (.+)/        and $initdb = $1;
# 
# 
# File: t/dbdpg_test_setup.pl (line 602)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: /ERROR: (.+)/         and $error = $1 and $inerror = 1;
# 
# 
# File: t/dbdpg_test_setup.pl (line 656)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $name =~ s/(.+)\.(.+)/$2/
# 
# 
# File: t/dbdpg_test_setup.pl (line 662)
# Vio: Regular expression without "/s" flag
# Policy: RegularExpressions::RequireDotMatchAnything
# Source: $name =~ s/(.+)\.(.+)/$2/
# 

#   Failed test 'Failed Perl::Critic tests for file "t/dbdpg_test_setup.pl": 44'
#   at t/99_perlcritic.t line 234.
# Looks like you failed 16 tests of 434.
dubious
	Test returned status 16 (wstat 4096, 0x1000)
DIED. FAILED tests 411-412, 415-416, 418-421, 423-426, 428-430, 433
	Failed 16/434 tests, 96.31% okay
t/99_pod............skipped
        all skipped: Set the environment variable TEST_AUTHOR to enable this test
t/99_spellcheck.....skipped
        all skipped: Set the environment variable TEST_SPELL to enable this test
t/99_yaml...........ok
t/99cleanup.........Removing test database directory
ok
        1/1 skipped: various reasons
Failed Test       Stat Wstat Total Fail  List of Failed
-------------------------------------------------------------------------------
t/99_perlcritic.t   16  4096   434   16  411-412 415-416 418-421 423-426 428-
                                         430 433
14 tests and 1 subtest skipped.
Failed 1/19 test scripts. 16/573 subtests failed.
Files=19, Tests=573, 61 wallclock secs (38.60 cusr +  0.70 csys = 39.30 CPU)
Failed 1/19 test programs. 16/573 subtests failed.
make[1]: *** [test_dynamic] Error 255
make[1]: Leaving directory `/tmp/buildd/libdbd-pg-perl-2.11.2'
dh_auto_test: command returned error code 512
make: *** [build-stamp] Error 1
dpkg-buildpackage: failure: debian/rules build gave error exit status 2
pbuilder: Failed autobuilding of package
 -> Aborting with an error
 -> unmounting dev/pts filesystem
 -> unmounting proc filesystem
 -> Copying COW directory
 -> Invoking pbuilder
 -> Cleaning COW directory
