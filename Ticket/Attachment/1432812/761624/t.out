C:\perl\perl\bin\perl.exe "-MExtUtils::Command::MM" "-MTest::Harness" "-e" "undef *Test::Harness::Switches; test_harness(0, 'blib\lib', 'blib\arch')" t/*.t
t/00-compile.t ............ ok

#   Failed test 'read_file() works'
#   at t/10-basics.t line 13.
#          got: '#! perl
# 
# use strict;
# use warnings;
# 
# use File::Spec::Functions qw/catfile/;
# use File::Slurp::Tiny qw/read_file read_lines write_file read_dir/;
# use File::Temp qw/tempdir/;
# 
# use Test::More;
# 
# my $content = do { local $/; open my $fh, '<:raw', $0; <$fh> };
# is(read_file($0), $content, 'read_file() works');
# is(read_file($0, binmode => ':raw'), $content, 'read_file(binmode => :raw) works');
# my $ref = read_file($0, scalar_ref => 1);
# ok(ref($ref) && ${$ref} eq $content, 'read_file(scalar_ref => 1) works');
# read_file($0, buf_ref => \my $buf);
# is($buf, $content, 'read_file(buf_ref => $buf) works');
# 
# my @content = split /(?<=\n)/, $content;
# 
# is_deeply([ read_lines($0) ], \@content, 'read_lines returns the right thing');
# chomp @content;
# is_deeply([ read_lines($0, chomp => 1) ], \@content, 'read_lines(chomp => 1) returns the right thing');
# 
# is_deeply([ read_dir('lib') ], [ 'File' ], 'read_dir appears to work');
# is_deeply([ read_dir('lib', prefix => 1) ], [ catfile(qw/lib File/) ], 'read_dir(prefix => 1) appears to work');
# 
# my $dir = tempdir( CLEANUP => 1 );
# my $filename = catfile($dir, 'out.txt');
# write_file($filename, $content);
# is(read_file($filename), $content, 'write_file + readfile = noop');
# write_file($filename, $content, append => 1);
# is(read_file($filename), $content x 2, 'write_file + readfile = noop');
# 
# done_testing;
# '
#     expected: '#! perl
# 
# use strict;
# use warnings;
# 
# use File::Spec::Functions qw/catfile/;
# use File::Slurp::Tiny qw/read_file read_lines write_file read_dir/;
# use File::Temp qw/tempdir/;
# 
# use Test::More;
# 
# my $content = do { local $/; open my $fh, '<:raw', $0; <$fh> };
# is(read_file($0), $content, 'read_file() works');
# is(read_file($0, binmode => ':raw'), $content, 'read_file(binmode => :raw) works');
# my $ref = read_file($0, scalar_ref => 1);
# ok(ref($ref) && ${$ref} eq $content, 'read_file(scalar_ref => 1) works');
# read_file($0, buf_ref => \my $buf);
# is($buf, $content, 'read_file(buf_ref => $buf) works');
# 
# my @content = split /(?<=\n)/, $content;
# 
# is_deeply([ read_lines($0) ], \@content, 'read_lines returns the right thing');
# chomp @content;
# is_deeply([ read_lines($0, chomp => 1) ], \@content, 'read_lines(chomp => 1) returns the right thing');
# 
# is_deeply([ read_dir('lib') ], [ 'File' ], 'read_dir appears to work');
# is_deeply([ read_dir('lib', prefix => 1) ], [ catfile(qw/lib File/) ], 'read_dir(prefix => 1) appears to work');
# 
# my $dir = tempdir( CLEANUP => 1 );
# my $filename = catfile($dir, 'out.txt');
# write_file($filename, $content);
# is(read_file($filename), $content, 'write_file + readfile = noop');
# write_file($filename, $content, append => 1);
# is(read_file($filename), $content x 2, 'write_file + readfile = noop');
# 
# done_testing;
# '

#   Failed test 'read_file(scalar_ref => 1) works'
#   at t/10-basics.t line 16.

#   Failed test 'read_file(buf_ref => $buf) works'
#   at t/10-basics.t line 18.
#          got: '#! perl
# 
# use strict;
# use warnings;
# 
# use File::Spec::Functions qw/catfile/;
# use File::Slurp::Tiny qw/read_file read_lines write_file read_dir/;
# use File::Temp qw/tempdir/;
# 
# use Test::More;
# 
# my $content = do { local $/; open my $fh, '<:raw', $0; <$fh> };
# is(read_file($0), $content, 'read_file() works');
# is(read_file($0, binmode => ':raw'), $content, 'read_file(binmode => :raw) works');
# my $ref = read_file($0, scalar_ref => 1);
# ok(ref($ref) && ${$ref} eq $content, 'read_file(scalar_ref => 1) works');
# read_file($0, buf_ref => \my $buf);
# is($buf, $content, 'read_file(buf_ref => $buf) works');
# 
# my @content = split /(?<=\n)/, $content;
# 
# is_deeply([ read_lines($0) ], \@content, 'read_lines returns the right thing');
# chomp @content;
# is_deeply([ read_lines($0, chomp => 1) ], \@content, 'read_lines(chomp => 1) returns the right thing');
# 
# is_deeply([ read_dir('lib') ], [ 'File' ], 'read_dir appears to work');
# is_deeply([ read_dir('lib', prefix => 1) ], [ catfile(qw/lib File/) ], 'read_dir(prefix => 1) appears to work');
# 
# my $dir = tempdir( CLEANUP => 1 );
# my $filename = catfile($dir, 'out.txt');
# write_file($filename, $content);
# is(read_file($filename), $content, 'write_file + readfile = noop');
# write_file($filename, $content, append => 1);
# is(read_file($filename), $content x 2, 'write_file + readfile = noop');
# 
# done_testing;
# '
#     expected: '#! perl
# 
# use strict;
# use warnings;
# 
# use File::Spec::Functions qw/catfile/;
# use File::Slurp::Tiny qw/read_file read_lines write_file read_dir/;
# use File::Temp qw/tempdir/;
# 
# use Test::More;
# 
# my $content = do { local $/; open my $fh, '<:raw', $0; <$fh> };
# is(read_file($0), $content, 'read_file() works');
# is(read_file($0, binmode => ':raw'), $content, 'read_file(binmode => :raw) works');
# my $ref = read_file($0, scalar_ref => 1);
# ok(ref($ref) && ${$ref} eq $content, 'read_file(scalar_ref => 1) works');
# read_file($0, buf_ref => \my $buf);
# is($buf, $content, 'read_file(buf_ref => $buf) works');
# 
# my @content = split /(?<=\n)/, $content;
# 
# is_deeply([ read_lines($0) ], \@content, 'read_lines returns the right thing');
# chomp @content;
# is_deeply([ read_lines($0, chomp => 1) ], \@content, 'read_lines(chomp => 1) returns the right thing');
# 
# is_deeply([ read_dir('lib') ], [ 'File' ], 'read_dir appears to work');
# is_deeply([ read_dir('lib', prefix => 1) ], [ catfile(qw/lib File/) ], 'read_dir(prefix => 1) appears to work');
# 
# my $dir = tempdir( CLEANUP => 1 );
# my $filename = catfile($dir, 'out.txt');
# write_file($filename, $content);
# is(read_file($filename), $content, 'write_file + readfile = noop');
# write_file($filename, $content, append => 1);
# is(read_file($filename), $content x 2, 'write_file + readfile = noop');
# 
# done_testing;
# '

#   Failed test 'read_lines returns the right thing'
#   at t/10-basics.t line 22.
#     Structures begin differing at:
#          $got->[0] = '#! perl
#     '
#     $expected->[0] = '#! perl
#     '

#   Failed test 'read_lines(chomp => 1) returns the right thing'
#   at t/10-basics.t line 24.
#     Structures begin differing at:
#          $got->[0] = '#! perl'
#     $expected->[0] = '#! perl'
# Looks like you failed 5 tests of 10.
t/10-basics.t ............. 
Dubious, test returned 5 (wstat 1280, 0x500)
Failed 5/10 subtests 
t/release-pod-coverage.t .. skipped: these tests are for release candidate testing
t/release-pod-syntax.t .... skipped: these tests are for release candidate testing

Test Summary Report
-------------------
t/10-basics.t           (Wstat: 1280 Tests: 10 Failed: 5)
  Failed tests:  1, 3-6
  Non-zero exit status: 5
Files=4, Tests=11,  2 wallclock secs ( 0.08 usr +  0.06 sys =  0.14 CPU)
Result: FAIL
Failed 1/4 test programs. 5/11 subtests failed.
DMAKE:  Error code 255, while making 'test_dynamic'
