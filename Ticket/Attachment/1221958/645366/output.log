make -C cpp test
make[1]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp »
for i in pw common mem sched type table utest wrap ; do \
		make -C $i mktest || exit 1; \
	done
make[2]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/pw »
make[2]: Rien à faire pour « mktest ».
make[2]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/pw »
make[2]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/common »
make[2]: Rien à faire pour « mktest ».
make[2]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/common »
make[2]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/mem »
make[2]: Rien à faire pour « mktest ».
make[2]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/mem »
make[2]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/sched »
make[2]: Rien à faire pour « mktest ».
make[2]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/sched »
make[2]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/type »
make[2]: Rien à faire pour « mktest ».
make[2]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/type »
make[2]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/table »
make[2]: Rien à faire pour « mktest ».
make[2]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/table »
make[2]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/utest »
make[2]: Rien à faire pour « mktest ».
make[2]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/utest »
make[2]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/wrap »
make[2]: Rien à faire pour « mktest ».
make[2]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/wrap »
for i in pw common mem sched type table utest wrap ; do \
		make -C $i test || exit 1; \
	done
make[2]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/pw »
rm -f core.* *.core core vgcore.*
Unit tests valgrind:
make[2]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/pw »
make[2]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/common »
rm -f core.* *.core core vgcore.*
Unit tests valgrind:
t_errors
  case 1/3: simple
  case 2/3: nested
  case 3/3: absorb
t_exception
  case 1/2: throw_catch
  case 2/2: abort
t_strprintf
  case 1/2: mkshort
  case 2/2: mklong
make[2]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/common »
make[2]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/mem »
rm -f core.* *.core core vgcore.*
Unit tests valgrind:
t_autoref
  case 1/5: nullref
  case 2/5: construct
  case 3/5: factory
  case 4/5: assign
  case 5/5: onceref
t_easybuf
  case 1/1: buf
t_mtbuf
  case 1/2: buf
  case 2/2: vbuf
make[2]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/mem »
make[2]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/sched »
rm -f core.* *.core core vgcore.*
Unit tests valgrind:
t_Gadget
  case 1/2: mkgadget
  case 2/2: scheduling
t_Unit
  case 1/11: mkunit
  case 2/11: mklabel
  case 3/11: rowop
  case 4/11: scheduling
  case 5/11: chaining
  case 6/11: clearing1
  case 7/11: clearing2
  case 8/11: frameMarks
  case 9/11: markLoop
  case 10/11: exceptions
  case 11/11: label_exceptions
make[2]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/sched »
make[2]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/type »
rm -f core.* *.core core vgcore.*
Unit tests valgrind:
t_CompactRow
  case 1/6: rowtype
  case 2/6: parse_err
  case 3/6: mkrow
  case 4/6: mkrowshort
  case 5/6: mkrowover
  case 6/6: equal
t_simpleType
  case 1/2: findSimpleType
  case 2/2: print
t_TableType
  case 1/19: emptyTable
  case 2/19: hashedIndex
  case 3/19: badRow
  case 4/19: nullRow
  case 5/19: badIndexName
  case 6/19: nullIndex
  case 7/19: dupIndexName
  case 8/19: hashedNested
  case 9/19: hashedBadField
  case 10/19: fifoIndex
  case 11/19: fifoIndexLimit
  case 12/19: fifoIndexJumping
  case 13/19: fifoIndexReverse
  case 14/19: fifoBadJumping
  case 15/19: fifoBadNested
  case 16/19: sortedIndex
  case 17/19: sortedIndexBad
  case 18/19: sortedNested
  case 19/19: aggregator
make[2]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/type »
make[2]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/table »
rm -f core.* *.core core vgcore.*
Unit tests valgrind:
t_Aggr
  case 1/4: stringConst
  case 2/4: badName
  case 3/4: tableops
  case 4/4: aggLast
t_Fifo
  case 1/6: fifoIndex
  case 2/6: fifoIndexLimit
  case 3/6: fifoIndexJumping
  case 4/6: fifoIndexLimitReplace
  case 5/6: fifoIndexLimitNoReplace
  case 6/6: deepNested
    iteration order: efghabcd
    iteration order: efghabcd
t_Hashed
  case 1/4: primaryIndex
  case 2/4: uninitialized
  case 3/4: withError
  case 4/4: tableops
t_HashedNested
  case 1/5: primaryIndex
  case 2/5: uninitialized
  case 3/5: withError
  case 4/5: tableops
  case 5/5: queuing
t_Sorted
  case 1/2: primaryIndex
  case 2/2: tableops
t_SortedNested
  case 1/3: primaryIndex
  case 2/3: uninitialized
  case 3/3: tableops
t_Table
  case 1/3: preLabel
  case 2/3: exceptions
  case 3/3: groupSize
make[2]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/table »
make[2]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/utest »
rm -f core.* *.core core vgcore.*
Unit tests valgrind:
make[2]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/utest »
make[2]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/wrap »
rm -f core.* *.core core vgcore.*
Unit tests valgrind:
make[2]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp/wrap »
make[1]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/cpp »
make -C perl/Triceps test
make[1]: entrant dans le répertoire « /home/sdeseille/triceps/triceps-1.0.1/perl/Triceps »
PERL_DL_NONLAZY=1 /home/sdeseille/perl5/perlbrew/perls/perl-5.16.3/bin/perl "-MExtUtils::Command::MM" "-e" "test_harness(0, 'blib/lib', 'blib/arch')" t/*.t
t/Aggregator.t .......... ok
# Test 9 got: "" (t/AggregatorType.t at line 78)
#   Expected: "Triceps::AggregatorType::new(handler): code must be a reference to Perl function"
#  t/AggregatorType.t line 78 is: ok($! . "", "Triceps::AggregatorType::new(handler): code must be a reference to Perl function");
# Test 11 got: "" (t/AggregatorType.t at line 82)
#    Expected: "Triceps::AggregatorType::new(handler): code must be a reference to Perl function"
#  t/AggregatorType.t line 82 is: ok($! . "", "Triceps::AggregatorType::new(handler): code must be a reference to Perl function");
# Test 13 got: "" (t/AggregatorType.t at line 86)
#    Expected: "Triceps::AggregatorType::new(constructor): code must be a reference to Perl function"
#  t/AggregatorType.t line 86 is: ok($! . "", "Triceps::AggregatorType::new(constructor): code must be a reference to Perl function");
t/AggregatorType.t ...... 
Failed 3/55 subtests 
# Failed test 18 in t/Collapse.t at line 338
#  t/Collapse.t line 338 is: ok($@ =~ /^Collapse table type creation error for dataset 'idata':
t/Collapse.t ............ 
Failed 1/20 subtests 
# Failed test 34 in t/Fields.t at line 192
#  t/Fields.t line 192 is: 	ok($@ =~ /^Triceps::Fields::makeTranslation: Invalid result row type specification: Triceps::RowType::new: duplicate field name 'f1' for fields 3 and 2\nduplicate field name 'f2' for fields 4 and 1  at/);
t/Fields.t .............. 
Failed 1/45 subtests 
t/FrameMark.t ........... ok
# Test 6 got: "" (t/IndexType.t at line 43)
#   Expected: "Triceps::IndexType::getTabtype: this index type does not belong to an initialized table type"
#  t/IndexType.t line 43 is: ok($! . "", "Triceps::IndexType::getTabtype: this index type does not belong to an initialized table type");
# Test 8 got: "" (t/IndexType.t at line 47)
#   Expected: "Usage: Triceps::IndexType::newHashed(CLASS, optionName, optionValue, ...), option names and values must go in pairs"
#  t/IndexType.t line 47 is: ok($! . "", "Usage: Triceps::IndexType::newHashed(CLASS, optionName, optionValue, ...), option names and values must go in pairs");
# Test 10 got: "" (t/IndexType.t at line 51)
#    Expected: "Triceps::IndexType::newHashed: unknown option 'zzz'"
#  t/IndexType.t line 51 is: ok($! . "", "Triceps::IndexType::newHashed: unknown option 'zzz'");
# Test 12 got: "" (t/IndexType.t at line 55)
#    Expected: "Triceps::IndexType::newHashed: option 'key' can not be used twice"
#  t/IndexType.t line 55 is: ok($! . "", "Triceps::IndexType::newHashed: option 'key' can not be used twice");
# Test 14 got: "" (t/IndexType.t at line 59)
#    Expected: "Triceps::IndexType::newHashed: option 'key' value must be an array reference"
#  t/IndexType.t line 59 is: ok($! . "", "Triceps::IndexType::newHashed: option 'key' value must be an array reference");
# Test 16 got: "" (t/IndexType.t at line 63)
#    Expected: "Triceps::IndexType::newHashed: option 'key' value must be an array reference"
#  t/IndexType.t line 63 is: ok($! . "", "Triceps::IndexType::newHashed: option 'key' value must be an array reference");
# Test 18 got: "" (t/IndexType.t at line 67)
#    Expected: "Triceps::IndexType::newHashed: the required option 'key' is missing"
#  t/IndexType.t line 67 is: ok($! . "", "Triceps::IndexType::newHashed: the required option 'key' is missing");
# Test 27 got: "" (t/IndexType.t at line 91)
#    Expected: "Usage: Triceps::IndexType::newFifo(CLASS, optionName, optionValue, ...), option names and values must go in pairs"
#  t/IndexType.t line 91 is: ok($! . "", "Usage: Triceps::IndexType::newFifo(CLASS, optionName, optionValue, ...), option names and values must go in pairs");
# Test 29 got: "" (t/IndexType.t at line 95)
#    Expected: "Triceps::IndexType::newFifo: unknown option 'zzz'"
#  t/IndexType.t line 95 is: ok($! . "", "Triceps::IndexType::newFifo: unknown option 'zzz'");
# Test 72 got: "" (t/IndexType.t at line 194)
#    Expected: "Triceps::IndexType::findSubIndex: unknown nested index 'xxx'"
#  t/IndexType.t line 194 is: ok($! . "", "Triceps::IndexType::findSubIndex: unknown nested index 'xxx'");
# Test 81 got: "" (t/IndexType.t at line 215)
#    Expected: "Triceps::IndexType::findSubIndexById: no nested index with type id 'IT_ROOT' (0)"
#  t/IndexType.t line 215 is: ok($! . "", "Triceps::IndexType::findSubIndexById: no nested index with type id 'IT_ROOT' (0)");
# Test 83 got: "" (t/IndexType.t at line 219)
#    Expected: "Triceps::IndexType::findSubIndexById: no nested index with type id '???' (999)"
#  t/IndexType.t line 219 is: ok($! . "", "Triceps::IndexType::findSubIndexById: no nested index with type id '???' (999)");
# Test 85 got: "" (t/IndexType.t at line 223)
#    Expected: "Triceps::IndexType::findSubIndexById: unknown IndexId string 'xxx', if integer was meant, it has to be cast"
#  t/IndexType.t line 223 is: ok($! . "", "Triceps::IndexType::findSubIndexById: unknown IndexId string 'xxx', if integer was meant, it has to be cast");
t/IndexType.t ........... 
Failed 13/98 subtests 
t/JoinTwo.t ............. ok
# Test 29 got: "" (t/Label.t at line 121)
#    Expected: "Triceps::Label::chain: labels must not be chained in a loop\n  xxx_tab1.out->xxx_tab1.out"
#  t/Label.t line 121 is: ok($! . "", "Triceps::Label::chain: labels must not be chained in a loop\n  xxx_tab1.out->xxx_tab1.out");
# Test 37 got: "" (t/Label.t at line 158)
#    Expected: "Triceps::Label::getCode: label is not a Perl Label, has no Perl code"
#  t/Label.t line 158 is: ok($! . "", "Triceps::Label::getCode: label is not a Perl Label, has no Perl code");
t/Label.t ............... 
Failed 2/49 subtests 
t/LookupJoin.t .......... ok
# Test 12 got: "" (t/makeRow.t at line 129)
#    Expected: "Triceps::RowType::makeRowHash: attempting to set an array into scalar field 'b'"
#  t/makeRow.t line 129 is: ok($! . "", "Triceps::RowType::makeRowHash: attempting to set an array into scalar field 'b'");
# Test 14 got: "" (t/makeRow.t at line 138)
#    Expected: "Triceps::RowType::makeRowHash: attempting to set an unknown field 'z'"
#  t/makeRow.t line 138 is: ok($! . "", "Triceps::RowType::makeRowHash: attempting to set an unknown field 'z'");
# Test 16 got: "" (t/makeRow.t at line 147)
#    Expected: "Usage: Triceps::RowType::makeRowHash(RowType, fieldName, fieldValue, ...), names and types must go in pairs"
#  t/makeRow.t line 147 is: ok($! . "", "Usage: Triceps::RowType::makeRowHash(RowType, fieldName, fieldValue, ...), names and types must go in pairs");
# Test 19 got: "" (t/makeRow.t at line 168)
#    Expected: "Triceps field 'a' data conversion: array reference may not be used for string and uint8"
#  t/makeRow.t line 168 is: ok($! . "", "Triceps field 'a' data conversion: array reference may not be used for string and uint8");
# Test 21 got: "" (t/makeRow.t at line 179)
#    Expected: "Triceps::RowType::makeRowHash: attempting to set an array into scalar field 'e'"
#  t/makeRow.t line 179 is: ok($! . "", "Triceps::RowType::makeRowHash: attempting to set an array into scalar field 'e'");
# Test 23 got: "" (t/makeRow.t at line 189)
#    Expected: "Triceps field 'b' data conversion: reference not to an array"
#  t/makeRow.t line 189 is: ok($! . "", "Triceps field 'b' data conversion: reference not to an array");
# Test 28 got: "" (t/makeRow.t at line 225)
#    Expected: "Triceps::RowType::makeRowArray: attempting to set an array into scalar field 'b'"
#  t/makeRow.t line 225 is: ok($! . "", "Triceps::RowType::makeRowArray: attempting to set an array into scalar field 'b'");
# Test 30 got: "" (t/makeRow.t at line 234)
#    Expected: "Triceps::RowType::makeRowArray: 7 args, only 5 fields in row { uint8 a, int32 b, int64 c, float64 d, string e, }"
#  t/makeRow.t line 234 is: ok($! . "", "Triceps::RowType::makeRowArray: 7 args, only 5 fields in row { uint8 a, int32 b, int64 c, float64 d, string e, }");
# Test 33 got: "" (t/makeRow.t at line 255)
#    Expected: "Triceps field 'a' data conversion: array reference may not be used for string and uint8"
#  t/makeRow.t line 255 is: ok($! . "", "Triceps field 'a' data conversion: array reference may not be used for string and uint8");
# Test 35 got: "" (t/makeRow.t at line 266)
#    Expected: "Triceps::RowType::makeRowArray: attempting to set an array into scalar field 'e'"
#  t/makeRow.t line 266 is: ok($! . "", "Triceps::RowType::makeRowArray: attempting to set an array into scalar field 'e'");
# Test 37 got: "" (t/makeRow.t at line 276)
#    Expected: "Triceps field 'b' data conversion: reference not to an array"
#  t/makeRow.t line 276 is: ok($! . "", "Triceps field 'b' data conversion: reference not to an array");
t/makeRow.t ............. 
Failed 11/37 subtests 
t/Opt.t ................. ok
# Test 50 got: "" (t/Row.t at line 379)
#    Expected: "Usage: Triceps::Row::copymod(RowType, [fieldName, fieldValue, ...]), names and types must go in pairs"
#  t/Row.t line 379 is: ok($! . "", "Usage: Triceps::Row::copymod(RowType, [fieldName, fieldValue, ...]), names and types must go in pairs");
# Test 52 got: "" (t/Row.t at line 386)
#    Expected: "Triceps::Row::copymod: attempting to set an unknown field 'z'"
#  t/Row.t line 386 is: ok($! . "", "Triceps::Row::copymod: attempting to set an unknown field 'z'");
# Test 55 got: "" (t/Row.t at line 403)
#    Expected: "Triceps::Row::copymod: attempting to set an array into scalar field 'b'"
#  t/Row.t line 403 is: ok($! . "", "Triceps::Row::copymod: attempting to set an array into scalar field 'b'");
# Test 58 got: "" (t/Row.t at line 413)
#    Expected: "Triceps field 'a' data conversion: array reference may not be used for string and uint8"
#  t/Row.t line 413 is: ok($! . "", "Triceps field 'a' data conversion: array reference may not be used for string and uint8");
# Test 66 got: "" (t/Row.t at line 436)
#    Expected: "Triceps::Row::get: unknown field 'z'"
#  t/Row.t line 436 is: ok($! . "", "Triceps::Row::get: unknown field 'z'");
t/Row.t ................. 
Failed 5/77 subtests 
# Test 19 got: "" (t/Rowop.t at line 136)
#    Expected: "Triceps::Label::makeRowop: unknown opcode string 'OCF_INSERT', if integer was meant, it has to be cast"
#  t/Rowop.t line 136 is: ok($! . "", "Triceps::Label::makeRowop: unknown opcode string 'OCF_INSERT', if integer was meant, it has to be cast");
# Test 23 got: "" (t/Rowop.t at line 146)
#    Expected: "Triceps::Label::makeRowop: unknown enqueuing mode string 'something', if integer was meant, it has to be cast"
#  t/Rowop.t line 146 is: ok($! . "", "Triceps::Label::makeRowop: unknown enqueuing mode string 'something', if integer was meant, it has to be cast");
# Test 25 got: "" (t/Rowop.t at line 150)
#    Expected: "Usage: Triceps::Label::makeRowop(label, opcode, row [, enqMode]), received too many arguments"
#  t/Rowop.t line 150 is: ok($! . "", "Usage: Triceps::Label::makeRowop(label, opcode, row [, enqMode]), received too many arguments");
# Test 29 got: "" (t/Rowop.t at line 160)
#    Expected: "Triceps::Label::makeRowop: row types do not match\n  Label:\n    row {\n      uint8 a,\n      int32 b,\n      int64 c,\n      float64 d,\n      string e,\n    }\n  Row:\n    row {\n      string e,\n      uint8 a,\n      int32 b,\n      int64 c,\n      float64 d,\n    }"
#      (Install the Algorithm::Diff module to have differences in multiline
#       output explained.  You might also set the PERL_TEST_DIFF environment
#       variable to run a diff program on the output.)
#  t/Rowop.t line 160 is: ok($! . "", "Triceps::Label::makeRowop: row types do not match\n  Label:\n    row {\n      uint8 a,\n      int32 b,\n      int64 c,\n      float64 d,\n      string e,\n    }\n  Row:\n    row {\n      string e,\n      uint8 a,\n      int32 b,\n      int64 c,\n      float64 d,\n    }");
t/Rowop.t ............... 
Failed 4/80 subtests 
# Test 13 got: "" (t/RowType.t at line 75)
#    Expected: "Triceps::RowType::new: field 'e' string array type is not supported"
#  t/RowType.t line 75 is: ok($! . "", "Triceps::RowType::new: field 'e' string array type is not supported");
# Test 15 got: "" (t/RowType.t at line 85)
#    Expected: "Triceps::RowType::new: field 'a' type must not be void"
#  t/RowType.t line 85 is: ok($! . "", "Triceps::RowType::new: field 'a' type must not be void");
# Test 17 got: "" (t/RowType.t at line 95)
#    Expected: "Triceps::RowType::new: field 'a' has an unknown type ''"
#  t/RowType.t line 95 is: ok($! . "", "Triceps::RowType::new: field 'a' has an unknown type ''");
# Test 19 got: "" (t/RowType.t at line 100)
#    Expected: "Usage: Triceps::RowType::new(CLASS, fieldName, fieldType, ...), names and types must go in pairs"
#  t/RowType.t line 100 is: ok($! . "", "Usage: Triceps::RowType::new(CLASS, fieldName, fieldType, ...), names and types must go in pairs");
# Test 21 got: "" (t/RowType.t at line 111)
#    Expected: "Usage: Triceps::RowType::new(CLASS, fieldName, fieldType, ...), names and types must go in pairs"
#  t/RowType.t line 111 is: ok($! . "", "Usage: Triceps::RowType::new(CLASS, fieldName, fieldType, ...), names and types must go in pairs");
# Test 40 got: "" (t/RowType.t at line 163)
#    Expected: "Usage: Triceps::RowType::print(self [, indent  [, subindent ] ])"
#  t/RowType.t line 163 is: ok ($! . "", "Usage: Triceps::RowType::print(self [, indent  [, subindent ] ])");
t/RowType.t ............. 
Failed 6/41 subtests 
# Failed test 55 in t/SimpleAggregator.t at line 601
#  t/SimpleAggregator.t line 601 is: ok($@ =~ /^Triceps::SimpleAggregator::make: invalid result row type definition: Triceps::RowType::new: field 'symbol' string array type is not supported/);
t/SimpleAggregator.t .... 
Failed 1/71 subtests 
t/SimpleOrderedIndex.t .. ok

Expect message(s) like: Error in PerlSortedIndex(bad) comparator: test a death in PerlSortedIndex comparator
Error in PerlSortedIndex(bad) comparator: test a death in PerlSortedIndex comparator
Error in PerlSortedIndex(bad) comparator: test a death in PerlSortedIndex comparator

Expect message(s) like: Error in PerlSortedIndex(bad) comparator: comparator returned a non-integer value
Error in PerlSortedIndex(bad) comparator: comparator returned a non-integer value 'zzz' at t/SortedIndexType.t line 274.
Error in PerlSortedIndex(bad) comparator: comparator returned a non-integer value 'zzz' at t/SortedIndexType.t line 274.
# Test 96 got: "" (t/SortedIndexType.t at line 406)
#    Expected: "Triceps::IndexType::setComparator: this index type is already initialized and can not be changed"
#  t/SortedIndexType.t line 406 is: 	ok($! . "", 'Triceps::IndexType::setComparator: this index type is already initialized and can not be changed');
t/SortedIndexType.t ..... 
Failed 1/124 subtests 
# Test 42 got: "" (t/Table.t at line 184)
#    Expected: "Triceps::Table::makeRowHandle: table and row types are not equal, in table: row { uint8 a, int32 b, int64 c, float64 d, string e, }, in row: row { uint8[] a, int32[] b, int64[] c, float64[] d, string e, }"
#  t/Table.t line 184 is: ok($! . "", "Triceps::Table::makeRowHandle: table and row types are not equal, in table: row { uint8 a, int32 b, int64 c, float64 d, string e, }, in row: row { uint8[] a, int32[] b, int64[] c, float64[] d, string e, }");
# Test 48 got: "" (t/Table.t at line 201)
#    Expected: "Triceps::RowHandle::getRow: RowHandle is NULL"
#  t/Table.t line 201 is: ok($! . "", "Triceps::RowHandle::getRow: RowHandle is NULL");
# Test 50 got: "" (t/Table.t at line 205)
#    Expected: "Triceps::RowHandle::isInTable: RowHandle is NULL"
#  t/Table.t line 205 is: ok($! . "", "Triceps::RowHandle::isInTable: RowHandle is NULL");
t/Table.t ............... 
Failed 3/207 subtests 
# Test 11 got: "" (t/TableType.t at line 68)
#    Expected: "Triceps::IndexType::getTabtype: this index type does not belong to an initialized table type"
#  t/TableType.t line 68 is: ok($! . "", "Triceps::IndexType::getTabtype: this index type does not belong to an initialized table type");
# Test 42 got: "" (t/TableType.t at line 163)
#    Expected: "Triceps::IndexType::getTabtype: this index type does not belong to an initialized table type"
#  t/TableType.t line 163 is: ok($! . "", "Triceps::IndexType::getTabtype: this index type does not belong to an initialized table type");
# Test 49 got: "" (t/TableType.t at line 182)
#    Expected: "Triceps::TableType::findSubIndexById: no nested index with type id 'IT_ROOT' (0)"
#  t/TableType.t line 182 is: ok($! . "", "Triceps::TableType::findSubIndexById: no nested index with type id 'IT_ROOT' (0)");
# Test 51 got: "" (t/TableType.t at line 186)
#    Expected: "Triceps::TableType::findSubIndexById: no nested index with type id '???' (999)"
#  t/TableType.t line 186 is: ok($! . "", "Triceps::TableType::findSubIndexById: no nested index with type id '???' (999)");
# Test 53 got: "" (t/TableType.t at line 190)
#    Expected: "Triceps::TableType::findSubIndexById: unknown IndexId string 'xxx', if integer was meant, it has to be cast"
#  t/TableType.t line 190 is: ok($! . "", "Triceps::TableType::findSubIndexById: unknown IndexId string 'xxx', if integer was meant, it has to be cast");
# Test 75 got: "" (t/TableType.t at line 346)
#    Expected: "Triceps::TableType::addSubIndex: table is already initialized, can not add indexes any more"
#  t/TableType.t line 346 is: ok($! . "", "Triceps::TableType::addSubIndex: table is already initialized, can not add indexes any more");
t/TableType.t ........... 
Failed 6/75 subtests 
# Test 42 got: "" (t/Tray.t at line 167)
#    Expected: "Triceps::Unit::makeTray: argument 3 is not a blessed SV reference to Rowop"
#  t/Tray.t line 167 is: ok($! . "", "Triceps::Unit::makeTray: argument 3 is not a blessed SV reference to Rowop");
# Test 44 got: "" (t/Tray.t at line 170)
#    Expected: "Triceps::Unit::makeTray: argument 3 has an incorrect magic for Rowop"
#  t/Tray.t line 170 is: ok($! . "", "Triceps::Unit::makeTray: argument 3 has an incorrect magic for Rowop");
# Test 46 got: "" (t/Tray.t at line 173)
#    Expected: "Triceps::Unit::makeTray: argument 1 is not a blessed SV reference to Rowop"
#  t/Tray.t line 173 is: ok($! . "", "Triceps::Unit::makeTray: argument 1 is not a blessed SV reference to Rowop");
# Test 48 got: "" (t/Tray.t at line 176)
#    Expected: "Triceps::Unit::makeTray: argument 1 is a Rowop for label tab2.in from a wrong unit u2"
#  t/Tray.t line 176 is: ok($! . "", "Triceps::Unit::makeTray: argument 1 is a Rowop for label tab2.in from a wrong unit u2");
# Test 50 got: "" (t/Tray.t at line 181)
#    Expected: "Triceps::Tray::push: argument 3 is not a blessed SV reference to Rowop"
#  t/Tray.t line 181 is: ok($! . "", "Triceps::Tray::push: argument 3 is not a blessed SV reference to Rowop");
# Test 52 got: "" (t/Tray.t at line 184)
#    Expected: "Triceps::Tray::push: argument 3 has an incorrect magic for Rowop"
#  t/Tray.t line 184 is: ok($! . "", "Triceps::Tray::push: argument 3 has an incorrect magic for Rowop");
# Test 54 got: "" (t/Tray.t at line 187)
#    Expected: "Triceps::Tray::push: argument 1 is not a blessed SV reference to Rowop"
#  t/Tray.t line 187 is: ok($! . "", "Triceps::Tray::push: argument 1 is not a blessed SV reference to Rowop");
# Test 56 got: "" (t/Tray.t at line 190)
#    Expected: "Triceps::Tray::push: argument 1 is a Rowop for label tab2.in from a wrong unit u2"
#  t/Tray.t line 190 is: ok($! . "", "Triceps::Tray::push: argument 1 is a Rowop for label tab2.in from a wrong unit u2");
t/Tray.t ................ 
Failed 8/56 subtests 
t/Triceps.t ............. ok
# Test 14 got: "" (t/Unit.t at line 82)
#    Expected: "Triceps::Unit::makeTable: table type was not successfully initialized"
#  t/Unit.t line 82 is: ok($! . "", "Triceps::Unit::makeTable: table type was not successfully initialized");
# Test 23 got: "" (t/Unit.t at line 111)
#    Expected: "Triceps::Unit::makeTable: unknown enqueuing mode string '0', if integer was meant, it has to be cast"
#  t/Unit.t line 111 is: ok($! . "", "Triceps::Unit::makeTable: unknown enqueuing mode string '0', if integer was meant, it has to be cast");
# Test 25 got: "" (t/Unit.t at line 115)
#    Expected: "Triceps::Unit::makeTable: unknown enqueuing mode integer 20"
#  t/Unit.t line 115 is: ok($! . "", "Triceps::Unit::makeTable: unknown enqueuing mode integer 20");
t/Unit.t ................ 
Failed 3/143 subtests 
# Test 6 got: "" (t/UnitTracer.t at line 40)
#   Expected: "Usage: Triceps::UnitTracerStringName::new(CLASS, optionName, optionValue, ...), option names and values must go in pairs"
#  t/UnitTracer.t line 40 is: ok($! . "", "Usage: Triceps::UnitTracerStringName::new(CLASS, optionName, optionValue, ...), option names and values must go in pairs");
# Test 8 got: "" (t/UnitTracer.t at line 44)
#   Expected: "Triceps::UnitTracerStringName::new: unknown option 'unknown'"
#  t/UnitTracer.t line 44 is: ok($! . "", "Triceps::UnitTracerStringName::new: unknown option 'unknown'");
t/UnitTracer.t .......... 
Failed 2/14 subtests 
t/xAgg.t ................ ok
t/xClear.t .............. ok
# Failed test 16 in t/xCollapse.t at line 510
#  t/xCollapse.t line 510 is: ok($@ =~ /^Collapse table type creation error for dataset 'idata':
t/xCollapse.t ........... 
Failed 1/16 subtests 
t/xHelloTable.t ......... ok
t/xHelloWorld.t ......... ok
t/xJoin.t ............... ok
t/xQuery.t .............. ok
t/xRunAnywhere.t ........ ok
t/xSelfJoin.t ........... ok
# Failed test 55 in t/xSimpleAggregator.t at line 902
#  t/xSimpleAggregator.t line 902 is: ok($@ =~ /^MySimpleAggregator::make: invalid result row type definition: Triceps::RowType::new: field 'symbol' string array type is not supported/);
t/xSimpleAggregator.t ... 
Failed 1/66 subtests 
t/xSnippets.t ........... ok
t/xTrafficAgg.t ......... ok
t/xVwap.t ............... ok
t/xWindow.t ............. ok

Test Summary Report
-------------------
t/AggregatorType.t    (Wstat: 0 Tests: 55 Failed: 3)
  Failed tests:  9, 11, 13
t/Collapse.t          (Wstat: 0 Tests: 20 Failed: 1)
  Failed test:  18
t/Fields.t            (Wstat: 0 Tests: 45 Failed: 1)
  Failed test:  34
t/IndexType.t         (Wstat: 0 Tests: 98 Failed: 13)
  Failed tests:  6, 8, 10, 12, 14, 16, 18, 27, 29, 72, 81
                83, 85
t/Label.t             (Wstat: 0 Tests: 49 Failed: 2)
  Failed tests:  29, 37
t/makeRow.t           (Wstat: 0 Tests: 37 Failed: 11)
  Failed tests:  12, 14, 16, 19, 21, 23, 28, 30, 33, 35
                37
t/Row.t               (Wstat: 0 Tests: 77 Failed: 5)
  Failed tests:  50, 52, 55, 58, 66
t/Rowop.t             (Wstat: 0 Tests: 80 Failed: 4)
  Failed tests:  19, 23, 25, 29
t/RowType.t           (Wstat: 0 Tests: 41 Failed: 6)
  Failed tests:  13, 15, 17, 19, 21, 40
t/SimpleAggregator.t  (Wstat: 0 Tests: 71 Failed: 1)
  Failed test:  55
t/SortedIndexType.t   (Wstat: 0 Tests: 124 Failed: 1)
  Failed test:  96
t/Table.t             (Wstat: 0 Tests: 207 Failed: 3)
  Failed tests:  42, 48, 50
t/TableType.t         (Wstat: 0 Tests: 75 Failed: 6)
  Failed tests:  11, 42, 49, 51, 53, 75
t/Tray.t              (Wstat: 0 Tests: 56 Failed: 8)
  Failed tests:  42, 44, 46, 48, 50, 52, 54, 56
t/Unit.t              (Wstat: 0 Tests: 143 Failed: 3)
  Failed tests:  14, 23, 25
t/UnitTracer.t        (Wstat: 0 Tests: 14 Failed: 2)
  Failed tests:  6, 8
t/xCollapse.t         (Wstat: 0 Tests: 16 Failed: 1)
  Failed test:  16
t/xSimpleAggregator.t (Wstat: 0 Tests: 66 Failed: 1)
  Failed test:  55
Files=37, Tests=2107,  6 wallclock secs ( 0.92 usr  0.19 sys +  4.44 cusr  0.72 csys =  6.27 CPU)
Result: FAIL
Failed 18/37 test programs. 72/2107 subtests failed.
make[1]: *** [test_dynamic] Erreur 255
make[1]: quittant le répertoire « /home/sdeseille/triceps/triceps-1.0.1/perl/Triceps »
make: *** [test] Erreur 2
