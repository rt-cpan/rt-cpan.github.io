sub g_ascii_strcasecmp
{
  # pure perl re-implementation of g_ascii_strcasecmp
  my $s1 = shift;
  my $s2 = shift;
  no locale;
  print "$s1, $s2 \n";
  $s1=~s/([A-Z])/lc($1)/ge;
  $s2=~s/([A-Z])/lc($1)/ge;
  while (length($s1) || length($s2))
  {
    return -1 if length($s1)==0;
    return 1 if length($s2)==0;
    $s1=~s/^(.)//;
    my $c1 = $1;
    $s2=~s/^(.)//;
    my $c2 = $1;
    return ord($c1)-ord($c2) if $c1 ne $c2;
    
  }
  return 0;
}

sub strcmp
{
  # pure perl re-implementation of strcmp
  my $s1 = shift;
  my $s2 = shift;
  no locale;
  while (length($s1) || length($s2))
  {
    return -1 if length($s1)==0;
    return 1 if length($s2)==0;
    $s1=~s/^(.)//;
    my $c1 = $1;
    $s2=~s/^(.)//;
    my $c2 = $1;
    return ord($c1)-ord($c2) if $c1 ne $c2;
  }
  return 0;
}

sub stardict_strcmp
{
  # pure perl re-implementation of stardict_strcmp
  my $s1 = shift;
  my $s2 = shift;
  
  my $i = g_ascii_strcasecmp($s1, $s2);
  return $i if $i;
  return strcmp($s1,$s2);
}


