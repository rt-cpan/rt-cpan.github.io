commit 8e270331a8ac1d7e6d84c7277de4ce5fd7c3e411
Author: Daniel Kahn Gillmor <dkg@fifthhorseman.net>
Date:   Tue Dec 21 00:41:43 2010 -0500

    parse and return the PGPExtension

diff --git a/lib/Crypt/X509.pm b/lib/Crypt/X509.pm
index 86d521e..22231a6 100644
--- a/lib/Crypt/X509.pm
+++ b/lib/Crypt/X509.pm
@@ -1194,6 +1194,49 @@ sub SubjectInfoAccess {
 	}
 	return undef;
 }
+
+
+=head2 PGPExtension
+
+Returns the creation timestamp of the corresponding OpenPGP key.
+(see http://www.imc.org/ietf-openpgp/mail-archive/msg05320.html)
+
+		print "PGPExtension: ";
+		if ( defined $decoded->PGPExtension ) {
+			my $creationtime = $decoded->PGPExtension;
+			printf "\n\tcorresponding OpenPGP Creation Time: ", $creationtime, "\n";
+                }
+
+	Example Output:
+		PGPExtension:
+                    whatever
+
+=cut back
+
+# PGPExtension (another extension)
+sub PGPExtension {
+	my $self = shift;
+	my $extension;
+	my $extensions = $self->{'tbsCertificate'}->{'extensions'};
+	if ( !defined $extensions ) { return undef; }
+	;    # no extensions in certificate
+	for $extension ( @{$extensions} ) {
+		if ( $extension->{'extnID'} eq '1.3.6.1.4.1.3401.8.1.1' ) {    # OID for PGPExtension
+			my $parser              = _init('PGPExtension');                # get a parser for this
+			my $pgpextension = $parser->decode( $extension->{'extnValue'} );    # decode the value
+                        if ($pgpextension->{version} != 0) {
+                          $self->{"_error"} = sprintf("got PGPExtension version %d. We only know how to deal with v1 (0)", $pgpextension->{version});
+                        } else {
+                          foreach my $timetype ('generalTime', 'utcTime') {
+                            return $pgpextension->{keyCreation}->{$timetype}
+                              if exists $pgpextension->{keyCreation}->{$timetype};
+                          }
+                        }
+		}
+	}
+	return undef;
+}
+
 #######################################################################
 # internal functions
 #######################################################################
@@ -1527,7 +1570,6 @@ KeyPurposeId ::= OBJECT IDENTIFIER
 -- id-kp-ipsecUser       OBJECT IDENTIFIER ::= { id-kp 7 }
 -- id-kp-timeStamping    OBJECT IDENTIFIER ::= { id-kp 8 }
 
-
 -- authority info access
 
 -- id-pe-authorityInfoAccess OBJECT IDENTIFIER ::= { id-pe 1 }
@@ -1545,6 +1587,13 @@ AccessDescription  ::=  SEQUENCE {
 
 SubjectInfoAccessSyntax  ::=
         SEQUENCE OF AccessDescription --SIZE (1..MAX) OF AccessDescription
+
+-- pgp creation time
+
+PGPExtension ::= SEQUENCE {
+       version             Version, -- DEFAULT v1(0)
+       keyCreation         Time
+}
 ASN1
 	}
 	my $self = $asn->find($what);
diff --git a/t/Crypt-X509.t b/t/Crypt-X509.t
index 8cd1e96..f0dc117 100644
--- a/t/Crypt-X509.t
+++ b/t/Crypt-X509.t
@@ -1,6 +1,6 @@
 # Before `make install' is performed this script should be runnable with
 # `make test'. After `make install' it should work as `perl Convert-ASN1-X509.t'
-use Test::More tests => 59;
+use Test::More tests => 62;
 BEGIN { use_ok('Crypt::X509') }
 $cert = loadcert('t/verisign.der');
 is( length $cert, 774, 'certificate file loaded' );
@@ -146,6 +146,13 @@ $cert = loadcert('t/dsacert.der');
 $decoded = Crypt::X509->new( cert => $cert );
 is( $decoded->error, undef, 'decode of dsacert.der successful' );
 
+$cert = loadcert('t/pgpextension.der');
+$decoded = Crypt::X509->new( cert => $cert );
+is ( $decoded->error, undef, 'decode of pgpextension.der successful' );
+is ( $decoded->SigHashAlg, 'SHA512', 'Detecting SHA512 correctly' );
+$pgpe = $decoded->PGPExtension;
+is ( $pgpe, 1292907852, 'creation time matched' );
+
 exit();
 
 sub loadcert {
