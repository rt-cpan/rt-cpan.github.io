diff -ru Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/place_order.pl Finance-InteractiveBrokers-TWS-v0.0.8/example/place_order.pl
--- Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/place_order.pl	2006-09-25 10:30:19.000000000 -0400
+++ Finance-InteractiveBrokers-TWS-v0.0.8/example/place_order.pl	2008-02-01 23:23:07.000000000 -0500
@@ -34,7 +34,7 @@
 
 $callback->{tws} = $tws;
 
-ok($tws->eConnect(pt, 7497, 0) >=1, 'Connected');
+ok($tws->eConnect('localhost', 7496, 0) >=1, 'Connected');
 
 my $contract = $tws->Contract->new();
 $contract->{m_symbol} = 'F';
diff -ru Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/reqAccountUpdates.pl Finance-InteractiveBrokers-TWS-v0.0.8/example/reqAccountUpdates.pl
--- Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/reqAccountUpdates.pl	2006-09-25 10:30:19.000000000 -0400
+++ Finance-InteractiveBrokers-TWS-v0.0.8/example/reqAccountUpdates.pl	2008-02-01 23:23:16.000000000 -0500
@@ -30,7 +30,7 @@
 
 $callback->{tws} = $tws;
 
-ok($tws->eConnect(pt, 7497, 0) >=1, 'Connected');
+ok($tws->eConnect('localhost', 7496, 0) >=1, 'Connected');
 
 my $order_id = $$;
 
diff -ru Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/reqAllOpenOrders.pl Finance-InteractiveBrokers-TWS-v0.0.8/example/reqAllOpenOrders.pl
--- Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/reqAllOpenOrders.pl	2006-09-25 10:30:19.000000000 -0400
+++ Finance-InteractiveBrokers-TWS-v0.0.8/example/reqAllOpenOrders.pl	2008-02-01 22:53:50.000000000 -0500
@@ -31,7 +31,7 @@
 
 $callback->{tws} = $tws;
 
-ok($tws->eConnect(pt, 7497, 0) >=1, 'Connected');
+ok($tws->eConnect('localhost', 7496, 0) >=1, 'Connected');
 
 $tws->reqOpenOrders();
 
diff -ru Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/reqAutoOpenOrders.pl Finance-InteractiveBrokers-TWS-v0.0.8/example/reqAutoOpenOrders.pl
--- Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/reqAutoOpenOrders.pl	2006-09-25 10:30:19.000000000 -0400
+++ Finance-InteractiveBrokers-TWS-v0.0.8/example/reqAutoOpenOrders.pl	2008-02-01 23:23:27.000000000 -0500
@@ -30,7 +30,7 @@
 
 $callback->{tws} = $tws;
 
-ok($tws->eConnect(pt, 7497,0) >=1, 'Connected');
+ok($tws->eConnect('localhost', 7496,0) >=1, 'Connected');
 
 $tws->reqAutoOpenOrders("1");
 
diff -ru Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/reqContractDetails.pl Finance-InteractiveBrokers-TWS-v0.0.8/example/reqContractDetails.pl
--- Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/reqContractDetails.pl	2006-09-25 10:30:19.000000000 -0400
+++ Finance-InteractiveBrokers-TWS-v0.0.8/example/reqContractDetails.pl	2008-02-01 23:22:07.000000000 -0500
@@ -31,7 +31,7 @@
 
 $callback->{tws} = $tws;
 
-ok($tws->eConnect(pt, 7497, 0) >=1, 'Connected');
+ok($tws->eConnect('localhost', 7496, 0) >=1, 'Connected');
 
 my $contract_id = $$;
 
diff -ru Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/reqExecutions.pl Finance-InteractiveBrokers-TWS-v0.0.8/example/reqExecutions.pl
--- Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/reqExecutions.pl	2006-09-25 10:30:19.000000000 -0400
+++ Finance-InteractiveBrokers-TWS-v0.0.8/example/reqExecutions.pl	2008-02-01 23:23:38.000000000 -0500
@@ -30,7 +30,7 @@
 
 $callback->{tws} = $tws;
 
-ok($tws->eConnect(pt, 7497, 0) >=1, 'Connected');
+ok($tws->eConnect('localhost', 7496, 0) >=1, 'Connected');
 
 my $execution_filter = $tws->ExecutionFilter->new();
 
diff -ru Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/reqMktData.pl Finance-InteractiveBrokers-TWS-v0.0.8/example/reqMktData.pl
--- Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/reqMktData.pl	2006-09-25 10:30:19.000000000 -0400
+++ Finance-InteractiveBrokers-TWS-v0.0.8/example/reqMktData.pl	2008-02-03 22:04:12.000000000 -0500
@@ -22,6 +22,7 @@
 
 package main;
 
+use lib '/home/martin/IBJts/my_api_src/Finance-InteractiveBrokers-TWS-v0.0.8/lib';
 use Finance::InteractiveBrokers::TWS;
 use Test::More tests => 1;
 
@@ -31,18 +32,18 @@
 
 $callback->{tws} = $tws;
 
-ok($tws->eConnect(pt, 7497, 0) >=1, 'Connected');
+ok($tws->eConnect('localhost', 7496, 0) >=1, 'Connected');
 
 my $contract_id = $$;
 
 #   Create a contract
 #
 my $contract = $tws->Contract->new();
-$contract->{m_symbol} = 'DELL';
-$contract->{m_secType} = 'STK';
-$contract->{m_exchange} = 'SMART';
+$contract->{m_symbol} = 'ES';
+$contract->{m_secType} = 'FUT';
+$contract->{m_exchange} = 'GLOBEX';
 
-$tws->reqMktData($contract_id, $contract);
+$tws->reqMktData($contract_id, $contract, undef, undef);
 
 while (1) {
     $tws->process_messages(3);
diff -ru Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/reqMktDepth.pl Finance-InteractiveBrokers-TWS-v0.0.8/example/reqMktDepth.pl
--- Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/reqMktDepth.pl	2006-09-25 10:30:19.000000000 -0400
+++ Finance-InteractiveBrokers-TWS-v0.0.8/example/reqMktDepth.pl	2008-02-01 23:23:54.000000000 -0500
@@ -35,7 +35,7 @@
 
 $callback->{tws} = $tws;
 
-ok($tws->eConnect(pt, 7497, 0) >=1, 'Connected');
+ok($tws->eConnect('localhost', 7496, 0) >=1, 'Connected');
 
 my $contract_id = $$;
 
diff -ru Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/reqOpenOrders.pl Finance-InteractiveBrokers-TWS-v0.0.8/example/reqOpenOrders.pl
--- Finance-InteractiveBrokers-TWS-v0.0.8.orig/example/reqOpenOrders.pl	2006-09-25 10:30:19.000000000 -0400
+++ Finance-InteractiveBrokers-TWS-v0.0.8/example/reqOpenOrders.pl	2008-02-01 23:24:01.000000000 -0500
@@ -31,7 +31,7 @@
 
 $callback->{tws} = $tws;
 
-ok($tws->eConnect(pt, 7497, 0) >=1, 'Connected');
+ok($tws->eConnect('localhost', 7496, 0) >=1, 'Connected');
 
 my $order_id = $$;
 
diff -ru Finance-InteractiveBrokers-TWS-v0.0.8.orig/lib/Finance/InteractiveBrokers/tws.conf Finance-InteractiveBrokers-TWS-v0.0.8/lib/Finance/InteractiveBrokers/tws.conf
--- Finance-InteractiveBrokers-TWS-v0.0.8.orig/lib/Finance/InteractiveBrokers/tws.conf	2006-09-25 10:30:19.000000000 -0400
+++ Finance-InteractiveBrokers-TWS-v0.0.8/lib/Finance/InteractiveBrokers/tws.conf	2008-02-01 23:13:46.000000000 -0500
@@ -53,8 +53,28 @@
 
 tickOptionComputation tickerId
 tickOptionComputation field
-tickOptionComputation impliedVolatility
+tickOptionComputation impliedVol
 tickOptionComputation delta
+tickOptionComputation modelPrice
+tickOptionComputation pvDividend
+
+tickGeneric tickerId
+tickGeneric tickType
+tickGeneric value
+
+tickString tickerId
+tickString tickType
+tickString value
+
+tickEFP tickerId
+tickEFP tickType
+tickEFP basisPoints
+tickEFP formattedBasisPoints
+tickEFP impliedFuture
+tickEFP holdDays
+tickEFP futureExpiry
+tickEFP dividendImpact
+tickEFP dividendsToExpiry
 
 orderStatus orderId 
 orderStatus status 
@@ -65,10 +85,12 @@
 orderStatus parentId 
 orderStatus lastFillPrice
 orderStatus clientId
+orderStatus whyHeld
 
 openOrder orderId 
 openOrder contract 
 openOrder order
+openOrder orderState
 
 connectionClosed
 
@@ -134,6 +156,7 @@
 historicalData low 
 historicalData close 
 historicalData volume 
+historicalData count
 historicalData WAP 
 historicalData hasGaps
 
@@ -145,6 +168,21 @@
 scannerData distance 
 scannerData benchmark 
 scannerData projection
+scannerData legsStr
+
+scannerDataEnd reqId 
+
+realtimeBar reqId
+realtimeBar time
+realtimeBar open
+realtimeBar high
+realtimeBar low
+realtimeBar close
+realtimeBar volume
+realtimeBar wap
+realtimeBar count
+
+currentTime time
 
 </ewrapper>
 
@@ -156,27 +194,20 @@
 
 #   Contact Attributes
 #
-contract m_symbol 
-contract m_secType 
-contract m_expiry 
-contract m_strike 
-contract m_right 
+contract m_conId
+contract m_symbol
+contract m_secType
+contract m_expiry
+contract m_strike
+contract m_right
 contract m_multiplier
-contract m_exchange 
-contract m_currency 
-contract m_localSymbol 
+contract m_exchange
+contract m_currency
+contract m_localSymbol
 contract m_primaryExch
-contract m_cusip
-contract m_ratings
-contract m_descAppend
-contract m_bondType
-contract m_couponType
-contract m_callable
-contract m_putable
-contract m_coupon
-contract m_convertible
-contract m_maturity
-contract m_issueDate
+contract m_includeExpired
+contract m_comboLegsDescrip
+contract m_comboLegs
 
 
 
@@ -247,6 +278,16 @@
 order m_stockRangeLower
 order m_stockRangeUpper
 
+orderstate m_status
+orderstate m_initMargin
+orderstate m_maintMargin
+orderstate m_equityWithLoan
+orderstate m_commission
+orderstate m_minCommission
+orderstate m_maxCommission
+orderstate m_commissionCurrency
+orderstate m_warningText
+
 scannersubscription m_instrument
 scannersubscription m_locationCode
 scannersubscription m_scanCode
@@ -276,16 +317,28 @@
 contractdetails m_summary
 contractdetails m_marketName
 contractdetails m_tradingClass
-contractdetails m_conid
 contractdetails m_minTick
-contractdetails m_multiplier
 contractdetails m_priceMagnifier
 contractdetails m_orderTypes
 contractdetails m_validExchanges
+contractdetails m_cusip
+contractdetails m_ratings
+contractdetails m_descAppend
+contractdetails m_bondType
+contractdetails m_couponType
+contractdetails m_callable
+contractdetails m_putable
+contractdetails m_coupon
+contractdetails m_convertible
+contractdetails m_maturity
+contractdetails m_issueDate
+contractdetails m_nextOptionDate
+contractdetails m_nextOptionType
+contractdetails m_nextOptionPartial
+contractdetails m_notes
 
 combolegs m_conId
 combolegs m_ratio
 combolegs m_action
 combolegs m_exchange
 combolegs m_openClose
-
diff -ru Finance-InteractiveBrokers-TWS-v0.0.8.orig/lib/Finance/InteractiveBrokers/TWS.pm Finance-InteractiveBrokers-TWS-v0.0.8/lib/Finance/InteractiveBrokers/TWS.pm
--- Finance-InteractiveBrokers-TWS-v0.0.8.orig/lib/Finance/InteractiveBrokers/TWS.pm	2006-09-25 10:30:19.000000000 -0400
+++ Finance-InteractiveBrokers-TWS-v0.0.8/lib/Finance/InteractiveBrokers/TWS.pm	2008-02-03 23:16:32.000000000 -0500
@@ -36,6 +36,7 @@
               'com.ib.client.Execution',
               'com.ib.client.Order',
               'com.ib.client.ScannerSubscription',
+              'com.ib.client.TickType',
              ],
     # complile Java in specific directory
     DIRECTORY => $comp_dir,  
@@ -92,8 +93,10 @@
     pop @dirs;
     push @dirs, "tws.conf";
     my $conf = File::Spec->catdir( @dirs ); 
-    my %config = ParseConfig(-ConfigFile => $conf);
-    
+    #my %config = ParseConfig(-ConfigFile => $conf);
+    my $c = Config::General->new($conf);
+    my %config = $c->getall;
+
     return \%config;
 }
 
@@ -205,6 +208,10 @@
     return __PACKAGE__.'::com::ib::client::ScannerSubscription';
 }
 
+sub TickType {
+    return __PACKAGE__.'::com::ib::client::TickType';
+}
+
 #   Dump the message
 sub dump_event {
 
@@ -254,9 +261,20 @@
     my $object_type = lc ref $object;
     $object_type =~ s/^.*:://;
 
-    my @keys = @{$self->get_config->{$object_type}};
+    # used for comboLegs - java.util.Vector
+    if ($object_type eq 'vector') {
+      my @items;
+      my $size = $object->size;
+      for (my $i = 0; $i < $size; $i++) {
+	my $item = $object->elementAt($i);
+	push @items, (ref $item ? $self->dump_java_object($item) : $item);
+      }
+      return \@items;
+    }
+
+    my $keys_ref = $self->get_config->{$object_type} or warn "no config for object type $object_type";
 
-    return $self->_explode($object, \@keys);
+    return $self->_explode($object, $keys_ref);
 }
 
 #   Loop thru all the keys in the java object and write it to a hash, for the
@@ -320,39 +338,86 @@
     }
    
     public void tickOptionComputation( int tickerId, int field, 
-                                       double impliedVolatility, double delta)
+                                       double impliedVol, double delta,
+	                               double modelPrice, double pvDividend)
     {
         try {
             perlobj.InvokeMethod("tickOptionComputation", new Object [] {
-                    tickerId, field, impliedVolatility, delta
+                    tickerId, field, impliedVol, delta, modelPrice, pvDividend
             });
         }
         catch (InlineJavaPerlException pe){ }
         catch (InlineJavaException pe) { pe.printStackTrace() ;}
     }
-   
 
+    public void tickGeneric(int tickerId, int tickType, double value)
+    {
+        try {
+            perlobj.InvokeMethod("tickGeneric", new Object [] {
+                    tickerId, tickType, value
+            });
+        }
+        catch (InlineJavaPerlException pe){ }
+        catch (InlineJavaException pe) { pe.printStackTrace() ;}
+    }
 
- 
+    public void tickString(int tickerId, int tickType, String value)
+    {
+        try {
+            perlobj.InvokeMethod("tickString", new Object [] {
+                    tickerId, tickType, value
+            });
+        }
+        catch (InlineJavaPerlException pe){ }
+        catch (InlineJavaException pe) { pe.printStackTrace() ;}
+    }
+
+    public void tickEFP(int tickerId, int tickType, double basisPoints,
+			String formattedBasisPoints, double impliedFuture, int holdDays,
+			String futureExpiry, double dividendImpact, double dividendsToExpiry)
+    {
+        try {
+            perlobj.InvokeMethod("tickString", new Object [] {
+	        tickerId, tickType, basisPoints,
+		formattedBasisPoints, impliedFuture, holdDays,
+		futureExpiry, dividendImpact, dividendsToExpiry
+            });
+        }
+        catch (InlineJavaPerlException pe){ }
+        catch (InlineJavaException pe) { pe.printStackTrace() ;}
+    }
+   
     public void orderStatus(int orderId, String status, int filled, 
                             int remaining, double avgFillPrice, int permId, 
-                            int parentId, double lastFillPrice, int clientId) 
+                            int parentId, double lastFillPrice, int clientId,
+			    String whyHeld) 
     {
         try {
             perlobj.InvokeMethod("orderStatus", new Object [] {
                 orderId, status, filled, remaining, avgFillPrice,
-                permId, parentId, lastFillPrice, clientId
+                permId, parentId, lastFillPrice, clientId, whyHeld
             });
         }
         catch (InlineJavaPerlException pe){ }
         catch (InlineJavaException pe) { pe.printStackTrace() ;}
     }
-    
-    public void openOrder(int orderId, Contract contract, Order order) 
+
+    public void openOrder(int orderId, Contract contract, Order order, OrderState orderState) 
     {
         try {
             perlobj.InvokeMethod("openOrder", new Object [] {
-                orderId, contract, order
+                orderId, contract, order, orderState
+            });
+        }
+        catch (InlineJavaPerlException pe){ }
+        catch (InlineJavaException pe) { pe.printStackTrace() ;}
+    }
+    
+    public void error(Exception e) 
+    {
+        try {
+            perlobj.InvokeMethod("error", new Object [] {
+                e
             });
         }
         catch (InlineJavaPerlException pe){ }
@@ -537,12 +602,12 @@
 	
     public void historicalData(int reqId, String date, double open, 
                                double high, double low, double close, 
-                               int volume, double WAP, boolean hasGaps) 
+                               int volume, int count, double WAP, boolean hasGaps) 
     {
         try {
             perlobj.InvokeMethod("historicalData", new Object [] {
                 reqId, date, open, high, low,
-                close, volume, WAP, hasGaps
+                close, volume, count, WAP, hasGaps
             });
         }
         catch (InlineJavaPerlException pe){ }
@@ -561,16 +626,48 @@
     
     public void scannerData(int reqId, int rank, 
                             ContractDetails contractDetails, String distance, 
-                            String benchmark, String projection) {
+                            String benchmark, String projection, String legsStr) {
         try {
             perlobj.InvokeMethod("scannerData", new Object [] {
                 reqId, rank, contractDetails, distance,
-                benchmark, projection
+                benchmark, projection, legsStr
             });
         }
         catch (InlineJavaPerlException pe){ }
         catch (InlineJavaException pe) { pe.printStackTrace() ;}
     }
+
+    public void scannerDataEnd(int reqId) {
+        try {
+            perlobj.InvokeMethod("scannerDataEnd", new Object [] {
+                reqId
+            });
+        }
+        catch (InlineJavaPerlException pe){ }
+        catch (InlineJavaException pe) { pe.printStackTrace() ;}
+    }
+
+    public void realtimeBar(int reqId, long time,
+			    double open, double high, double low, double close,
+			    long volume, double wap, int count) {
+        try {
+            perlobj.InvokeMethod("realtimeBar", new Object [] {
+                reqId, time, open, high,low, close, volume, wap, count
+            });
+	}
+        catch (InlineJavaPerlException pe){ }
+        catch (InlineJavaException pe) { pe.printStackTrace() ;}
+    }
+
+    public void currentTime(long time) {
+        try {
+	    perlobj.InvokeMethod("currentTime", new Object [] {
+	        time
+	    });
+	}
+	catch (InlineJavaPerlException pe){ }
+        catch (InlineJavaException pe) { pe.printStackTrace() ;}
+    }
 }
 
 __END__
diff -ru Finance-InteractiveBrokers-TWS-v0.0.8.orig/t/01.option_chain.t Finance-InteractiveBrokers-TWS-v0.0.8/t/01.option_chain.t
--- Finance-InteractiveBrokers-TWS-v0.0.8.orig/t/01.option_chain.t	2006-09-25 10:30:18.000000000 -0400
+++ Finance-InteractiveBrokers-TWS-v0.0.8/t/01.option_chain.t	2008-02-01 22:42:56.000000000 -0500
@@ -27,7 +27,7 @@
 my $cb = Local::Opt_Chain->new( options => [] );
 
 my $tws = Finance::InteractiveBrokers::TWS->new($cb);
-$tws->eConnect("pt");
+$tws->eConnect;
 
 my $contract = $tws->Contract->new();
 $contract->{m_symbol} = 'IBM';
