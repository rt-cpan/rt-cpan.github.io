Index: libnet-dns-perl/lib/Net/DNS/FAQ.pod
===================================================================
--- libnet-dns-perl.orig/lib/Net/DNS/FAQ.pod	2010-03-15 12:53:18.000000000 +0100
+++ libnet-dns-perl/lib/Net/DNS/FAQ.pod	2010-03-15 12:53:35.000000000 +0100
@@ -24,7 +24,7 @@
 
 =head2 Where can I find Test::More?
 
-Test::More is part of the Test-Simple packge, by Michael G Schwern.
+Test::More is part of the Test-Simple package, by Michael G Schwern.
 You should be able to find the distrubution here:
 
 	http://search.cpan.org/dist/Test-Simple/
Index: libnet-dns-perl/lib/Net/DNS/Nameserver.pm
===================================================================
--- libnet-dns-perl.orig/lib/Net/DNS/Nameserver.pm	2010-03-15 12:53:47.000000000 +0100
+++ libnet-dns-perl/lib/Net/DNS/Nameserver.pm	2010-03-15 12:54:23.000000000 +0100
@@ -567,7 +567,7 @@
 
 The ReplyHandler subroutine is passed the query name, query class,
 query type and optionally an argument containing the peerhost, the
-incoming query, and the name of the incomming socket (sockethost). It
+incoming query, and the name of the incoming socket (sockethost). It
 must return the response code and references to the answer, authority,
 and additional sections of the response.  Common response codes are:
 
@@ -714,7 +714,7 @@
 more than one IP-address (besides localhost - any experience with IPv6
 complications here, would be nice). If this is a problem for you, a
 work-around would be to not listen to INADDR_ANY but to specify each
-address that you want this module to listen on. A seperate set of
+address that you want this module to listen on. A separate set of
 sockets will then be created for each IP-address.
 
 =head1 COPYRIGHT
Index: libnet-dns-perl/lib/Net/DNS/Resolver.pm
===================================================================
--- libnet-dns-perl.orig/lib/Net/DNS/Resolver.pm	2010-03-15 12:54:56.000000000 +0100
+++ libnet-dns-perl/lib/Net/DNS/Resolver.pm	2010-03-15 12:55:16.000000000 +0100
@@ -595,7 +595,7 @@
 
 Setting calling the dnssec method with a non-zero value will set the
 UDP packet size to the default value of 2048. If that is to small or
-to big for your environement you should call the udppacketsize()
+to big for your environment you should call the udppacketsize()
 method immeditatly after.
 
    $res->dnssec(1);    # turns on DNSSEC and sets udp packetsize to 2048
@@ -637,7 +637,7 @@
     $res->udppacketsize(2048);
 
 udppacketsize will set or get the packet size. If set to a value greater than 
-Net::DNS::PACKETSZ() an EDNS extension will be added indicating suppport for MTU path 
+Net::DNS::PACKETSZ() an EDNS extension will be added indicating support for MTU path 
 recovery.
 
 Default udppacketsize is Net::DNS::PACKETSZ() (512)
