diff -ruN UNIVERSAL-require-0.10.orig/Changes UNIVERSAL-require-0.10/Changes
--- UNIVERSAL-require-0.10.orig/Changes	2005-10-11 05:50:10.000000000 +0100
+++ UNIVERSAL-require-0.10/Changes	2006-08-14 19:18:22.000000000 +0100
@@ -1,3 +1,7 @@
+0.11  Mon Aug 14 19:17:00 GMT 2006
+    * use UNIVERSAL::require 'fatal' now makes use() and require()
+      fatal if they module is not found.
+
 0.10  Mon Oct 10 19:10:33 PDT 2005
     * Split out of UNIVERSAL-exports into its own distribution.
     * UNIVERSAL::require no longer uses eval STRING in require().  This 
diff -ruN UNIVERSAL-require-0.10.orig/MANIFEST UNIVERSAL-require-0.10/MANIFEST
--- UNIVERSAL-require-0.10.orig/MANIFEST	2005-10-11 06:02:12.000000000 +0100
+++ UNIVERSAL-require-0.10/MANIFEST	2006-08-14 19:23:58.000000000 +0100
@@ -6,4 +6,5 @@
 t/require.t
 t/taint.t
 t/use.t
+t/fatal.t
 META.yml                                 Module meta-data (added by MakeMaker)
diff -ruN UNIVERSAL-require-0.10.orig/Makefile UNIVERSAL-require-0.10/Makefile
--- UNIVERSAL-require-0.10.orig/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ UNIVERSAL-require-0.10/Makefile	2006-08-14 19:23:44.000000000 +0100
@@ -0,0 +1,728 @@
+# This Makefile is for the UNIVERSAL::require extension to perl.
+#
+# It was generated automatically by MakeMaker version
+# 6.17 (Revision: 1.133) from the contents of
+# Makefile.PL. Don't edit this file, edit Makefile.PL instead.
+#
+#       ANY CHANGES MADE HERE WILL BE LOST!
+#
+#   MakeMaker ARGV: ()
+#
+#   MakeMaker Parameters:
+
+#     LICENSE => q[perl]
+#     NAME => q[UNIVERSAL::require]
+#     PREREQ_PM => { Test::More=>q[0.47] }
+#     VERSION_FROM => q[lib/UNIVERSAL/require.pm]
+
+# --- MakeMaker post_initialize section:
+
+
+# --- MakeMaker const_config section:
+
+# These definitions are from config.sh (via /usr/local/lib/perl5/5.8.7/darwin-2level/Config.pm)
+
+# They may have been overridden via Makefile.PL or on the command line
+AR = ar
+CC = cc
+CCCDLFLAGS =  
+CCDLFLAGS =  
+DLEXT = bundle
+DLSRC = dl_dyld.xs
+LD = env MACOSX_DEPLOYMENT_TARGET=10.3 cc
+LDDLFLAGS =  -bundle -undefined dynamic_lookup -L/usr/local/lib
+LDFLAGS =  -L/usr/local/lib
+LIBC = /usr/lib/libc.dylib
+LIB_EXT = .a
+OBJ_EXT = .o
+OSNAME = darwin
+OSVERS = 7.9.0
+RANLIB = /usr/bin/ar ts
+SITELIBEXP = /usr/local/lib/perl5/site_perl/5.8.7
+SITEARCHEXP = /usr/local/lib/perl5/site_perl/5.8.7/darwin-2level
+SO = dylib
+EXE_EXT = 
+FULL_AR = /usr/bin/ar
+VENDORARCHEXP = 
+VENDORLIBEXP = 
+
+
+# --- MakeMaker constants section:
+AR_STATIC_ARGS = cr
+DIRFILESEP = /
+NAME = UNIVERSAL::require
+NAME_SYM = UNIVERSAL_require
+VERSION = 0.11
+VERSION_MACRO = VERSION
+VERSION_SYM = 0_11
+DEFINE_VERSION = -D$(VERSION_MACRO)=\"$(VERSION)\"
+XS_VERSION = 0.11
+XS_VERSION_MACRO = XS_VERSION
+XS_DEFINE_VERSION = -D$(XS_VERSION_MACRO)=\"$(XS_VERSION)\"
+INST_ARCHLIB = blib/arch
+INST_SCRIPT = blib/script
+INST_BIN = blib/bin
+INST_LIB = blib/lib
+INST_MAN1DIR = blib/man1
+INST_MAN3DIR = blib/man3
+MAN1EXT = 1
+MAN3EXT = 3
+INSTALLDIRS = site
+DESTDIR = 
+PREFIX = 
+PERLPREFIX = /usr/local
+SITEPREFIX = /usr/local
+VENDORPREFIX = 
+INSTALLPRIVLIB = $(PERLPREFIX)/lib/perl5/5.8.7
+DESTINSTALLPRIVLIB = $(DESTDIR)$(INSTALLPRIVLIB)
+INSTALLSITELIB = $(SITEPREFIX)/lib/perl5/site_perl/5.8.7
+DESTINSTALLSITELIB = $(DESTDIR)$(INSTALLSITELIB)
+INSTALLVENDORLIB = 
+DESTINSTALLVENDORLIB = $(DESTDIR)$(INSTALLVENDORLIB)
+INSTALLARCHLIB = $(PERLPREFIX)/lib/perl5/5.8.7/darwin-2level
+DESTINSTALLARCHLIB = $(DESTDIR)$(INSTALLARCHLIB)
+INSTALLSITEARCH = $(SITEPREFIX)/lib/perl5/site_perl/5.8.7/darwin-2level
+DESTINSTALLSITEARCH = $(DESTDIR)$(INSTALLSITEARCH)
+INSTALLVENDORARCH = 
+DESTINSTALLVENDORARCH = $(DESTDIR)$(INSTALLVENDORARCH)
+INSTALLBIN = $(PERLPREFIX)/bin
+DESTINSTALLBIN = $(DESTDIR)$(INSTALLBIN)
+INSTALLSITEBIN = $(SITEPREFIX)/bin
+DESTINSTALLSITEBIN = $(DESTDIR)$(INSTALLSITEBIN)
+INSTALLVENDORBIN = 
+DESTINSTALLVENDORBIN = $(DESTDIR)$(INSTALLVENDORBIN)
+INSTALLSCRIPT = $(PERLPREFIX)/bin
+DESTINSTALLSCRIPT = $(DESTDIR)$(INSTALLSCRIPT)
+INSTALLMAN1DIR = $(PERLPREFIX)/share/man/man1
+DESTINSTALLMAN1DIR = $(DESTDIR)$(INSTALLMAN1DIR)
+INSTALLSITEMAN1DIR = $(SITEPREFIX)/share/man/man1
+DESTINSTALLSITEMAN1DIR = $(DESTDIR)$(INSTALLSITEMAN1DIR)
+INSTALLVENDORMAN1DIR = 
+DESTINSTALLVENDORMAN1DIR = $(DESTDIR)$(INSTALLVENDORMAN1DIR)
+INSTALLMAN3DIR = $(PERLPREFIX)/share/man/man3
+DESTINSTALLMAN3DIR = $(DESTDIR)$(INSTALLMAN3DIR)
+INSTALLSITEMAN3DIR = $(SITEPREFIX)/share/man/man3
+DESTINSTALLSITEMAN3DIR = $(DESTDIR)$(INSTALLSITEMAN3DIR)
+INSTALLVENDORMAN3DIR = 
+DESTINSTALLVENDORMAN3DIR = $(DESTDIR)$(INSTALLVENDORMAN3DIR)
+PERL_LIB = /usr/local/lib/perl5/5.8.7
+PERL_ARCHLIB = /usr/local/lib/perl5/5.8.7/darwin-2level
+LIBPERL_A = libperl.a
+FIRST_MAKEFILE = Makefile
+MAKEFILE_OLD = $(FIRST_MAKEFILE).old
+MAKE_APERL_FILE = $(FIRST_MAKEFILE).aperl
+PERLMAINCC = $(CC)
+PERL_INC = /usr/local/lib/perl5/5.8.7/darwin-2level/CORE
+PERL = /usr/bin/perl
+FULLPERL = /usr/bin/perl
+ABSPERL = $(PERL)
+PERLRUN = $(PERL)
+FULLPERLRUN = $(FULLPERL)
+ABSPERLRUN = $(ABSPERL)
+PERLRUNINST = $(PERLRUN) "-I$(INST_ARCHLIB)" "-I$(INST_LIB)"
+FULLPERLRUNINST = $(FULLPERLRUN) "-I$(INST_ARCHLIB)" "-I$(INST_LIB)"
+ABSPERLRUNINST = $(ABSPERLRUN) "-I$(INST_ARCHLIB)" "-I$(INST_LIB)"
+PERL_CORE = 0
+PERM_RW = 644
+PERM_RWX = 755
+
+MAKEMAKER   = /usr/local/lib/perl5/5.8.7/ExtUtils/MakeMaker.pm
+MM_VERSION  = 6.17
+MM_REVISION = 1.133
+
+# FULLEXT = Pathname for extension directory (eg Foo/Bar/Oracle).
+# BASEEXT = Basename part of FULLEXT. May be just equal FULLEXT. (eg Oracle)
+# PARENT_NAME = NAME without BASEEXT and no trailing :: (eg Foo::Bar)
+# DLBASE  = Basename part of dynamic library. May be just equal BASEEXT.
+FULLEXT = UNIVERSAL/require
+BASEEXT = require
+PARENT_NAME = UNIVERSAL
+DLBASE = $(BASEEXT)
+VERSION_FROM = lib/UNIVERSAL/require.pm
+OBJECT = 
+LDFROM = $(OBJECT)
+LINKTYPE = dynamic
+
+# Handy lists of source code files:
+XS_FILES = 
+C_FILES  = 
+O_FILES  = 
+H_FILES  = 
+MAN1PODS = 
+MAN3PODS = lib/UNIVERSAL/require.pm
+
+# Where is the Config information that we are using/depend on
+CONFIGDEP = $(PERL_ARCHLIB)$(DIRFILESEP)Config.pm $(PERL_INC)$(DIRFILESEP)config.h
+
+# Where to build things
+INST_LIBDIR      = $(INST_LIB)/UNIVERSAL
+INST_ARCHLIBDIR  = $(INST_ARCHLIB)/UNIVERSAL
+
+INST_AUTODIR     = $(INST_LIB)/auto/$(FULLEXT)
+INST_ARCHAUTODIR = $(INST_ARCHLIB)/auto/$(FULLEXT)
+
+INST_STATIC      = 
+INST_DYNAMIC     = 
+INST_BOOT        = 
+
+# Extra linker info
+EXPORT_LIST        = 
+PERL_ARCHIVE       = 
+PERL_ARCHIVE_AFTER = 
+
+
+TO_INST_PM = lib/UNIVERSAL/require.pm
+
+PM_TO_BLIB = lib/UNIVERSAL/require.pm \
+	blib/lib/UNIVERSAL/require.pm
+
+
+# --- MakeMaker platform_constants section:
+MM_Unix_VERSION = 1.42
+PERL_MALLOC_DEF = -DPERL_EXTMALLOC_DEF -Dmalloc=Perl_malloc -Dfree=Perl_mfree -Drealloc=Perl_realloc -Dcalloc=Perl_calloc
+
+
+# --- MakeMaker tool_autosplit section:
+# Usage: $(AUTOSPLITFILE) FileToSplit AutoDirToSplitInto
+AUTOSPLITFILE = $(PERLRUN)  -e 'use AutoSplit;  autosplit($$ARGV[0], $$ARGV[1], 0, 1, 1)'
+
+
+
+# --- MakeMaker tool_xsubpp section:
+
+
+# --- MakeMaker tools_other section:
+SHELL = /bin/sh
+CHMOD = chmod
+CP = cp
+MV = mv
+NOOP = $(SHELL) -c true
+NOECHO = @
+RM_F = rm -f
+RM_RF = rm -rf
+TEST_F = test -f
+TOUCH = touch
+UMASK_NULL = umask 0
+DEV_NULL = > /dev/null 2>&1
+MKPATH = $(PERLRUN) "-MExtUtils::Command" -e mkpath
+EQUALIZE_TIMESTAMP = $(PERLRUN) "-MExtUtils::Command" -e eqtime
+ECHO = echo
+ECHO_N = echo -n
+UNINST = 0
+VERBINST = 0
+MOD_INSTALL = $(PERLRUN) -MExtUtils::Install -e 'install({@ARGV}, '\''$(VERBINST)'\'', 0, '\''$(UNINST)'\'');'
+DOC_INSTALL = $(PERLRUN) "-MExtUtils::Command::MM" -e perllocal_install
+UNINSTALL = $(PERLRUN) "-MExtUtils::Command::MM" -e uninstall
+WARN_IF_OLD_PACKLIST = $(PERLRUN) "-MExtUtils::Command::MM" -e warn_if_old_packlist
+
+
+# --- MakeMaker makemakerdflt section:
+makemakerdflt: all
+	$(NOECHO) $(NOOP)
+
+
+# --- MakeMaker dist section:
+TAR = tar
+TARFLAGS = cvf
+ZIP = zip
+ZIPFLAGS = -r
+COMPRESS = gzip --best
+SUFFIX = .gz
+SHAR = shar
+PREOP = $(NOECHO) $(NOOP)
+POSTOP = $(NOECHO) $(NOOP)
+TO_UNIX = $(NOECHO) $(NOOP)
+CI = ci -u
+RCS_LABEL = rcs -Nv$(VERSION_SYM): -q
+DIST_CP = best
+DIST_DEFAULT = tardist
+DISTNAME = UNIVERSAL-require
+DISTVNAME = UNIVERSAL-require-0.11
+
+
+# --- MakeMaker macro section:
+
+
+# --- MakeMaker depend section:
+
+
+# --- MakeMaker cflags section:
+
+
+# --- MakeMaker const_loadlibs section:
+
+
+# --- MakeMaker const_cccmd section:
+
+
+# --- MakeMaker post_constants section:
+
+
+# --- MakeMaker pasthru section:
+
+PASTHRU = LIB="$(LIB)"\
+	LIBPERL_A="$(LIBPERL_A)"\
+	LINKTYPE="$(LINKTYPE)"\
+	PREFIX="$(PREFIX)"\
+	OPTIMIZE="$(OPTIMIZE)"\
+	PASTHRU_DEFINE="$(PASTHRU_DEFINE)"\
+	PASTHRU_INC="$(PASTHRU_INC)"
+
+
+# --- MakeMaker special_targets section:
+.SUFFIXES: .xs .c .C .cpp .i .s .cxx .cc $(OBJ_EXT)
+
+.PHONY: all config static dynamic test linkext manifest
+
+
+
+# --- MakeMaker c_o section:
+
+
+# --- MakeMaker xs_c section:
+
+
+# --- MakeMaker xs_o section:
+
+
+# --- MakeMaker top_targets section:
+all :: pure_all manifypods
+	$(NOECHO) $(NOOP)
+
+
+pure_all :: config pm_to_blib subdirs linkext
+	$(NOECHO) $(NOOP)
+
+subdirs :: $(MYEXTLIB)
+	$(NOECHO) $(NOOP)
+
+config :: $(FIRST_MAKEFILE) $(INST_LIBDIR)$(DIRFILESEP).exists
+	$(NOECHO) $(NOOP)
+
+config :: $(INST_ARCHAUTODIR)$(DIRFILESEP).exists
+	$(NOECHO) $(NOOP)
+
+config :: $(INST_AUTODIR)$(DIRFILESEP).exists
+	$(NOECHO) $(NOOP)
+
+$(INST_AUTODIR)/.exists :: /usr/local/lib/perl5/5.8.7/darwin-2level/CORE/perl.h
+	$(NOECHO) $(MKPATH) $(INST_AUTODIR)
+	$(NOECHO) $(EQUALIZE_TIMESTAMP) /usr/local/lib/perl5/5.8.7/darwin-2level/CORE/perl.h $(INST_AUTODIR)/.exists
+
+	-$(NOECHO) $(CHMOD) $(PERM_RWX) $(INST_AUTODIR)
+
+$(INST_LIBDIR)/.exists :: /usr/local/lib/perl5/5.8.7/darwin-2level/CORE/perl.h
+	$(NOECHO) $(MKPATH) $(INST_LIBDIR)
+	$(NOECHO) $(EQUALIZE_TIMESTAMP) /usr/local/lib/perl5/5.8.7/darwin-2level/CORE/perl.h $(INST_LIBDIR)/.exists
+
+	-$(NOECHO) $(CHMOD) $(PERM_RWX) $(INST_LIBDIR)
+
+$(INST_ARCHAUTODIR)/.exists :: /usr/local/lib/perl5/5.8.7/darwin-2level/CORE/perl.h
+	$(NOECHO) $(MKPATH) $(INST_ARCHAUTODIR)
+	$(NOECHO) $(EQUALIZE_TIMESTAMP) /usr/local/lib/perl5/5.8.7/darwin-2level/CORE/perl.h $(INST_ARCHAUTODIR)/.exists
+
+	-$(NOECHO) $(CHMOD) $(PERM_RWX) $(INST_ARCHAUTODIR)
+
+config :: $(INST_MAN3DIR)$(DIRFILESEP).exists
+	$(NOECHO) $(NOOP)
+
+
+$(INST_MAN3DIR)/.exists :: /usr/local/lib/perl5/5.8.7/darwin-2level/CORE/perl.h
+	$(NOECHO) $(MKPATH) $(INST_MAN3DIR)
+	$(NOECHO) $(EQUALIZE_TIMESTAMP) /usr/local/lib/perl5/5.8.7/darwin-2level/CORE/perl.h $(INST_MAN3DIR)/.exists
+
+	-$(NOECHO) $(CHMOD) $(PERM_RWX) $(INST_MAN3DIR)
+
+help:
+	perldoc ExtUtils::MakeMaker
+
+
+# --- MakeMaker linkext section:
+
+linkext :: $(LINKTYPE)
+	$(NOECHO) $(NOOP)
+
+
+# --- MakeMaker dlsyms section:
+
+
+# --- MakeMaker dynamic section:
+
+dynamic :: $(FIRST_MAKEFILE) $(INST_DYNAMIC) $(INST_BOOT)
+	$(NOECHO) $(NOOP)
+
+
+# --- MakeMaker dynamic_bs section:
+
+BOOTSTRAP =
+
+
+# --- MakeMaker dynamic_lib section:
+
+
+# --- MakeMaker static section:
+
+## $(INST_PM) has been moved to the all: target.
+## It remains here for awhile to allow for old usage: "make static"
+static :: $(FIRST_MAKEFILE) $(INST_STATIC)
+	$(NOECHO) $(NOOP)
+
+
+# --- MakeMaker static_lib section:
+
+
+# --- MakeMaker manifypods section:
+
+POD2MAN_EXE = $(PERLRUN) "-MExtUtils::Command::MM" -e pod2man "--"
+POD2MAN = $(POD2MAN_EXE)
+
+
+manifypods : pure_all  \
+	lib/UNIVERSAL/require.pm \
+	lib/UNIVERSAL/require.pm
+	$(NOECHO) $(POD2MAN) --section=3 --perm_rw=$(PERM_RW)\
+	  lib/UNIVERSAL/require.pm $(INST_MAN3DIR)/UNIVERSAL::require.$(MAN3EXT) 
+
+
+
+
+# --- MakeMaker processPL section:
+
+
+# --- MakeMaker installbin section:
+
+
+# --- MakeMaker subdirs section:
+
+# none
+
+# --- MakeMaker clean_subdirs section:
+clean_subdirs :
+	$(NOECHO) $(NOOP)
+
+
+# --- MakeMaker clean section:
+
+# Delete temporary files but do not touch installed files. We don't delete
+# the Makefile here so a later make realclean still has a makefile to use.
+
+clean :: clean_subdirs
+	-$(RM_RF) ./blib $(MAKE_APERL_FILE) $(INST_ARCHAUTODIR)/extralibs.all $(INST_ARCHAUTODIR)/extralibs.ld perlmain.c tmon.out mon.out so_locations pm_to_blib *$(OBJ_EXT) *$(LIB_EXT) perl.exe perl perl$(EXE_EXT) $(BOOTSTRAP) $(BASEEXT).bso $(BASEEXT).def lib$(BASEEXT).def $(BASEEXT).exp $(BASEEXT).x core core.*perl.*.? *perl.core core.[0-9] core.[0-9][0-9] core.[0-9][0-9][0-9] core.[0-9][0-9][0-9][0-9] core.[0-9][0-9][0-9][0-9][0-9]
+	-$(MV) $(FIRST_MAKEFILE) $(MAKEFILE_OLD) $(DEV_NULL)
+
+
+# --- MakeMaker realclean_subdirs section:
+realclean_subdirs :
+	$(NOECHO) $(NOOP)
+
+
+# --- MakeMaker realclean section:
+
+# Delete temporary files (via clean) and also delete installed files
+realclean purge ::  clean realclean_subdirs
+	$(RM_RF) $(INST_AUTODIR) $(INST_ARCHAUTODIR)
+	$(RM_RF) $(DISTVNAME)
+	$(RM_F)  blib/lib/UNIVERSAL/require.pm $(MAKEFILE_OLD) $(FIRST_MAKEFILE)
+
+
+# --- MakeMaker metafile section:
+metafile :
+	$(NOECHO) $(ECHO) '# http://module-build.sourceforge.net/META-spec.html' > META.yml
+	$(NOECHO) $(ECHO) '#XXXXXXX This is a prototype!!!  It will change in the future!!! XXXXX#' >> META.yml
+	$(NOECHO) $(ECHO) 'name:         UNIVERSAL-require' >> META.yml
+	$(NOECHO) $(ECHO) 'version:      0.11' >> META.yml
+	$(NOECHO) $(ECHO) 'version_from: lib/UNIVERSAL/require.pm' >> META.yml
+	$(NOECHO) $(ECHO) 'installdirs:  site' >> META.yml
+	$(NOECHO) $(ECHO) 'requires:' >> META.yml
+	$(NOECHO) $(ECHO) '    Test::More:                    0.47' >> META.yml
+	$(NOECHO) $(ECHO) '' >> META.yml
+	$(NOECHO) $(ECHO) 'distribution_type: module' >> META.yml
+	$(NOECHO) $(ECHO) 'generated_by: ExtUtils::MakeMaker version 6.17' >> META.yml
+
+
+# --- MakeMaker metafile_addtomanifest section:
+metafile_addtomanifest:
+	$(NOECHO) $(PERLRUN) -MExtUtils::Manifest=maniadd -e 'eval { maniadd({q{META.yml} => q{Module meta-data (added by MakeMaker)}}) } ' \
+	-e '    or print "Could not add META.yml to MANIFEST: $${'\''@'\''}\n"'
+
+
+# --- MakeMaker dist_basics section:
+distclean :: realclean distcheck
+	$(NOECHO) $(NOOP)
+
+distcheck :
+	$(PERLRUN) "-MExtUtils::Manifest=fullcheck" -e fullcheck
+
+skipcheck :
+	$(PERLRUN) "-MExtUtils::Manifest=skipcheck" -e skipcheck
+
+manifest :
+	$(PERLRUN) "-MExtUtils::Manifest=mkmanifest" -e mkmanifest
+
+veryclean : realclean
+	$(RM_F) *~ *.orig */*~ */*.orig
+
+
+
+# --- MakeMaker dist_core section:
+
+dist : $(DIST_DEFAULT) $(FIRST_MAKEFILE)
+	$(NOECHO) $(PERLRUN) -l -e 'print '\''Warning: Makefile possibly out of date with $(VERSION_FROM)'\''' \
+	-e '    if -e '\''$(VERSION_FROM)'\'' and -M '\''$(VERSION_FROM)'\'' < -M '\''$(FIRST_MAKEFILE)'\'';'
+
+tardist : $(DISTVNAME).tar$(SUFFIX)
+	$(NOECHO) $(NOOP)
+
+uutardist : $(DISTVNAME).tar$(SUFFIX)
+	uuencode $(DISTVNAME).tar$(SUFFIX) $(DISTVNAME).tar$(SUFFIX) > $(DISTVNAME).tar$(SUFFIX)_uu
+
+$(DISTVNAME).tar$(SUFFIX) : distdir
+	$(PREOP)
+	$(TO_UNIX)
+	$(TAR) $(TARFLAGS) $(DISTVNAME).tar $(DISTVNAME)
+	$(RM_RF) $(DISTVNAME)
+	$(COMPRESS) $(DISTVNAME).tar
+	$(POSTOP)
+
+zipdist : $(DISTVNAME).zip
+	$(NOECHO) $(NOOP)
+
+$(DISTVNAME).zip : distdir
+	$(PREOP)
+	$(ZIP) $(ZIPFLAGS) $(DISTVNAME).zip $(DISTVNAME)
+	$(RM_RF) $(DISTVNAME)
+	$(POSTOP)
+
+shdist : distdir
+	$(PREOP)
+	$(SHAR) $(DISTVNAME) > $(DISTVNAME).shar
+	$(RM_RF) $(DISTVNAME)
+	$(POSTOP)
+
+
+# --- MakeMaker distdir section:
+distdir : metafile metafile_addtomanifest
+	$(RM_RF) $(DISTVNAME)
+	$(PERLRUN) "-MExtUtils::Manifest=manicopy,maniread" \
+		-e "manicopy(maniread(),'$(DISTVNAME)', '$(DIST_CP)');"
+
+
+
+# --- MakeMaker dist_test section:
+
+disttest : distdir
+	cd $(DISTVNAME) && $(ABSPERLRUN) Makefile.PL
+	cd $(DISTVNAME) && $(MAKE) $(PASTHRU)
+	cd $(DISTVNAME) && $(MAKE) test $(PASTHRU)
+
+
+# --- MakeMaker dist_ci section:
+
+ci :
+	$(PERLRUN) "-MExtUtils::Manifest=maniread" \
+	  -e "@all = keys %{ maniread() };" \
+	  -e "print(qq{Executing $(CI) @all\n}); system(qq{$(CI) @all});" \
+	  -e "print(qq{Executing $(RCS_LABEL) ...\n}); system(qq{$(RCS_LABEL) @all});"
+
+
+# --- MakeMaker install section:
+
+install :: all pure_install doc_install
+
+install_perl :: all pure_perl_install doc_perl_install
+
+install_site :: all pure_site_install doc_site_install
+
+install_vendor :: all pure_vendor_install doc_vendor_install
+
+pure_install :: pure_$(INSTALLDIRS)_install
+
+doc_install :: doc_$(INSTALLDIRS)_install
+
+pure__install : pure_site_install
+	$(NOECHO) $(ECHO) INSTALLDIRS not defined, defaulting to INSTALLDIRS=site
+
+doc__install : doc_site_install
+	$(NOECHO) $(ECHO) INSTALLDIRS not defined, defaulting to INSTALLDIRS=site
+
+pure_perl_install ::
+	$(NOECHO) $(MOD_INSTALL) \
+		read $(PERL_ARCHLIB)/auto/$(FULLEXT)/.packlist \
+		write $(DESTINSTALLARCHLIB)/auto/$(FULLEXT)/.packlist \
+		$(INST_LIB) $(DESTINSTALLPRIVLIB) \
+		$(INST_ARCHLIB) $(DESTINSTALLARCHLIB) \
+		$(INST_BIN) $(DESTINSTALLBIN) \
+		$(INST_SCRIPT) $(DESTINSTALLSCRIPT) \
+		$(INST_MAN1DIR) $(DESTINSTALLMAN1DIR) \
+		$(INST_MAN3DIR) $(DESTINSTALLMAN3DIR)
+	$(NOECHO) $(WARN_IF_OLD_PACKLIST) \
+		$(SITEARCHEXP)/auto/$(FULLEXT)
+
+
+pure_site_install ::
+	$(NOECHO) $(MOD_INSTALL) \
+		read $(SITEARCHEXP)/auto/$(FULLEXT)/.packlist \
+		write $(DESTINSTALLSITEARCH)/auto/$(FULLEXT)/.packlist \
+		$(INST_LIB) $(DESTINSTALLSITELIB) \
+		$(INST_ARCHLIB) $(DESTINSTALLSITEARCH) \
+		$(INST_BIN) $(DESTINSTALLSITEBIN) \
+		$(INST_SCRIPT) $(DESTINSTALLSCRIPT) \
+		$(INST_MAN1DIR) $(DESTINSTALLSITEMAN1DIR) \
+		$(INST_MAN3DIR) $(DESTINSTALLSITEMAN3DIR)
+	$(NOECHO) $(WARN_IF_OLD_PACKLIST) \
+		$(PERL_ARCHLIB)/auto/$(FULLEXT)
+
+pure_vendor_install ::
+	$(NOECHO) $(MOD_INSTALL) \
+		read $(VENDORARCHEXP)/auto/$(FULLEXT)/.packlist \
+		write $(DESTINSTALLVENDORARCH)/auto/$(FULLEXT)/.packlist \
+		$(INST_LIB) $(DESTINSTALLVENDORLIB) \
+		$(INST_ARCHLIB) $(DESTINSTALLVENDORARCH) \
+		$(INST_BIN) $(DESTINSTALLVENDORBIN) \
+		$(INST_SCRIPT) $(DESTINSTALLSCRIPT) \
+		$(INST_MAN1DIR) $(DESTINSTALLVENDORMAN1DIR) \
+		$(INST_MAN3DIR) $(DESTINSTALLVENDORMAN3DIR)
+
+doc_perl_install ::
+	$(NOECHO) $(ECHO) Appending installation info to $(DESTINSTALLARCHLIB)/perllocal.pod
+	-$(NOECHO) $(MKPATH) $(DESTINSTALLARCHLIB)
+	-$(NOECHO) $(DOC_INSTALL) \
+		"Module" "$(NAME)" \
+		"installed into" "$(INSTALLPRIVLIB)" \
+		LINKTYPE "$(LINKTYPE)" \
+		VERSION "$(VERSION)" \
+		EXE_FILES "$(EXE_FILES)" \
+		>> $(DESTINSTALLARCHLIB)/perllocal.pod
+
+doc_site_install ::
+	$(NOECHO) $(ECHO) Appending installation info to $(DESTINSTALLARCHLIB)/perllocal.pod
+	-$(NOECHO) $(MKPATH) $(DESTINSTALLARCHLIB)
+	-$(NOECHO) $(DOC_INSTALL) \
+		"Module" "$(NAME)" \
+		"installed into" "$(INSTALLSITELIB)" \
+		LINKTYPE "$(LINKTYPE)" \
+		VERSION "$(VERSION)" \
+		EXE_FILES "$(EXE_FILES)" \
+		>> $(DESTINSTALLARCHLIB)/perllocal.pod
+
+doc_vendor_install ::
+	$(NOECHO) $(ECHO) Appending installation info to $(DESTINSTALLARCHLIB)/perllocal.pod
+	-$(NOECHO) $(MKPATH) $(DESTINSTALLARCHLIB)
+	-$(NOECHO) $(DOC_INSTALL) \
+		"Module" "$(NAME)" \
+		"installed into" "$(INSTALLVENDORLIB)" \
+		LINKTYPE "$(LINKTYPE)" \
+		VERSION "$(VERSION)" \
+		EXE_FILES "$(EXE_FILES)" \
+		>> $(DESTINSTALLARCHLIB)/perllocal.pod
+
+
+uninstall :: uninstall_from_$(INSTALLDIRS)dirs
+
+uninstall_from_perldirs ::
+	$(NOECHO) $(UNINSTALL) $(PERL_ARCHLIB)/auto/$(FULLEXT)/.packlist
+
+uninstall_from_sitedirs ::
+	$(NOECHO) $(UNINSTALL) $(SITEARCHEXP)/auto/$(FULLEXT)/.packlist
+
+uninstall_from_vendordirs ::
+	$(NOECHO) $(UNINSTALL) $(VENDORARCHEXP)/auto/$(FULLEXT)/.packlist
+
+
+# --- MakeMaker force section:
+# Phony target to force checking subdirectories.
+FORCE:
+	$(NOECHO) $(NOOP)
+
+
+# --- MakeMaker perldepend section:
+
+
+# --- MakeMaker makefile section:
+
+# We take a very conservative approach here, but it's worth it.
+# We move Makefile to Makefile.old here to avoid gnu make looping.
+$(FIRST_MAKEFILE) : Makefile.PL $(CONFIGDEP)
+	$(NOECHO) $(ECHO) "Makefile out-of-date with respect to $?"
+	$(NOECHO) $(ECHO) "Cleaning current config before rebuilding Makefile..."
+	$(NOECHO) $(RM_F) $(MAKEFILE_OLD)
+	$(NOECHO) $(MV)   $(FIRST_MAKEFILE) $(MAKEFILE_OLD)
+	-$(MAKE) -f $(MAKEFILE_OLD) clean $(DEV_NULL) || $(NOOP)
+	$(PERLRUN) Makefile.PL 
+	$(NOECHO) $(ECHO) "==> Your Makefile has been rebuilt. <=="
+	$(NOECHO) $(ECHO) "==> Please rerun the make command.  <=="
+	false
+
+
+
+# --- MakeMaker staticmake section:
+
+# --- MakeMaker makeaperl section ---
+MAP_TARGET    = perl
+FULLPERL      = /usr/bin/perl
+
+$(MAP_TARGET) :: static $(MAKE_APERL_FILE)
+	$(MAKE) -f $(MAKE_APERL_FILE) $@
+
+$(MAKE_APERL_FILE) : $(FIRST_MAKEFILE)
+	$(NOECHO) $(ECHO) Writing \"$(MAKE_APERL_FILE)\" for this $(MAP_TARGET)
+	$(NOECHO) $(PERLRUNINST) \
+		Makefile.PL DIR= \
+		MAKEFILE=$(MAKE_APERL_FILE) LINKTYPE=static \
+		MAKEAPERL=1 NORECURS=1 CCCDLFLAGS=
+
+
+# --- MakeMaker test section:
+
+TEST_VERBOSE=0
+TEST_TYPE=test_$(LINKTYPE)
+TEST_FILE = test.pl
+TEST_FILES = t/*.t
+TESTDB_SW = -d
+
+testdb :: testdb_$(LINKTYPE)
+
+test :: $(TEST_TYPE)
+
+test_dynamic :: pure_all
+	PERL_DL_NONLAZY=1 $(FULLPERLRUN) "-MExtUtils::Command::MM" "-e" "test_harness($(TEST_VERBOSE), '$(INST_LIB)', '$(INST_ARCHLIB)')" $(TEST_FILES)
+
+testdb_dynamic :: pure_all
+	PERL_DL_NONLAZY=1 $(FULLPERLRUN) $(TESTDB_SW) "-I$(INST_LIB)" "-I$(INST_ARCHLIB)" $(TEST_FILE)
+
+test_ : test_dynamic
+
+test_static :: test_dynamic
+testdb_static :: testdb_dynamic
+
+
+# --- MakeMaker ppd section:
+# Creates a PPD (Perl Package Description) for a binary distribution.
+ppd:
+	$(NOECHO) $(ECHO) '<SOFTPKG NAME="$(DISTNAME)" VERSION="0,11,0,0">' > $(DISTNAME).ppd
+	$(NOECHO) $(ECHO) '    <TITLE>$(DISTNAME)</TITLE>' >> $(DISTNAME).ppd
+	$(NOECHO) $(ECHO) '    <ABSTRACT></ABSTRACT>' >> $(DISTNAME).ppd
+	$(NOECHO) $(ECHO) '    <AUTHOR></AUTHOR>' >> $(DISTNAME).ppd
+	$(NOECHO) $(ECHO) '    <IMPLEMENTATION>' >> $(DISTNAME).ppd
+	$(NOECHO) $(ECHO) '        <DEPENDENCY NAME="Test-More" VERSION="0,47,0,0" />' >> $(DISTNAME).ppd
+	$(NOECHO) $(ECHO) '        <OS NAME="$(OSNAME)" />' >> $(DISTNAME).ppd
+	$(NOECHO) $(ECHO) '        <ARCHITECTURE NAME="darwin-2level" />' >> $(DISTNAME).ppd
+	$(NOECHO) $(ECHO) '        <CODEBASE HREF="" />' >> $(DISTNAME).ppd
+	$(NOECHO) $(ECHO) '    </IMPLEMENTATION>' >> $(DISTNAME).ppd
+	$(NOECHO) $(ECHO) '</SOFTPKG>' >> $(DISTNAME).ppd
+
+
+# --- MakeMaker pm_to_blib section:
+
+pm_to_blib: $(TO_INST_PM)
+	$(NOECHO) $(PERLRUN) -MExtUtils::Install -e 'pm_to_blib({@ARGV}, '\''$(INST_LIB)/auto'\'', '\''$(PM_FILTER)'\'')'\
+	  lib/UNIVERSAL/require.pm blib/lib/UNIVERSAL/require.pm 
+	$(NOECHO) $(TOUCH) $@
+
+# --- MakeMaker selfdocument section:
+
+
+# --- MakeMaker postamble section:
+
+
+# End.
diff -ruN UNIVERSAL-require-0.10.orig/blib/lib/UNIVERSAL/require.pm UNIVERSAL-require-0.10/blib/lib/UNIVERSAL/require.pm
--- UNIVERSAL-require-0.10.orig/blib/lib/UNIVERSAL/require.pm	1970-01-01 01:00:00.000000000 +0100
+++ UNIVERSAL-require-0.10/blib/lib/UNIVERSAL/require.pm	2006-08-14 19:23:42.000000000 +0100
@@ -0,0 +1,217 @@
+package UNIVERSAL::require;
+$UNIVERSAL::require::VERSION = '0.11';
+
+# We do this because UNIVERSAL.pm uses CORE::require().  We're going
+# to put our own require() into UNIVERSAL and that makes an ambiguity.
+# So we load it up beforehand to avoid that.
+BEGIN { require UNIVERSAL }
+
+package UNIVERSAL;
+
+use strict;
+
+use vars qw($Level $Fatal);
+$Level = 0;
+$Fatal = 0;
+
+sub UNIVERSAL::require::import {
+    my $class = shift;
+    if ( @_ ) {
+        if ( 'fatal' eq $_[0] ) {
+            $Fatal = 1;
+        }
+        else {
+            die "Unknown import argument ($_[0])";
+        }
+    }
+}
+
+=pod
+
+=head1 NAME
+
+  UNIVERSAL::require - require() modules from a variable
+
+=head1 SYNOPSIS
+
+  # This only needs to be said once in your program.
+  require UNIVERSAL::require;
+
+  # Same as "require Some::Module"
+  my $module = 'Some::Module';
+  $module->require or die $@;
+
+  # Same as "use Some::Module"
+  BEGIN { $module->use or die $@ }
+
+
+=head1 DESCRIPTION
+
+If you've ever had to do this...
+
+    eval "require $module";
+
+to get around the bareword caveats on require(), this module is for
+you.  It creates a universal require() class method that will work
+with every Perl module and its secure.  So instead of doing some
+arcane eval() work, you can do this:
+
+    $module->require;
+
+It doesn't save you much typing, but it'll make alot more sense to
+someone who's not a ninth level Perl acolyte.
+
+=head1 Methods
+
+=head3 require
+
+  my $return_val = $module->require           or die $@;
+  my $return_val = $module->require($version) or die $@;
+
+This works exactly like Perl's require, except without the bareword
+restriction, and it doesn't die.  Since require() is placed in the
+UNIVERSAL namespace, it will work on B<any> module.  You just have to
+use UNIVERSAL::require somewhere in your code.
+
+Should the module require fail, or not be a high enough $version, it
+will simply return false and B<not die>.  The error will be in
+$@ as well as $UNIVERSAL::require::ERROR.
+
+    $module->require or die $@;
+
+=cut
+
+sub require {
+    my($module, $want_version) = @_;
+
+    $UNIVERSAL::require::ERROR = '';
+
+    die("UNIVERSAL::require() can only be run as a class method")
+      if ref $module; 
+
+    die("UNIVERSAL::require() takes no or one arguments") if @_ > 2;
+
+    my($call_package, $call_file, $call_line) = caller($Level);
+
+    # Load the module.
+    my $file = $module . '.pm';
+    $file =~ s{::}{/}g;
+    my $return = eval qq{ 
+#line $call_line "$call_file"
+CORE::require(\$file); 
+};
+
+    # Check for module load failure.
+    if( $@ ) {
+        $UNIVERSAL::require::ERROR = $@;
+        die $@ if $Fatal;
+        return $return;
+    }
+
+    # Module version check.
+    if( @_ == 2 ) {
+        eval qq{
+#line $call_line "$call_file"
+\$module->VERSION($want_version);
+};
+
+        if( $@ ) {
+            $UNIVERSAL::require::ERROR = $@;
+            return 0;
+        }
+    }
+
+    return $return;
+}
+
+=head3 use
+
+    my $require_return = $module->use           or die $@;
+    my $require_return = $module->use(@imports) or die $@;
+
+Like C<UNIVERSAL::require>, this allows you to C<use> a $module without
+having to eval to work around the bareword requirement.  It returns the
+same as require.
+
+Should either the require or the import fail it will return false.  The
+error will be in $@.
+
+If possible, call this inside a BEGIN block to emulate a normal C<use>
+as closely as possible.
+
+    BEGIN { $module->use }
+
+=cut
+
+sub use {
+    my($module, @imports) = @_;
+
+    local $Level = 1;
+    my $return = $module->require or return 0;
+
+    my($call_package, $call_file, $call_line) = caller;
+
+    eval qq{
+package $call_package;
+#line $call_line "$call_file"
+\$module->import(\@imports);
+};
+
+    if( $@ ) {
+        $UNIVERSAL::require::ERROR = $@;
+        return 0;
+    }
+
+    return $return;
+}
+
+=head1 DYING ON FAILURE
+
+Ordinarily you need to explicitly check the success of C<use> or C<require>:
+
+ use UNIVERSAL::require;
+ $module1->require or die $@;
+ $module2->use     or die $@;
+
+If you would prefer that this die for you, merely do this:
+
+ use UNIVERSAL::require 'fatal';
+ $module1->require;
+ $module2->use;
+
+If the C<require> or C<use> fails, the program will die with the current
+contents of $@.
+
+=head1 SECURITY NOTES
+
+UNIVERSAL::require makes use of C<eval STRING>.  In previous versions
+of UNIVERSAL::require it was discovered that one could craft a class
+name which would result in code being executed.  This hole has been
+closed.  The only variables now exposed to C<eval STRING> are the
+caller's package, filename and line which are not tainted.
+
+UNIVERSAL::require is taint clean.
+
+=head1 COPYRIGHT
+
+Copyright 2001, 2005 by Michael G Schwern E<lt>schwern@pobox.comE<gt>.
+
+This program is free software; you can redistribute it and/or 
+modify it under the same terms as Perl itself.
+
+See F<http://www.perl.com/perl/misc/Artistic.html>
+
+
+=head1 AUTHOR
+
+Michael G Schwern <schwern@pobox.com>
+
+
+=head1 SEE ALSO
+
+L<Module::Load>,  L<perlfunc/require>, L<http://dev.perl.org/rfc/253.pod>
+
+=cut
+
+
+1;
diff -ruN UNIVERSAL-require-0.10.orig/blib/man3/UNIVERSAL::require.3 UNIVERSAL-require-0.10/blib/man3/UNIVERSAL::require.3
--- UNIVERSAL-require-0.10.orig/blib/man3/UNIVERSAL::require.3	1970-01-01 01:00:00.000000000 +0100
+++ UNIVERSAL-require-0.10/blib/man3/UNIVERSAL::require.3	2006-08-14 19:23:45.000000000 +0100
@@ -0,0 +1,255 @@
+.\" Automatically generated by Pod::Man 2.08 (Pod::Simple 3.04)
+.\"
+.\" Standard preamble:
+.\" ========================================================================
+.de Sh \" Subsection heading
+.br
+.if t .Sp
+.ne 5
+.PP
+\fB\\$1\fR
+.PP
+..
+.de Sp \" Vertical space (when we can't use .PP)
+.if t .sp .5v
+.if n .sp
+..
+.de Vb \" Begin verbatim text
+.ft CW
+.nf
+.ne \\$1
+..
+.de Ve \" End verbatim text
+.ft R
+.fi
+..
+.\" Set up some character translations and predefined strings.  \*(-- will
+.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
+.\" double quote, and \*(R" will give a right double quote.  | will give a
+.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
+.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
+.\" expand to `' in nroff, nothing in troff, for use with C<>.
+.tr \(*W-|\(bv\*(Tr
+.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
+.ie n \{\
+.    ds -- \(*W-
+.    ds PI pi
+.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
+.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
+.    ds L" ""
+.    ds R" ""
+.    ds C` ""
+.    ds C' ""
+'br\}
+.el\{\
+.    ds -- \|\(em\|
+.    ds PI \(*p
+.    ds L" ``
+.    ds R" ''
+'br\}
+.\"
+.\" If the F register is turned on, we'll generate index entries on stderr for
+.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
+.\" entries marked with X<> in POD.  Of course, you'll have to process the
+.\" output yourself in some meaningful fashion.
+.if \nF \{\
+.    de IX
+.    tm Index:\\$1\t\\n%\t"\\$2"
+..
+.    nr % 0
+.    rr F
+.\}
+.\"
+.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
+.\" way too many mistakes in technical documents.
+.hy 0
+.if n .na
+.\"
+.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
+.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
+.    \" fudge factors for nroff and troff
+.if n \{\
+.    ds #H 0
+.    ds #V .8m
+.    ds #F .3m
+.    ds #[ \f1
+.    ds #] \fP
+.\}
+.if t \{\
+.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
+.    ds #V .6m
+.    ds #F 0
+.    ds #[ \&
+.    ds #] \&
+.\}
+.    \" simple accents for nroff and troff
+.if n \{\
+.    ds ' \&
+.    ds ` \&
+.    ds ^ \&
+.    ds , \&
+.    ds ~ ~
+.    ds /
+.\}
+.if t \{\
+.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
+.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
+.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
+.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
+.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
+.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
+.\}
+.    \" troff and (daisy-wheel) nroff accents
+.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
+.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
+.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
+.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
+.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
+.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
+.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
+.ds ae a\h'-(\w'a'u*4/10)'e
+.ds Ae A\h'-(\w'A'u*4/10)'E
+.    \" corrections for vroff
+.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
+.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
+.    \" for low resolution devices (crt and lpr)
+.if \n(.H>23 .if \n(.V>19 \
+\{\
+.    ds : e
+.    ds 8 ss
+.    ds o a
+.    ds d- d\h'-1'\(ga
+.    ds D- D\h'-1'\(hy
+.    ds th \o'bp'
+.    ds Th \o'LP'
+.    ds ae ae
+.    ds Ae AE
+.\}
+.rm #[ #] #H #V #F C
+.\" ========================================================================
+.\"
+.IX Title "UNIVERSAL::require 3"
+.TH UNIVERSAL::require 3 "2006-08-14" "perl v5.8.7" "User Contributed Perl Documentation"
+.SH "NAME"
+.Vb 1
+\&  UNIVERSAL::require \- require() modules from a variable
+.Ve
+.SH "SYNOPSIS"
+.IX Header "SYNOPSIS"
+.Vb 2
+\&  # This only needs to be said once in your program.
+\&  require UNIVERSAL::require;
+\&
+\&  # Same as "require Some::Module"
+\&  my $module = 'Some::Module';
+\&  $module\->require or die $@;
+\&
+\&  # Same as "use Some::Module"
+\&  BEGIN { $module\->use or die $@ }
+.Ve
+.SH "DESCRIPTION"
+.IX Header "DESCRIPTION"
+If you've ever had to do this...
+.PP
+.Vb 1
+\&    eval "require $module";
+.Ve
+.PP
+to get around the bareword caveats on \fIrequire()\fR, this module is for
+you.  It creates a universal \fIrequire()\fR class method that will work
+with every Perl module and its secure.  So instead of doing some
+arcane \fIeval()\fR work, you can do this:
+.PP
+.Vb 1
+\&    $module\->require;
+.Ve
+.PP
+It doesn't save you much typing, but it'll make alot more sense to
+someone who's not a ninth level Perl acolyte.
+.SH "Methods"
+.IX Header "Methods"
+\fIrequire\fR
+.IX Subsection "require"
+.PP
+.Vb 2
+\&  my $return_val = $module\->require           or die $@;
+\&  my $return_val = $module\->require($version) or die $@;
+.Ve
+.PP
+This works exactly like Perl's require, except without the bareword
+restriction, and it doesn't die.  Since \fIrequire()\fR is placed in the
+\&\s-1UNIVERSAL\s0 namespace, it will work on \fBany\fR module.  You just have to
+use UNIVERSAL::require somewhere in your code.
+.PP
+Should the module require fail, or not be a high enough \f(CW$version\fR, it
+will simply return false and \fBnot die\fR.  The error will be in
+$@ as well as \f(CW$UNIVERSAL::require::ERROR\fR.
+.PP
+.Vb 1
+\&    $module\->require or die $@;
+.Ve
+.PP
+\fIuse\fR
+.IX Subsection "use"
+.PP
+.Vb 2
+\&    my $require_return = $module\->use           or die $@;
+\&    my $require_return = $module\->use(@imports) or die $@;
+.Ve
+.PP
+Like \f(CW\*(C`UNIVERSAL::require\*(C'\fR, this allows you to \f(CW\*(C`use\*(C'\fR a \f(CW$module\fR without
+having to eval to work around the bareword requirement.  It returns the
+same as require.
+.PP
+Should either the require or the import fail it will return false.  The
+error will be in $@.
+.PP
+If possible, call this inside a \s-1BEGIN\s0 block to emulate a normal \f(CW\*(C`use\*(C'\fR
+as closely as possible.
+.PP
+.Vb 1
+\&    BEGIN { $module\->use }
+.Ve
+.SH "DYING ON FAILURE"
+.IX Header "DYING ON FAILURE"
+Ordinarily you need to explicitly check the success of \f(CW\*(C`use\*(C'\fR or \f(CW\*(C`require\*(C'\fR:
+.PP
+.Vb 3
+\& use UNIVERSAL::require;
+\& $module1\->require or die $@;
+\& $module2\->use     or die $@;
+.Ve
+.PP
+If you would prefer that this die for you, merely do this:
+.PP
+.Vb 3
+\& use UNIVERSAL::require 'fatal';
+\& $module1\->require;
+\& $module2\->use;
+.Ve
+.PP
+If the \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`use\*(C'\fR fails, the program will die with the current
+contents of $@.
+.SH "SECURITY NOTES"
+.IX Header "SECURITY NOTES"
+UNIVERSAL::require makes use of \f(CW\*(C`eval STRING\*(C'\fR.  In previous versions
+of UNIVERSAL::require it was discovered that one could craft a class
+name which would result in code being executed.  This hole has been
+closed.  The only variables now exposed to \f(CW\*(C`eval STRING\*(C'\fR are the
+caller's package, filename and line which are not tainted.
+.PP
+UNIVERSAL::require is taint clean.
+.SH "COPYRIGHT"
+.IX Header "COPYRIGHT"
+Copyright 2001, 2005 by Michael G Schwern <schwern@pobox.com>.
+.PP
+This program is free software; you can redistribute it and/or 
+modify it under the same terms as Perl itself.
+.PP
+See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
+.SH "AUTHOR"
+.IX Header "AUTHOR"
+Michael G Schwern <schwern@pobox.com>
+.SH "SEE ALSO"
+.IX Header "SEE ALSO"
+Module::Load,  \*(L"require\*(R" in perlfunc, <http://dev.perl.org/rfc/253.pod>
diff -ruN UNIVERSAL-require-0.10.orig/lib/UNIVERSAL/require.pm UNIVERSAL-require-0.10/lib/UNIVERSAL/require.pm
--- UNIVERSAL-require-0.10.orig/lib/UNIVERSAL/require.pm	2005-10-11 05:50:09.000000000 +0100
+++ UNIVERSAL-require-0.10/lib/UNIVERSAL/require.pm	2006-08-14 19:23:42.000000000 +0100
@@ -1,5 +1,5 @@
 package UNIVERSAL::require;
-$UNIVERSAL::require::VERSION = '0.10';
+$UNIVERSAL::require::VERSION = '0.11';
 
 # We do this because UNIVERSAL.pm uses CORE::require().  We're going
 # to put our own require() into UNIVERSAL and that makes an ambiguity.
@@ -10,8 +10,21 @@
 
 use strict;
 
-use vars qw($Level);
+use vars qw($Level $Fatal);
 $Level = 0;
+$Fatal = 0;
+
+sub UNIVERSAL::require::import {
+    my $class = shift;
+    if ( @_ ) {
+        if ( 'fatal' eq $_[0] ) {
+            $Fatal = 1;
+        }
+        else {
+            die "Unknown import argument ($_[0])";
+        }
+    }
+}
 
 =pod
 
@@ -91,6 +104,7 @@
     # Check for module load failure.
     if( $@ ) {
         $UNIVERSAL::require::ERROR = $@;
+        die $@ if $Fatal;
         return $return;
     }
 
@@ -110,7 +124,6 @@
     return $return;
 }
 
-
 =head3 use
 
     my $require_return = $module->use           or die $@;
@@ -152,6 +165,22 @@
     return $return;
 }
 
+=head1 DYING ON FAILURE
+
+Ordinarily you need to explicitly check the success of C<use> or C<require>:
+
+ use UNIVERSAL::require;
+ $module1->require or die $@;
+ $module2->use     or die $@;
+
+If you would prefer that this die for you, merely do this:
+
+ use UNIVERSAL::require 'fatal';
+ $module1->require;
+ $module2->use;
+
+If the C<require> or C<use> fails, the program will die with the current
+contents of $@.
 
 =head1 SECURITY NOTES
 
@@ -163,7 +192,6 @@
 
 UNIVERSAL::require is taint clean.
 
-
 =head1 COPYRIGHT
 
 Copyright 2001, 2005 by Michael G Schwern E<lt>schwern@pobox.comE<gt>.
diff -ruN UNIVERSAL-require-0.10.orig/t/fatal.t UNIVERSAL-require-0.10/t/fatal.t
--- UNIVERSAL-require-0.10.orig/t/fatal.t	1970-01-01 01:00:00.000000000 +0100
+++ UNIVERSAL-require-0.10/t/fatal.t	2006-08-14 19:17:06.000000000 +0100
@@ -0,0 +1,58 @@
+#!/usr/bin/perl -Tw
+
+use Test::More tests => 23;
+use_ok "UNIVERSAL::require", 'fatal';
+
+use lib qw(t);
+
+is( Dummy->require,               23,           'require()' );
+is( $UNIVERSAL::require::ERROR,   '',           '  $ERROR empty' );
+is( $UNIVERSAL::require::ERROR,   '',           '  $ERROR empty' );
+ok( $Dummy::VERSION,                            '  $VERSION ok' );
+ok( $Dummy::VERSION,                            '  $VERSION ok' );
+
+eval { No::Such::Module->require };
+like $@, qr{^Can't locate No/Such/Module\.pm in \@INC},
+     'requiring non-existent modules is fatal if requested';
+
+{
+    $SIG{__WARN__} = sub { warn @_ 
+                             unless $_[0] =~ /^Subroutine \w+ redefined/ };
+    delete $INC{'Dummy.pm'};
+    is( Dummy->require(0.4), 23,                  'require($version)' );
+    is( $UNIVERSAL::require::ERROR, '',           '  $ERROR empty' );
+
+    delete $INC{'Dummy.pm'};
+    ok( !Dummy->require(1.0),                       'require($version) fail' );
+    like( $UNIVERSAL::require::ERROR,
+          '/^Dummy version 1 required--this is only version 0.5/' );
+}
+
+{
+    my $warning = '';
+    local $SIG{__WARN__} = sub { $warning = join '', @_ };
+    eval 'use UNIVERSAL';
+    is( $warning, '',     'use UNIVERSAL doesnt interfere' );
+}
+
+
+my $evil = "Dummy; Test::More::fail('this should never be called');";
+ok ! eval { $evil->require }, '  Trying to use code in require should be fatal';
+like $@, qr/^Can't locate.*in \@INC/,
+  '  And tell us we cannot find the module';
+
+delete $INC{'Dummy.pm'};
+is( Dummy->use, 23 );
+
+is( Dummy->use("foo", "bar"), 1 );
+is( foo(), 42 );
+is( bar(), 23 );
+
+ok( !Dummy->use(1) );
+is( $UNIVERSAL::require::ERROR, $@ );
+
+my $Filename = quotemeta $0;
+#line 23
+ok( !eval { Dont::Exist->use } );
+like( $@, qq[/^Can't locate Dont/Exist.pm in .* at $Filename line 23\./]  );
+is( $UNIVERSAL::require::ERROR, $@ );
