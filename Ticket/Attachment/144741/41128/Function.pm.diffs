*** /tmp/XML-XPath-1.13/XPath/Function.pm	Sun Jan 26 19:30:43 2003
--- XPath/Function.pm	Thu Oct  6 10:19:57 2005
***************
*** 201,208 ****
      die "starts-with: incorrect number of params\n" unless @params == 2;
      my $value = $params[1]->string_value;
      if ($params[0]->string_value =~ /(.*?)\Q$value\E(.*)/) {
!         # $1 and $2 stored for substring funcs below
!         # TODO: Fix this nasty implementation!
          return XML::XPath::Boolean->True;
      }
      return XML::XPath::Boolean->False;
--- 201,210 ----
      die "starts-with: incorrect number of params\n" unless @params == 2;
      my $value = $params[1]->string_value;
      if ($params[0]->string_value =~ /(.*?)\Q$value\E(.*)/) {
!         # Store the values of contains1, contains2 for use in the
!         # substring functions below
!         $self->{contains1} = $1;
!         $self->{contains2} = $2;
          return XML::XPath::Boolean->True;
      }
      return XML::XPath::Boolean->False;
***************
*** 213,219 ****
      my ($node, @params) = @_;
      die "starts-with: incorrect number of params\n" unless @params == 2;
      if ($self->contains($node, @params)->value) {
!         return XML::XPath::Literal->new($1); # hope that works!
      }
      else {
          return XML::XPath::Literal->new('');
--- 215,221 ----
      my ($node, @params) = @_;
      die "starts-with: incorrect number of params\n" unless @params == 2;
      if ($self->contains($node, @params)->value) {
!         return XML::XPath::Literal->new($self->{contains1});
      }
      else {
          return XML::XPath::Literal->new('');
***************
*** 225,231 ****
      my ($node, @params) = @_;
      die "starts-with: incorrect number of params\n" unless @params == 2;
      if ($self->contains($node, @params)->value) {
!         return XML::XPath::Literal->new($2);
      }
      else {
          return XML::XPath::Literal->new('');
--- 227,233 ----
      my ($node, @params) = @_;
      die "starts-with: incorrect number of params\n" unless @params == 2;
      if ($self->contains($node, @params)->value) {
!         return XML::XPath::Literal->new($self->{contains2});
      }
      else {
          return XML::XPath::Literal->new('');
***************
*** 242,249 ****
      $offset--; # uses 1 based offsets
      if (@params == 3) {
          $len = $params[2]->value;
      }
-     return XML::XPath::Literal->new(substr($str, $offset, $len));
  }
  
  sub string_length {
--- 244,253 ----
      $offset--; # uses 1 based offsets
      if (@params == 3) {
          $len = $params[2]->value;
+         return XML::XPath::Literal->new(substr($str, $offset, $len));
+     } else {
+         return XML::XPath::Literal->new(substr($str, $offset));
      }
  }
  
  sub string_length {
