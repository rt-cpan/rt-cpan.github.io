diff --git a/lib/Net/Amazon/S3/Bucket.pm b/lib/Net/Amazon/S3/Bucket.pm
index a075732..bbad3fb 100644
--- a/lib/Net/Amazon/S3/Bucket.pm
+++ b/lib/Net/Amazon/S3/Bucket.pm
@@ -5,6 +5,7 @@ use Carp;
 use File::stat;
 use IO::File;
 use base qw(Class::Accessor::Fast);
+use Net::Amazon::S3::ACL;
 __PACKAGE__->mk_accessors(qw(bucket creation_date account));
 
 =head1 NAME
@@ -396,23 +397,45 @@ sub list_all {
 
 =head2 get_acl
 
-Takes one optional positional parameter
+Takes one optional parameter:
+
+=over
+
+=item *
+
+if it is a hash reference, it can contain the following parameters:
 
 =over
 
 =item key (optional)
 
-If no key is specified, it returns the acl for the bucket.
+the key to look for
+
+=item xml (optional)
+
+whether the result should be in XML format or as a
+L<Net::Amazon::S3::ACL> object.
+
+=back
+
+=item *
+
+otherwise, the behaviour falls back to the one before the introduction
+of L<Net::Amazon::S3::ACL>, in which the parameter is assumed to be the
+key to look for, and the acl is returned in XML format.
 
 =back
 
-Returns an acl in XML format.
+In any case, if no key is specified, it returns the acl for the bucket.
 
 =cut
 
 sub get_acl {
-    my ( $self, $key ) = @_;
+    my ( $self, $conf ) = @_;
     my $acct = $self->account;
+    my ($key, $wants_xml) =
+      ref($conf) ? @{$conf}{qw( key xml )}  # new interface with conf hash
+                 : ($conf, 1);              # backward-compatible interface
 
     my $request
         = $acct->_make_request( 'GET', $self->_uri($key) . '?acl', {} );
@@ -424,22 +447,33 @@ sub get_acl {
 
     $acct->_croak_if_response_error($response);
 
-    return $response->content;
+    return $response->content if $wants_xml;
+    return Net::Amazon::S3::ACL->new(
+      {
+         account => $acct,
+         xml => $response->content(),
+      }
+    );
 }
 
+
 =head2 set_acl
 
 Takes a configuration hash_ref containing:
 
 =over
 
-=item acl_xml (cannot be used in conjuction with acl_short)
+=item acl (cannot be used in conjuction with other acl_*)
+
+A Net::Amazon::S3::ACL object.
+
+=item acl_xml (cannot be used in conjuction with acl/acl_short)
 
 An XML string which contains access control information which matches
 Amazon's published schema.  There is an example of one of these XML strings
 in the tests for this module.
 
-=item acl_short (cannot be used in conjuction with acl_xml)
+=item acl_short (cannot be used in conjuction with acl/acl_xml)
 
 You can use the shorthand notation instead of specifying XML for
 certain 'canned' types of acls.
@@ -474,13 +508,11 @@ sub set_acl {
     my ( $self, $conf ) = @_;
     $conf ||= {};
 
-    unless ( $conf->{acl_xml} || $conf->{acl_short} ) {
-        croak "need either acl_xml or acl_short";
-    }
-
-    if ( $conf->{acl_xml} && $conf->{acl_short} ) {
-        croak "cannot provide both acl_xml and acl_short";
-    }
+    my @acl_fields = qw( acl acl_xml acl_short );
+    my $nparams = grep {exists $conf->{$_}} @acl_fields;
+    croak "need one among ( @acl_fields )" unless $nparams;
+    croak "cannot provide more than one among ( @acl_fields )"
+        if $nparams > 1;
 
     my $path = $self->_uri( $conf->{key} ) . '?acl';
 
@@ -489,13 +521,16 @@ sub set_acl {
         ? { 'x-amz-acl' => $conf->{acl_short} }
         : {};
 
-    my $xml = $conf->{acl_xml} || '';
+    my $xml = exists($conf->{acl})
+      ? $conf->{acl}->stringify()
+      : $conf->{acl_xml} || '';
 
     return $self->account->_send_request_expect_nothing( 'PUT', $path,
         $hash_ref, $xml );
 
 }
 
+
 =head2 get_location_constraint
 
 Retrieves the location constraint set when the bucket was created. Returns a
@@ -583,5 +618,5 @@ __END__
 
 =head1 SEE ALSO
 
-L<Net::Amazon::S3>
+L<Net::Amazon::S3> and L<Net::Amazon::S3::ACL>.
 
