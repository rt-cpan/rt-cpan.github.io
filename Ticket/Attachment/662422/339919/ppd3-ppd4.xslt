<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE stylesheet [
<!ENTITY ppd4_uri "http://docs.activestate.com/activeperl/5.10/lib/ActivePerl/PPM/PPD.html">
<!ENTITY arch_default "MSWin32-x86-multi-thread-5.10">
]>
<xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xd="http://www.pnp-software.com/XSLTdoc">


<!--
XHTML documentation can be extracted using XSLTDoc: http://xsltdoc.sf.net/
java -jar %XSLTDOC_HOME%\lib\saxon8.jar pp3-ppd4.xslt %XSLTDOC_HOME%\xsl\xsltdoc.xsl
-->
<xd:doc type="stylesheet">
  <xd:short>Convert PPD generated by Module::Build 0.34 to PPD v4.</xd:short>
  <xd:detail>
    See the PPD4 specification: <a href="&ppd4_uri;#ppd_xml_format">&ppd4_uri;#ppd_xml_format</a>
  </xd:detail>
  <xd:author>Olivier Mengu√©</xd:author>
</xd:doc>


  <xsl:output method="xml"
              encoding="UTF-8"
              standalone="yes"
              indent="yes"
              omit-xml-declaration="yes"/>

  <xsl:strip-space elements="*"/>

  <xd:doc type="string">
    <xd:short>Perl Architecture</xd:short>
    <xd:detail>
      <p>Default is <code>'&arch_default;'</code>.</p>
      <p>Use an empty string to disable &lt;<a href="&ppd4_uri;#architecture_name">ARCHITECTURE</a>&gt; element ouptut.</p>
      <p>Examples:</p>
      <ul>
        <li><kbd>xsltproc --param arch "''" ppd3-ppd4.xslt</kbd></li>
        <li><kbd>xsltproc --param arch "'&arch_default;'" ppd3-ppd4.xslt</kbd></li>
      </ul>
    </xd:detail>
  </xd:doc>
  <xsl:param name="arch" select="'&arch_default;'"/>

  <!--
  provide "'Prefix::Module1-version,Prefix::Module2-version'"
  -->
  <xd:doc>
    <xd:short>List of modules provided by this distribution</xd:short>
    <xd:detail>
      <p>Used to generate &lt;<a href="&ppd4_uri;#provide_name_version">PROVIDE</a>&gt; elements.</p>
      <p>Example: <kbd>xsltproc --param provide "'My::Module1-0.2,My::Module2-1.5'" ppd3-ppd4.xslt</kbd></p>
    </xd:detail>
  </xd:doc>
  <xsl:param name="provide" select="''"/>

  <xd:doc>
    <xd:short>
      Expand CPAN author id from @cpan.org e-mail to a <a href="&ppd4_uri;#author_cpan_author">CPAN attribute</a>
    </xd:short>
  </xd:doc>
  <xsl:template match="AUTHOR[contains(., '@cpan.org&gt;')]">
    <xsl:copy>
      <xsl:attribute name="CPAN"><xsl:value-of select="translate(substring-before(substring-after(., '&lt;'), '@'), 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></xsl:attribute>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates/>
    </xsl:copy>
  </xsl:template>

  <xd:doc>
    <xd:short>Convert PPD3's &lt;<a href="&ppd4_uri;#dependency_name_version">DEPENDENCY</a>&gt; to PPD4's &lt;<a href="&ppd4_uri;#require_name_version">REQUIRE</a>&gt;</xd:short>
  </xd:doc>
  <xsl:template match="DEPENDENCY">
    <xsl:if test="count(../REQUIRE/@NAME[translate(., ':-', '')=translate(current()/@NAME, ':-', '')])=0">
      <REQUIRE>
        <xsl:apply-templates select="@*"/>
        <xsl:apply-templates/>
      </REQUIRE>
    </xsl:if>
  </xsl:template>

  <xd:doc>
    Use '::' as separator for modules namespaces.
  </xd:doc>
  <xsl:template match="DEPENDENCY/@NAME[contains(., '-')]">
    <xsl:attribute name="NAME">
      <xsl:call-template name="replace-string">
        <xsl:with-param name="text" select="." />
        <xsl:with-param name="replace" select="'-'" />
        <xsl:with-param name="with" select="'::'" />
      </xsl:call-template>
    </xsl:attribute>
  </xsl:template>

  <xd:doc>
    <xd:short>Add missing '::' at the end of top level dists such as <a href="http://poe.perl.org/">POE</a> to conform to the
      <a href="&ppd4_uri;#provide_name_version">PPD4 specification</a></xd:short>
  </xd:doc>
  <xsl:template match="DEPENDENCY/@NAME[not(contains(., '-') or contains(., '::'))] | REQUIRE/@NAME[not(contains(., '::'))]">
    <xsl:attribute name="NAME">
      <xsl:value-of select="concat(., '::')"/>
    </xsl:attribute>
  </xsl:template>


  <xd:doc><xd:short>Convert version number</xd:short></xd:doc>
  <xsl:template match="SOFTPKG/@NAME[contains(., '.')]">
    <xsl:attribute name="NAME">
      <xsl:call-template name="remove-version">
        <xsl:with-param name="dist" select="."/>
      </xsl:call-template>
    </xsl:attribute>
  </xsl:template>


  <xd:doc><xd:short>Convert version number</xd:short></xd:doc>
  <xsl:template match="SOFTPKG/@VERSION">
    <xsl:attribute name="VERSION">
      <xsl:call-template name="clean-version">
        <xsl:with-param name="version" select="translate(.,',&gt;&lt;=','.')"/>
      </xsl:call-template>
    </xsl:attribute>
  </xsl:template>


  <xd:doc><xd:short>Remove empty or '0' or '0.00' versions</xd:short></xd:doc>
  <!--
  <xsl:template match="REQUIRE/@VERSION[translate(.,'0.','')='']" priority="1"/>
  <xsl:template match="DEPENDENCY/@VERSION[translate(.,'0.,','')='']" priority="1"/>
  -->
  <xsl:template match="@VERSION[local-name(..)='REQUIRE' or local-name(..) = 'DEPENDENCY'][translate(.,'0.,','')='']" priority="1"/>

  <xd:doc>Remove '&gt;=' in version numbers</xd:doc>
  <xsl:template match="@VERSION[local-name(..)='REQUIRE' or local-name(..) = 'DEPENDENCY']">
    <xsl:attribute name="VERSION">
      <xsl:value-of select="translate(.,'&gt;&lt;=','')"/>
    </xsl:attribute>
  </xsl:template>

  <xd:doc>
    <xd:short>Add &lt;<a href="&ppd4_uri;#architecture_name">ARCHITECTURE</a>&gt; and &lt;<a href="&ppd4_uri;#provide_name_version">PROVIDE</a>&gt; elements</xd:short>
  </xd:doc>
  <xsl:template match="IMPLEMENTATION">
    <xsl:copy>
      <xsl:apply-templates select="@*"/>
      <!-- Insert ARCHITECTURE element -->
      <xsl:if test="$arch != '' and count(ARCHITECTURE) = 0">
        <ARCHITECTURE>
          <xsl:attribute name="NAME"><xsl:value-of select="$arch" /></xsl:attribute>
        </ARCHITECTURE>
      </xsl:if>

      <!-- Insert PROVIDE elements from the 'provide' argument -->
      <xsl:call-template name="expand-provide">
        <xsl:with-param name="list" select="$provide"/>
        <xsl:with-param name="context" select="."/>
      </xsl:call-template>

      <xsl:apply-templates/>
    </xsl:copy>
  </xsl:template>

  <xd:doc>
    <xd:short><a href="&ppd4_uri;#changes_since_ppm3">Deprecated elements in PPM4</a></xd:short>
  </xd:doc>
  <xsl:template match="TITLE|OS|OSVERSION|PROCESSOR|PERLCORE"/>

  <xd:doc>
    Default rule: copy everything
  </xd:doc>
  <xsl:template match="node()|@*">
    <xsl:copy>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates/>
    </xsl:copy>
  </xsl:template>


  <xd:doc>
    <xd:short>Replace <em>$replace</em> in <em>$text</em> with <em>$with</em></xd:short>
    <xd:param name="text" type="string">Original text</xd:param>
    <xd:param name="replace" type="string">String to replace</xd:param>
    <xd:param name="with" type="string">Replacement</xd:param>
  </xd:doc>
  <xsl:template name="replace-string">
    <xsl:param name="text"/>
    <xsl:param name="replace"/>
    <xsl:param name="with"/>
    <xsl:choose>
      <xsl:when test="contains($text,$replace)">
        <xsl:value-of select="substring-before($text,$replace)"/>
        <xsl:value-of select="$with"/>
        <xsl:call-template name="replace-string">
          <xsl:with-param name="text" select="substring-after($text,$replace)"/>
          <xsl:with-param name="replace" select="$replace"/>
          <xsl:with-param name="with" select="$with"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$text"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>


  <xd:doc>
    <xd:short>Recursively removes '.0' at end of <em>$version</em></xd:short>
    <xd:param name="version" type="string">Version string</xd:param>
  </xd:doc>
  <xsl:template name="clean-version">
    <xsl:param name="version"/>
    <xsl:variable name="length" select="string-length($version)"/>
    <xsl:choose>
      <xsl:when test="substring($version, $length - 1) = '.0'">
        <xsl:call-template name="clean-version">
          <xsl:with-param name="version" select="substring($version, 1, $length - 2)"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$version"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xd:doc>
    <xd:short>Removes version number at end of <em>$dist</em></xd:short>
    <xd:param name="dist" type="string">Distribution name-version string</xd:param>
  </xd:doc>
  <xsl:template name="remove-version">
    <xsl:param name="dist"/>
    <xsl:choose>
      <xsl:when test="contains($dist, '-')">
        <xsl:variable name="after" select="substring-after($dist, '-')"/>
        <xsl:choose>
          <xsl:when test="contains($after, '-')">
            <xsl:value-of select="concat(substring-before($dist, '-'), '-')"/>
            <xsl:call-template name="remove-version">
              <xsl:with-param name="dist" select="$after"/>
            </xsl:call-template>
          </xsl:when>
          <xsl:when test="not (contains($after, '.') and translate($after, '.0123456789', '') = '')">
            <xsl:value-of select="$dist"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="substring-before($dist, '-')"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$dist"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xd:doc>
    <xd:short>Recursively expands a 'provides' list to &lt;<a href="&ppd4_uri;#provide_name_version">PROVIDE</a>&gt; elements</xd:short>
    <xd:param name="list" type="string">Input list, as text: 'Mod::Ule-1.0,Mod::Ule::Ext-1.5'</xd:param>
    <xd:param name="sep" type="string">List separator (',')</xd:param>
    <xd:param name="sep2" type="string">Module/Version separator ('-')</xd:param>
    <xd:param name="context" type="node">Context node</xd:param>
  </xd:doc>
  <xsl:template name="expand-provide">
    <xsl:param name="list" />
    <xsl:param name="sep" select="','"/>
    <xsl:param name="sep2" select="'-'"/>
    <xsl:param name="context" select="."/>
    <!--
    <xsl:message><xsl:value-of select="$list"/>&#10;</xsl:message>
    -->
    <xsl:choose>
      <xsl:when test="$list = ''"/>
      <xsl:when test="contains($list,$sep)">
        <xsl:call-template name="expand-provide">
          <xsl:with-param name="list" select="substring-before($list,$sep)"/>
        </xsl:call-template>
        <xsl:call-template name="expand-provide">
          <xsl:with-param name="list" select="substring-after($list,$sep)"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="name">
          <xsl:choose>
            <xsl:when test="contains($list,$sep2)">
              <xsl:value-of select="substring-before($list,$sep2)"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$list"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:if test="not($context/PROVIDE[@NAME = $name])">
          <PROVIDE>
            <xsl:attribute name="NAME">
              <xsl:value-of select="$name"/>
            </xsl:attribute>
            <xsl:variable name="version" select="substring-after($list,$sep2)"/>
            <xsl:if test="translate($version, '0,.', '') != ''">
              <xsl:attribute name="VERSION">
                <xsl:value-of select="$version"/>
              </xsl:attribute>
            </xsl:if>
          </PROVIDE>
        </xsl:if>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- vim:set sw=2 sts=2 et: -->
</xsl:stylesheet>
