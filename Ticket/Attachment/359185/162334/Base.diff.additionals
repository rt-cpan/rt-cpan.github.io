1788d1908
<   $self->_draw_additionals;
1876,1899d1995
< sub _draw_additionals{
<     my ($self) = @_;
<     my $length = 0;
<     
<     return 1 if $#{$self->{additionals}} == -1;
<     
<     $self->{num_infos}  = $#{ $self->{additionals} } + 1;
<     
<     for my $elem ( @{ $self->{additionals} } ){
<         my $t_length = length $elem;
<         $length = $t_length if $t_length > $length;
<     }
<     
<     $self->{max_info_label} = $length;
<     
<     if( $self->{legend} eq 'bottom' ){
<         $self->_draw_top_info;
<     }
<     else{
<         $self->_draw_bottom_info;
<     }
< 
<     return 1;
< }
1904d1999
<   my $is_additional = shift;
3220,3413d3314
< ## put the legend on the bottom of the chart
< sub _draw_bottom_info {
<   my $self = shift;
<   my $is_additional = shift;
<   my @labels = @{$self->{additionals}};
<   my ($x1, $y1, $x2, $x3, $y2, $empty_width, $max_label_width, $cols, $rows, $color, $brush);
<   my ($col_width, $row_height, $r, $c, $index, $x, $y, $w, $h, $axes_space);
<   my $font = $self->{'legend_font'};
< 
<   # make sure we're using a real font
<   unless ((ref ($font)) eq 'GD::Font') {
<     croak "The subtitle font you specified isn\'t a GD Font object";
<   }
< 
<   # get the size of the font
<   ($h, $w) = ($font->height, $font->width);
< 
<   # find the base x values
<   $axes_space = ($self->{'y_tick_label_length'} * $self->{'tick_label_font'}->width)
< 	        + $self->{'tick_len'} + (3 * $self->{'text_space'});
<   $x1 = $self->{'curr_x_min'} + $self->{'graph_border'};
<   $x2 = $self->{'curr_x_max'} - $self->{'graph_border'};
< 
<   if ($self->{'y_axes'} =~ /^right$/i) {
<      $x2 -= $axes_space;
<   }
<   elsif ($self->{'y_axes'} =~ /^both$/i) {
<      $x2 -= $axes_space;
<      $x1 += $axes_space;
<   }
<   else {
<      $x1 += $axes_space;
<   }
< 
< 
<   if ($self->{'y_label'}) {
<     $x1 += $self->{'label_font'}->height + 2 * $self->{'text_space'};
<   }
<   if ($self->{'y_label2'}) {
<     $x2 -= $self->{'label_font'}->height + 2 * $self->{'text_space'};
<   }
< 
<   # figure out how wide the columns need to be, and how many we
<   # can fit in the space available
<   $empty_width = ($x2 - $x1) - (2 * $self->{'legend_space'});
<   $max_label_width = $self->{'max_info_label'} * $w
<     + (4 * $self->{'text_space'}) + $self->{'legend_example_size'};
<   $cols = int ($empty_width / $max_label_width);
<   unless ($cols) {
<     $cols = 1;
<   }
<   $col_width = $empty_width / $cols;
< 
<   # figure out how many rows we need, remember how tall they are
<   $rows = int ($self->{'num_infos'} / $cols);
<   unless (($self->{'num_infos'} % $cols) == 0) {
<     $rows++;
<   }
<   unless ($rows) {
<     $rows = 1;
<   }
<   $row_height = $h + $self->{'text_space'};
< 
<   # box the legend off
<   $y1 = $self->{'curr_y_max'} - $self->{'text_space'}
<           - ($rows * $row_height) - (2 * $self->{'legend_space'});
<   $y2 = $self->{'curr_y_max'};
<   $self->{'gd_obj'}->rectangle($x1, $y1, $x2, $y2, 
<                                $self->_color_role_to_index('misc'));
<   $x1 += $self->{'legend_space'} + $self->{'text_space'};
<   $x2 -= $self->{'legend_space'};
<   $y1 += $self->{'legend_space'} + $self->{'text_space'};
<   $y2 -= $self->{'legend_space'} + $self->{'text_space'};
< 
<   # draw in the actual legend
<   for $r (0..$rows-1) {
<     for $c (0..$cols-1) {
<       $index = ($r * $cols) + $c;  # find the index in the label array
<       if ($labels[$index]) {
<         # get the color
<         $color = $self->_color_role_to_index('misc'); 
< 
<         # get the x-y coordinate for the start of the example line
<         $x = $x1 + ($col_width * $c);
<         $y = $y1 + ($row_height * $r) + $h/2;
< 
<         # now draw the label
<         $self->{'gd_obj'}->string($font, $x, $y, $labels[$index], $color);
<       }
<     }
<   }
< 
<   # mark off the space used
<   $self->{'curr_y_max'} -= ($rows * $row_height) + $self->{'text_space'}
< 			      + (2 * $self->{'legend_space'}); 
< 
<   # now return
<   return 1;
< }
< 
< 
< ## put the legend on top of the chart
< sub _draw_top_info {
<   my $self = shift;
<   my @labels = @{$self->{additionals}};
<   my ($x1, $y1, $x2, $x3, $y2, $empty_width, $max_label_width, $cols, $rows, $color, $brush);
<   my ($col_width, $row_height, $r, $c, $index, $x, $y, $w, $h, $axes_space);
<   my $font = $self->{'legend_font'};
< 
<   # make sure we're using a real font
<   unless ((ref ($font)) eq 'GD::Font') {
<     croak "The subtitle font you specified isn\'t a GD Font object";
<   }
< 
<   # get the size of the font
<   ($h, $w) = ($font->height, $font->width);
< 
<   # find the base x values
<   $axes_space = ($self->{'y_tick_label_length'} * $self->{'tick_label_font'}->width)
< 	        + $self->{'tick_len'} + (3 * $self->{'text_space'});
<   $x1 = $self->{'curr_x_min'} + $self->{'graph_border'};
<   $x2 = $self->{'curr_x_max'} - $self->{'graph_border'};
< 
<   if ($self->{'y_axes'} =~ /^right$/i) {
<      $x2 -= $axes_space;
<   }
<   elsif ($self->{'y_axes'} =~ /^both$/i) {
<      $x2 -= $axes_space;
<      $x1 += $axes_space;
<   }
<   else {
<      $x1 += $axes_space;
<   }
< 
<   # figure out how wide the columns can be, and how many will fit
<   $empty_width = ($x2 - $x1) - (2 * $self->{'legend_space'});
<   $max_label_width = (4 * $self->{'text_space'})
<     + ($self->{'max_info_label'} * $w)
<     + $self->{'legend_example_size'};
<   $cols = int ($empty_width / $max_label_width);
<   unless ($cols) {
<     $cols = 1;
<   }
<   $col_width = $empty_width / $cols;
< 
<   # figure out how many rows we need and remember how tall they are
<   $rows = int ($self->{'num_infos'} / $cols);
<   unless (($self->{'num_infos'} % $cols) == 0) {
<     $rows++;
<   }
<   unless ($rows) {
<     $rows = 1;
<   }
<   $row_height = $h + $self->{'text_space'};
< 
<   # box the legend off
<   $y1 = $self->{'curr_y_min'};
<   $y2 = $self->{'curr_y_min'} + $self->{'text_space'}
<           + ($rows * $row_height) + (2 * $self->{'legend_space'});
<   $self->{'gd_obj'}->rectangle($x1, $y1, $x2, $y2, 
<                                $self->_color_role_to_index('misc'));
< 
<   # leave some space inside the legend
<   $x1 += $self->{'legend_space'} + $self->{'text_space'};
<   $x2 -= $self->{'legend_space'};
<   $y1 += $self->{'legend_space'} + $self->{'text_space'};
<   $y2 -= $self->{'legend_space'} + $self->{'text_space'};
< 
<   # draw in the actual legend
<   for $r (0..$rows-1) {
<     for $c (0..$cols-1) {
<       $index = ($r * $cols) + $c;  # find the index in the label array
<       if ($labels[$index]) {
<         # get the color
<         $color = $self->_color_role_to_index('misc'); 
<         
<         # find the x-y coords
<         $x = $x1 + ($col_width * $c);
<         $y = $y1 + ($row_height * $r) + $h/2;
< 
<         $self->{'gd_obj'}->string($font, $x, $y, $labels[$index], $color);
<       }
<     }
<   }
<       
<   # mark off the space used
<   $self->{'curr_y_min'} += ($rows * $row_height) + $self->{'text_space'}
< 			      + 2 * $self->{'legend_space'}; 
< 
<   # now return
<   return 1;
< }
< 
< 
