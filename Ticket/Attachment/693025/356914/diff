diff --git a/lib/Class/Default.pm b/lib/Class/Default.pm
index 9b3001a..3931ca4 100644
--- a/lib/Class/Default.pm
+++ b/lib/Class/Default.pm
@@ -95,13 +95,13 @@ flexibility to an API that allows it to be used more confortably in
 different situations.
 
 A good example of this technique in use is CGI.pm. When you use a static
-method, like C<CGI->header>, your call is being applied to a default
+method, like C<< CGI->header >>, your call is being applied to a default
 instantiation of a CGI object.
 
 This technique appears to be especially usefull when writing modules that you
 want to be used in either a single use or a persistant environment. In a CGI
 like environment, you want the simplicity of a static interface. You can
-call C<Class->method> directly, without having to pass an instantiation 
+call C<< Class->method >> directly, without having to pass an instantiation 
 around constantly.
 
 =head1 USING THE MODULES
@@ -148,7 +148,7 @@ differences to the way your code works.
 
 When needed, Class::Default will make a new instantation of your class
 and cache it to be used whenever a static call is made. It does this in
-the simplest way possible, by calling C<Class->new()> with no arguments.
+the simplest way possible, by calling C<< Class->new() >> with no arguments.
 
 This is fine if you have a very pure class that can handle creating a
 new object without any arguments, but many classes expect some sort of
