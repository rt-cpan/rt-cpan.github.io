--- IPDevice/lib/IPDevice/IPv4.pm	2004-06-25 23:08:03.000000000 +0200
+++ IPDevice_patch/lib/IPDevice/IPv4.pm	2015-09-23 09:49:02.217207028 +0200
@@ -63,11 +63,10 @@
 sub check_ip {
   my $ip = shift;
   my @bytes = ($ip =~ /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/);
-  return -1 if @bytes != 4;             # Wir brauchen mindestens vier
-                                        # Substrings.
-  map {                                 # Prüfe, ob jede Zahl > 0 und < 255 ist.
-    return -2 if $_ eq '';              # Keine der Zahlen darf leer sein.
-    return -3 if ($_ < 0 or $_ > 255);  # Prüfe den Zahlenwert.
+  return -1 if @bytes != 4;             # We need 4 substrings.
+  map {                                 # Check if every number is > 0 and < 255.
+    return -2 if $_ eq '';              # None of numbers may be empty.
+    return -3 if ($_ < 0 or $_ > 255);  # Check the number value.
   } @bytes;
   return 0;
 }
@@ -82,9 +81,9 @@
   my $prefix = shift;
   $prefix =~ /^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/(\d{1,2})$/;
   my($ip, $pfxlen) = ($1, $2);
-  return -1 if check_ip($ip) < 0;                    # Prüfe den IP-Adressanteil.
-  return -2 if $pfxlen eq '';                  # Wir brauchen die Prefixlänge.
-  return -3 if ($pfxlen < 0 or $pfxlen > 32);  # Prefixlängen-Check.
+  return -1 if check_ip($ip) < 0;              # Check the IPv4 address.
+  return -2 if $pfxlen eq '';                  # We need the prefix length.
+  return -3 if ($pfxlen < 0 or $pfxlen > 32);  # Check the prefix length.
   return 0;
 }
 
