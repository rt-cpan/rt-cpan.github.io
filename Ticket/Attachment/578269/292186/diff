diff --git a/lib/IPC/Capture.pm b/lib/IPC/Capture.pm
index abc14d3..6e57665 100644
--- a/lib/IPC/Capture.pm
+++ b/lib/IPC/Capture.pm
@@ -12,11 +12,11 @@ IPC::Capture - portably run external apps and capture the output
    $ich->set_filter('stdout_only');
 
    my $output = $ich->run( $this_cmd );
-   if ( $output ) ) {
+   if ( $output ) {
       # work with $output...
    }
 
-   unless( $ich->can_run( $another_cmd ) {
+   unless( $ich->can_run( $another_cmd ) ) {
       die "Will not be able to run the external command: $another_cmd\n";
    }
 
@@ -159,7 +159,7 @@ Method that initializes object attributes and then locks them
 down to prevent accidental creation of new ones.
 
 Any class that inherits from this one should have an B<init> of
-it's own that calls this B<init>.  Otherwise, it's an internally
+its own that calls this B<init>.  Otherwise, it's an internally
 used routine that is not of much interest to client coders.
 
 =cut
@@ -470,7 +470,7 @@ sub can_run_qx_which {
 
 This is a method used internally by L</can_run_qx>.
 It looks for the given program by checking looking for
-an executible file of that name somewhere in the path.
+an executable file of that name somewhere in the path.
 
 =cut
 
@@ -686,7 +686,7 @@ run them via the L<IPC::Cmd> module, (which in turn will try
 to use L<IPC::Run> or L<Run::Open3>).
 
 The L</filter> setting determines what kind of
-IPC::Cmd call to use, and which of it's output channels will
+IPC::Cmd call to use, and which of its output channels will
 be returned.
 
 =over
@@ -796,7 +796,7 @@ sub run_ipc_cmd_all_separated {
 
 =item chomp_aref
 
-Like "chomp", but presumes it's been given an array reference
+Like "chomp", but presumes it has been given an array reference
 of strings to work on.
 
 =cut
@@ -897,7 +897,7 @@ also.
 If a qx fails, then this system will try another way of doing
 the job using the L<IPC::Cmd> module.
 
-If no way of running a simple command and capturing it's output
+If no way of running a simple command and capturing its output
 can be found, an error will be signalled during instantiation.
 
 L<IPC::Cmd> in turn uses L<IPC::Run> or L<IPC::Open3> (depending
@@ -922,7 +922,7 @@ a widely available program, with portability roughly on the
 same scale as perl.)
 
 The L<IPC::Cmd> module looked like a promising simplification
-over directly using L<IPC::Run> or L<IPC::Open3>, but it's
+over directly using L<IPC::Run> or L<IPC::Open3>, but its
 output capture features seemed clumsy.
 
 So: my first thought was to write a wrapper around the wrapper,
