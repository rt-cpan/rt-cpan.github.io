diff -rNu8p URI-1.35.org/MANIFEST URI-1.35/MANIFEST
--- URI-1.35.org/MANIFEST	2004-10-05 10:42:44.000000000 +0200
+++ URI-1.35/MANIFEST	2005-10-25 21:21:35.000000000 +0200
@@ -84,9 +84,11 @@ t/roytest5.html
 t/rsync.t
 t/rtsp.t
 t/split.t
 t/sip.t
 t/storable.t
 t/storable-test.pl
 t/urn-isbn.t
 t/urn-oid.t
+t/utf8.t
 uri-test
+META.yml                                 Module meta-data (added by MakeMaker)
diff -rNu8p URI-1.35.org/META.yml URI-1.35/META.yml
--- URI-1.35.org/META.yml	1970-01-01 01:00:00.000000000 +0100
+++ URI-1.35/META.yml	2005-10-25 21:21:35.000000000 +0200
@@ -0,0 +1,11 @@
+# http://module-build.sourceforge.net/META-spec.html
+#XXXXXXX This is a prototype!!!  It will change in the future!!! XXXXX#
+name:         URI
+version:      1.35.gerard.1
+version_from: URI.pm
+installdirs:  site
+requires:
+    MIME::Base64:                  2
+
+distribution_type: module
+generated_by: ExtUtils::MakeMaker version 6.17
diff -rNu8p URI-1.35.org/t/utf8.t URI-1.35/t/utf8.t
--- URI-1.35.org/t/utf8.t	1970-01-01 01:00:00.000000000 +0100
+++ URI-1.35/t/utf8.t	2005-10-25 21:47:43.000000000 +0200
@@ -0,0 +1,15 @@
+#!perl
+
+use strict;
+use warnings;
+
+use utf8;
+
+use Test::More 'no_plan';
+use URI;
+
+is(URI->new('http://foobar/mooi€e')->as_string, 'http://foobar/mooi%E2%82%ACe');
+
+my $uri = URI->new('http:');
+$uri->query_form("mooi€e" => "mooi€e");
+is( $uri->query, "mooi%E2%82%ACe=mooi%E2%82%ACe" );
diff -rNu8p URI-1.35.org/URI/Escape.pm URI-1.35/URI/Escape.pm
--- URI-1.35.org/URI/Escape.pm	2004-11-05 14:58:31.000000000 +0100
+++ URI-1.35/URI/Escape.pm	2005-10-25 21:44:20.000000000 +0200
@@ -210,9 +210,13 @@ sub uri_unescape
 	    s/%([0-9A-Fa-f]{2})/chr(hex($1))/eg;
 	}
 	return @str;
     }
     $str =~ s/%([0-9A-Fa-f]{2})/chr(hex($1))/eg if defined $str;
     $str;
 }
 
+sub escape_char {
+    return join '', @URI::Escape::escapes{$_[0] =~ /(\C)/g};
+}
+
 1;
diff -rNu8p URI-1.35.org/URI/file/Base.pm URI-1.35/URI/file/Base.pm
--- URI-1.35.org/URI/file/Base.pm	2004-09-07 10:34:36.000000000 +0200
+++ URI-1.35/URI/file/Base.pm	2005-10-25 21:43:01.000000000 +0200
@@ -11,29 +11,29 @@ sub new
 
     my($auth, $escaped_auth, $escaped_path);
 
     ($auth, $escaped_auth) = $class->_file_extract_authority($path);
     ($path, $escaped_path) = $class->_file_extract_path($path);
 
     if (defined $auth) {
 	$auth =~ s,%,%25,g unless $escaped_auth;
-	$auth =~ s,([/?\#]),$URI::Escape::escapes{$1},g;
+	$auth =~ s,([/?\#]), URI::Escape::escape_char($1),eg;
 	$auth = "//$auth";
 	if (defined $path) {
 	    $path = "/$path" unless substr($path, 0, 1) eq "/";
 	} else {
 	    $path = "";
 	}
     } else {
 	return undef unless defined $path;
 	$auth = "";
     }
 
-    $path =~ s,([%;?]),$URI::Escape::escapes{$1},g unless $escaped_path;
+    $path =~ s,([%;?]), URI::Escape::escape_char($1),eg unless $escaped_path;
     $path =~ s/\#/%23/g;
 
     my $uri = $auth . $path;
     $uri = "file:$uri" if substr($uri, 0, 1) eq "/";
 
     URI->new($uri, "file");
 }
 
diff -rNu8p URI-1.35.org/URI/file/Mac.pm URI-1.35/URI/file/Mac.pm
--- URI-1.35.org/URI/file/Mac.pm	2004-09-07 10:34:36.000000000 +0200
+++ URI-1.35/URI/file/Mac.pm	2005-10-25 21:43:01.000000000 +0200
@@ -20,17 +20,17 @@ sub _file_extract_path
 	} else {
 	    @pre = ("..") x (length($1) - 1);
 	}
     } else { #absolute
 	$pre[0] = "";
     }
 
     my $isdir = ($path =~ s/:$//);
-    $path =~ s,([%/;]),$URI::Escape::escapes{$1},g;
+    $path =~ s,([%/;]), URI::Escape::escape_char($1),eg;
 
     my @path = split(/:/, $path, -1);
     for (@path) {
 	if ($_ eq "." || $_ eq "..") {
 	    $_ = "%2E" x length($_);
 	}
 	$_ = ".." unless length($_);
     }
diff -rNu8p URI-1.35.org/URI/_generic.pm URI-1.35/URI/_generic.pm
--- URI-1.35.org/URI/_generic.pm	2003-07-24 01:45:54.000000000 +0200
+++ URI-1.35/URI/_generic.pm	2005-10-25 21:43:15.000000000 +0200
@@ -17,17 +17,17 @@ sub authority
     my $self = shift;
     $$self =~ m,^((?:$URI::scheme_re:)?)(?://([^/?\#]*))?(.*)$,os or die;
 
     if (@_) {
 	my $auth = shift;
 	$$self = $1;
 	my $rest = $3;
 	if (defined $auth) {
-	    $auth =~ s/([^$ACHAR])/$URI::Escape::escapes{$1}/go;
+	    $auth =~ s/([^$ACHAR])/ URI::Escape::escape_char($1)/ego;
 	    $$self .= "//$auth";
 	}
 	_check_path($rest, $$self);
 	$$self .= $rest;
     }
     $2;
 }
 
@@ -36,34 +36,34 @@ sub path
     my $self = shift;
     $$self =~ m,^((?:[^:/?\#]+:)?(?://[^/?\#]*)?)([^?\#]*)(.*)$,s or die;
 
     if (@_) {
 	$$self = $1;
 	my $rest = $3;
 	my $new_path = shift;
 	$new_path = "" unless defined $new_path;
-	$new_path =~ s/([^$PCHAR])/$URI::Escape::escapes{$1}/go;
+	$new_path =~ s/([^$PCHAR])/ URI::Escape::escape_char($1)/ego;
 	_check_path($new_path, $$self);
 	$$self .= $new_path . $rest;
     }
     $2;
 }
 
 sub path_query
 {
     my $self = shift;
     $$self =~ m,^((?:[^:/?\#]+:)?(?://[^/?\#]*)?)([^\#]*)(.*)$,s or die;
 
     if (@_) {
 	$$self = $1;
 	my $rest = $3;
 	my $new_path = shift;
 	$new_path = "" unless defined $new_path;
-	$new_path =~ s/([^$URI::uric])/$URI::Escape::escapes{$1}/go;
+	$new_path =~ s/([^$URI::uric])/ URI::Escape::escape_char($1)/ego;
 	_check_path($new_path, $$self);
 	$$self .= $new_path . $rest;
     }
     $2;
 }
 
 sub _check_path
 {
diff -rNu8p URI-1.35.org/URI/_query.pm URI-1.35/URI/_query.pm
--- URI-1.35.org/URI/_query.pm	2004-04-06 11:36:53.000000000 +0200
+++ URI-1.35/URI/_query.pm	2005-10-25 21:43:15.000000000 +0200
@@ -8,17 +8,17 @@ sub query
 {
     my $self = shift;
     $$self =~ m,^([^?\#]*)(?:\?([^\#]*))?(.*)$,s or die;
 
     if (@_) {
 	my $q = shift;
 	$$self = $1;
 	if (defined $q) {
-	    $q =~ s/([^$URI::uric])/$URI::Escape::escapes{$1}/go;
+	    $q =~ s/([^$URI::uric])/ URI::Escape::escape_char($1)/ego;
 	    $$self .= "?$q";
 	}
 	$$self .= $3;
     }
     $2;
 }
 
 # Handle ...?foo=bar&bar=foo type of query
@@ -35,22 +35,22 @@ sub query_form {
 	    }
 	    elsif (ref($n) eq "HASH") {
 		@new = %$n;
 	    }
 	}
         my @query;
         while (my($key,$vals) = splice(@new, 0, 2)) {
             $key = '' unless defined $key;
-	    $key =~ s/([;\/?:@&=+,\$\[\]%])/$URI::Escape::escapes{$1}/g;
+	    $key =~ s/([;\/?:@&=+,\$\[\]%])/ URI::Escape::escape_char($1)/eg;
 	    $key =~ s/ /+/g;
 	    $vals = [ref($vals) eq "ARRAY" ? @$vals : $vals];
             for my $val (@$vals) {
                 $val = '' unless defined $val;
-		$val =~ s/([;\/?:@&=+,\$\[\]%])/$URI::Escape::escapes{$1}/g;
+		$val =~ s/([;\/?:@&=+,\$\[\]%])/ URI::Escape::escape_char($1)/eg;
                 $val =~ s/ /+/g;
                 push(@query, "$key=$val");
             }
         }
         $self->query(@query ? join('&', @query) : undef);
     }
     return if !defined($old) || !length($old) || !defined(wantarray);
     return unless $old =~ /=/; # not a form
@@ -62,17 +62,17 @@ sub query_form {
 sub query_keywords
 {
     my $self = shift;
     my $old = $self->query;
     if (@_) {
         # Try to set query string
 	my @copy = @_;
 	@copy = @{$copy[0]} if @copy == 1 && ref($copy[0]) eq "ARRAY";
-	for (@copy) { s/([;\/?:@&=+,\$\[\]%])/$URI::Escape::escapes{$1}/g; }
+	for (@copy) { s/([;\/?:@&=+,\$\[\]%])/ URI::Escape::escape_char($1)/eg; }
 	$self->query(@copy ? join('+', @copy) : undef);
     }
     return if !defined($old) || !defined(wantarray);
     return if $old =~ /=/;  # not keywords, but a form
     map { uri_unescape($_) } split(/\+/, $old, -1);
 }
 
 # Some URI::URL compatibility stuff
diff -rNu8p URI-1.35.org/URI/sip.pm URI-1.35/URI/sip.pm
--- URI-1.35.org/URI/sip.pm	2004-06-03 15:21:40.000000000 +0200
+++ URI-1.35/URI/sip.pm	2005-10-25 21:43:15.000000000 +0200
@@ -25,17 +25,17 @@ sub authority
     $$self =~ m,^($URI::scheme_re:)?([^;?]*)(.*)$,os or die;
     my $old = $2;
 
     if (@_) {
         my $auth = shift;
         $$self = defined($1) ? $1 : "";
         my $rest = $3;
         if (defined $auth) {
-            $auth =~ s/([^$URI::uric])/$URI::Escape::escapes{$1}/go;
+            $auth =~ s/([^$URI::uric])/ URI::Escape::escape_char($1)/ego;
             $$self .= "$auth";
         }
         $$self .= $rest;
     }
     $old;
 }
 
 sub params_form
diff -rNu8p URI-1.35.org/URI/Split.pm URI-1.35/URI/Split.pm
--- URI-1.35.org/URI/Split.pm	2004-01-14 14:33:44.000000000 +0100
+++ URI-1.35/URI/Split.pm	2005-10-25 21:43:15.000000000 +0200
@@ -13,30 +13,30 @@ sub uri_split {
      return $_[0] =~ m,(?:([^:/?#]+):)?(?://([^/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?,;
 }
 
 sub uri_join {
     my($scheme, $auth, $path, $query, $frag) = @_;
     my $uri = defined($scheme) ? "$scheme:" : "";
     $path = "" unless defined $path;
     if (defined $auth) {
-	$auth =~ s,([/?\#]),$URI::Escape::escapes{$1},g;
+	$auth =~ s,([/?\#]), URI::Escape::escape_char($1),eg;
 	$uri .= "//$auth";
 	$path = "/$path" if length($path) && $path !~ m,^/,;
     }
     elsif ($path =~ m,^//,) {
 	$uri .= "//";  # XXX force empty auth
     }
     unless (length $uri) {
-	$path =~ s,(:),$URI::Escape::escapes{$1}, while $path =~ m,^[^:/?\#]+:,;
+	$path =~ s,(:), URI::Escape::escape_char($1),e while $path =~ m,^[^:/?\#]+:,;
     }
-    $path =~ s,([?\#]),$URI::Escape::escapes{$1},g;
+    $path =~ s,([?\#]), URI::Escape::escape_char($1),eg;
     $uri .= $path;
     if (defined $query) {
-	$query =~ s,(\#),$URI::Escape::escapes{$1},g;
+	$query =~ s,(\#), URI::Escape::escape_char($1),eg;
 	$uri .= "?$query";
     }
     $uri .= "#$frag" if defined $frag;
     $uri;
 }
 
 1;
 
diff -rNu8p URI-1.35.org/URI.pm URI-1.35/URI.pm
--- URI-1.35.org/URI.pm	2004-11-05 15:17:33.000000000 +0100
+++ URI-1.35/URI.pm	2005-10-25 21:38:10.000000000 +0200
@@ -1,13 +1,13 @@
 package URI;
 
 use strict;
 use vars qw($VERSION);
-$VERSION = "1.35"; # $Date: 2004/11/05 14:17:33 $
+$VERSION = "1.35.gerard.1"; # $Date: 2004/11/05 14:17:33 $
 
 use vars qw($ABS_REMOTE_LEADING_DOTS $ABS_ALLOW_RELATIVE_SCHEME);
 
 my %implements;  # mapping from scheme to implementor class
 
 # Some "official" character classes
 
 use vars qw($reserved $mark $unreserved $uric $scheme_re);
@@ -68,17 +68,18 @@ sub new_abs
     $uri->abs($base);
 }
 
 
 sub _init
 {
     my $class = shift;
     my($str, $scheme) = @_;
-    $str =~ s/([^$uric\#])/$URI::Escape::escapes{$1}/go;
+    # find all funny characters and encode the bytes.
+    $str =~ s*([^$uric\#])* URI::Escape::escape_char($1) *ego;
     $str = "$scheme:$str" unless $str =~ /^$scheme_re:/o ||
                                  $class->_no_scheme_ok;
     my $self = bless \$str, $class;
     $self;
 }
 
 
 sub implementor
@@ -199,17 +200,17 @@ sub opaque
               $/sx or die;
 
     my $old_scheme = $1;
     my $old_opaque = $2;
     my $old_frag   = $3;
 
     my $new_opaque = shift;
     $new_opaque = "" unless defined $new_opaque;
-    $new_opaque =~ s/([^$uric])/$URI::Escape::escapes{$1}/go;
+    $new_opaque =~ s/([^$uric])/ URI::Escape::escape_char($1)/ego;
 
     $$self = defined($old_scheme) ? $old_scheme : "";
     $$self .= $new_opaque;
     $$self .= $old_frag if defined $old_frag;
 
     $old_opaque;
 }
 
@@ -224,17 +225,17 @@ sub fragment
 	return $1;
     }
 
     my $old;
     $old = $1 if $$self =~ s/\#(.*)//s;
 
     my $new_frag = shift;
     if (defined $new_frag) {
-	$new_frag =~ s/([^$uric])/$URI::Escape::escapes{$1}/go;
+	$new_frag =~ s/([^$uric])/ URI::Escape::escape_char($1) /ego;
 	$$self .= "#$new_frag";
     }
     $old;
 }
 
 
 sub as_string
 {
