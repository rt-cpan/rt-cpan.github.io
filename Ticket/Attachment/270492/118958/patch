--- 017Watch.t	2006-10-27 11:27:43.000000000 +0900
+++ 017Watch.t.patched	2006-12-03 16:17:44.978625000 +0900
@@ -231,100 +231,113 @@
 # ***************************************************************
 # Check the 'recreate' feature with check_interval
 
-trunc($testfile);
-$conf3 = <<EOL;
-log4j.category.animal.dog   = INFO, myAppender
-
-log4j.appender.myAppender          = Log::Log4perl::Appender::File
-log4j.appender.myAppender.layout   = Log::Log4perl::Layout::SimpleLayout
-log4j.appender.myAppender.filename = $testfile
-log4j.appender.myAppender.recreate = 1
-log4j.appender.myAppender.recreate_check_interval = 1
-log4j.appender.myAppender.mode     = append
+SKIP: {
+  skip "Unlinking an open file not supported on Win32", 1 if $^O eq "MSWin32";
+
+  trunc($testfile);
+  $conf3 = <<EOL;
+    log4j.category.animal.dog   = INFO, myAppender
+
+    log4j.appender.myAppender          = Log::Log4perl::Appender::File
+    log4j.appender.myAppender.layout   = Log::Log4perl::Layout::SimpleLayout
+    log4j.appender.myAppender.filename = $testfile
+    log4j.appender.myAppender.recreate = 1
+    log4j.appender.myAppender.recreate_check_interval = 1
+    log4j.appender.myAppender.mode     = append
 EOL
 
   # Create logfile
-Log::Log4perl->init(\$conf3);
+  Log::Log4perl->init(\$conf3);
   # ... and immediately remove it
-unlink $testfile;
+  unlink $testfile or die "Cannot unlink ($!)";
 
-print "sleeping for 2 secs\n";
-sleep(2);
+  print "sleeping for 2 secs\n";
+  sleep(2);
 
-$logger = Log::Log4perl::get_logger('animal.dog');
-$logger->info("test1");
-open (LOG, $testfile) or die "can't open $testfile $!";
-is(scalar <LOG>, "INFO - test1\n", "recreate before first write");
-close LOG;
+  $logger = Log::Log4perl::get_logger('animal.dog');
+  $logger->info("test1");
+  open (LOG, $testfile) or die "can't open $testfile $!";
+  is(scalar <LOG>, "INFO - test1\n", "recreate before first write");
+  close LOG;
+};
 
 # ***************************************************************
 # Check the 'recreate' feature with check_interval (2nd write)
 
-trunc($testfile);
-$conf3 = <<EOL;
-log4j.category.animal.dog   = INFO, myAppender
-
-log4j.appender.myAppender          = Log::Log4perl::Appender::File
-log4j.appender.myAppender.layout   = Log::Log4perl::Layout::SimpleLayout
-log4j.appender.myAppender.filename = $testfile
-log4j.appender.myAppender.recreate = 1
-log4j.appender.myAppender.recreate_check_interval = 1
-log4j.appender.myAppender.mode     = append
+SKIP: {
+  skip "Unlinking an open file not supported on Win32", 1 if $^O eq "MSWin32";
+
+  trunc($testfile);
+  $conf3 = <<EOL;
+    log4j.category.animal.dog   = INFO, myAppender
+
+    log4j.appender.myAppender          = Log::Log4perl::Appender::File
+    log4j.appender.myAppender.layout   = Log::Log4perl::Layout::SimpleLayout
+    log4j.appender.myAppender.filename = $testfile
+    log4j.appender.myAppender.recreate = 1
+    log4j.appender.myAppender.recreate_check_interval = 1
+    log4j.appender.myAppender.mode     = append
 EOL
 
   # Create logfile
-Log::Log4perl->init(\$conf3);
+  Log::Log4perl->init(\$conf3);
 
   # Write to it
-$logger = Log::Log4perl::get_logger('animal.dog');
-$logger->info("test1");
+  $logger = Log::Log4perl::get_logger('animal.dog');
+  $logger->info("test1");
 
-  # ... remove it
-unlink $testfile;
+  # ... remove it (this fails on Win32)
+  unlink $testfile or die "Cannot unlink ($!)";
 
-print "sleeping for 2 secs\n";
-sleep(2);
+  print "sleeping for 2 secs\n";
+  sleep(2);
 
   # ... write again
-$logger->info("test2");
+  $logger->info("test2");
 
-open (LOG, $testfile) or die "can't open $testfile $!";
-is(scalar <LOG>, "INFO - test2\n", "recreate before 2nd write");
-close LOG;
+  open (LOG, $testfile) or die "can't open $testfile $!";
+  is(scalar <LOG>, "INFO - test2\n", "recreate before 2nd write");
+  close LOG;
+};
 
 # ***************************************************************
 # Check the 'recreate' feature with moved/recreated file
 
-trunc($testfile);
-$conf3 = <<EOL;
-log4j.category.animal.dog   = INFO, myAppender
-
-log4j.appender.myAppender          = Log::Log4perl::Appender::File
-log4j.appender.myAppender.layout   = Log::Log4perl::Layout::SimpleLayout
-log4j.appender.myAppender.filename = $testfile
-log4j.appender.myAppender.recreate = 1
-log4j.appender.myAppender.recreate_check_interval = 1
-log4j.appender.myAppender.mode     = append
+SKIP: {
+  skip "Renaming an open file not supported on Win32", 1 if $^O eq "MSWin32";
+
+  trunc($testfile);
+  $conf3 = <<EOL;
+    log4j.category.animal.dog   = INFO, myAppender
+
+    log4j.appender.myAppender          = Log::Log4perl::Appender::File
+    log4j.appender.myAppender.layout   = Log::Log4perl::Layout::SimpleLayout
+    log4j.appender.myAppender.filename = $testfile
+    log4j.appender.myAppender.recreate = 1
+    log4j.appender.myAppender.recreate_check_interval = 1
+    log4j.appender.myAppender.mode     = append
 EOL
 
   # Create logfile
-Log::Log4perl->init(\$conf3);
+  Log::Log4perl->init(\$conf3);
 
   # Get a logger, but dont write to it
-$logger = Log::Log4perl::get_logger('animal.dog');
+  $logger = Log::Log4perl::get_logger('animal.dog');
 
-rename "$testfile", "$testfile.old" or die "Cannot rename ($!)";
+  # this fails on Win32
+  rename "$testfile", "$testfile.old" or die "Cannot rename ($!)";
   # recreate it
-trunc($testfile);
+  trunc($testfile);
 
-print "sleeping for 2 secs\n";
-sleep(2);
+  print "sleeping for 2 secs\n";
+  sleep(2);
 
   # ... write to (hopefully) truncated file
-$logger->info("test3");
+  $logger->info("test3");
 
-open (LOG, $testfile) or die "can't open $testfile $!";
-is(scalar <LOG>, "INFO - test3\n", "log to externally recreated file");
-close LOG;
+  open (LOG, $testfile) or die "can't open $testfile $!";
+  is(scalar <LOG>, "INFO - test3\n", "log to externally recreated file");
+  close LOG;
 
-unlink "$testfile.old";
+  unlink "$testfile.old";
+};
