diff --git a/lib/CGI/QuickFormR.pm b/lib/CGI/QuickFormR.pm
index 93a3ec2..6083a66 100644
--- a/lib/CGI/QuickFormR.pm
+++ b/lib/CGI/QuickFormR.pm
@@ -721,7 +721,7 @@ Optional boolean (default false). If false QuickFormR behaves as it always has
 producing a two column table, the first column with field names and the second
 column with field values. If true QuickFormR will put all field names and field
 values in the same row, except where you force a new row to be used by marking
-some fields with C<-END_ROW => 1,>. See the field-level options C<-START_ROW>,
+some fields with C<< -END_ROW => 1, >>. See the field-level options C<-START_ROW>,
 C<-END_ROW> and C<-COLSPAN>. See C<example2> and C<example4> which have been
 updated to demonstrate these options.
 
@@ -966,12 +966,12 @@ is given since C<-VALIDATE> overrides (see later).
 Optional booleans, default is true. These options are only relevant if the
 form-level C<-MULTI_COLUMN> option is set to true in which case these options
 are used to identify at which fields rows start and end. In practice
-C<-START_ROW> should never be needed; simply set C<-END_ROW => 1,> in each
+C<-START_ROW> should never be needed; simply set C<< -END_ROW => 1, >> in each
 field which is to be the last field in a given row. Note that because some
 fields may need to span several columns e.g. a layout where say the first two
 fields are side-by-side and the following field is so wide it must take the
 whole width; the wider field's C<-COLSPAN> setting may need to be set to
-C<-COLSPAN => 3,> or similar. See C<example2> and C<example4> which have been
+C<< -COLSPAN => 3, >> or similar. See C<example2> and C<example4> which have been
 updated to demonstrate these options.
 
 =item C<-STYLE_*>
@@ -1101,7 +1101,7 @@ styles on a per field basis by including them as field-level options, e.g.
 
 If you have set a style at form-level but do not wish it to apply to a
 particular row you can over-ride either by setting a new style for the row as
-in the example above or by coding C<-STYLE_ROW => ' '> for example; we have to
+in the example above or by coding C<< -STYLE_ROW => ' ' >> for example; we have to
 use a space because if we used the empty string or undef the global style
 would be applied.
 
