--- Search.pm	2011-09-14 17:29:05.000000000 +0400
+++ ./Sphinx/Search.pm	2011-09-15 13:49:38.000000000 +0400
@@ -279,6 +279,8 @@
 	_port		=> 9312,
 	_path           => undef,
 	_socket         => undef,
+    _persistent     => undef,
+    _connectretries => 1,
 
 	# per-query settings
 	_offset		=> 0,
@@ -488,17 +490,38 @@
     $self->{_timeout} = $timeout;
 }
 
+=head2 SetConnectRetries
+
+    $sph->SetConnectRetries($retries)
+
+Set server connection retries (in case of connection fail).
+
+Returns $sph.
+
+=cut
+
+sub SetConnectRetries {
+    my $self = shift;
+    my $retires = shift;
+    croak("connectretries is not numeric") unless ($retires =~  m/$num_re/);
+    $self->{connectretries} = $retires;
+}
+
+
 sub _Send {
     my $self = shift;
     my $fp = shift;
     my $data = shift;
 
     $self->{_log}->debug("Writing to socket") if $self->{_debug};
-    $fp->write($data); return 1;
-    if ($fp->eof || ! $fp->write($data)) {
-	$self->_Error("connection unexpectedly closed (timed out?): $!");
-	$self->{_connerror} = 1;
-	return 0;
+    unless ( send($fp,$data,0)){
+        $self->_Error("connection unexpectedly closed (timed out?): $!");
+        $self->{_connerror} = 1;
+        if ($self->{_socket}) {
+            close($self->{_socket});
+            undef $self->{_socket};
+        }
+        return 0;
     }
     return 1;
 }
@@ -507,7 +530,7 @@
 
 sub _Connect {
 	my $self = shift;
-	
+    $self->_Error(); #reset old errors in new connection 
 	if ($self->{_socket}) {
 	    # persistent connection, check it
 	    return $self->{_socket} if $self->{_socket}->connected;
@@ -563,10 +586,22 @@
 	$self->{_log}->debug("Sending version") if $debug;
 
 	# All ok, send my version
-	$self->_Send($fp, pack("N", 1)) or return 0;
-
+	unless ($self->_Send($fp, pack("N", 1))) {
+	    $self->{_connerror} = 1;
+        $self->_Error("error while send version");
+        return 0;
+    }
 	$self->{_log}->debug("Connection complete") if $debug;
-
+    
+    if ($self->{_persistent}) {
+        my $req = pack("nnNN", SEARCHD_COMMAND_PERSIST, 0, 4, 1);
+        unless ($self->_Send($fp, $req)) {
+	    $self->{_connerror} = 1;
+            $self->_Error("error while set persistent connection");
+            return 0;
+        }
+        $self->{_socket} = $fp;        
+    }
 	return $fp;
 }
 
@@ -577,12 +612,14 @@
 	my $self = shift;
 	my $fp = shift;
 	my $client_ver = shift;
-
 	my $header;
-	defined($fp->read($header, 8, 0)) or do {
-	    $self->_Error("read failed: $!");
-	    return 0;
-	};
+    my $resp = $fp->read($header, 8, 0);
+    if (!defined($resp) || $resp==0) {
+        close $self->{_socket};
+        undef $self->{_socket};
+        $self->_Error("read failed: $!");
+        return 0;
+    }
 
 	my ($status, $ver, $len ) = unpack("n2N", $header);
 	if ( ! defined($len) ) {
@@ -590,7 +627,7 @@
 	    return 0;
 	}
 
-        my $response = q{};
+    my $response = q{};
 	my $lasterror = q{};
 	my $lentotal = 0;
 	while (my $rlen = $fp->read(my $chunk, $len)) {
@@ -636,6 +673,27 @@
         return $response;
 }
 
+#-----------------------------------------------
+# connect to searchd, send request and get data 
+
+sub _ProcessRequest {
+    my ($self,$req) = @_;
+    return unless $req;
+    my $tries = $self->{_connectretries} + 1;
+    while( $tries-- ) {
+        my $fp = $self->_Connect;
+        if (! $fp) {
+            next if $self->IsConnectError;
+            last;
+        }
+        $self->_Send($fp, $req) or next;
+        my $response = $self->_GetResponse ($fp, VER_COMMAND_SEARCH);
+        return $response if $response;
+    }
+    $self->_Error($self->GetLastError . "... ConnectRetries exceed...") if $self->IsConnectError;
+    return 0;
+}
+
 =head2 SetLimits
 
     $sph->SetLimits($offset, $limit);
@@ -1522,19 +1580,14 @@
 	return;
     }
 
-    my $fp = $self->_Connect() or do { $self->{_reqs} = []; return };
-
     ##################
     # send query, get response
     ##################
     my $nreqs = @{$self->{_reqs}};
     my $req = pack("Na*", $nreqs, join("", @{$self->{_reqs}}));
     $req = pack ( "nnN/a*", SEARCHD_COMMAND_SEARCH, VER_COMMAND_SEARCH, $req); # add header
-    $self->_Send($fp, $req);
-
+    my $response = $self->_ProcessRequest($req);
     $self->{_reqs} = [];
-		   
-    my $response = $self->_GetResponse ( $fp, VER_COMMAND_SEARCH );
     return unless $response;
 
     ##################
@@ -1733,7 +1786,6 @@
 		    && defined($index) 
 		    && defined($words) 
 		    && ref($opts) eq 'HASH');
-        my $fp = $self->_Connect() or return;
 
 	##################
 	# fixup options
@@ -1798,9 +1850,8 @@
 	##########################
 
 	$req = pack ( "nnN/a*", SEARCHD_COMMAND_EXCERPT, VER_COMMAND_EXCERPT, $req); # add header
-	$self->_Send($fp, $req);
-	
-	my $response = $self->_GetResponse($fp, VER_COMMAND_EXCERPT) or return;
+    my $response = $self->_ProcessRequest($req);
+    return unless $response;
 	my ($pos, $i) = 0;
 	my $res = [];	# Empty hash ref
         my $rlen = length($response);
@@ -1852,7 +1903,6 @@
 sub BuildKeywords {
     my ( $self, $query, $index, $hits ) = @_;
 
-    my $fp = $self->_Connect() or return;
 
     # v.1.0 req
     my $req = pack("N/a*", $self->{_string_encoder}->($query) );
@@ -1864,8 +1914,7 @@
     ##################
 
     $req = pack ( "nnN/a*", SEARCHD_COMMAND_KEYWORDS, VER_COMMAND_KEYWORDS, $req);
-    $self->_Send($fp, $req);
-    my $response = $self->_GetResponse ( $fp, VER_COMMAND_KEYWORDS );
+    my $response = $self->_ProcessRequest($req);
     return unless $response;
 
     ##################
@@ -2005,12 +2054,10 @@
     }
 
     ## connect, send query, get response
-    my $fp = $self->_Connect() or return;
 
     $req = pack ( "nnN/a*", SEARCHD_COMMAND_UPDATE, VER_COMMAND_UPDATE, $req); ## add header
-    send ( $fp, $req, 0);
+    my $response = $self->_ProcessRequest($req);
 
-    my $response = $self->_GetResponse ( $fp, VER_COMMAND_UPDATE );
     return unless $response;
 
     ## parse response
@@ -2034,17 +2081,12 @@
 
 sub Open {
     my $self = shift;
-
+    $self->{_persistent} = 1;
     if ($self->{_socket}) {
 	$self->_Error("already connected");
 	return 0;
     }
     my $fp = $self->_Connect() or return 0;
-
-    my $req = pack("nnNN", SEARCHD_COMMAND_PERSIST, 0, 4, 1);
-    $self->_Send($fp, $req) or return 0;
-
-    $self->{_socket} = $fp;
     return 1;
 }
 
@@ -2060,6 +2102,7 @@
 
 sub Close {
     my $self = shift;
+    $self->{_persistent} = 0;
 
     if (! $self->{_socket}) {
 	$self->_Error("not connected");
@@ -2085,12 +2128,10 @@
 sub Status {
     
     my $self = shift;
-
-    my $fp = $self->_Connect() or return;
    
     my $req = pack("nnNN", SEARCHD_COMMAND_STATUS, VER_COMMAND_STATUS, 4, 1 ); # len=4, body=1
-    $self->_Send($fp, $req) or return;
-    my $response = $self->_GetResponse ( $fp, VER_COMMAND_STATUS );
+
+    my $response = $self->_ProcessRequest($req);
     return unless $response;
 
     my $p = 0;
@@ -2121,12 +2162,9 @@
 
 sub FlushAttributes {
     my $self = shift;
-
-    my $fp = $self->_Connect() or return;
     
     my $req = pack("nnN", SEARCHD_COMMAND_FLUSHATTRS, VER_COMMAND_FLUSHATTRS, 0 ); # len=0
-    $self->_Send($fp, $req) or return;
-    my $response = $self->_GetResponse ( $fp, VER_COMMAND_FLUSHATTRS );
+    my $response = $self->_ProcessRequest($req);
     return unless $response;
     
     my $tag = -1;
