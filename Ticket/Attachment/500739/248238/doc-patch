diff -ru Catalyst-Plugin-Authentication-0.10007/lib/Catalyst/Authentication/Store.pod Catalyst-Plugin-Authentication-0.10007-new/lib/Catalyst/Authentication/Store.pod
--- Catalyst-Plugin-Authentication-0.10007/lib/Catalyst/Authentication/Store.pod	2007-11-22 17:49:04.000000000 +0000
+++ Catalyst-Plugin-Authentication-0.10007-new/lib/Catalyst/Authentication/Store.pod	2008-08-24 15:40:11.000000000 +0100
@@ -78,7 +78,7 @@
 C<from_session> method. When the user object is saved in the session the
 C<for_session> method is called, and that is used as the value in the session
 (typically a user id). The store is also saved in the hash. If
-C<<$user->store>> returns something registered, that store's name is used. If
+C<< $user->store >> returns something registered, that store's name is used. If
 not, the user's class is used as if it were a store (and must also support
 C<from_session>).
 
diff -ru Catalyst-Plugin-Authentication-0.10007/lib/Catalyst/Plugin/Authentication.pm Catalyst-Plugin-Authentication-0.10007-new/lib/Catalyst/Plugin/Authentication.pm
--- Catalyst-Plugin-Authentication-0.10007/lib/Catalyst/Plugin/Authentication.pm	2008-08-18 06:10:07.000000000 +0100
+++ Catalyst-Plugin-Authentication-0.10007-new/lib/Catalyst/Plugin/Authentication.pm	2008-08-24 15:42:48.000000000 +0100
@@ -560,7 +560,7 @@
 
 When user input is transferred to the L<Catalyst> application
 (typically via form inputs) the application may pass this information
-into the authentication system through the C<<$c->authenticate()>>
+into the authentication system through the C<< $c->authenticate() >>
 method.  From there, it is passed to the appropriate Credential
 verifier.
 
@@ -639,7 +639,6 @@
             	        }
                 	}
                 };
-    
 
 This tells the authentication plugin what realms are available, which
 credential and store modules are used, and the configuration of each. With
@@ -673,13 +672,13 @@
 
 The credential verifier will attempt to retrieve the user whose
 details match the authentication information provided to
-C<<$c->authenticate()>>. Once it fetches the user the password is
+C<< $c->authenticate() >>. Once it fetches the user the password is
 checked and if it matches the user will be B<authenticated> and
-C<<$c->user>> will contain the user object retrieved from the store.
+C<< $c->user >> will contain the user object retrieved from the store.
 
 In the above case, the default realm is checked, but we could just as easily
 check an alternate realm. If this were an admin login, for example, we could
-authenticate on the admin realm by simply changing the C<<$c->authenticate()>>
+authenticate on the admin realm by simply changing the C<< $c->authenticate() >>
 call:
 
     if ( $c->authenticate( { username => $user, 
@@ -704,8 +703,8 @@
     }
 
 (Note that if you have multiple realms, you can use
-C<<$c->user_in_realm('realmname')>>) in place of
-C<<$c->user_exists();>> This will essentially perform the same
+C<< $c->user_in_realm('realmname') >> in place of
+C<< $c->user_exists(); >> This will essentially perform the same
 verification as user_exists, with the added requirement that if there
 is a user, it must have come from the realm specified.)
 
@@ -858,7 +857,7 @@
 
 =head2 $c->logout( )
 
-Logs the user out, Deletes the currently logged in user from C<<$c->user>> and the session.
+Logs the user out, Deletes the currently logged in user from C<< $c->user >> and the session.
 
 =head2 $c->find_user( $userinfo, $realm )
 
