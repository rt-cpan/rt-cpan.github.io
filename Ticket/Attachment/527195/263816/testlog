PERL_DL_NONLAZY=1 /usr/bin/perl "-MExtUtils::Command::MM" "-e" "test_harness(1, 'blib/lib', 'blib/arch')" t/*.t
t/01base................
1..6
# Test loading DBI, DBD::Oracle and version
ok 1 - require DBI;
ok 2 - import DBI
ok 3 - internal
ok 4 - install_driver
ok 5 - install_driver
ok 6 - version
ok
t/10general.............
1..31
# Test preparsing, Active, NLS_NUMERIC_CHARACTERS, err, ping and OCI version
ok 1 # SKIP solaris with OCI>9.x
ok 2 # SKIP solaris with OCI>9.x
ok 3 - preparse, case insensitive, placeholders in comments
ok 4 - number of parameters
ok 5 - expected number of parameters
ok 6 - bind_param for select parameter
ok 7 - execute for select parameter
ok 8 - NUM_OF_FIELDS
ok 9 - unrecognised attribute
ok 10 - statement is active
ok 11 - finish
ok 12 - statement is not active
ok 13 - execute for user_tables
ok 14 - active for user_tables
ok 15 - user_tables not active after fetch
ok 16 - set NLS_NUMERIC_CHARACTERS
ok 17 - select all for arithmetic
ok 18 - tmp0=.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
ok 19 - tmp1=999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ok 20 - eval error: ``DBD::Oracle::db do failed: ORA-00900: invalid SQL statement (DBD ERROR: OCIStmtExecute) [for Statement "some invalid sql statement"] at t/10general.t line 86.
# '' expected 'do failed:'
ok 21 - warn error: ``DBD::Oracle::db do failed: ORA-00900: invalid SQL statement (DBD ERROR: OCIStmtExecute) [for Statement "some invalid sql statement"] at t/10general.t line 86.
# '' expected 'do failed:'
ok 22 - err defined
ok 23 - ora_errno defined
ok 24 - ora_errno and err equal
ok 25 - ping - connected
ok 26 - ping disconnected
ORA_OCI = 10 (10.2.0.4)
ok 27 - ora_oci defined
ok 28 - ora_oci >= 8
ok 29 - version has 2 or more components
ok 30 - version looks like numbers
ok 31 - first number is int
# 10.2.0.4
ok
t/12impdata.............
1..7
ok 1 - 1 kid
ok 2 - 1 active kid
ok 3 - no kids
ok 4 - no active kids
ok 5 - got same session
ok 6 - 1 kid
ok 7 - 1 active kid
ok
t/14threads.............
1..19
ok 1 - session 0 created
ok 2 - session 1 matches previous session
ok 3 - session 2 matches previous session
ok 4 - session 3 matches previous session
ok 5 - session 4 matches previous session
ok 6 - one imp_data in pool
ok 7 - thread gets two separate sessions
ok 8 - get same session after free
ok 9 - two imp_data in pool
ok 10 - thread 0, loop 1 created session
ok 11 - thread 1, loop 1 matches previous session
ok 12 - thread 2, loop 1 matches previous session
ok 13 - thread 0, loop 2 matches previous session
ok 14 - thread 1, loop 2 matches previous session
ok 15 - thread 2, loop 2 matches previous session
ok 16 - thread 0, loop 3 matches previous session
ok 17 - thread 1, loop 3 matches previous session
ok 18 - thread 2, loop 3 matches previous session
ok 19 - pool empty
ok
t/15nls.................
1..9
# test nls_date_format, ora_can_unicode
ok 1 - set date format
ok 2 - ora_can_unicode
ok 3 - fetch ora_nls_parameters
ok 4 - check ora_nls_parameters returned hashref
ok 5 - check returned nls_date_format
ok 6 - alter date format
ok 7 - check ora_nls_parameters caches old values
ok 8 - check ora_nls_parameters returns a copy
ok 9 - refetch and check new nls_date_format value
ok
t/20select..............
1..36
# test simple select statements with [utf8]
ok 1 - prepare for insert of CHAR(10)
ok 2 - insert 8bit or utf8
ok 3 - bind overloaded value
ok 4 - insert data2
ok 5 - insert string too long
ok 6 - prepare select ordered by idx
ok 7 - execute
ok 8 - fetchall
ok 9 - first row matches
ok 10 - second row matches
ok 11 - third row matches
ok 12 - prepare for insert of VARCHAR(10)
ok 13 - insert 8bit or utf8
ok 14 - bind overloaded value
ok 15 - insert data2
ok 16 - insert string too long
ok 17 - prepare select ordered by idx
ok 18 - execute
ok 19 - fetchall
ok 20 - first row matches
ok 21 - second row matches
ok 22 - third row matches
ok 23 - prepare for insert of VARCHAR2(10)
ok 24 - insert 8bit or utf8
ok 25 - bind overloaded value
ok 26 - insert data2
ok 27 - insert string too long
ok 28 - prepare select ordered by idx
ok 29 - execute
ok 30 - fetchall
ok 31 - first row matches
ok 32 - second row matches
ok 33 - third row matches
ok 34 - ds_interval
not ok 35 - primary key on table

#   Failed test 'primary key on table'
#   at t/20select.t line 95.
not ok 36 - DT,IDX

#   Failed test 'DT,IDX'
#   at t/20select.t line 96.
#          got: ''
#     expected: 'DT,IDX'
# Looks like you failed 2 tests of 36.
 Dubious, test returned 2 (wstat 512, 0x200)
 Failed 2/36 subtests 
t/21nchar...............# testing control and 8 bit chars:
#  Database and client versions and character sets:
# Database 10.2.0.3.0 CHAR set is WE8ISO8859P1 (Non-Unicode), NCHAR set is AL16UTF16 (Unicode)
# Client 10.2.0.4 NLS_LANG is '<unset>', NLS_NCHAR is '<unset>'
# set $ENV{NLS_NCHAR}=WE8ISO8859P1

1..53
# row:   1: nice_string=a byte_string=97 (a, 'a')
# row:   2: nice_string=b byte_string=98 (b, 'b')
# row:   3: nice_string=\x03 byte_string=3 (, '.')
# row:   4: nice_string=¡ byte_string=161 (¡, '¡')
# row:   5: nice_string=¢ byte_string=162 (¢, '¢')
# row:   6: nice_string=£ byte_string=163 (£, '£')
ok 1 - prepared: insert into dbd_ora__drop_me ( idx, nch, descr, dt ) values( ?, ?, ?, sysdate )
ok 2 - bind_param idx
ok 3 - bind_param nch with attribute { ora_csform => 2 }
ok 4 - bind_param descr withOUT attribute ora_csform
# create table dbd_ora__drop_me ( idx integer, nch nvarchar2(20), descr varchar2(50),  dt date )
ok 5 - insert row 1: lowercase a
ok 6 - bind_param idx
ok 7 - bind_param nch with attribute { ora_csform => 2 }
ok 8 - bind_param descr withOUT attribute ora_csform
ok 9 - insert row 2: lowercase b
ok 10 - bind_param idx
ok 11 - bind_param nch with attribute { ora_csform => 2 }
ok 12 - bind_param descr withOUT attribute ora_csform
ok 13 - insert row 3: control-C
ok 14 - bind_param idx
ok 15 - bind_param nch with attribute { ora_csform => 2 }
ok 16 - bind_param descr withOUT attribute ora_csform
ok 17 - insert row 4: upside down bang
ok 18 - bind_param idx
ok 19 - bind_param nch with attribute { ora_csform => 2 }
ok 20 - bind_param descr withOUT attribute ora_csform
ok 21 - insert row 5: cent char
ok 22 - bind_param idx
ok 23 - bind_param nch with attribute { ora_csform => 2 }
ok 24 - bind_param descr withOUT attribute ora_csform
ok 25 - insert row 6: british pound
ok 26 - prepared: select nch, descr, DUMP(nch), dt from dbd_ora__drop_me order by idx
ok 27 - bind column nch
ok 28 - bind column descr
ok 29 - byte_string test of row 1: column: nch  lowercase a
ok 30 - nice_string test of row 1: column: nch  lowercase a
ok 31 - byte_string test of row 1: column: descr  lowercase a
ok 32 - nice_string test of row 1: column: descr  lowercase a
ok 33 - byte_string test of row 2: column: nch  lowercase b
ok 34 - nice_string test of row 2: column: nch  lowercase b
ok 35 - byte_string test of row 2: column: descr  lowercase b
ok 36 - nice_string test of row 2: column: descr  lowercase b
ok 37 - byte_string test of row 3: column: nch  control-C
ok 38 - nice_string test of row 3: column: nch  control-C
ok 39 - byte_string test of row 3: column: descr  control-C
ok 40 - nice_string test of row 3: column: descr  control-C
ok 41 - byte_string test of row 4: column: nch  upside down bang
ok 42 - nice_string test of row 4: column: nch  upside down bang
ok 43 - byte_string test of row 4: column: descr  upside down bang
ok 44 - nice_string test of row 4: column: descr  upside down bang
ok 45 - byte_string test of row 5: column: nch  cent char
ok 46 - nice_string test of row 5: column: nch  cent char
ok 47 - byte_string test of row 5: column: descr  cent char
ok 48 - nice_string test of row 5: column: descr  cent char
ok 49 - byte_string test of row 6: column: nch  british pound
ok 50 - nice_string test of row 6: column: nch  british pound
ok 51 - byte_string test of row 6: column: descr  british pound
ok 52 - nice_string test of row 6: column: descr  british pound
ok 53 - number of rows fetched
ok
t/22nchar_al32utf8......# set $ENV{NLS_NCHAR}=AL32UTF8

testing utf8 with nchar columns
# Database 10.2.0.3.0 CHAR set is WE8ISO8859P1 (Non-Unicode), NCHAR set is AL16UTF16 (Unicode)
# Client 10.2.0.4 NLS_LANG is '<unset>', NLS_NCHAR is 'AL32UTF8'
1..37
# row:   1: nice_string=\x03 byte_string=3 (, '.')
# row:   2: nice_string=a byte_string=97 (a, 'a')
# row:   3: nice_string=b byte_string=98 (b, 'b')
# row:   4: nice_string=\x{263A} byte_string=226|152|186 (☺, "âº")
# create table dbd_ora__drop_me ( idx integer, nch nvarchar2(20), descr varchar2(50),  dt date )
ok 1 - prepared: insert into dbd_ora__drop_me ( idx, nch, descr, dt ) values( ?, ?, ?, sysdate )
ok 2 - bind_param idx
ok 3 - bind_param nch with attribute { ora_csform => 2 }
ok 4 - bind_param descr withOUT attribute ora_csform
ok 5 - insert row 1: control-C
ok 6 - bind_param idx
ok 7 - bind_param nch with attribute { ora_csform => 2 }
ok 8 - bind_param descr withOUT attribute ora_csform
ok 9 - insert row 2: lowercase a
ok 10 - bind_param idx
ok 11 - bind_param nch with attribute { ora_csform => 2 }
ok 12 - bind_param descr withOUT attribute ora_csform
ok 13 - insert row 3: lowercase b
ok 14 - bind_param idx
ok 15 - bind_param nch with attribute { ora_csform => 2 }
ok 16 - bind_param descr withOUT attribute ora_csform
ok 17 - insert row 4: smiley face
ok 18 - prepared: select nch, descr, DUMP(nch), dt from dbd_ora__drop_me order by idx
ok 19 - bind column nch
ok 20 - bind column descr
ok 21 - byte_string test of row 1: column: nch  (uft8) control-C
ok 22 - nice_string test of row 1: column: nch  (uft8) control-C
ok 23 - byte_string test of row 1: column: descr  control-C
ok 24 - nice_string test of row 1: column: descr  control-C
ok 25 - byte_string test of row 2: column: nch  (uft8) lowercase a
ok 26 - nice_string test of row 2: column: nch  (uft8) lowercase a
ok 27 - byte_string test of row 2: column: descr  lowercase a
ok 28 - nice_string test of row 2: column: descr  lowercase a
ok 29 - byte_string test of row 3: column: nch  (uft8) lowercase b
ok 30 - nice_string test of row 3: column: nch  (uft8) lowercase b
ok 31 - byte_string test of row 3: column: descr  lowercase b
ok 32 - nice_string test of row 3: column: descr  lowercase b
ok 33 - byte_string test of row 4: column: nch  (uft8) smiley face
ok 34 - nice_string test of row 4: column: nch  (uft8) smiley face
ok 35 - byte_string test of row 4: column: descr  smiley face
ok 36 - nice_string test of row 4: column: descr  smiley face
ok 37 - number of rows fetched
ok
t/22nchar_utf8..........# set $ENV{NLS_NCHAR}=AL32UTF8
# testing utf8 with nchar columns
# Database 10.2.0.3.0 CHAR set is WE8ISO8859P1 (Non-Unicode), NCHAR set is AL16UTF16 (Unicode)
# Client 10.2.0.4 NLS_LANG is '<unset>', NLS_NCHAR is 'AL32UTF8'
#  --- added 2 rows with extra wide chars to test data

1..53
# row:   1: nice_string=\x03 byte_string=3 (, '.')
# row:   2: nice_string=a byte_string=97 (a, 'a')
# row:   3: nice_string=b byte_string=98 (b, 'b')
# row:   4: nice_string=\x{263A} byte_string=226|152|186 (☺, "âº")
# row:   5: nice_string=\x{10304} byte_string=240|144|140|132 (𐌄, "ð")
# row:   6: nice_string=\x{20301} byte_string=240|160|140|129 (𠌁, "ð ")
ok 1 - prepared: insert into dbd_ora__drop_me ( idx, nch, descr, dt ) values( ?, ?, ?, sysdate )
ok 2 - bind_param idx
ok 3 - bind_param nch with attribute { ora_csform => 2 }
ok 4 - bind_param descr withOUT attribute ora_csform
# create table dbd_ora__drop_me ( idx integer, nch nvarchar2(20), descr varchar2(50),  dt date )
ok 5 - insert row 1: control-C
ok 6 - bind_param idx
ok 7 - bind_param nch with attribute { ora_csform => 2 }
ok 8 - bind_param descr withOUT attribute ora_csform
ok 9 - insert row 2: lowercase a
ok 10 - bind_param idx
ok 11 - bind_param nch with attribute { ora_csform => 2 }
ok 12 - bind_param descr withOUT attribute ora_csform
ok 13 - insert row 3: lowercase b
ok 14 - bind_param idx
ok 15 - bind_param nch with attribute { ora_csform => 2 }
ok 16 - bind_param descr withOUT attribute ora_csform
ok 17 - insert row 4: smiley face
ok 18 - bind_param idx
ok 19 - bind_param nch with attribute { ora_csform => 2 }
ok 20 - bind_param descr withOUT attribute ora_csform
ok 21 - insert row 5: SMP Plane 1 wide char
ok 22 - bind_param idx
ok 23 - bind_param nch with attribute { ora_csform => 2 }
ok 24 - bind_param descr withOUT attribute ora_csform
ok 25 - insert row 6: SIP Plane 2 wide char
ok 26 - prepared: select nch, descr, DUMP(nch), dt from dbd_ora__drop_me order by idx
ok 27 - bind column nch
ok 28 - bind column descr
ok 29 - byte_string test of row 1: column: nch  (uft8) control-C
ok 30 - nice_string test of row 1: column: nch  (uft8) control-C
ok 31 - byte_string test of row 1: column: descr  control-C
ok 32 - nice_string test of row 1: column: descr  control-C
ok 33 - byte_string test of row 2: column: nch  (uft8) lowercase a
ok 34 - nice_string test of row 2: column: nch  (uft8) lowercase a
ok 35 - byte_string test of row 2: column: descr  lowercase a
ok 36 - nice_string test of row 2: column: descr  lowercase a
ok 37 - byte_string test of row 3: column: nch  (uft8) lowercase b
ok 38 - nice_string test of row 3: column: nch  (uft8) lowercase b
ok 39 - byte_string test of row 3: column: descr  lowercase b
ok 40 - nice_string test of row 3: column: descr  lowercase b
ok 41 - byte_string test of row 4: column: nch  (uft8) smiley face
ok 42 - nice_string test of row 4: column: nch  (uft8) smiley face
ok 43 - byte_string test of row 4: column: descr  smiley face
ok 44 - nice_string test of row 4: column: descr  smiley face
ok 45 - byte_string test of row 5: column: nch  (uft8) SMP Plane 1 wide char
ok 46 - nice_string test of row 5: column: nch  (uft8) SMP Plane 1 wide char
ok 47 - byte_string test of row 5: column: descr  SMP Plane 1 wide char
ok 48 - nice_string test of row 5: column: descr  SMP Plane 1 wide char
ok 49 - byte_string test of row 6: column: nch  (uft8) SIP Plane 2 wide char
ok 50 - nice_string test of row 6: column: nch  (uft8) SIP Plane 2 wide char
ok 51 - byte_string test of row 6: column: descr  SIP Plane 2 wide char
ok 52 - nice_string test of row 6: column: descr  SIP Plane 2 wide char
ok 53 - number of rows fetched
ok
t/23wide_db.............# set $ENV{NLS_LANG}=AMERICAN_AMERICA.AL32UTF8

1..0 # Skip Database character set is not Unicode
skipped: Database character set is not Unicode
t/23wide_db_8bit........# set $ENV{NLS_LANG}=AMERICAN_AMERICA.WE8MSWIN1252

1..0 # Skip Database character set is not Unicode
skipped: Database character set is not Unicode
t/23wide_db_al32utf8....# set $ENV{NLS_LANG}=AMERICAN_AMERICA.AL32UTF8

1..0 # Skip Database character set is not Unicode
skipped: Database character set is not Unicode
t/24implicit_utf8.......
1..74
#  --- testing implicit csform (dbhimp.c sets csform implicitly)
# row:   1: nice_string=\x03 byte_string=3 (, '.')
# row:   2: nice_string=a byte_string=97 (a, 'a')
# row:   3: nice_string=b byte_string=98 (b, 'b')
# row:   4: nice_string=\x{263A} byte_string=226|152|186 (☺, "âº")
#  --- testing with NLS_NCHAR=UTF8
# set $ENV{NLS_NCHAR}=UTF8
# Database 10.2.0.3.0 CHAR set is WE8ISO8859P1 (Non-Unicode), NCHAR set is AL16UTF16 (Unicode)
# Client 10.2.0.4 NLS_LANG is '<unset>', NLS_NCHAR is 'UTF8'
ok 1 - prepared: insert into dbd_ora__drop_me ( idx, nch, descr, dt ) values( ?, ?, ?, sysdate )
ok 2 - bind_param idx
ok 3 - bind_param nch
ok 4 - bind_param descr withOUT attribute ora_csform
# create table dbd_ora__drop_me ( idx integer, nch nvarchar2(20), descr varchar2(50),  dt date )
ok 5 - insert row 1: control-C
ok 6 - bind_param idx
ok 7 - bind_param nch
ok 8 - bind_param descr withOUT attribute ora_csform
ok 9 - insert row 2: lowercase a
ok 10 - bind_param idx
ok 11 - bind_param nch
ok 12 - bind_param descr withOUT attribute ora_csform
ok 13 - insert row 3: lowercase b
ok 14 - bind_param idx
ok 15 - bind_param nch
ok 16 - bind_param descr withOUT attribute ora_csform
ok 17 - insert row 4: smiley face
ok 18 - prepared: select nch, descr, DUMP(nch), dt from dbd_ora__drop_me order by idx
ok 19 - bind column nch
ok 20 - bind column descr
ok 21 - byte_string test of row 1: column: nch  (uft8) control-C
ok 22 - nice_string test of row 1: column: nch  (uft8) control-C
ok 23 - byte_string test of row 1: column: descr  control-C
ok 24 - nice_string test of row 1: column: descr  control-C
ok 25 - byte_string test of row 2: column: nch  (uft8) lowercase a
ok 26 - nice_string test of row 2: column: nch  (uft8) lowercase a
ok 27 - byte_string test of row 2: column: descr  lowercase a
ok 28 - nice_string test of row 2: column: descr  lowercase a
ok 29 - byte_string test of row 3: column: nch  (uft8) lowercase b
ok 30 - nice_string test of row 3: column: nch  (uft8) lowercase b
ok 31 - byte_string test of row 3: column: descr  lowercase b
ok 32 - nice_string test of row 3: column: descr  lowercase b
ok 33 - byte_string test of row 4: column: nch  (uft8) smiley face
ok 34 - nice_string test of row 4: column: nch  (uft8) smiley face
ok 35 - byte_string test of row 4: column: descr  smiley face
ok 36 - nice_string test of row 4: column: descr  smiley face
ok 37 - number of rows fetched
#  --- testing with NLS_NCHAR=AL32UTF8
# set $ENV{NLS_NCHAR}=AL32UTF8
# Database 10.2.0.3.0 CHAR set is WE8ISO8859P1 (Non-Unicode), NCHAR set is AL16UTF16 (Unicode)
# Client 10.2.0.4 NLS_LANG is '<unset>', NLS_NCHAR is 'AL32UTF8'
ok 38 - prepared: insert into dbd_ora__drop_me ( idx, nch, descr, dt ) values( ?, ?, ?, sysdate )
ok 39 - bind_param idx
ok 40 - bind_param nch
ok 41 - bind_param descr withOUT attribute ora_csform
# create table dbd_ora__drop_me ( idx integer, nch nvarchar2(20), descr varchar2(50),  dt date )
ok 42 - insert row 1: control-C
ok 43 - bind_param idx
ok 44 - bind_param nch
ok 45 - bind_param descr withOUT attribute ora_csform
ok 46 - insert row 2: lowercase a
ok 47 - bind_param idx
ok 48 - bind_param nch
ok 49 - bind_param descr withOUT attribute ora_csform
ok 50 - insert row 3: lowercase b
ok 51 - bind_param idx
ok 52 - bind_param nch
ok 53 - bind_param descr withOUT attribute ora_csform
ok 54 - insert row 4: smiley face
ok 55 - prepared: select nch, descr, DUMP(nch), dt from dbd_ora__drop_me order by idx
ok 56 - bind column nch
ok 57 - bind column descr
ok 58 - byte_string test of row 1: column: nch  (uft8) control-C
ok 59 - nice_string test of row 1: column: nch  (uft8) control-C
ok 60 - byte_string test of row 1: column: descr  control-C
ok 61 - nice_string test of row 1: column: descr  control-C
ok 62 - byte_string test of row 2: column: nch  (uft8) lowercase a
ok 63 - nice_string test of row 2: column: nch  (uft8) lowercase a
ok 64 - byte_string test of row 2: column: descr  lowercase a
ok 65 - nice_string test of row 2: column: descr  lowercase a
ok 66 - byte_string test of row 3: column: nch  (uft8) lowercase b
ok 67 - nice_string test of row 3: column: nch  (uft8) lowercase b
ok 68 - byte_string test of row 3: column: descr  lowercase b
ok 69 - nice_string test of row 3: column: descr  lowercase b
ok 70 - byte_string test of row 4: column: nch  (uft8) smiley face
ok 71 - nice_string test of row 4: column: nch  (uft8) smiley face
ok 72 - byte_string test of row 4: column: descr  smiley face
ok 73 - nice_string test of row 4: column: descr  smiley face
ok 74 - number of rows fetched
ok
t/25plsql...............
1..82
ok 1 - prepare raising predefined exception
ok 2 - execute predefined exception
ok 3 - err expected 1722 error
ok 4 - err does not get cleared
ok 5 - prepare user defined expcetion
ok 6 - execute user defined exception
ok 7 - user exception 6510 error
ok 8 - prepare raise application error with literal values
ok 9 - execite raise application error with literal values
ok 10 - expected 20101 error
ok 11 - app error
ok 12 - prepare raise application error with in params
ok 13 - execute raise application error with in params
ok 14 - expected 20042 error
ok 15 - hello world msg
ok 16 - prepare named numeric in/out params
ok 17 - bind arg
ok 18 - bind mult
ok 19 - execute named numeric in/out params
ok 20 - expected 3 * 3 = 6
ok 21 - execute named numeric in/out params 10 times
ok 22 - expected p1 = 1024
ok 23 - prepare undef parameters
ok 24 - bind arg
ok 25 - execute undef parameters
ok 26 - prepare named string in/out parameters
ok 27 - bind arg
Can't bind unknown placeholder ':append' (':append') at t/25plsql.t line 124.
# Looks like you planned 82 tests but ran 27.
# Looks like your test exited with 9 just after 27.
 Dubious, test returned 9 (wstat 2304, 0x900)
 Failed 55/82 subtests 
t/26exe_array...........
1..14
ok 1 - use DBI;
ok 2 - The object isa DBI::db
ok 3 - ... execute_array should return true
ok 4 - ... we should have 10 tuple_status
ok 5 - ... execute_array should return false
ok 6 - ... we should have 10 tuple_status
ok 7 - ... we should get text
ok 8 - ... we should get -1
ok 9 - ... we should get a warning
ok 10 - ... execute_for_fetch should return true
ok 11 - ... we should have 19 tuple_status
ok 12 - ... execute_array should return flase
ok 13 - ... we should have 10 tuple_status
ok 14 - ... we should have 48 rows
ok
t/28array_bind..........
1..15
ok 1 - VARCHAR2_TABLE input count correctness
ok 2 - VARCHAR2_TABLE output count correctness
ok 3 - VARCHAR2_TABLE output content
ok 4 - NUMBER_TABLE input count correctness
ok 5 - NUMBER_TABLE output count correctness
ok 6 - NUMBER_TABLE output content
ok 7 - ... bind_param_inout_array should return false
ok 8 - ... execute_array should return false
ok 9 - ... we should have 19 tuple_status
ok 10 - ... we should have 5 out_array
ok 11 - ... out values should match 1
ok 12 - ... out values should match 2
ok 13 - ... out values should match 3
ok 14 - ... out values should match 3
ok 15 - ... out values should match 5
ok
t/30long................
1..479
# ora_server_version: 10 2 0 3 0
# Database 10.2.0.3.0 CHAR set is WE8ISO8859P1 (Non-Unicode), NCHAR set is AL16UTF16 (Unicode)
# Client 10.2.0.4 NLS_LANG is '<unset>', NLS_NCHAR is '<unset>'
# 
#     =========================================================================
#     Running long test for LONG (0) use_utf8_data=0
# create table dbd_ora__drop_me ( idx integer, lng LONG,  dt date )
# long_data[0] length 10240
# long_data[1] length 81920
# long_data[2] length 71680
#  --- insert some LONG data (ora_type 0)
ok 1 - prepare: insert into dbd_ora__drop_me values (?, ?, SYSDATE)
ok 2 - insert long data 40
ok 3 - insert long data 41
ok 4 - insert long data 42
ok 5 - insert long data undef 43
#  --- fetch LONG data back again -- truncated - LongTruncOk == 1
# LongReadLen 20, LongTruncOk 1
ok 6 - prepare: select * from dbd_ora__drop_me order by idx
ok 7 - execute: select * from dbd_ora__drop_me order by idx
ok 8 - fetch_arrayref for select * from dbd_ora__drop_me order by idx
ok 9 - four rows
ok 10 - byte_string test of truncated to LongReadLen 20
ok 11 - nice_string test of truncated to LongReadLen 20
ok 12 - LONG UTF8 setting
ok 13 - byte_string test of truncated to LongReadLen 20
ok 14 - nice_string test of truncated to LongReadLen 20
ok 15 - LONG UTF8 setting
ok 16 - byte_string test of truncated to LongReadLen 20
ok 17 - nice_string test of truncated to LongReadLen 20
ok 18 - LONG UTF8 setting
ok 19 - last row undefined
#  --- fetch LONG data back again -- truncated - LongTruncOk == 0
# LongReadLen 81910, LongTruncOk 
ok 20 - prepare select * from dbd_ora__drop_me order by idx
ok 21 - execute select * from dbd_ora__drop_me order by idx
ok 22 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 23 - length tmp->[1] 10240
ok 24 - truncation error not triggered (LongReadLen 81910, data 10240)
ok 25 - tmp==1406 || tmp==24345 tmp actually=24345
#  --- fetch LONG data back again -- complete - LongTruncOk == 0
# LongReadLen 82920, LongTruncOk 
ok 26 - prepare: select * from dbd_ora__drop_me order by idx
ok 27 - execute select * from dbd_ora__drop_me order by idx
ok 28 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 29 - Strings are identical, Len 10240
ok 30 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 31 - Strings are identical, Len 81920
ok 32 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 33 - Strings are identical, Len 71680
ok 34 # SKIP blob_read tests for LONGs - not currently supported
ok 35 # SKIP blob_read tests for LONGs - not currently supported
ok 36 # SKIP blob_read tests for LONGs - not currently supported
ok 37 # SKIP blob_read tests for LONGs - not currently supported
ok 38 # SKIP blob_read tests for LONGs - not currently supported
ok 39 # SKIP blob_read tests for LONGs - not currently supported
ok 40 # SKIP blob_read tests for LONGs - not currently supported
ok 41 # SKIP blob_read tests for LONGs - not currently supported
ok 42 # SKIP blob_read tests for LONGs - not currently supported
ok 43 # SKIP blob_read tests for LONGs - not currently supported
ok 44 # SKIP blob_read tests for LONGs - not currently supported
ok 45 # SKIP blob_read tests for LONGs - not currently supported
ok 46 # SKIP blob_read tests for LONGs - not currently supported
ok 47 # SKIP blob_read tests for LONGs - not currently supported
ok 48 # SKIP blob_read tests for LONGs - not currently supported
ok 49 # SKIP ora_auto_lob tests for LONGs - not supported
ok 50 # SKIP ora_auto_lob tests for LONGs - not supported
ok 51 # SKIP ora_auto_lob tests for LONGs - not supported
ok 52 # SKIP ora_auto_lob tests for LONGs - not supported
ok 53 # SKIP ora_auto_lob tests for LONGs - not supported
ok 54 # SKIP ora_auto_lob tests for LONGs - not supported
ok 55 # SKIP ora_auto_lob tests for LONGs - not supported
ok 56 # SKIP ora_auto_lob tests for LONGs - not supported
ok 57 # SKIP ora_auto_lob tests for LONGs - not supported
ok 58 # SKIP ora_auto_lob tests for LONGs - not supported
ok 59 # SKIP ora_auto_lob tests for LONGs - not supported
ok 60 # SKIP ora_auto_lob tests for LONGs - not supported
ok 61 # SKIP ora_auto_lob tests for LONGs - not supported
ok 62 # SKIP ora_auto_lob tests for LONGs - not supported
ok 63 # SKIP ora_auto_lob tests for LONGs - not supported
ok 64 # SKIP ora_auto_lob tests for LONGs - not supported
ok 65 # SKIP ora_auto_lob tests for LONGs - not supported
ok 66 # SKIP ora_auto_lob tests for LONGs - not supported
ok 67 # SKIP ora_auto_lob tests for LONGs - not supported
ok 68 # SKIP ora_auto_lob tests for LONGs - not supported
ok 69 # SKIP ora_auto_lob tests for LONGs - not supported
ok 70 # SKIP ora_auto_lob tests for LONGs - not supported
ok 71 # SKIP ora_auto_lob tests for LONGs - not supported
ok 72 # SKIP ora_auto_lob tests for LONGs - not supported
ok 73 # SKIP ora_auto_lob tests for LONGs - not supported
ok 74 # SKIP ora_auto_lob tests for LONGs - not supported
ok 75 # SKIP ora_auto_lob tests for LONGs - not supported
ok 76 # SKIP ora_auto_lob tests for LONGs - not supported
ok 77 # SKIP ora_auto_lob tests for LONGs - not supported
ok 78 # SKIP ora_auto_lob tests for LONGs - not supported
ok 79 # SKIP ora_auto_lob tests for LONGs - not supported
ok 80 # SKIP ora_auto_lob tests for LONGs - not supported
ok 81 # SKIP ora_auto_lob tests for LONGs - not supported
ok 82 # SKIP ora_auto_lob tests for LONGs - not supported
ok 83 # SKIP ora_auto_lob tests for LONGs - not supported
ok 84 # SKIP ora_auto_lob tests for LONGs - not supported
ok 85 # SKIP ora_auto_lob tests for LONGs - not supported
ok 86 # SKIP ora_auto_lob tests for LONGs - not supported
ok 87 # SKIP ora_auto_lob tests for LONGs - not supported
ok 88 # SKIP ora_auto_lob tests for LONGs - not supported
ok 89 # SKIP ora_auto_lob tests for LONGs - not supported
ok 90 # SKIP ora_auto_lob tests for LONGs - not supported
ok 91 # SKIP ora_auto_lob tests for LONGs - not supported
ok 92 # SKIP ora_auto_lob tests for LONGs - not supported
ok 93 # SKIP ora_auto_lob tests for LONGs - not supported
ok 94 # SKIP ora_auto_lob tests for LONGs - not supported
# 
#     =========================================================================
#     Running long test for LONG RAW (24) use_utf8_data=0
# create table dbd_ora__drop_me ( idx integer, lng LONG RAW,  dt date )
# long_data[0] length 20480
# long_data[1] length 81920
# long_data[2] length 71680
#  --- insert some LONG RAW data (ora_type 24)
ok 95 - prepare: insert into dbd_ora__drop_me values (?, ?, SYSDATE)
ok 96 - insert long data 40
ok 97 - insert long data 41
ok 98 - insert long data 42
ok 99 - insert long data undef 43
#  --- fetch LONG RAW data back again -- truncated - LongTruncOk == 1
# LongReadLen 20, LongTruncOk 1
ok 100 - prepare: select * from dbd_ora__drop_me order by idx
ok 101 - execute: select * from dbd_ora__drop_me order by idx
ok 102 - fetch_arrayref for select * from dbd_ora__drop_me order by idx
ok 103 - four rows
ok 104 - byte_string test of truncated to LongReadLen 40
ok 105 - nice_string test of truncated to LongReadLen 40
ok 106 - LONG RAW UTF8 setting
ok 107 - byte_string test of truncated to LongReadLen 40
ok 108 - nice_string test of truncated to LongReadLen 40
ok 109 - LONG RAW UTF8 setting
ok 110 - byte_string test of truncated to LongReadLen 40
ok 111 - nice_string test of truncated to LongReadLen 40
ok 112 - LONG RAW UTF8 setting
ok 113 - last row undefined
#  --- fetch LONG RAW data back again -- truncated - LongTruncOk == 0
# LongReadLen 40955, LongTruncOk 
ok 114 - prepare select * from dbd_ora__drop_me order by idx
ok 115 - execute select * from dbd_ora__drop_me order by idx
ok 116 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 117 - length tmp->[1] 20480
ok 118 - truncation error not triggered (LongReadLen 40955, data 20480)
ok 119 - tmp==1406 || tmp==24345 tmp actually=24345
#  --- fetch LONG RAW data back again -- complete - LongTruncOk == 0
# LongReadLen 82920, LongTruncOk 
ok 120 - prepare: select * from dbd_ora__drop_me order by idx
ok 121 - execute select * from dbd_ora__drop_me order by idx
ok 122 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 123 - Strings are identical, Len 20480
ok 124 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 125 - Strings are identical, Len 81920
ok 126 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 127 - Strings are identical, Len 71680
ok 128 # SKIP blob_read tests for LONGs - not currently supported
ok 129 # SKIP blob_read tests for LONGs - not currently supported
ok 130 # SKIP blob_read tests for LONGs - not currently supported
ok 131 # SKIP blob_read tests for LONGs - not currently supported
ok 132 # SKIP blob_read tests for LONGs - not currently supported
ok 133 # SKIP blob_read tests for LONGs - not currently supported
ok 134 # SKIP blob_read tests for LONGs - not currently supported
ok 135 # SKIP blob_read tests for LONGs - not currently supported
ok 136 # SKIP blob_read tests for LONGs - not currently supported
ok 137 # SKIP blob_read tests for LONGs - not currently supported
ok 138 # SKIP blob_read tests for LONGs - not currently supported
ok 139 # SKIP blob_read tests for LONGs - not currently supported
ok 140 # SKIP blob_read tests for LONGs - not currently supported
ok 141 # SKIP blob_read tests for LONGs - not currently supported
ok 142 # SKIP blob_read tests for LONGs - not currently supported
ok 143 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 144 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 145 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 146 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 147 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 148 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 149 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 150 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 151 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 152 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 153 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 154 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 155 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 156 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 157 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 158 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 159 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 160 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 161 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 162 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 163 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 164 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 165 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 166 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 167 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 168 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 169 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 170 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 171 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 172 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 173 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 174 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 175 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 176 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 177 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 178 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 179 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 180 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 181 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 182 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 183 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 184 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 185 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 186 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 187 # SKIP ora_auto_lob tests for LONG RAWs - not supported
ok 188 # SKIP ora_auto_lob tests for LONG RAWs - not supported
# 
#     =========================================================================
#     Running long test for NCLOB (112) use_utf8_data=0
ok 189 - prepare: insert into dbd_ora__drop_me values (?, ?, SYSDATE)
# create table dbd_ora__drop_me ( idx integer, lng NCLOB,  dt date )
# long_data[0] length 10240
# long_data[1] length 81920
# long_data[2] length 71680
#  --- insert some NCLOB data (ora_type 112)
ok 190 - insert long data 40
ok 191 - insert long data 41
ok 192 - insert long data 42
ok 193 - insert long data undef 43
#  --- fetch NCLOB data back again -- truncated - LongTruncOk == 1
# LongReadLen 20, LongTruncOk 1
ok 194 - prepare: select * from dbd_ora__drop_me order by idx
ok 195 - execute: select * from dbd_ora__drop_me order by idx
ok 196 - fetch_arrayref for select * from dbd_ora__drop_me order by idx
ok 197 - four rows
ok 198 - byte_string test of truncated to LongReadLen 20
ok 199 - nice_string test of truncated to LongReadLen 20
ok 200 - NCLOB UTF8 setting
ok 201 - byte_string test of truncated to LongReadLen 20
ok 202 - nice_string test of truncated to LongReadLen 20
ok 203 - NCLOB UTF8 setting
ok 204 - byte_string test of truncated to LongReadLen 20
ok 205 - nice_string test of truncated to LongReadLen 20
ok 206 - NCLOB UTF8 setting
ok 207 - last row undefined
#  --- fetch NCLOB data back again -- truncated - LongTruncOk == 0
# LongReadLen 81910, LongTruncOk 
ok 208 - prepare select * from dbd_ora__drop_me order by idx
ok 209 - execute select * from dbd_ora__drop_me order by idx
ok 210 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 211 - length tmp->[1] 10240
ok 212 - truncation error not triggered (LongReadLen 81910, data 1)
ok 213 - tmp==1406 || tmp==24345 tmp actually=24345
#  --- fetch NCLOB data back again -- complete - LongTruncOk == 0
# LongReadLen 82920, LongTruncOk 
ok 214 - prepare: select * from dbd_ora__drop_me order by idx
ok 215 - execute select * from dbd_ora__drop_me order by idx
ok 216 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 217 - Strings are identical, Len 10240
ok 218 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 219 - Strings are identical, Len 81920
ok 220 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 221 - Strings are identical, Len 71680
#  --- fetch NCLOB data back again -- via blob_read
# 
ok 222 - prepare select idx, lng, dt from dbd_ora__drop_me order by idx
ok 223 - execute select idx, lng, dt from dbd_ora__drop_me order by idx
# fetch via fetchrow_arrayref
ok 224 - fetchrow_arrayref 1: select idx, lng, dt from dbd_ora__drop_me order by idx
ok 225 - byte_string test of truncated to LongReadLen 20
ok 226 - nice_string test of truncated to LongReadLen 20
# read via blob_read_all
ok 227 - blob_read_all = length($long_data[0])
ok 228 - Strings are identical
ok 229 - fetchrow_arrayref 2: select idx, lng, dt from dbd_ora__drop_me order by idx
ok 230 - blob_read_all = length(long_data[1])
ok 231 - Strings are identical
ok 232 - fetchrow_arrayref 3: select idx, lng, dt from dbd_ora__drop_me order by idx
ok 233 - length of long_data[2] = 71680
ok 234 - byte_string test of 3rd row via blob_read_all
ok 235 - nice_string test of 3rd row via blob_read_all
ok 236 - result should not be utf8
# result is non-UTF8
#  --- testing ora_auto_lob to access NCLOB LobLocator
# 
ok 237 - prepare
#                     SELECT lng, idx FROM dbd_ora__drop_me ORDER BY idx
#                     FOR UPDATE -- needed so lob locator is writable
#                 
ok 238 - execute
#                     SELECT lng, idx FROM dbd_ora__drop_me ORDER BY idx
#                     FOR UPDATE -- needed so lob locator is writable
#                 
# 40: OCILobLocatorPtr=SCALAR(0xc761c8)
ok 239 - $lob_locator is true
ok 240 - $lob_locator is a OCILobLocatorPtr
ok 241 - $lob_locator deref ptr is true
ok 242 - DBI::errstr
# length of data to be written at offset 1: 8
ok 243 - ora_lob_write
# 41: OCILobLocatorPtr=SCALAR(0xc765e8)
ok 244 - $lob_locator is true
ok 245 - $lob_locator is a OCILobLocatorPtr
ok 246 - $lob_locator deref ptr is true
ok 247 - DBI::errstr
# length of data to be written at offset 1: 8
ok 248 - ora_lob_write
# 42: OCILobLocatorPtr=SCALAR(0xc767d4)
ok 249 - $lob_locator is true
ok 250 - $lob_locator is a OCILobLocatorPtr
ok 251 - $lob_locator deref ptr is true
ok 252 - DBI::errstr
# length of data to be written at offset 1: 8
ok 253 - ora_lob_write
# 43: undef
#  --- round again to check contents after NCLOB write updates...
ok 254
ok 255 - execute (again 1)
#                     SELECT lng, idx FROM dbd_ora__drop_me ORDER BY idx
#                     FOR UPDATE -- needed so lob locator is writable
#                 
# 40 locator: OCILobLocatorPtr=SCALAR(0xc767d4)
ok 256 - content is true
# 40 content: 040 foo!\x00X0\x7Fx\x00X0\x7Fx\x00X
ok 257 - lenth(content)
ok 258 - length(content)=length(data)
ok 259 - DBI::errstr
ok 260 - length(long_data{idx}) = length of locator data
ok 261 - DBI::errstr
ok 262 - ora_lob_append DBI::errstr
# 41 locator: OCILobLocatorPtr=SCALAR(0x7971ec)
ok 263 - content is true
# 41 content: 041 foo!901234567890
ok 264 - lenth(content)
ok 265 - length(content)=length(data)
ok 266 - DBI::errstr
ok 267 - length(long_data{idx}) = length of locator data
ok 268 - DBI::errstr
ok 269 - ora_lob_append DBI::errstr
# 42 locator: OCILobLocatorPtr=SCALAR(0x797438)
ok 270 - content is true
ok 271 - lenth(content)
ok 272 - length(content)=length(data)
# 42 content: 042 foo!cd2bcdefabcd
ok 273 - DBI::errstr
ok 274 - length(long_data{idx}) = length of locator data
ok 275 - DBI::errstr
ok 276 - ora_lob_append DBI::errstr
# 43 locator: undef
ok 277
#  --- round again to check the NCLOB length...
ok 278 - execute (again 2)
#                     SELECT lng, idx FROM dbd_ora__drop_me ORDER BY idx
#                     FOR UPDATE -- needed so lob locator is writable
#                 
# 40 locator: OCILobLocatorPtr=SCALAR(0x797438)
ok 279 - DBI::errstr
ok 280 - len == idx+5
# 41 locator: OCILobLocatorPtr=SCALAR(0x797798)
ok 281 - DBI::errstr
ok 282 - len == idx+5
# 42 locator: OCILobLocatorPtr=SCALAR(0x79781c)
ok 283 - DBI::errstr
ok 284 - len == idx+5
# 43 locator: undef
ok 285
# 
#     =========================================================================
#     Running long test for CLOB (112) use_utf8_data=0
# create table dbd_ora__drop_me ( idx integer, lng CLOB,  dt date )
# long_data[0] length 10240
# long_data[1] length 81920
# long_data[2] length 71680
#  --- insert some CLOB data (ora_type 112)
ok 286 - prepare: insert into dbd_ora__drop_me values (?, ?, SYSDATE)
ok 287 - insert long data 40
ok 288 - insert long data 41
ok 289 - insert long data 42
ok 290 - insert long data undef 43
#  --- fetch CLOB data back again -- truncated - LongTruncOk == 1
# LongReadLen 20, LongTruncOk 1
ok 291 - prepare: select * from dbd_ora__drop_me order by idx
ok 292 - execute: select * from dbd_ora__drop_me order by idx
ok 293 - fetch_arrayref for select * from dbd_ora__drop_me order by idx
ok 294 - four rows
ok 295 - byte_string test of truncated to LongReadLen 20
ok 296 - nice_string test of truncated to LongReadLen 20
ok 297 - CLOB UTF8 setting
ok 298 - byte_string test of truncated to LongReadLen 20
ok 299 - nice_string test of truncated to LongReadLen 20
ok 300 - CLOB UTF8 setting
ok 301 - byte_string test of truncated to LongReadLen 20
ok 302 - nice_string test of truncated to LongReadLen 20
ok 303 - CLOB UTF8 setting
ok 304 - last row undefined
#  --- fetch CLOB data back again -- truncated - LongTruncOk == 0
# LongReadLen 81910, LongTruncOk 
ok 305 - prepare select * from dbd_ora__drop_me order by idx
ok 306 - execute select * from dbd_ora__drop_me order by idx
ok 307 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 308 - length tmp->[1] 10240
ok 309 - truncation error not triggered (LongReadLen 81910, data 1)
ok 310 - tmp==1406 || tmp==24345 tmp actually=24345
#  --- fetch CLOB data back again -- complete - LongTruncOk == 0
# LongReadLen 82920, LongTruncOk 
ok 311 - prepare: select * from dbd_ora__drop_me order by idx
ok 312 - execute select * from dbd_ora__drop_me order by idx
ok 313 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 314 - Strings are identical, Len 10240
ok 315 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 316 - Strings are identical, Len 81920
ok 317 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 318 - Strings are identical, Len 71680
#  --- fetch CLOB data back again -- via blob_read
# 
ok 319 - prepare select idx, lng, dt from dbd_ora__drop_me order by idx
ok 320 - execute select idx, lng, dt from dbd_ora__drop_me order by idx
# fetch via fetchrow_arrayref
ok 321 - fetchrow_arrayref 1: select idx, lng, dt from dbd_ora__drop_me order by idx
ok 322 - byte_string test of truncated to LongReadLen 20
ok 323 - nice_string test of truncated to LongReadLen 20
# read via blob_read_all
ok 324 - blob_read_all = length($long_data[0])
ok 325 - Strings are identical
ok 326 - fetchrow_arrayref 2: select idx, lng, dt from dbd_ora__drop_me order by idx
ok 327 - blob_read_all = length(long_data[1])
ok 328 - Strings are identical
ok 329 - fetchrow_arrayref 3: select idx, lng, dt from dbd_ora__drop_me order by idx
ok 330 - length of long_data[2] = 71680
ok 331 - byte_string test of 3rd row via blob_read_all
ok 332 - nice_string test of 3rd row via blob_read_all
ok 333 - result should not be utf8
# result is non-UTF8
#  --- testing ora_auto_lob to access CLOB LobLocator
# 
ok 334 - prepare
#                     SELECT lng, idx FROM dbd_ora__drop_me ORDER BY idx
#                     FOR UPDATE -- needed so lob locator is writable
#                 
ok 335 - execute
#                     SELECT lng, idx FROM dbd_ora__drop_me ORDER BY idx
#                     FOR UPDATE -- needed so lob locator is writable
#                 
# 40: OCILobLocatorPtr=SCALAR(0x788314)
ok 336 - $lob_locator is true
ok 337 - $lob_locator is a OCILobLocatorPtr
ok 338 - $lob_locator deref ptr is true
ok 339 - DBI::errstr
# length of data to be written at offset 1: 8
ok 340 - ora_lob_write
# 41: OCILobLocatorPtr=SCALAR(0x788710)
ok 341 - $lob_locator is true
ok 342 - $lob_locator is a OCILobLocatorPtr
ok 343 - $lob_locator deref ptr is true
ok 344 - DBI::errstr
# length of data to be written at offset 1: 8
ok 345 - ora_lob_write
# 42: OCILobLocatorPtr=SCALAR(0x7888b4)
ok 346 - $lob_locator is true
ok 347 - $lob_locator is a OCILobLocatorPtr
ok 348 - $lob_locator deref ptr is true
ok 349 - DBI::errstr
# length of data to be written at offset 1: 8
ok 350 - ora_lob_write
# 43: undef
ok 351
#  --- round again to check contents after CLOB write updates...
ok 352 - execute (again 1)
#                     SELECT lng, idx FROM dbd_ora__drop_me ORDER BY idx
#                     FOR UPDATE -- needed so lob locator is writable
#                 
# 40 locator: OCILobLocatorPtr=SCALAR(0x7888b4)
ok 353 - content is true
# 40 content: 040 foo!\x00X0\x7Fx\x00X0\x7Fx\x00X
ok 354 - lenth(content)
ok 355 - length(content)=length(data)
ok 356 - DBI::errstr
ok 357 - length(long_data{idx}) = length of locator data
ok 358 - DBI::errstr
ok 359 - ora_lob_append DBI::errstr
# 41 locator: OCILobLocatorPtr=SCALAR(0x788cb0)
ok 360 - content is true
# 41 content: 041 foo!901234567890
ok 361 - lenth(content)
ok 362 - length(content)=length(data)
ok 363 - DBI::errstr
ok 364 - length(long_data{idx}) = length of locator data
ok 365 - DBI::errstr
ok 366 - ora_lob_append DBI::errstr
# 42 locator: OCILobLocatorPtr=SCALAR(0x788efc)
ok 367 - content is true
# 42 content: 042 foo!cd2bcdefabcd
ok 368 - lenth(content)
ok 369 - length(content)=length(data)
ok 370 - DBI::errstr
ok 371 - length(long_data{idx}) = length of locator data
ok 372 - DBI::errstr
ok 373 - ora_lob_append DBI::errstr
# 43 locator: undef
ok 374
#  --- round again to check the CLOB length...
ok 375 - execute (again 2)
#                     SELECT lng, idx FROM dbd_ora__drop_me ORDER BY idx
#                     FOR UPDATE -- needed so lob locator is writable
#                 
# 40 locator: OCILobLocatorPtr=SCALAR(0x788efc)
ok 376 - DBI::errstr
ok 377 - len == idx+5
# 41 locator: OCILobLocatorPtr=SCALAR(0x78925c)
ok 378 - DBI::errstr
ok 379 - len == idx+5
# 42 locator: OCILobLocatorPtr=SCALAR(0x7892e0)
ok 380 - DBI::errstr
ok 381 - len == idx+5
# 43 locator: undef
ok 382
# 
#     =========================================================================
#     Running long test for BLOB (113) use_utf8_data=0
ok 383 - prepare: insert into dbd_ora__drop_me values (?, ?, SYSDATE)
# create table dbd_ora__drop_me ( idx integer, lng BLOB,  dt date )
# long_data[0] length 10240
# long_data[1] length 81920
# long_data[2] length 71680
#  --- insert some BLOB data (ora_type 113)
ok 384 - insert long data 40
ok 385 - insert long data 41
ok 386 - insert long data 42
ok 387 - insert long data undef 43
#  --- fetch BLOB data back again -- truncated - LongTruncOk == 1
# LongReadLen 20, LongTruncOk 1
ok 388 - prepare: select * from dbd_ora__drop_me order by idx
ok 389 - execute: select * from dbd_ora__drop_me order by idx
ok 390 - fetch_arrayref for select * from dbd_ora__drop_me order by idx
ok 391 - four rows
ok 392 - byte_string test of truncated to LongReadLen 20
ok 393 - nice_string test of truncated to LongReadLen 20
ok 394 - BLOB non-UTF8
ok 395 - byte_string test of truncated to LongReadLen 20
ok 396 - nice_string test of truncated to LongReadLen 20
ok 397 - BLOB non-UTF8
ok 398 - byte_string test of truncated to LongReadLen 20
ok 399 - nice_string test of truncated to LongReadLen 20
ok 400 - BLOB non-UTF8
ok 401 - last row undefined
#  --- fetch BLOB data back again -- truncated - LongTruncOk == 0
# LongReadLen 81910, LongTruncOk 
ok 402 - prepare select * from dbd_ora__drop_me order by idx
ok 403 - execute select * from dbd_ora__drop_me order by idx
ok 404 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 405 - length tmp->[1] 10240
ok 406 - truncation error not triggered (LongReadLen 81910, data 1)
ok 407 - tmp==1406 || tmp==24345 tmp actually=24345
#  --- fetch BLOB data back again -- complete - LongTruncOk == 0
# LongReadLen 82920, LongTruncOk 
ok 408 - prepare: select * from dbd_ora__drop_me order by idx
ok 409 - execute select * from dbd_ora__drop_me order by idx
ok 410 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 411 - Strings are identical, Len 10240
ok 412 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 413 - Strings are identical, Len 81920
ok 414 - fetchrow_arrayref select * from dbd_ora__drop_me order by idx
ok 415 - Strings are identical, Len 71680
#  --- fetch BLOB data back again -- via blob_read
# 
ok 416 - prepare select idx, lng, dt from dbd_ora__drop_me order by idx
ok 417 - execute select idx, lng, dt from dbd_ora__drop_me order by idx
# fetch via fetchrow_arrayref
ok 418 - fetchrow_arrayref 1: select idx, lng, dt from dbd_ora__drop_me order by idx
ok 419 - byte_string test of truncated to LongReadLen 20
ok 420 - nice_string test of truncated to LongReadLen 20
# read via blob_read_all
ok 421 - blob_read_all = length($long_data[0])
ok 422 - Strings are identical
ok 423 - fetchrow_arrayref 2: select idx, lng, dt from dbd_ora__drop_me order by idx
ok 424 - blob_read_all = length(long_data[1])
ok 425 - Strings are identical
ok 426 - fetchrow_arrayref 3: select idx, lng, dt from dbd_ora__drop_me order by idx
ok 427 - length of long_data[2] = 71680
ok 428 - byte_string test of 3rd row via blob_read_all
ok 429 - nice_string test of 3rd row via blob_read_all
ok 430 - result should not be utf8
# result is non-UTF8
#  --- testing ora_auto_lob to access BLOB LobLocator
# 
ok 431 - prepare
#                     SELECT lng, idx FROM dbd_ora__drop_me ORDER BY idx
#                     FOR UPDATE -- needed so lob locator is writable
#                 
ok 432 - execute
#                     SELECT lng, idx FROM dbd_ora__drop_me ORDER BY idx
#                     FOR UPDATE -- needed so lob locator is writable
#                 
# 40: OCILobLocatorPtr=SCALAR(0x9af4a4)
ok 433 - $lob_locator is true
ok 434 - $lob_locator is a OCILobLocatorPtr
ok 435 - $lob_locator deref ptr is true
ok 436 - DBI::errstr
# length of data to be written at offset 1: 8
ok 437 - ora_lob_write
# 41: OCILobLocatorPtr=SCALAR(0x9af8a0)
ok 438 - $lob_locator is true
ok 439 - $lob_locator is a OCILobLocatorPtr
ok 440 - $lob_locator deref ptr is true
ok 441 - DBI::errstr
# length of data to be written at offset 1: 8
ok 442 - ora_lob_write
# 42: OCILobLocatorPtr=SCALAR(0x9afa44)
ok 443 - $lob_locator is true
ok 444 - $lob_locator is a OCILobLocatorPtr
ok 445 - $lob_locator deref ptr is true
ok 446 - DBI::errstr
# length of data to be written at offset 1: 8
ok 447 - ora_lob_write
# 43: undef
ok 448
#  --- round again to check contents after BLOB write updates...
ok 449 - execute (again 1)
#                     SELECT lng, idx FROM dbd_ora__drop_me ORDER BY idx
#                     FOR UPDATE -- needed so lob locator is writable
#                 
# 40 locator: OCILobLocatorPtr=SCALAR(0x9afa44)
ok 450 - content is true
# 40 content: 040 foo!\x00X0\x7Fx\x00X0\x7Fx\x00X
ok 451 - lenth(content)
ok 452 - length(content)=length(data)
ok 453 - DBI::errstr
ok 454 - length(long_data{idx}) = length of locator data
ok 455 - DBI::errstr
ok 456 - ora_lob_append DBI::errstr
# 41 locator: OCILobLocatorPtr=SCALAR(0x9afe40)
ok 457 - content is true
ok 458 - lenth(content)
ok 459 - length(content)=length(data)
# 41 content: 041 foo!901234567890
ok 460 - DBI::errstr
ok 461 - length(long_data{idx}) = length of locator data
ok 462 - DBI::errstr
ok 463 - ora_lob_append DBI::errstr
# 42 locator: OCILobLocatorPtr=SCALAR(0x9b10a8)
ok 464 - content is true
# 42 content: 042 foo!cd2bcdefabcd
ok 465 - lenth(content)
ok 466 - length(content)=length(data)
ok 467 - DBI::errstr
ok 468 - length(long_data{idx}) = length of locator data
ok 469 - DBI::errstr
ok 470 - ora_lob_append DBI::errstr
# 43 locator: undef
ok 471
#  --- round again to check the BLOB length...
ok 472 - execute (again 2)
#                     SELECT lng, idx FROM dbd_ora__drop_me ORDER BY idx
#                     FOR UPDATE -- needed so lob locator is writable
#                 
# 40 locator: OCILobLocatorPtr=SCALAR(0x9b10a8)
ok 473 - DBI::errstr
ok 474 - len == idx+5
# 41 locator: OCILobLocatorPtr=SCALAR(0x9b1408)
ok 475 - DBI::errstr
ok 476 - len == idx+5
# 42 locator: OCILobLocatorPtr=SCALAR(0x9b148c)
ok 477 - DBI::errstr
ok 478 - len == idx+5
# 43 locator: undef
ok 479
ok
t/31lob.................
1..9
ok 1 - returned valid locator
ok 2 - returned valid locator
ok 3 - returned valid locator
ok 4 - returned length
ok 5 - returned written value
ok 6 - returned length via PL/SQL
ok 7 - returned LOB as string
ok 8 - returned IN/OUT LOB as string
ok 9 - no temp lobs left
ok
t/31lob_extended........
1..31
ok 1 - created test table
# create table dbd_ora__drop_me ( idx integer, x clob,  dt date )
ok 2 - created test data
ok 3 - created test procedure
ok 4 - ora_auto_lobs prefetch prepare call proc
ok 5 - ora_auto_lobs prefetch - bind out cursor
ok 6 - ora_auto_lobs prefetch - execute to get out cursor
ok 7 - ora_auto_lobs prefetch - lob locator retrieved
ok 8 - ora_auto_lobs prefetch - is a lob locator
ok 9 - ora_auto_lobs prefetch - first lob length 6000
ok 10 - ora_auto_lobs prefetch - correct lob length
ok 11 - ora_auto_lobs prefetch - read lob
ok 12 - ora_auto_lobs prefetch - lob returned matches lob inserted
ok 13 - ora_auto_lobs prefetch - lob locator retrieved
ok 14 - ora_auto_lobs prefetch - is a lob locator
ok 15 - ora_auto_lobs prefetch - first lob length 6000
ok 16 - ora_auto_lobs prefetch - correct lob length
ok 17 - ora_auto_lobs prefetch - read lob
ok 18 - ora_auto_lobs prefetch - lob returned matches lob inserted
ok 19 - ora_auto_lobs prefetch - finished returned sth
ok 20 - ora_auto_lobs prefetch - finished sth
ok 21 - ora_auto_lobs not fetching prepare call proc
ok 22 - ora_auto_lobs not fetching - bind out cursor
ok 23 - ora_auto_lobs not fetching - execute to get out cursor
ok 24 - ora_auto_lobs not fetching - fetch returns something
ok 25 - ora_auto_lobs not fetching - not a lob locator
ok 26 - ora_auto_lobs not fetching, first lob matches
ok 27 - ora_auto_lobs not fetching - fetch returns something
ok 28 - ora_auto_lobs not fetching - not a lob locator
ok 29 - ora_auto_lobs not fetching, second lob matches
ok 30 - ora_auto_lobs not fetching - finished returned sth
ok 31 - ora_auto_lobs not fetching - finished sth
# procedure p_DBD_Oracle_drop_me dropped
# table dbd_ora__drop_me dropped
ok
t/32xmltype.............
1..4
ok 1 - use DBI;
ok 2 - The object isa DBI::db
ok 3 - ... execute for small XML return true
ok 4 - ... execute for large XML return true
ok
t/34pres_lobs...........
1..29
ok 1 - create test table
ok 2 - prepare for insert into lobs
ok 3 - bind p2
ok 4 - bind p3
ok 5 - bind p4
ok 6 - bind p5
ok 7 - execute
ok 8 - commit
ok 9 - prepare with ora_pers_lob
ok 10 - execute with ora_pers_lob
ok 11 - fetcheow for ora_pers_lob
ok 12 - clob1 = in_clob
ok 13 - clob2 = in_clob
ok 14 - clob1 = in_blob
ok 15 - clob2 = in_blob
ok 16 - prepare for ora_piece_size
ok 17 - execute for ora_piece_size
ok 18 - fetchrow
ok 19 - clob1 = in_clob
ok 20 - clob2 = in_clob
ok 21 - clob1 = in_clob
ok 22 - clob2 = in_clob
ok 23 - prepare with ora_piece_lob/ora_piece_size
ok 24 - execute
ok 25 - fetchrow
ok 26 - clob1 = in_clob
ok 27 - clob2 = in_clob
ok 28 - clob1 = in_clob
ok 29 - clob2 = in_clob
ok
t/40ph_type.............
1..19
ok 1 - create test table
ok 2 - set ora_ph_type
# 
# testing chops_space 1 embed_nul 1 name VARCHAR2 type 1 ...
# 
ok 3 - right keys
# {
#   "en" => {
#     "len" => 12,
#     "vc" => "embedded\0nul",
#     "c" => "embedded\0nul        ",
#     "isnull" => "embedded\0nul"
#   },
#   "ts" => {
#     "len" => 9,
#     "vc" => "trailing ",
#     "c" => "trailing            ",
#     "isnull" => "trailing "
#   },
#   "es" => {
#     "len" => undef,
#     "vc" => undef,
#     "c" => undef,
#     "isnull" => "ISNULL"
#   }
# }
 Placeholder behaviour for ora_type=1 VARCHAR2 (the default) varies with Oracle version.
 Oracle 7 didn't strip trailing spaces, Oracle 8 did, until 9.2.x
 Your system doesn't. If that seems odd, let us know.
ok 4 -  using ora_type 1 expected 'trailing' but got 'trailing ' for VARCHAR2
ok 5 -  expected 'embedded.nul' but got 'embedded.nul' for VARCHAR2
ok 6 - vc defined
ok 7 - c defined
ok 8 - len defined
ok 9 - ISNULL
ok 10 - set ora_ph_type
# 
# testing chops_space 0 embed_nul 1 name CHAR type 96 ...
# 
ok 11 - right keys
ok 12 -  using ora_type 96 expected 'trailing ' but got 'trailing ' for CHAR
ok 13 -  expected 'embedded.nul' but got 'embedded.nul' for CHAR
ok 14 - vc defined
ok 15 - c defined
ok 16 - len defined
# {
#   "en" => {
#     "len" => 12,
#     "vc" => "embedded\0nul",
#     "c" => "embedded\0nul        ",
#     "isnull" => "embedded\0nul"
#   },
#   "ts" => {
#     "len" => 9,
#     "vc" => "trailing ",
#     "c" => "trailing            ",
#     "isnull" => "trailing "
#   },
#   "es" => {
#     "len" => undef,
#     "vc" => undef,
#     "c" => undef,
#     "isnull" => "ISNULL"
#   }
# }
ok 17 - ISNULL
ok 18 - drop table
ok 19 - disconnect
ok
t/50cursor..............
1..1002
ok 1 - open cursor
ok 2 - open cursor bind param inout
# Max cursors: 100
# opening cursors
# opening cursor 1
ok 3 - open cursor execute
ok 4 - open cursor Active
ok 5 - cursor Active
ok 6 - cursor fetcharray
ok 7 - cursor fetcharray
ok 8 - cursor finish
ok 9 - cursor not Active
ok 10 - open cursor bind param inout
# opening cursor 2
ok 11 - open cursor execute
ok 12 - open cursor Active
ok 13 - cursor Active
ok 14 - cursor fetcharray
ok 15 - cursor fetcharray
ok 16 - cursor finish
ok 17 - cursor not Active
ok 18 - open cursor bind param inout
# opening cursor 3
ok 19 - open cursor execute
ok 20 - open cursor Active
ok 21 - cursor Active
ok 22 - cursor fetcharray
ok 23 - cursor fetcharray
ok 24 - cursor finish
ok 25 - cursor not Active
ok 26 - open cursor bind param inout
# opening cursor 4
ok 27 - open cursor execute
ok 28 - open cursor Active
ok 29 - cursor Active
ok 30 - cursor fetcharray
ok 31 - cursor fetcharray
ok 32 - cursor finish
ok 33 - cursor not Active
# opening cursor 5
ok 34 - open cursor bind param inout
ok 35 - open cursor execute
ok 36 - open cursor Active
ok 37 - cursor Active
ok 38 - cursor fetcharray
ok 39 - cursor fetcharray
ok 40 - cursor finish
ok 41 - cursor not Active
ok 42 - open cursor bind param inout
# opening cursor 6
ok 43 - open cursor execute
ok 44 - open cursor Active
ok 45 - cursor Active
ok 46 - cursor fetcharray
ok 47 - cursor fetcharray
ok 48 - cursor finish
ok 49 - cursor not Active
ok 50 - open cursor bind param inout
# opening cursor 7
ok 51 - open cursor execute
ok 52 - open cursor Active
ok 53 - cursor Active
ok 54 - cursor fetcharray
ok 55 - cursor fetcharray
ok 56 - cursor finish
ok 57 - cursor not Active
ok 58 - open cursor bind param inout
# opening cursor 8
ok 59 - open cursor execute
ok 60 - open cursor Active
ok 61 - cursor Active
ok 62 - cursor fetcharray
ok 63 - cursor fetcharray
ok 64 - cursor finish
ok 65 - cursor not Active
ok 66 - open cursor bind param inout
# opening cursor 9
ok 67 - open cursor execute
ok 68 - open cursor Active
ok 69 - cursor Active
ok 70 - cursor fetcharray
ok 71 - cursor fetcharray
ok 72 - cursor finish
ok 73 - cursor not Active
ok 74 - open cursor bind param inout
# opening cursor 10
ok 75 - open cursor execute
ok 76 - open cursor Active
ok 77 - cursor Active
ok 78 - cursor fetcharray
ok 79 - cursor fetcharray
ok 80 - cursor finish
ok 81 - cursor not Active
ok 82 - open cursor bind param inout
# opening cursor 11
ok 83 - open cursor execute
ok 84 - open cursor Active
ok 85 - cursor Active
ok 86 - cursor fetcharray
ok 87 - cursor fetcharray
ok 88 - cursor finish
ok 89 - cursor not Active
ok 90 - open cursor bind param inout
# opening cursor 12
ok 91 - open cursor execute
ok 92 - open cursor Active
ok 93 - cursor Active
ok 94 - cursor fetcharray
ok 95 - cursor fetcharray
ok 96 - cursor finish
ok 97 - cursor not Active
ok 98 - open cursor bind param inout
# opening cursor 13
ok 99 - open cursor execute
ok 100 - open cursor Active
ok 101 - cursor Active
ok 102 - cursor fetcharray
ok 103 - cursor fetcharray
ok 104 - cursor finish
ok 105 - cursor not Active
ok 106 - open cursor bind param inout
# opening cursor 14
ok 107 - open cursor execute
ok 108 - open cursor Active
ok 109 - cursor Active
ok 110 - cursor fetcharray
ok 111 - cursor fetcharray
ok 112 - cursor finish
ok 113 - cursor not Active
ok 114 - open cursor bind param inout
# opening cursor 15
ok 115 - open cursor execute
ok 116 - open cursor Active
ok 117 - cursor Active
ok 118 - cursor fetcharray
ok 119 - cursor fetcharray
ok 120 - cursor finish
ok 121 - cursor not Active
ok 122 - open cursor bind param inout
# opening cursor 16
ok 123 - open cursor execute
ok 124 - open cursor Active
ok 125 - cursor Active
ok 126 - cursor fetcharray
ok 127 - cursor fetcharray
ok 128 - cursor finish
ok 129 - cursor not Active
ok 130 - open cursor bind param inout
# opening cursor 17
ok 131 - open cursor execute
ok 132 - open cursor Active
ok 133 - cursor Active
ok 134 - cursor fetcharray
ok 135 - cursor fetcharray
ok 136 - cursor finish
ok 137 - cursor not Active
ok 138 - open cursor bind param inout
# opening cursor 18
ok 139 - open cursor execute
ok 140 - open cursor Active
ok 141 - cursor Active
ok 142 - cursor fetcharray
ok 143 - cursor fetcharray
ok 144 - cursor finish
ok 145 - cursor not Active
ok 146 - open cursor bind param inout
# opening cursor 19
ok 147 - open cursor execute
ok 148 - open cursor Active
ok 149 - cursor Active
ok 150 - cursor fetcharray
ok 151 - cursor fetcharray
ok 152 - cursor finish
ok 153 - cursor not Active
ok 154 - open cursor bind param inout
# opening cursor 20
ok 155 - open cursor execute
ok 156 - open cursor Active
ok 157 - cursor Active
ok 158 - cursor fetcharray
ok 159 - cursor fetcharray
ok 160 - cursor finish
ok 161 - cursor not Active
ok 162 - open cursor bind param inout
# opening cursor 21
ok 163 - open cursor execute
ok 164 - open cursor Active
ok 165 - cursor Active
ok 166 - cursor fetcharray
ok 167 - cursor fetcharray
ok 168 - cursor finish
ok 169 - cursor not Active
ok 170 - open cursor bind param inout
# opening cursor 22
ok 171 - open cursor execute
ok 172 - open cursor Active
ok 173 - cursor Active
ok 174 - cursor fetcharray
ok 175 - cursor fetcharray
ok 176 - cursor finish
ok 177 - cursor not Active
ok 178 - open cursor bind param inout
# opening cursor 23
ok 179 - open cursor execute
ok 180 - open cursor Active
ok 181 - cursor Active
ok 182 - cursor fetcharray
ok 183 - cursor fetcharray
ok 184 - cursor finish
ok 185 - cursor not Active
ok 186 - open cursor bind param inout
# opening cursor 24
ok 187 - open cursor execute
ok 188 - open cursor Active
ok 189 - cursor Active
ok 190 - cursor fetcharray
ok 191 - cursor fetcharray
ok 192 - cursor finish
ok 193 - cursor not Active
ok 194 - open cursor bind param inout
# opening cursor 25
ok 195 - open cursor execute
ok 196 - open cursor Active
ok 197 - cursor Active
ok 198 - cursor fetcharray
ok 199 - cursor fetcharray
ok 200 - cursor finish
ok 201 - cursor not Active
ok 202 - open cursor bind param inout
# opening cursor 26
ok 203 - open cursor execute
ok 204 - open cursor Active
ok 205 - cursor Active
ok 206 - cursor fetcharray
ok 207 - cursor fetcharray
ok 208 - cursor finish
ok 209 - cursor not Active
ok 210 - open cursor bind param inout
# opening cursor 27
ok 211 - open cursor execute
ok 212 - open cursor Active
ok 213 - cursor Active
ok 214 - cursor fetcharray
ok 215 - cursor fetcharray
ok 216 - cursor finish
ok 217 - cursor not Active
ok 218 - open cursor bind param inout
# opening cursor 28
ok 219 - open cursor execute
ok 220 - open cursor Active
ok 221 - cursor Active
ok 222 - cursor fetcharray
ok 223 - cursor fetcharray
ok 224 - cursor finish
ok 225 - cursor not Active
ok 226 - open cursor bind param inout
# opening cursor 29
ok 227 - open cursor execute
ok 228 - open cursor Active
ok 229 - cursor Active
ok 230 - cursor fetcharray
ok 231 - cursor fetcharray
ok 232 - cursor finish
ok 233 - cursor not Active
ok 234 - open cursor bind param inout
# opening cursor 30
ok 235 - open cursor execute
ok 236 - open cursor Active
ok 237 - cursor Active
ok 238 - cursor fetcharray
ok 239 - cursor fetcharray
ok 240 - cursor finish
ok 241 - cursor not Active
ok 242 - open cursor bind param inout
# opening cursor 31
ok 243 - open cursor execute
ok 244 - open cursor Active
ok 245 - cursor Active
ok 246 - cursor fetcharray
ok 247 - cursor fetcharray
ok 248 - cursor finish
ok 249 - cursor not Active
ok 250 - open cursor bind param inout
# opening cursor 32
ok 251 - open cursor execute
ok 252 - open cursor Active
ok 253 - cursor Active
ok 254 - cursor fetcharray
ok 255 - cursor fetcharray
ok 256 - cursor finish
ok 257 - cursor not Active
ok 258 - open cursor bind param inout
# opening cursor 33
ok 259 - open cursor execute
ok 260 - open cursor Active
ok 261 - cursor Active
ok 262 - cursor fetcharray
ok 263 - cursor fetcharray
ok 264 - cursor finish
ok 265 - cursor not Active
ok 266 - open cursor bind param inout
# opening cursor 34
ok 267 - open cursor execute
ok 268 - open cursor Active
ok 269 - cursor Active
ok 270 - cursor fetcharray
ok 271 - cursor fetcharray
ok 272 - cursor finish
ok 273 - cursor not Active
ok 274 - open cursor bind param inout
# opening cursor 35
ok 275 - open cursor execute
ok 276 - open cursor Active
ok 277 - cursor Active
ok 278 - cursor fetcharray
ok 279 - cursor fetcharray
ok 280 - cursor finish
ok 281 - cursor not Active
ok 282 - open cursor bind param inout
# opening cursor 36
ok 283 - open cursor execute
ok 284 - open cursor Active
ok 285 - cursor Active
ok 286 - cursor fetcharray
ok 287 - cursor fetcharray
ok 288 - cursor finish
ok 289 - cursor not Active
ok 290 - open cursor bind param inout
# opening cursor 37
ok 291 - open cursor execute
ok 292 - open cursor Active
ok 293 - cursor Active
ok 294 - cursor fetcharray
ok 295 - cursor fetcharray
ok 296 - cursor finish
ok 297 - cursor not Active
ok 298 - open cursor bind param inout
# opening cursor 38
ok 299 - open cursor execute
ok 300 - open cursor Active
ok 301 - cursor Active
ok 302 - cursor fetcharray
ok 303 - cursor fetcharray
ok 304 - cursor finish
ok 305 - cursor not Active
ok 306 - open cursor bind param inout
# opening cursor 39
ok 307 - open cursor execute
ok 308 - open cursor Active
ok 309 - cursor Active
ok 310 - cursor fetcharray
ok 311 - cursor fetcharray
ok 312 - cursor finish
ok 313 - cursor not Active
ok 314 - open cursor bind param inout
# opening cursor 40
ok 315 - open cursor execute
ok 316 - open cursor Active
ok 317 - cursor Active
ok 318 - cursor fetcharray
ok 319 - cursor fetcharray
ok 320 - cursor finish
ok 321 - cursor not Active
ok 322 - open cursor bind param inout
# opening cursor 41
ok 323 - open cursor execute
ok 324 - open cursor Active
ok 325 - cursor Active
ok 326 - cursor fetcharray
ok 327 - cursor fetcharray
ok 328 - cursor finish
ok 329 - cursor not Active
ok 330 - open cursor bind param inout
# opening cursor 42
ok 331 - open cursor execute
ok 332 - open cursor Active
ok 333 - cursor Active
ok 334 - cursor fetcharray
ok 335 - cursor fetcharray
ok 336 - cursor finish
ok 337 - cursor not Active
ok 338 - open cursor bind param inout
# opening cursor 43
ok 339 - open cursor execute
ok 340 - open cursor Active
ok 341 - cursor Active
ok 342 - cursor fetcharray
ok 343 - cursor fetcharray
ok 344 - cursor finish
ok 345 - cursor not Active
ok 346 - open cursor bind param inout
# opening cursor 44
ok 347 - open cursor execute
ok 348 - open cursor Active
ok 349 - cursor Active
ok 350 - cursor fetcharray
ok 351 - cursor fetcharray
ok 352 - cursor finish
ok 353 - cursor not Active
ok 354 - open cursor bind param inout
# opening cursor 45
ok 355 - open cursor execute
ok 356 - open cursor Active
ok 357 - cursor Active
ok 358 - cursor fetcharray
ok 359 - cursor fetcharray
ok 360 - cursor finish
ok 361 - cursor not Active
ok 362 - open cursor bind param inout
# opening cursor 46
ok 363 - open cursor execute
ok 364 - open cursor Active
ok 365 - cursor Active
ok 366 - cursor fetcharray
ok 367 - cursor fetcharray
ok 368 - cursor finish
ok 369 - cursor not Active
ok 370 - open cursor bind param inout
# opening cursor 47
ok 371 - open cursor execute
ok 372 - open cursor Active
ok 373 - cursor Active
ok 374 - cursor fetcharray
ok 375 - cursor fetcharray
ok 376 - cursor finish
ok 377 - cursor not Active
ok 378 - open cursor bind param inout
# opening cursor 48
ok 379 - open cursor execute
ok 380 - open cursor Active
ok 381 - cursor Active
ok 382 - cursor fetcharray
ok 383 - cursor fetcharray
ok 384 - cursor finish
ok 385 - cursor not Active
ok 386 - open cursor bind param inout
# opening cursor 49
ok 387 - open cursor execute
ok 388 - open cursor Active
ok 389 - cursor Active
ok 390 - cursor fetcharray
ok 391 - cursor fetcharray
ok 392 - cursor finish
ok 393 - cursor not Active
ok 394 - open cursor bind param inout
# opening cursor 50
ok 395 - open cursor execute
ok 396 - open cursor Active
ok 397 - cursor Active
ok 398 - cursor fetcharray
ok 399 - cursor fetcharray
ok 400 - cursor finish
ok 401 - cursor not Active
ok 402 - open cursor bind param inout
# opening cursor 51
ok 403 - open cursor execute
ok 404 - open cursor Active
ok 405 - cursor Active
ok 406 - cursor fetcharray
ok 407 - cursor fetcharray
ok 408 - cursor finish
ok 409 - cursor not Active
# opening cursor 52
ok 410 - open cursor bind param inout
ok 411 - open cursor execute
ok 412 - open cursor Active
ok 413 - cursor Active
ok 414 - cursor fetcharray
ok 415 - cursor fetcharray
ok 416 - cursor finish
ok 417 - cursor not Active
ok 418 - open cursor bind param inout
# opening cursor 53
ok 419 - open cursor execute
ok 420 - open cursor Active
ok 421 - cursor Active
ok 422 - cursor fetcharray
ok 423 - cursor fetcharray
ok 424 - cursor finish
ok 425 - cursor not Active
ok 426 - open cursor bind param inout
# opening cursor 54
ok 427 - open cursor execute
ok 428 - open cursor Active
ok 429 - cursor Active
ok 430 - cursor fetcharray
ok 431 - cursor fetcharray
ok 432 - cursor finish
ok 433 - cursor not Active
ok 434 - open cursor bind param inout
# opening cursor 55
ok 435 - open cursor execute
ok 436 - open cursor Active
ok 437 - cursor Active
ok 438 - cursor fetcharray
ok 439 - cursor fetcharray
ok 440 - cursor finish
ok 441 - cursor not Active
ok 442 - open cursor bind param inout
# opening cursor 56
ok 443 - open cursor execute
ok 444 - open cursor Active
ok 445 - cursor Active
ok 446 - cursor fetcharray
ok 447 - cursor fetcharray
ok 448 - cursor finish
ok 449 - cursor not Active
ok 450 - open cursor bind param inout
# opening cursor 57
ok 451 - open cursor execute
ok 452 - open cursor Active
ok 453 - cursor Active
ok 454 - cursor fetcharray
ok 455 - cursor fetcharray
ok 456 - cursor finish
ok 457 - cursor not Active
ok 458 - open cursor bind param inout
# opening cursor 58
ok 459 - open cursor execute
ok 460 - open cursor Active
ok 461 - cursor Active
ok 462 - cursor fetcharray
ok 463 - cursor fetcharray
ok 464 - cursor finish
ok 465 - cursor not Active
ok 466 - open cursor bind param inout
# opening cursor 59
ok 467 - open cursor execute
ok 468 - open cursor Active
ok 469 - cursor Active
ok 470 - cursor fetcharray
ok 471 - cursor fetcharray
ok 472 - cursor finish
ok 473 - cursor not Active
ok 474 - open cursor bind param inout
# opening cursor 60
ok 475 - open cursor execute
ok 476 - open cursor Active
ok 477 - cursor Active
ok 478 - cursor fetcharray
ok 479 - cursor fetcharray
ok 480 - cursor finish
ok 481 - cursor not Active
ok 482 - open cursor bind param inout
# opening cursor 61
ok 483 - open cursor execute
ok 484 - open cursor Active
ok 485 - cursor Active
ok 486 - cursor fetcharray
ok 487 - cursor fetcharray
ok 488 - cursor finish
ok 489 - cursor not Active
ok 490 - open cursor bind param inout
# opening cursor 62
ok 491 - open cursor execute
ok 492 - open cursor Active
ok 493 - cursor Active
ok 494 - cursor fetcharray
ok 495 - cursor fetcharray
ok 496 - cursor finish
ok 497 - cursor not Active
ok 498 - open cursor bind param inout
# opening cursor 63
ok 499 - open cursor execute
ok 500 - open cursor Active
ok 501 - cursor Active
ok 502 - cursor fetcharray
ok 503 - cursor fetcharray
ok 504 - cursor finish
ok 505 - cursor not Active
ok 506 - open cursor bind param inout
# opening cursor 64
ok 507 - open cursor execute
ok 508 - open cursor Active
ok 509 - cursor Active
ok 510 - cursor fetcharray
ok 511 - cursor fetcharray
ok 512 - cursor finish
ok 513 - cursor not Active
ok 514 - open cursor bind param inout
# opening cursor 65
ok 515 - open cursor execute
ok 516 - open cursor Active
ok 517 - cursor Active
ok 518 - cursor fetcharray
ok 519 - cursor fetcharray
ok 520 - cursor finish
ok 521 - cursor not Active
ok 522 - open cursor bind param inout
# opening cursor 66
ok 523 - open cursor execute
ok 524 - open cursor Active
ok 525 - cursor Active
ok 526 - cursor fetcharray
ok 527 - cursor fetcharray
ok 528 - cursor finish
ok 529 - cursor not Active
ok 530 - open cursor bind param inout
# opening cursor 67
ok 531 - open cursor execute
ok 532 - open cursor Active
ok 533 - cursor Active
ok 534 - cursor fetcharray
ok 535 - cursor fetcharray
ok 536 - cursor finish
ok 537 - cursor not Active
ok 538 - open cursor bind param inout
# opening cursor 68
ok 539 - open cursor execute
ok 540 - open cursor Active
ok 541 - cursor Active
ok 542 - cursor fetcharray
ok 543 - cursor fetcharray
ok 544 - cursor finish
ok 545 - cursor not Active
ok 546 - open cursor bind param inout
# opening cursor 69
ok 547 - open cursor execute
ok 548 - open cursor Active
ok 549 - cursor Active
ok 550 - cursor fetcharray
ok 551 - cursor fetcharray
ok 552 - cursor finish
ok 553 - cursor not Active
ok 554 - open cursor bind param inout
# opening cursor 70
ok 555 - open cursor execute
ok 556 - open cursor Active
ok 557 - cursor Active
ok 558 - cursor fetcharray
ok 559 - cursor fetcharray
ok 560 - cursor finish
ok 561 - cursor not Active
ok 562 - open cursor bind param inout
# opening cursor 71
ok 563 - open cursor execute
ok 564 - open cursor Active
ok 565 - cursor Active
ok 566 - cursor fetcharray
ok 567 - cursor fetcharray
ok 568 - cursor finish
ok 569 - cursor not Active
ok 570 - open cursor bind param inout
# opening cursor 72
ok 571 - open cursor execute
ok 572 - open cursor Active
ok 573 - cursor Active
ok 574 - cursor fetcharray
ok 575 - cursor fetcharray
ok 576 - cursor finish
ok 577 - cursor not Active
ok 578 - open cursor bind param inout
# opening cursor 73
ok 579 - open cursor execute
ok 580 - open cursor Active
ok 581 - cursor Active
ok 582 - cursor fetcharray
ok 583 - cursor fetcharray
ok 584 - cursor finish
ok 585 - cursor not Active
ok 586 - open cursor bind param inout
# opening cursor 74
ok 587 - open cursor execute
ok 588 - open cursor Active
ok 589 - cursor Active
ok 590 - cursor fetcharray
ok 591 - cursor fetcharray
ok 592 - cursor finish
ok 593 - cursor not Active
ok 594 - open cursor bind param inout
# opening cursor 75
ok 595 - open cursor execute
ok 596 - open cursor Active
ok 597 - cursor Active
ok 598 - cursor fetcharray
ok 599 - cursor fetcharray
ok 600 - cursor finish
ok 601 - cursor not Active
ok 602 - open cursor bind param inout
# opening cursor 76
ok 603 - open cursor execute
ok 604 - open cursor Active
ok 605 - cursor Active
ok 606 - cursor fetcharray
ok 607 - cursor fetcharray
ok 608 - cursor finish
ok 609 - cursor not Active
ok 610 - open cursor bind param inout
# opening cursor 77
ok 611 - open cursor execute
ok 612 - open cursor Active
ok 613 - cursor Active
ok 614 - cursor fetcharray
ok 615 - cursor fetcharray
ok 616 - cursor finish
ok 617 - cursor not Active
ok 618 - open cursor bind param inout
# opening cursor 78
ok 619 - open cursor execute
ok 620 - open cursor Active
ok 621 - cursor Active
ok 622 - cursor fetcharray
ok 623 - cursor fetcharray
ok 624 - cursor finish
ok 625 - cursor not Active
ok 626 - open cursor bind param inout
# opening cursor 79
ok 627 - open cursor execute
ok 628 - open cursor Active
ok 629 - cursor Active
ok 630 - cursor fetcharray
ok 631 - cursor fetcharray
ok 632 - cursor finish
ok 633 - cursor not Active
ok 634 - open cursor bind param inout
# opening cursor 80
ok 635 - open cursor execute
ok 636 - open cursor Active
ok 637 - cursor Active
ok 638 - cursor fetcharray
ok 639 - cursor fetcharray
ok 640 - cursor finish
ok 641 - cursor not Active
ok 642 - open cursor bind param inout
# opening cursor 81
ok 643 - open cursor execute
ok 644 - open cursor Active
ok 645 - cursor Active
ok 646 - cursor fetcharray
ok 647 - cursor fetcharray
ok 648 - cursor finish
ok 649 - cursor not Active
ok 650 - open cursor bind param inout
# opening cursor 82
ok 651 - open cursor execute
ok 652 - open cursor Active
ok 653 - cursor Active
ok 654 - cursor fetcharray
ok 655 - cursor fetcharray
ok 656 - cursor finish
ok 657 - cursor not Active
ok 658 - open cursor bind param inout
# opening cursor 83
ok 659 - open cursor execute
ok 660 - open cursor Active
ok 661 - cursor Active
ok 662 - cursor fetcharray
ok 663 - cursor fetcharray
ok 664 - cursor finish
ok 665 - cursor not Active
ok 666 - open cursor bind param inout
# opening cursor 84
ok 667 - open cursor execute
ok 668 - open cursor Active
ok 669 - cursor Active
ok 670 - cursor fetcharray
ok 671 - cursor fetcharray
ok 672 - cursor finish
ok 673 - cursor not Active
ok 674 - open cursor bind param inout
# opening cursor 85
ok 675 - open cursor execute
ok 676 - open cursor Active
ok 677 - cursor Active
ok 678 - cursor fetcharray
ok 679 - cursor fetcharray
ok 680 - cursor finish
ok 681 - cursor not Active
ok 682 - open cursor bind param inout
# opening cursor 86
ok 683 - open cursor execute
ok 684 - open cursor Active
ok 685 - cursor Active
ok 686 - cursor fetcharray
ok 687 - cursor fetcharray
ok 688 - cursor finish
ok 689 - cursor not Active
ok 690 - open cursor bind param inout
# opening cursor 87
ok 691 - open cursor execute
ok 692 - open cursor Active
ok 693 - cursor Active
ok 694 - cursor fetcharray
ok 695 - cursor fetcharray
ok 696 - cursor finish
ok 697 - cursor not Active
ok 698 - open cursor bind param inout
# opening cursor 88
ok 699 - open cursor execute
ok 700 - open cursor Active
ok 701 - cursor Active
ok 702 - cursor fetcharray
ok 703 - cursor fetcharray
ok 704 - cursor finish
ok 705 - cursor not Active
ok 706 - open cursor bind param inout
# opening cursor 89
ok 707 - open cursor execute
ok 708 - open cursor Active
ok 709 - cursor Active
ok 710 - cursor fetcharray
ok 711 - cursor fetcharray
ok 712 - cursor finish
ok 713 - cursor not Active
ok 714 - open cursor bind param inout
# opening cursor 90
ok 715 - open cursor execute
ok 716 - open cursor Active
ok 717 - cursor Active
ok 718 - cursor fetcharray
ok 719 - cursor fetcharray
ok 720 - cursor finish
ok 721 - cursor not Active
ok 722 - open cursor bind param inout
# opening cursor 91
ok 723 - open cursor execute
ok 724 - open cursor Active
ok 725 - cursor Active
ok 726 - cursor fetcharray
ok 727 - cursor fetcharray
ok 728 - cursor finish
ok 729 - cursor not Active
ok 730 - open cursor bind param inout
# opening cursor 92
ok 731 - open cursor execute
ok 732 - open cursor Active
ok 733 - cursor Active
ok 734 - cursor fetcharray
ok 735 - cursor fetcharray
ok 736 - cursor finish
ok 737 - cursor not Active
ok 738 - open cursor bind param inout
# opening cursor 93
ok 739 - open cursor execute
ok 740 - open cursor Active
ok 741 - cursor Active
ok 742 - cursor fetcharray
ok 743 - cursor fetcharray
ok 744 - cursor finish
ok 745 - cursor not Active
ok 746 - open cursor bind param inout
# opening cursor 94
ok 747 - open cursor execute
ok 748 - open cursor Active
ok 749 - cursor Active
ok 750 - cursor fetcharray
ok 751 - cursor fetcharray
ok 752 - cursor finish
ok 753 - cursor not Active
ok 754 - open cursor bind param inout
# opening cursor 95
ok 755 - open cursor execute
ok 756 - open cursor Active
ok 757 - cursor Active
ok 758 - cursor fetcharray
ok 759 - cursor fetcharray
ok 760 - cursor finish
ok 761 - cursor not Active
ok 762 - open cursor bind param inout
# opening cursor 96
ok 763 - open cursor execute
ok 764 - open cursor Active
ok 765 - cursor Active
ok 766 - cursor fetcharray
ok 767 - cursor fetcharray
ok 768 - cursor finish
ok 769 - cursor not Active
ok 770 - open cursor bind param inout
# opening cursor 97
ok 771 - open cursor execute
ok 772 - open cursor Active
ok 773 - cursor Active
ok 774 - cursor fetcharray
ok 775 - cursor fetcharray
ok 776 - cursor finish
ok 777 - cursor not Active
ok 778 - open cursor bind param inout
# opening cursor 98
ok 779 - open cursor execute
ok 780 - open cursor Active
ok 781 - cursor Active
ok 782 - cursor fetcharray
ok 783 - cursor fetcharray
ok 784 - cursor finish
ok 785 - cursor not Active
ok 786 - open cursor bind param inout
# opening cursor 99
ok 787 - open cursor execute
ok 788 - open cursor Active
ok 789 - cursor Active
ok 790 - cursor fetcharray
ok 791 - cursor fetcharray
ok 792 - cursor finish
ok 793 - cursor not Active
ok 794 - open cursor bind param inout
# opening cursor 100
ok 795 - open cursor execute
ok 796 - open cursor Active
ok 797 - cursor Active
ok 798 - cursor fetcharray
ok 799 - cursor fetcharray
ok 800 - cursor finish
ok 801 - cursor not Active
# closing cursors
ok 802 - close cursor
closing cursor 1
ok 803 - close cursor bind param
ok 804 - close cursor execute
closing cursor 2
ok 805 - close cursor bind param
ok 806 - close cursor execute
closing cursor 3
ok 807 - close cursor bind param
ok 808 - close cursor execute
closing cursor 4
ok 809 - close cursor bind param
ok 810 - close cursor execute
closing cursor 5
ok 811 - close cursor bind param
ok 812 - close cursor execute
closing cursor 6
ok 813 - close cursor bind param
ok 814 - close cursor execute
closing cursor 7
ok 815 - close cursor bind param
ok 816 - close cursor execute
closing cursor 8
ok 817 - close cursor bind param
ok 818 - close cursor execute
closing cursor 9
ok 819 - close cursor bind param
ok 820 - close cursor execute
closing cursor 10
ok 821 - close cursor bind param
ok 822 - close cursor execute
closing cursor 11
ok 823 - close cursor bind param
ok 824 - close cursor execute
closing cursor 12
ok 825 - close cursor bind param
ok 826 - close cursor execute
closing cursor 13
ok 827 - close cursor bind param
ok 828 - close cursor execute
closing cursor 14
ok 829 - close cursor bind param
ok 830 - close cursor execute
closing cursor 15
ok 831 - close cursor bind param
ok 832 - close cursor execute
closing cursor 16
ok 833 - close cursor bind param
ok 834 - close cursor execute
closing cursor 17
ok 835 - close cursor bind param
ok 836 - close cursor execute
closing cursor 18
ok 837 - close cursor bind param
ok 838 - close cursor execute
closing cursor 19
ok 839 - close cursor bind param
ok 840 - close cursor execute
closing cursor 20
ok 841 - close cursor bind param
ok 842 - close cursor execute
closing cursor 21
ok 843 - close cursor bind param
ok 844 - close cursor execute
closing cursor 22
ok 845 - close cursor bind param
ok 846 - close cursor execute
closing cursor 23
ok 847 - close cursor bind param
ok 848 - close cursor execute
closing cursor 24
ok 849 - close cursor bind param
ok 850 - close cursor execute
closing cursor 25
ok 851 - close cursor bind param
ok 852 - close cursor execute
closing cursor 26
ok 853 - close cursor bind param
ok 854 - close cursor execute
closing cursor 27
ok 855 - close cursor bind param
ok 856 - close cursor execute
closing cursor 28
ok 857 - close cursor bind param
ok 858 - close cursor execute
closing cursor 29
ok 859 - close cursor bind param
ok 860 - close cursor execute
closing cursor 30
ok 861 - close cursor bind param
ok 862 - close cursor execute
closing cursor 31
ok 863 - close cursor bind param
ok 864 - close cursor execute
closing cursor 32
ok 865 - close cursor bind param
ok 866 - close cursor execute
closing cursor 33
ok 867 - close cursor bind param
ok 868 - close cursor execute
closing cursor 34
ok 869 - close cursor bind param
ok 870 - close cursor execute
closing cursor 35
ok 871 - close cursor bind param
ok 872 - close cursor execute
closing cursor 36
ok 873 - close cursor bind param
ok 874 - close cursor execute
closing cursor 37
ok 875 - close cursor bind param
ok 876 - close cursor execute
closing cursor 38
ok 877 - close cursor bind param
ok 878 - close cursor execute
closing cursor 39
ok 879 - close cursor bind param
ok 880 - close cursor execute
closing cursor 40
ok 881 - close cursor bind param
ok 882 - close cursor execute
closing cursor 41
ok 883 - close cursor bind param
ok 884 - close cursor execute
closing cursor 42
ok 885 - close cursor bind param
ok 886 - close cursor execute
closing cursor 43
ok 887 - close cursor bind param
ok 888 - close cursor execute
closing cursor 44
ok 889 - close cursor bind param
ok 890 - close cursor execute
closing cursor 45
ok 891 - close cursor bind param
ok 892 - close cursor execute
closing cursor 46
ok 893 - close cursor bind param
ok 894 - close cursor execute
closing cursor 47
ok 895 - close cursor bind param
ok 896 - close cursor execute
closing cursor 48
ok 897 - close cursor bind param
ok 898 - close cursor execute
closing cursor 49
ok 899 - close cursor bind param
ok 900 - close cursor execute
closing cursor 50
ok 901 - close cursor bind param
ok 902 - close cursor execute
closing cursor 51
ok 903 - close cursor bind param
ok 904 - close cursor execute
closing cursor 52
ok 905 - close cursor bind param
ok 906 - close cursor execute
closing cursor 53
ok 907 - close cursor bind param
ok 908 - close cursor execute
closing cursor 54
ok 909 - close cursor bind param
ok 910 - close cursor execute
closing cursor 55
ok 911 - close cursor bind param
ok 912 - close cursor execute
closing cursor 56
ok 913 - close cursor bind param
ok 914 - close cursor execute
closing cursor 57
ok 915 - close cursor bind param
ok 916 - close cursor execute
closing cursor 58
ok 917 - close cursor bind param
ok 918 - close cursor execute
closing cursor 59
ok 919 - close cursor bind param
ok 920 - close cursor execute
closing cursor 60
ok 921 - close cursor bind param
ok 922 - close cursor execute
closing cursor 61
ok 923 - close cursor bind param
ok 924 - close cursor execute
closing cursor 62
ok 925 - close cursor bind param
ok 926 - close cursor execute
closing cursor 63
ok 927 - close cursor bind param
ok 928 - close cursor execute
closing cursor 64
ok 929 - close cursor bind param
ok 930 - close cursor execute
closing cursor 65
ok 931 - close cursor bind param
ok 932 - close cursor execute
closing cursor 66
ok 933 - close cursor bind param
ok 934 - close cursor execute
closing cursor 67
ok 935 - close cursor bind param
ok 936 - close cursor execute
closing cursor 68
ok 937 - close cursor bind param
ok 938 - close cursor execute
closing cursor 69
ok 939 - close cursor bind param
ok 940 - close cursor execute
closing cursor 70
ok 941 - close cursor bind param
ok 942 - close cursor execute
closing cursor 71
ok 943 - close cursor bind param
ok 944 - close cursor execute
closing cursor 72
ok 945 - close cursor bind param
ok 946 - close cursor execute
closing cursor 73
ok 947 - close cursor bind param
ok 948 - close cursor execute
closing cursor 74
ok 949 - close cursor bind param
ok 950 - close cursor execute
closing cursor 75
ok 951 - close cursor bind param
ok 952 - close cursor execute
closing cursor 76
ok 953 - close cursor bind param
ok 954 - close cursor execute
closing cursor 77
ok 955 - close cursor bind param
ok 956 - close cursor execute
closing cursor 78
ok 957 - close cursor bind param
ok 958 - close cursor execute
closing cursor 79
ok 959 - close cursor bind param
ok 960 - close cursor execute
closing cursor 80
ok 961 - close cursor bind param
ok 962 - close cursor execute
closing cursor 81
ok 963 - close cursor bind param
ok 964 - close cursor execute
closing cursor 82
ok 965 - close cursor bind param
ok 966 - close cursor execute
closing cursor 83
ok 967 - close cursor bind param
ok 968 - close cursor execute
closing cursor 84
ok 969 - close cursor bind param
ok 970 - close cursor execute
closing cursor 85
ok 971 - close cursor bind param
ok 972 - close cursor execute
closing cursor 86
ok 973 - close cursor bind param
ok 974 - close cursor execute
closing cursor 87
ok 975 - close cursor bind param
ok 976 - close cursor execute
closing cursor 88
ok 977 - close cursor bind param
ok 978 - close cursor execute
closing cursor 89
ok 979 - close cursor bind param
ok 980 - close cursor execute
closing cursor 90
ok 981 - close cursor bind param
ok 982 - close cursor execute
closing cursor 91
ok 983 - close cursor bind param
ok 984 - close cursor execute
closing cursor 92
ok 985 - close cursor bind param
ok 986 - close cursor execute
closing cursor 93
ok 987 - close cursor bind param
ok 988 - close cursor execute
closing cursor 94
ok 989 - close cursor bind param
ok 990 - close cursor execute
closing cursor 95
ok 991 - close cursor bind param
ok 992 - close cursor execute
closing cursor 96
ok 993 - close cursor bind param
ok 994 - close cursor execute
closing cursor 97
ok 995 - close cursor bind param
ok 996 - close cursor execute
closing cursor 98
ok 997 - close cursor bind param
ok 998 - close cursor execute
closing cursor 99
ok 999 - close cursor bind param
ok 1000 - close cursor execute
closing cursor 100
ok 1001 - close cursor bind param
ok 1002 - close cursor execute
ok
t/51scroll..............
1..33
ok 1 - use DBI;
ok 2
ok 3 - The object isa DBI::db
ok 4
ok 5
ok 6 - ... we should get the next record
ok 7 - ... we should get the next record
ok 8 - ... we should get the next record
ok 9 - ... we should get the next record
ok 10 - ... we should get the next record
ok 11 - ... we should get the next record
ok 12 - ... we should get the next record
ok 13 - ... we should get the next record
ok 14 - ... we should get the next record
ok 15 - ... we should get the next record
ok 16 - ... we should get the 10th record
ok 17 - ... we should get the prior record
ok 18 - ... we should get the prior record
ok 19 - ... we should get the prior record
ok 20 - ... we should get the prior record
ok 21 - ... we should get the prior record
ok 22 - ... we should get the prior record
ok 23 - ... we should get the prior record
ok 24 - ... we should get the prior record
ok 25 - ... we should get the prior record
ok 26 - ... we should get the 5th record
ok 27 - ... we should get the 7th record
ok 28 - ... we should get the 4th record
ok 29 - ... we should get the 9th record
ok 30 - ... we should get the 10th record
ok 31 - ... we should get the 10 for the ora_scroll_position
ok 32 - ... we should get the 1st record
ok 33 - ... we should get the 1 for the ora_scroll_position
ok
t/55nested..............
1..16
ok 1 - prepare select
ok 2 - set ORA_RSET
ok 3 - outer execute
ok 4 - outer fetchrow
ok 5 - inner DBI::st
ok 6 - inner Active
ok 7 - inner fetchrow_array
ok 8 - rows equal
ok 9 - inner Active
ok 10 - outer fetchrow_array
ok 11 - inner not Active
ok 12 - inner fetch finished
ok 13 - err = -1
ok 14 - defunct
ok 15 - outer finish
ok 16 - ActiveKids
# Fetched 4900 rows (select): 0.0470688343048096 secs.
# Fetched 4900 rows (nested cursor): 0.0684778690338135 secs.
ok
t/56embbeded............
1..5
ok 1 - use DBI;
ok 2 - The object isa DBI::db
ok 3 - ... Prepare should return true
ok 4 - ... Select should return true
ok 5 - ... we should have 5 items
ok
t/60reauth..............
1..0 # Skip ORACLE_USERID_2 not defined.
# 
skipped: ORACLE_USERID_2 not defined.
t/70meta................
1..13
# type_info_all
ok 1 - more than 8 types
# $VAR1 = {
#           'UNSIGNED_ATTRIBUTE' => undef,
#           'MAXIMUM_SCALE' => undef,
#           'INTERVAL_PRECISION' => undef,
#           'CREATE_PARAMS' => undef,
#           'NUM_PREC_RADIX' => undef,
#           'SEARCHABLE' => 0,
#           'LOCAL_TYPE_NAME' => 'LONG RAW',
#           'LITERAL_PREFIX' => '\'',
#           'COLUMN_SIZE' => 2147483647,
#           'MINIMUM_SCALE' => undef,
#           'TYPE_NAME' => 'LONG RAW',
#           'AUTO_UNIQUE_VALUE' => undef,
#           'NULLABLE' => 1,
#           'DATA_TYPE' => -4,
#           'SQL_DATA_TYPE' => -4,
#           'LITERAL_SUFFIX' => '\'',
#           'CASE_SENSITIVE' => 0,
#           'FIXED_PREC_SCALE' => 0,
#           'SQL_DATETIME_SUB' => undef
#         };
# $VAR2 = {
#           'UNSIGNED_ATTRIBUTE' => undef,
#           'MAXIMUM_SCALE' => undef,
#           'INTERVAL_PRECISION' => undef,
#           'CREATE_PARAMS' => 'max length',
#           'NUM_PREC_RADIX' => undef,
#           'SEARCHABLE' => 3,
#           'LOCAL_TYPE_NAME' => 'RAW',
#           'LITERAL_PREFIX' => '\'',
#           'COLUMN_SIZE' => 2000,
#           'MINIMUM_SCALE' => undef,
#           'TYPE_NAME' => 'RAW',
#           'AUTO_UNIQUE_VALUE' => undef,
#           'NULLABLE' => 1,
#           'DATA_TYPE' => -3,
#           'SQL_DATA_TYPE' => -3,
#           'LITERAL_SUFFIX' => '\'',
#           'CASE_SENSITIVE' => 0,
#           'FIXED_PREC_SCALE' => 0,
#           'SQL_DATETIME_SUB' => undef
#         };
# $VAR3 = {
#           'UNSIGNED_ATTRIBUTE' => undef,
#           'MAXIMUM_SCALE' => undef,
#           'INTERVAL_PRECISION' => undef,
#           'CREATE_PARAMS' => undef,
#           'NUM_PREC_RADIX' => undef,
#           'SEARCHABLE' => 0,
#           'LOCAL_TYPE_NAME' => 'LONG',
#           'LITERAL_PREFIX' => '\'',
#           'COLUMN_SIZE' => 2147483647,
#           'MINIMUM_SCALE' => undef,
#           'TYPE_NAME' => 'LONG',
#           'AUTO_UNIQUE_VALUE' => undef,
#           'NULLABLE' => 1,
#           'DATA_TYPE' => -1,
#           'SQL_DATA_TYPE' => -1,
#           'LITERAL_SUFFIX' => '\'',
#           'CASE_SENSITIVE' => 1,
#           'FIXED_PREC_SCALE' => 0,
#           'SQL_DATETIME_SUB' => undef
#         };
# $VAR4 = {
#           'UNSIGNED_ATTRIBUTE' => undef,
#           'MAXIMUM_SCALE' => undef,
#           'INTERVAL_PRECISION' => undef,
#           'CREATE_PARAMS' => 'max length',
#           'NUM_PREC_RADIX' => undef,
#           'SEARCHABLE' => 3,
#           'LOCAL_TYPE_NAME' => 'CHAR',
#           'LITERAL_PREFIX' => '\'',
#           'COLUMN_SIZE' => 2000,
#           'MINIMUM_SCALE' => undef,
#           'TYPE_NAME' => 'CHAR',
#           'AUTO_UNIQUE_VALUE' => 0,
#           'NULLABLE' => 1,
#           'DATA_TYPE' => 1,
#           'SQL_DATA_TYPE' => 1,
#           'LITERAL_SUFFIX' => '\'',
#           'CASE_SENSITIVE' => 1,
#           'FIXED_PREC_SCALE' => 0,
#           'SQL_DATETIME_SUB' => undef
#         };
# $VAR5 = {
#           'UNSIGNED_ATTRIBUTE' => 0,
#           'MAXIMUM_SCALE' => 38,
#           'INTERVAL_PRECISION' => undef,
#           'CREATE_PARAMS' => 'precision,scale',
#           'NUM_PREC_RADIX' => 10,
#           'SEARCHABLE' => 3,
#           'LOCAL_TYPE_NAME' => 'DECIMAL',
#           'LITERAL_PREFIX' => undef,
#           'COLUMN_SIZE' => 38,
#           'MINIMUM_SCALE' => 0,
#           'TYPE_NAME' => 'DECIMAL',
#           'AUTO_UNIQUE_VALUE' => 0,
#           'NULLABLE' => 1,
#           'DATA_TYPE' => 3,
#           'SQL_DATA_TYPE' => 3,
#           'LITERAL_SUFFIX' => undef,
#           'CASE_SENSITIVE' => 0,
#           'FIXED_PREC_SCALE' => 0,
#           'SQL_DATETIME_SUB' => undef
#         };
# $VAR6 = {
#           'UNSIGNED_ATTRIBUTE' => 0,
#           'MAXIMUM_SCALE' => undef,
#           'INTERVAL_PRECISION' => undef,
#           'CREATE_PARAMS' => undef,
#           'NUM_PREC_RADIX' => 10,
#           'SEARCHABLE' => 3,
#           'LOCAL_TYPE_NAME' => 'DOUBLE PRECISION',
#           'LITERAL_PREFIX' => undef,
#           'COLUMN_SIZE' => 15,
#           'MINIMUM_SCALE' => undef,
#           'TYPE_NAME' => 'DOUBLE PRECISION',
#           'AUTO_UNIQUE_VALUE' => 0,
#           'NULLABLE' => 1,
#           'DATA_TYPE' => 8,
#           'SQL_DATA_TYPE' => 8,
#           'LITERAL_SUFFIX' => undef,
#           'CASE_SENSITIVE' => 0,
#           'FIXED_PREC_SCALE' => 0,
#           'SQL_DATETIME_SUB' => undef
#         };
# $VAR7 = {
#           'UNSIGNED_ATTRIBUTE' => undef,
#           'MAXIMUM_SCALE' => 0,
#           'INTERVAL_PRECISION' => undef,
#           'CREATE_PARAMS' => undef,
#           'NUM_PREC_RADIX' => undef,
#           'SEARCHABLE' => 3,
#           'LOCAL_TYPE_NAME' => 'DATE',
#           'LITERAL_PREFIX' => '\'',
#           'COLUMN_SIZE' => 19,
#           'MINIMUM_SCALE' => 0,
#           'TYPE_NAME' => 'DATE',
#           'AUTO_UNIQUE_VALUE' => 0,
#           'NULLABLE' => 1,
#           'DATA_TYPE' => 93,
#           'SQL_DATA_TYPE' => 9,
#           'LITERAL_SUFFIX' => '\'',
#           'CASE_SENSITIVE' => 0,
#           'FIXED_PREC_SCALE' => 0,
#           'SQL_DATETIME_SUB' => 3
#         };
# $VAR8 = {
#           'UNSIGNED_ATTRIBUTE' => undef,
#           'MAXIMUM_SCALE' => undef,
#           'INTERVAL_PRECISION' => undef,
#           'CREATE_PARAMS' => 'max length',
#           'NUM_PREC_RADIX' => undef,
#           'SEARCHABLE' => 3,
#           'LOCAL_TYPE_NAME' => 'VARCHAR2',
#           'LITERAL_PREFIX' => '\'',
#           'COLUMN_SIZE' => '4000',
#           'MINIMUM_SCALE' => undef,
#           'TYPE_NAME' => 'VARCHAR2',
#           'AUTO_UNIQUE_VALUE' => 0,
#           'NULLABLE' => 1,
#           'DATA_TYPE' => 12,
#           'SQL_DATA_TYPE' => 12,
#           'LITERAL_SUFFIX' => '\'',
#           'CASE_SENSITIVE' => 1,
#           'FIXED_PREC_SCALE' => 0,
#           'SQL_DATETIME_SUB' => undef
#         };
# $VAR9 = {
#           'UNSIGNED_ATTRIBUTE' => undef,
#           'MAXIMUM_SCALE' => undef,
#           'INTERVAL_PRECISION' => undef,
#           'CREATE_PARAMS' => undef,
#           'NUM_PREC_RADIX' => undef,
#           'SEARCHABLE' => 0,
#           'LOCAL_TYPE_NAME' => 'BLOB',
#           'LITERAL_PREFIX' => '\'',
#           'COLUMN_SIZE' => 2147483647,
#           'MINIMUM_SCALE' => undef,
#           'TYPE_NAME' => 'BLOB',
#           'AUTO_UNIQUE_VALUE' => undef,
#           'NULLABLE' => 1,
#           'DATA_TYPE' => -4,
#           'SQL_DATA_TYPE' => -4,
#           'LITERAL_SUFFIX' => '\'',
#           'CASE_SENSITIVE' => 1,
#           'FIXED_PREC_SCALE' => 0,
#           'SQL_DATETIME_SUB' => undef
#         };
# $VAR10 = {
#            'UNSIGNED_ATTRIBUTE' => undef,
#            'MAXIMUM_SCALE' => undef,
#            'INTERVAL_PRECISION' => undef,
#            'CREATE_PARAMS' => undef,
#            'NUM_PREC_RADIX' => undef,
#            'SEARCHABLE' => 0,
#            'LOCAL_TYPE_NAME' => 'BFILE',
#            'LITERAL_PREFIX' => '\'',
#            'COLUMN_SIZE' => 2147483647,
#            'MINIMUM_SCALE' => undef,
#            'TYPE_NAME' => 'BFILE',
#            'AUTO_UNIQUE_VALUE' => undef,
#            'NULLABLE' => 1,
#            'DATA_TYPE' => -4,
#            'SQL_DATA_TYPE' => -4,
#            'LITERAL_SUFFIX' => '\'',
#            'CASE_SENSITIVE' => 1,
#            'FIXED_PREC_SCALE' => 0,
#            'SQL_DATETIME_SUB' => undef
#          };
# $VAR11 = {
#            'UNSIGNED_ATTRIBUTE' => undef,
#            'MAXIMUM_SCALE' => undef,
#            'INTERVAL_PRECISION' => undef,
#            'CREATE_PARAMS' => undef,
#            'NUM_PREC_RADIX' => undef,
#            'SEARCHABLE' => 0,
#            'LOCAL_TYPE_NAME' => 'CLOB',
#            'LITERAL_PREFIX' => '\'',
#            'COLUMN_SIZE' => 2147483647,
#            'MINIMUM_SCALE' => undef,
#            'TYPE_NAME' => 'CLOB',
#            'AUTO_UNIQUE_VALUE' => undef,
#            'NULLABLE' => 1,
#            'DATA_TYPE' => -1,
#            'SQL_DATA_TYPE' => -1,
#            'LITERAL_SUFFIX' => '\'',
#            'CASE_SENSITIVE' => 1,
#            'FIXED_PREC_SCALE' => 0,
#            'SQL_DATETIME_SUB' => undef
#          };
# tables():
# 26562 tables
ok 2 - tables
# schema list: table_info(undef, '%', undef, undef)
ok 3 - table_info
ok 4 - table_info fetch
ok 5 - table_info data returned
# schema list: 55 rows, 0 seconds
# type list: table_info(undef, undef, undef, '%')
ok 6 - table_info
ok 7 - table_info fetch
ok 8 - table_info data returned
# type list: 4 rows, 0 seconds
# table list: table_info(undef, undef, undef, undef)
ok 9 - table_info
ok 10 - table_info fetch
ok 11 - table_info data returned
# table list: 26562 rows, 3 seconds
ok 12 - dbms_version
ok 13 - matched
# sql_dbms_version=10.02.0300
ok
t/80ora_charset.........
1..14
# row:   1: nice_string=° byte_string=176 (°, '°')
# create table dbd_ora__drop_me ( idx integer, ch varchar2(20), nch nvarchar2(20), descr varchar2(50),  dt date )
ok 1 - prepared: insert into dbd_ora__drop_me ( idx, ch, nch, descr, dt ) values( ?, ?, ?, ?, sysdate )
ok 2 - bind_param idx
ok 3 - bind_param ch withOUT attribute ora_csform
ok 4 - bind_param nch
ok 5 - bind_param descr withOUT attribute ora_csform
ok 6 - insert row 1: DEGREE SIGN
ok 7
ok 8
ok 9 - match char
ok 10 - match char
ok 11
ok 12
ok 13 - match char
ok 14 - match char
ok

Test Summary Report
-------------------
t/20select          (Wstat: 512 Tests: 36 Failed: 2)
  Failed tests:  35-36
  Non-zero exit status: 2
t/25plsql           (Wstat: 2304 Tests: 27 Failed: 0)
  Non-zero exit status: 9
  Parse errors: Bad plan.  You planned 82 tests but ran 27.
Files=29, Tests=2035, 26 wallclock secs ( 0.49 usr  0.23 sys +  7.01 cusr  1.48 csys =  9.21 CPU)
Result: FAIL
Failed 2/29 test programs. 2/2035 subtests failed.
make: *** [test_dynamic] Error 255
