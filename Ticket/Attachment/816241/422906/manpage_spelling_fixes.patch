Description: Fix several spelling errors
Author: Florian Ernst <florian@debian.org>
Last-Update: 2010-08-12

--- a/Template.pm
+++ b/Template.pm
@@ -271,7 +271,7 @@
 directly.  See below for more information on HTML_TEMPLATE_ROOT and
 the "path" option to new().
 
-As a protection against infinitly recursive includes, an arbitary
+As a protection against infinitely recursive includes, an arbitrary
 limit of 10 levels deep is imposed.  You can alter this limit with the
 "max_includes" option.  See the entry for the "max_includes" option
 below for more details.
@@ -715,7 +715,7 @@
 The old associateCGI() call is still supported, but should be
 considered obsolete.
 
-NOTE: The parameter names are matched in a case-insensitve manner.  If
+NOTE: The parameter names are matched in a case-insensitive manner.  If
 you have two parameters in a CGI object like 'NAME' and 'Name' one
 will be chosen randomly by associate.  This behavior can be changed by
 the following option.
@@ -852,7 +852,7 @@
 template tags.
 
 In the most simple usage, you simply assign a code reference to the
-filter parameter.  This subroutine will recieve a single argument - a
+filter parameter.  This subroutine will receive a single argument - a
 reference to a string containing the template file text.  Here is an
 example that accepts templates with tags that look like "!!!ZAP_VAR
 FOO!!!" and transforms them into HTML::Template tags:
@@ -867,7 +867,7 @@
                                       filter => $filter);
 
 More complicated usages are possible.  You can request that your
-filter receieve the template text as an array of lines rather than as
+filter receive the template text as an array of lines rather than as
 a single scalar.  To do that you need to specify your filter using a
 hash-ref.  In this form you specify the filter using the C<sub> key and
 the desired argument format using the C<format> key.  The available
@@ -2428,7 +2428,7 @@
       $self->param(PARAM => 'value');
 
       # with a subroutine reference that gets called to get the value
-      # of the scalar.  The sub will recieve the template object as a
+      # of the scalar.  The sub will receive the template object as a
       # parameter.
       $self->param(PARAM => sub { return 'value' });   
 
@@ -3263,7 +3263,7 @@
 
 A: Short answer: you can't.  Longer answer: you shouldn't since this
 violates the fundamental concept behind HTML::Template - that design
-and code should be seperate.
+and code should be separate.
 
 But, inevitably some people still want to do it.  If that describes
 you then you should take a look at
