424,425c424,425
< The optional $buf in the synopsis if the same as File::Copy::copy()'s 3rd argument
< returns the same as File::Copy::copy() in scalar context and 1,0,0 in list context to accomidate rcopy()'s list context on regular files. (See below for more info)
---
> The optional $buf in the synopsis is the same as File::Copy::copy()'s 3rd argument.
> This function returns the same as File::Copy::copy() in scalar context and 1,0,0 in list context to accomodate rcopy()'s list context on regular files. (See below for more info)
430c430
< $new is created if necessary (multiple non existant directories is ok (IE foo/bar/baz). The script logically and portably creates all of them if necessary).
---
> $new is created if necessary (multiple non existant directories is ok (i.e. foo/bar/baz). The script logically and portably creates all of them if necessary).
432c432
< by default it copies all the way down into the directory, (see Managing Depth) below.
---
> by default it copies all the way down into the directory (see Managing Depth, below).
435,436c435,436
< returns true or false, for true in scalar context it returns the number of files and directories copied,
< In list context it returns the number of files and directories, number of directories only, depth level traversed.
---
> This function returns true or false: for true in scalar context it returns the number of files and directories copied,
> whereas in list context it returns the number of files and directories, number of directories only, depth level traversed.
441c441
< Normally it stops and return's if a copy fails, to continue on regardless set $File::Copy::Recursive::SkipFlop to true.
---
> Normally it stops and returns if a copy fails. To continue on regardless, set $File::Copy::Recursive::SkipFlop to true.
445c445
< That way it will copy everythgingit can ina directory and won't stop because of permissions, etc...
---
> That way it will copy everythging it can in a directory and won't stop because of permissions, etc...
449c449
< This function will allow you to specify a file *or* directory. It calls fcopy() if its a file and dircopy() if its a directory.
---
> This function will allow you to specify a file *or* a directory. It calls fcopy() if you passed file and dircopy() if you passed a directory.
451c451
< This is important becasue if its a directory in list context and there is only the initial directory the return value is 1,1,1.
---
> This is important because if it's a directory in list context and there is only the initial directory the return value is 1,1,1.
502c502
< If its set to true they just silently go about their business regardless. This isn't a good idea but its there if you want it.
---
> If its set to true they just silently go about their business regardless. This isn't a good idea but it's there if you want it.
508c508
< Any value you set it to should be suitable for oct()
---
> Any value you set it to should be suitable for oct().
547c547
< Recursively removes the given directory's contents so it is empty. returns 2 if argument is not a directory, 1 on successfully emptying the directory.
---
> Recursively removes the given directory's contents so it is empty. Returns 2 if the given argument is not a directory, 1 on successfully emptying the directory.
563c563
< Just removes the top directory the path given instead of the entire path like pathrm(). Return 2 if given argument does not exist (IE its already gone). Return false if it exists but is not a directory.
---
> Just removes the top directory the path given instead of the entire path like pathrm(). Returns 2 if the given argument does not exist (i.e. it's already gone). Returns false if it exists but is not a directory.
581c581
< Perl's symlink() is used instead of File::Copy's copy()
---
> Perl's symlink() is used instead of File::Copy's copy().
583c583
< It is already set to true or false dending on your system's support of symlinks so you can check it with an if statement to see how it will behave:
---
> It is already set to true or false depending on your system's support of symlinks so you can check it with an if statement to see how it will behave:
591c591
< If symlinks are being copied you can set $File::Copy::Recursive::BdTrgWrn to true to make it carp when it copies a link whose target does not exist. Its false by default.
---
> If symlinks are being copied you can set $File::Copy::Recursive::BdTrgWrn to true to make it carp when it copies a link whose target does not exist. It's false by default.
613c613
< This should be unnecessary most of the time but its there if you need it :)
---
> This should be unnecessary most of the time but it's there if you need it :)
617c617
< By default the files or directories are checked to see if they are the same (IE linked, or two paths (absolute/relative or different relative paths) to the same file) by comparing the file's stat() info. 
---
> By default the files or directories are checked to see if they are the same (i.e. linked, or two paths (absolute/relative or different relative paths) to the same file) by comparing the file's stat() info. 
630c630
< If $dir2 does not exist then the contents go into $dir2 like normal (also like cp -rf)
---
> If $dir2 does not exist then the contents go into $dir2 like normal (also like cp -rf).
654c654
< NOTE: The '*' is only like cp -rf foo/* and *DOES NOT EXPAND PARTIAL DIRECTORY NAMES LIKE YOUR SHELL DOES* (IE not like cp -rf fo* to copy foo/*)
---
> NOTE: The '*' is only like cp -rf foo/* and *DOES NOT EXPAND PARTIAL DIRECTORY NAMES LIKE YOUR SHELL DOES* (i.e. not like cp -rf fo* to copy foo/*).
666c666
< If you ever find a situation where $CopyLoop = 1 is desirable let me know (IE its a bad bad idea but is there if you want it)
---
> If you ever find a situation where $CopyLoop = 1 is desirable let me know. (i.e. it's a bad bad idea but is there if you want it)
668c668
< (Note: On Windows this was necessary since it uses stat() to detemine samedness and stat() is essencially useless for this on Windows. 
---
> (Note: On Windows this was necessary since it uses stat() to determine sameness and stat() is essentially useless for this on Windows. 
