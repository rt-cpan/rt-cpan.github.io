--- Moose-1.21/lib/Moose/Meta/TypeConstraint.pm-orig	2010-12-02 08:59:54 -0600
+++ Moose-1.21/lib/Moose/Meta/TypeConstraint.pm	2010-12-02 09:00:49 -0600
@@ -149,27 +149,31 @@
 
 ## type predicates ...
 
-sub equals {
-    my ( $self, $type_or_name ) = @_;
+{
+    use integer;   # Require all numeric ops here to work consistently
 
-    my $other = Moose::Util::TypeConstraints::find_type_constraint($type_or_name) or return;
-
-    return 1 if $self == $other;
-
-    if ( $self->has_hand_optimized_type_constraint and $other->has_hand_optimized_type_constraint ) {
-        return 1 if $self->hand_optimized_type_constraint == $other->hand_optimized_type_constraint;
-    }
-
-    return unless $self->constraint == $other->constraint;
-
-    if ( $self->has_parent ) {
-        return unless $other->has_parent;
-        return unless $self->parent->equals( $other->parent );
-    } else {
-        return if $other->has_parent;
+    sub equals {
+        my ( $self, $type_or_name ) = @_;
+    
+        my $other = Moose::Util::TypeConstraints::find_type_constraint($type_or_name) or return;
+    
+        return 1 if $self == $other;
+    
+        if ( $self->has_hand_optimized_type_constraint and $other->has_hand_optimized_type_constraint ) {
+            return 1 if $self->hand_optimized_type_constraint == $other->hand_optimized_type_constraint;
+        }
+    
+        return unless $self->constraint == $other->constraint;
+    
+        if ( $self->has_parent ) {
+            return unless $other->has_parent;
+            return unless $self->parent->equals( $other->parent );
+        } else {
+            return if $other->has_parent;
+        }
+    
+        return;
     }
-
-    return;
 }
 
 sub is_a_type_of {
