cpanm (App::cpanminus) 1.0004 on perl 5.012002 built for darwin-thread-multi-2level
Work directory is /Users/timbo/.cpanm/work/1291579916.2275
You have make /usr/bin/make
You have LWP 5.837
You have /usr/bin/tar: bsdtar 2.6.2 - libarchive 2.6.2
You have /usr/bin/unzip
Searching Coro on cpanmetadb ...
Fetching http://search.cpan.org/CPAN/authors/id/M/ML/MLEHMANN/Coro-5.25.tar.gz
-> OK
Unpacking Coro-5.25.tar.gz
Entering Coro-5.25
Checking configure dependencies from META.yml
Configuring Coro-5.25
Running Makefile.PL
Warning: prerequisite AnyEvent 5 not found.
Warning: prerequisite Guard 0.5 not found.
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***


*** Event not found, not build Event support.


*** EV not found, not build EV support.

Checking if your kit is complete...
Looks good

*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 

Coro has a number of configuration options. Due to its maturity, the
defaults that Coro chooses are usually fine, so you can decide to skip
these questions. Only if something went wrong you should select 'n'
here and manually configure Coro, and, of course, report this to the
maintainer :)

Skip further questions and use defaults (y/n)? [y] y

*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 

Coro can use a number of methods to implement coroutines at the C
level. The default chosen is based on your current confguration and is
correct in most cases, but you still can chose between these alternatives:

u  The unix 'ucontext.h' functions are relatively new and not implemented
   or well-tested in older unices. They allow very fast coroutine creation
   and reasonably fast switching.  They are, however, usually slower than
   the other alternatives due to an extra syscall done by swapcontext. And
   while nominally most portable (it's the only POSIX-standardised
   interface for coroutines), ucontext functions are, as usual, broken on
   most/all BSDs.

s  If the ucontext functions are not working or you don't want
   to use them for other reasons you can try a workaround using
   setjmp/longjmp/sigaltstack (also standard unix functions). Coroutine
   creation is rather slow, but switching is very fast (often much faster
   than with the ucontext functions). Unfortunately, glibc-2.1 and
   below don't even feature a working sigaltstack. You cannot use this
   implementation if some other code uses SIGUSR2 or you plan to create
   coroutines from an alternative signal stack, as both are being used for
   coroutine creation.

a  Handcoded assembly. This is the fastest and most compatible method,
   with the least side effects, if it works, that is. It has been tested
   on GNU/Linux x86 and x86_64 systems and should work on all x86/x86_64
   systems using the SVR ELF ABI (it is also reported to be working on
   Strawberry Perl for Windows using MinGW). This is the recommended
   method on supported platforms. When it doesn't work, use another
   method, such as (s)etjmp/longjmp.

l  GNU/Linux. Very old GNU/Linux systems (glibc-2.1 and below) need
   this hack. Since it is very linux-specific it is also quite fast and
   recommended even for newer versions; when it works, that is (currently
   x86 and a few others only. If it compiles, it's usually ok). Newer
   glibc versions (>= 2.5) stop working with this implementation however.

i  IRIX. For some reason, SGI really does not like to follow POSIX (does
   that surprise you?), so this workaround might be needed (it's fast),
   although [s] and [u] should also work now.

w  Microsoft Windows. Try this on Microsoft Windows when using Cygwin or
   the MSVC compilers (e.g. ActiveState Perl, but see "a" for Strawberry
   Perl), although, as there is no standard on how to do this under
   windows, different environments might work differently. Doh.

p  Use pthread API. Try to avoid this option, it was only created to
   make a point about the programming language shootout. It is unlikely
   to work with perls that have windows process emulation enabled ("perl
   threads"). It is also likely the slowest method of implementing
   coroutines. It might work fine as a last resort, however, as the
   pthread API is slightly better tested than ucontext functions for
   example. Of course, not on BSDs, who usually have very broken pthread
   implementations.

Coro tries hard to come up with a suitable default for most systems,
so pressing return at the prompt usually does the right thing. If you
experience problems (e.g. make test fails) then you should experiment with
this setting.

Use which implementation,
<s>etjmp, <u>ctx, <a>sm, <i>rix, <l>inux, <w>indows or <p>threads? [s] s

Using setjmp/longjmp/sigaltstack implementation


Trying to detect stack growth direction (for TEST_sigaltstack)
You might see some warnings, this should not concern you.

libcoro/conftest.c: In function ‘main’:
libcoro/conftest.c:98: error: storage size of ‘ss’ isn’t known
libcoro/conftest.c:139: warning: format ‘%d’ expects type ‘int’, but argument 5 has type ‘long unsigned int’
libcoro/conftest.c:139: warning: format ‘%d’ expects type ‘int’, but argument 6 has type ‘long unsigned int’
libcoro/conftest.c:147: warning: format ‘%d’ expects type ‘int’, but argument 5 has type ‘long unsigned int’
{standard input}:36:non-relocatable subtraction expression, "L___stack_chk_guard$non_lazy_ptr" minus "L00000000001$pb"
{standard input}:36:symbol: "L___stack_chk_guard$non_lazy_ptr" can't be undefined in a subtraction expression
{standard input}:17:non-relocatable subtraction expression, "L___stack_chk_guard$non_lazy_ptr" minus "L00000000001$pb"
{standard input}:17:symbol: "L___stack_chk_guard$non_lazy_ptr" can't be undefined in a subtraction expression
{standard input}:unknown:Undefined local symbol L___stack_chk_guard$non_lazy_ptr


*****************************************************************************
If the testsuite fails PLEASE provide the following information
to Marc Lehmann <schmorp@schmorp.de>: operating system name, version,
architecture name and this string '|'. Thanks a lot!
*****************************************************************************


*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 

Per-context stack size factor: Depending on your settings, Coro tries to
share the C stacks is creates as much as possible, but sometimes it needs
to allocate a new one. This setting controls the maximum size that gets
allocated, and should not be set too high, as memory and address space
still is wasted even if it's not fully used. The value entered will be
multiplied by sizeof(long), which is usually 4 on 32-bit systems, and 8 on
64-bit systems.

A setting of 16384 (the default) therefore corresponds to a 64k..128k
stack, which usually is ample space (you might even want to try 8192 or
lower if your program creates many coroutines).

On systems supporting mmap and dynamic memory management, the actual
memory usually gets allocated on demand, but with many large stacks you
can still run out of address space on your typical 32 bit platform (not to
forget the pagetables).

Some perls (mostly threaded ones and perl compiled under linux 2.6) and
some programs (inefficient regexes can use a lot of stack space) may
need much, much more: If Coro segfaults with weird backtraces (e.g. in a
function prologue) or in t/10_bugs.t, you might want to increase this to
65536 or more.

The default should be fine, and can be changed at runtime with
Coro::State::cctx_stacksize.

C stack size factor? [16384] 16384
using a stacksize of 16384 * sizeof(long)

*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 

Coro can optionally put a guard area before each stack segment: When the
stack is too small and the access is not too far outside the stack (i.e.
within the guard area), then the program will safely segfault instead of
running into other data. The cost is some additional overhead with is
usually negligible, and extra use of address space.

The guard area size currently needs to be specified in pages (typical
pagesizes are 4k and 8k). The guard area is only enabled on a few
hardcoded architectures and is ignored on others. The actual preprocessor
expression disables this feature if:

   !__i386 && !__x86_64 && !__powerpc && !__m68k 
   && !__alpha && !__mips && !__sparc64

The default, as usual, should be just fine.

Number of guard pages (0 disables)? [4] 4

*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 

Coro can tell valgrind about its stacks and so reduce spurious warnings
where valgrind would otherwise complain about possible stack switches.

Enabling this does not incur noticable runtime or memory overhead, but it
requires that you have the <valgrind/valgrind.h> header file available.

Valgrind support is completely optional, so disabling it is the safe
choice.

Enable valgrind support (y/n)? [n] n

*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 

Coro can use (or even trick) some perl functions into doing what it needs
instead of relying on (some) of its own functions. This might increase
chances that it compiles and works, but it could just as well result in
memory leaks, crashes or silent data corruption. It certainly does result
in slightly slower speed and higher memory consumption, though, so YOU
SHOULD ENABLE THIS OPTION ONLY AS A LAST RESORT.

Prefer perl functions over coro functions (y/n)? [n] n

*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 

Coro has experimental support for cloning states. This can be used
to implement a scheme-like call/cc. However, this doesn't add to the
expressiveness in general, and is likely perl-version specific (and perl
5.12 deliberately removed support for it). As such, it is disabled by
default.  Enable it when you want to play around with it, but note that it
isn't supported, and unlikely ever will be. It exists mainly to prove that
it could be done - if only it were useful for something.

Implement Coro::State->clone method (y/n)? [n] n

*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 

Writing Makefile for Coro::State
Writing Makefile for Coro
-> OK
Finding PREREQ from Makefile ...
Checking if you have Scalar::Util 0 ... Yes (1.23)
Checking if you have AnyEvent 5 ... No
Checking if you have Guard 0.5 ... No
Checking if you have Storable 2.15 ... Yes (2.22)
Checking if you have Time::HiRes 0 ... Yes (1.9721)
Checking if you have common::sense 0 ... Yes (3.2)
==> Found dependencies: AnyEvent, Guard
Searching AnyEvent on cpanmetadb ...
Fetching http://search.cpan.org/CPAN/authors/id/M/ML/MLEHMANN/AnyEvent-5.29.tar.gz
-> OK
Unpacking AnyEvent-5.29.tar.gz
Entering AnyEvent-5.29
Checking if you have ExtUtils::MakeMaker 0 ... Yes (6.56)
Configuring AnyEvent-5.29
Running Makefile.PL

***
*** The EV module is recommended for even better performance, unless you
*** have to use one of the other adaptors (Event, Glib, Tk, etc.).
*** The Async::Interrupt module is highly recommended to efficiently avoid
*** race conditions in/with other event loops.
***
*** This module does not have ANY dependencies, even if it might look
*** otherwise. If you are building a distribution package or have
*** difficulties installing this package due to dependencies, report this
*** to the packager as a bug.
***
*** This module is guaranteed to stay 100% pure-perl, full-featured
*** and performant, even without any of the optional modules.
***

Checking if your kit is complete...
Looks good
Writing Makefile for AnyEvent
-> OK
Finding PREREQ from Makefile ...
Building and testing AnyEvent-5.29 for AnyEvent
cp lib/AnyEvent/Debug.pm blib/lib/AnyEvent/Debug.pm
cp lib/AnyEvent/Impl/Perl.pm blib/lib/AnyEvent/Impl/Perl.pm
cp lib/AnyEvent/Impl/POE.pm blib/lib/AnyEvent/Impl/POE.pm
cp lib/AnyEvent/constants.pl blib/lib/AnyEvent/constants.pl
cp lib/AnyEvent/Impl/IOAsync.pm blib/lib/AnyEvent/Impl/IOAsync.pm
cp lib/AnyEvent/Strict.pm blib/lib/AnyEvent/Strict.pm
cp lib/AnyEvent/Impl/Glib.pm blib/lib/AnyEvent/Impl/Glib.pm
cp lib/AnyEvent/TLS.pm blib/lib/AnyEvent/TLS.pm
cp lib/AnyEvent/Impl/Tk.pm blib/lib/AnyEvent/Impl/Tk.pm
cp lib/AnyEvent/Util/idna.pl blib/lib/AnyEvent/Util/idna.pl
cp lib/AnyEvent/Impl/Irssi.pm blib/lib/AnyEvent/Impl/Irssi.pm
cp lib/AnyEvent.pm blib/lib/AnyEvent.pm
cp lib/AnyEvent/FAQ.pod blib/lib/AnyEvent/FAQ.pod
cp lib/AnyEvent/Intro.pod blib/lib/AnyEvent/Intro.pod
cp lib/AnyEvent/Impl/EventLib.pm blib/lib/AnyEvent/Impl/EventLib.pm
cp lib/AE.pm blib/lib/AE.pm
cp lib/AnyEvent/Socket.pm blib/lib/AnyEvent/Socket.pm
cp lib/AnyEvent/Impl/Qt.pm blib/lib/AnyEvent/Impl/Qt.pm
cp lib/AnyEvent/Handle.pm blib/lib/AnyEvent/Handle.pm
cp lib/AnyEvent/Impl/EV.pm blib/lib/AnyEvent/Impl/EV.pm
cp lib/AnyEvent/DNS.pm blib/lib/AnyEvent/DNS.pm
cp lib/AnyEvent/Util/uts46data.pl blib/lib/AnyEvent/Util/uts46data.pl
cp lib/AnyEvent/Util.pm blib/lib/AnyEvent/Util.pm
cp lib/AnyEvent/Impl/Event.pm blib/lib/AnyEvent/Impl/Event.pm
Manifying blib/man3/AnyEvent::Debug.3
Manifying blib/man3/AnyEvent::Impl::Perl.3
Manifying blib/man3/AnyEvent::Impl::POE.3
Manifying blib/man3/AnyEvent::Impl::IOAsync.3
Manifying blib/man3/AnyEvent::Strict.3
Manifying blib/man3/AnyEvent::Impl::Glib.3
Manifying blib/man3/AnyEvent::TLS.3
Manifying blib/man3/AnyEvent::Impl::Tk.3
Manifying blib/man3/AnyEvent::Impl::Irssi.3
Manifying blib/man3/AnyEvent.3
Manifying blib/man3/AnyEvent::FAQ.3
Manifying blib/man3/AnyEvent::Intro.3
Manifying blib/man3/AnyEvent::Impl::EventLib.3
Manifying blib/man3/AE.3
Manifying blib/man3/AnyEvent::Socket.3
Manifying blib/man3/AnyEvent::Impl::Qt.3
Manifying blib/man3/AnyEvent::Handle.3
Manifying blib/man3/AnyEvent::DNS.3
Manifying blib/man3/AnyEvent::Impl::EV.3
Manifying blib/man3/AnyEvent::Util.3
Manifying blib/man3/AnyEvent::Impl::Event.3
/usr/local/perl512-dev/bin/perl "-Iblib/arch" "-Iblib/lib" constants.pl.PL constants.pl
Skip blib/lib/AnyEvent/Debug.pm (unchanged)
Skip blib/lib/AnyEvent/Impl/Perl.pm (unchanged)
Skip blib/lib/AnyEvent/Impl/POE.pm (unchanged)
Skip blib/lib/AnyEvent/constants.pl (unchanged)
Skip blib/lib/AnyEvent/Impl/IOAsync.pm (unchanged)
Skip blib/lib/AnyEvent/Strict.pm (unchanged)
Skip blib/lib/AnyEvent/Impl/Glib.pm (unchanged)
Skip blib/lib/AnyEvent/TLS.pm (unchanged)
Skip blib/lib/AnyEvent/Impl/Tk.pm (unchanged)
Skip blib/lib/AnyEvent/Util/idna.pl (unchanged)
Skip blib/lib/AnyEvent/Impl/Irssi.pm (unchanged)
Skip blib/lib/AnyEvent.pm (unchanged)
Skip blib/lib/AnyEvent/FAQ.pod (unchanged)
Skip blib/lib/AnyEvent/Intro.pod (unchanged)
Skip blib/lib/AnyEvent/Impl/EventLib.pm (unchanged)
Skip blib/lib/AE.pm (unchanged)
Skip blib/lib/AnyEvent/Socket.pm (unchanged)
Skip blib/lib/AnyEvent/Impl/Qt.pm (unchanged)
Skip blib/lib/AnyEvent/Handle.pm (unchanged)
Skip blib/lib/AnyEvent/Impl/EV.pm (unchanged)
Skip blib/lib/AnyEvent/DNS.pm (unchanged)
Skip blib/lib/AnyEvent/Util/uts46data.pl (unchanged)
Skip blib/lib/AnyEvent/Util.pm (unchanged)
Skip blib/lib/AnyEvent/Impl/Event.pm (unchanged)
PERL_DL_NONLAZY=1 /usr/local/perl512-dev/bin/perl "-MExtUtils::Command::MM" "-e" "test_harness(0, 'blib/lib', 'blib/arch')" t/*.t t/handle/*.t
t/00_load.t ............. ok
t/01_basic.t ............ ok
t/02_signals.t .......... ok
t/03_child.t ............ ok
t/04_condvar.t .......... ok
t/05_dns.t .............. ok
t/06_socket.t ........... ok
t/07_io.t ............... ok
t/08_idna.t ............. ok
t/handle/01_readline.t .. ok
t/handle/02_write.t ..... ok
t/handle/03_http_req.t .. skipped: PERL_ANYEVENT_NET_TESTS environment variable not set
t/handle/04_listen.t .... ok
All tests successful.
Files=13, Tests=165,  3 wallclock secs ( 0.20 usr  0.07 sys +  1.98 cusr  0.24 csys =  2.49 CPU)
Result: PASS
/usr/local/perl512-dev/bin/perl "-Iblib/arch" "-Iblib/lib" constants.pl.PL constants.pl
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AE.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/constants.pl
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Debug.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/DNS.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/FAQ.pod
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Handle.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Intro.pod
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Socket.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Strict.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/TLS.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Util.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Impl/EV.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Impl/Event.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Impl/EventLib.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Impl/Glib.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Impl/IOAsync.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Impl/Irssi.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Impl/Perl.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Impl/POE.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Impl/Qt.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Impl/Tk.pm
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Util/idna.pl
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/AnyEvent/Util/uts46data.pl
Installing /usr/local/perl512-dev/man/man3/AE.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::Debug.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::DNS.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::FAQ.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::Handle.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::Impl::EV.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::Impl::Event.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::Impl::EventLib.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::Impl::Glib.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::Impl::IOAsync.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::Impl::Irssi.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::Impl::Perl.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::Impl::POE.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::Impl::Qt.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::Impl::Tk.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::Intro.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::Socket.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::Strict.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::TLS.3
Installing /usr/local/perl512-dev/man/man3/AnyEvent::Util.3
Appending installation info to /usr/local/perl512-dev/lib/5.12.2/darwin-thread-multi-2level/perllocal.pod
-> OK
Successfully installed AnyEvent-5.29
Searching Guard on cpanmetadb ...
Fetching http://search.cpan.org/CPAN/authors/id/M/ML/MLEHMANN/Guard-1.021.tar.gz
-> OK
Unpacking Guard-1.021.tar.gz
Entering Guard-1.021
Checking configure dependencies from META.yml
Configuring Guard-1.021
Running Makefile.PL
Checking if your kit is complete...
Looks good
Writing Makefile for Guard
-> OK
Finding PREREQ from Makefile ...
Building and testing Guard for Guard
cp Guard.pm blib/lib/Guard.pm
/usr/local/perl512-dev/bin/perl /usr/local/perl512-dev/lib/5.12.2/ExtUtils/xsubpp  -typemap /usr/local/perl512-dev/lib/5.12.2/ExtUtils/typemap  Guard.xs > Guard.xsc && mv Guard.xsc Guard.c
cc -c   -fno-common -DPERL_DARWIN -no-cpp-precomp -DDEBUGGING -fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include -I/opt/local/include -g   -DVERSION=\"1.021\" -DXS_VERSION=\"1.021\"  "-I/usr/local/perl512-dev/lib/5.12.2/darwin-thread-multi-2level/CORE"   Guard.c
Running Mkbootstrap for Guard ()
chmod 644 Guard.bs
rm -f blib/arch/auto/Guard/Guard.bundle
env MACOSX_DEPLOYMENT_TARGET=10.3 cc  -bundle -undefined dynamic_lookup -L/usr/local/lib -L/opt/local/lib -fstack-protector Guard.o  -o blib/arch/auto/Guard/Guard.bundle 	\
	     	\
	  
chmod 755 blib/arch/auto/Guard/Guard.bundle
cp Guard.bs blib/arch/auto/Guard/Guard.bs
chmod 644 blib/arch/auto/Guard/Guard.bs
Manifying blib/man3/Guard.3
PERL_DL_NONLAZY=1 /usr/local/perl512-dev/bin/perl "-MExtUtils::Command::MM" "-e" "test_harness(0, 'blib/lib', 'blib/arch')" t/*.t
t/00_load.t .... ok
t/01_scoped.t .. ok
t/02_guard.t ... ok
t/03_die.t ..... ok
All tests successful.
Files=4, Tests=33,  0 wallclock secs ( 0.07 usr  0.02 sys +  0.12 cusr  0.03 csys =  0.24 CPU)
Result: PASS
Files found in blib/arch: installing files in blib/lib into architecture dependent library tree
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/darwin-thread-multi-2level/auto/Guard/Guard.bs
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/darwin-thread-multi-2level/auto/Guard/Guard.bundle
Installing /usr/local/perl512-dev/lib/site_perl/5.12.2/darwin-thread-multi-2level/Guard.pm
Installing /usr/local/perl512-dev/man/man3/Guard.3
Appending installation info to /usr/local/perl512-dev/lib/5.12.2/darwin-thread-multi-2level/perllocal.pod
-> OK
Successfully installed Guard
Building and testing Coro for Coro
cp Coro/Select.pm blib/lib/Coro/Select.pm
cp Coro/State.pm blib/lib/Coro/State.pm
cp Coro/Debug.pm blib/lib/Coro/Debug.pm
cp Coro/RWLock.pm blib/lib/Coro/RWLock.pm
cp Coro/LWP.pm blib/lib/Coro/LWP.pm
cp Coro/Semaphore.pm blib/lib/Coro/Semaphore.pm
cp Coro/Timer.pm blib/lib/Coro/Timer.pm
cp Coro/CoroAPI.h blib/lib/Coro/CoroAPI.h
cp Coro.pm blib/lib/Coro.pm
cp Coro/Signal.pm blib/lib/Coro/Signal.pm
cp Coro/AnyEvent.pm blib/lib/Coro/AnyEvent.pm
cp Coro/BDB.pm blib/lib/Coro/BDB.pm
cp Coro/SemaphoreSet.pm blib/lib/Coro/SemaphoreSet.pm
cp Coro/Storable.pm blib/lib/Coro/Storable.pm
cp Coro/Util.pm blib/lib/Coro/Util.pm
cp Coro/AIO.pm blib/lib/Coro/AIO.pm
cp Coro/Handle.pm blib/lib/Coro/Handle.pm
cp Coro/Specific.pm blib/lib/Coro/Specific.pm
cp Coro/Socket.pm blib/lib/Coro/Socket.pm
cp Coro/Channel.pm blib/lib/Coro/Channel.pm
cp Coro/MakeMaker.pm blib/lib/Coro/MakeMaker.pm
Skip ../blib/lib/Coro/Util.pm (unchanged)
Skip ../blib/lib/Coro/Channel.pm (unchanged)
Skip ../blib/lib/Coro/Specific.pm (unchanged)
Skip ../blib/lib/Coro/BDB.pm (unchanged)
Skip ../blib/lib/Coro/AnyEvent.pm (unchanged)
Skip ../blib/lib/Coro/LWP.pm (unchanged)
Skip ../blib/lib/Coro/SemaphoreSet.pm (unchanged)
Skip ../blib/lib/Coro/MakeMaker.pm (unchanged)
Skip ../blib/lib/Coro/Semaphore.pm (unchanged)
Skip ../blib/lib/Coro/Timer.pm (unchanged)
Skip ../blib/lib/Coro/AIO.pm (unchanged)
Skip ../blib/lib/Coro/Debug.pm (unchanged)
Skip ../blib/lib/Coro/State.pm (unchanged)
Skip ../blib/lib/Coro/Socket.pm (unchanged)
Skip ../blib/lib/Coro/RWLock.pm (unchanged)
Skip ../blib/lib/Coro/Signal.pm (unchanged)
cp Intro.pod ../blib/lib/Coro/Intro.pod
Skip ../blib/lib/Coro/Handle.pm (unchanged)
Skip ../blib/lib/Coro/Select.pm (unchanged)
Skip ../blib/lib/Coro/Storable.pm (unchanged)
/usr/local/perl512-dev/bin/perl /usr/local/perl512-dev/lib/5.12.2/ExtUtils/xsubpp  -typemap /usr/local/perl512-dev/lib/5.12.2/ExtUtils/typemap -typemap typemap  State.xs > State.xsc && mv State.xsc State.c
cc -c   -fno-common -DPERL_DARWIN -no-cpp-precomp -DDEBUGGING -fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include -I/opt/local/include -g   -DVERSION=\"5.25\" -DXS_VERSION=\"5.25\"  "-I/usr/local/perl512-dev/lib/5.12.2/darwin-thread-multi-2level/CORE"  -DHAVE_MMAP -DCORO_SJLJ -DCORO_STACKSIZE=16384 -DCORO_STACKGUARD=4 State.c
State.xs: In function ‘free_coro_mortal’:
State.xs:1152: warning: initialization discards qualifiers from pointer target type
Running Mkbootstrap for Coro::State ()
chmod 644 State.bs
rm -f ../blib/arch/auto/Coro/State/State.bundle
env MACOSX_DEPLOYMENT_TARGET=10.3 cc  -bundle -undefined dynamic_lookup -L/usr/local/lib -L/opt/local/lib -fstack-protector State.o  -o ../blib/arch/auto/Coro/State/State.bundle 	\
	     	\
	  
chmod 755 ../blib/arch/auto/Coro/State/State.bundle
cp State.bs ../blib/arch/auto/Coro/State/State.bs
chmod 644 ../blib/arch/auto/Coro/State/State.bs
Manifying ../blib/man3/Coro::Channel.3
Manifying ../blib/man3/Coro::Util.3
Manifying ../blib/man3/Coro::Specific.3
Manifying ../blib/man3/Coro::BDB.3
Manifying ../blib/man3/Coro::LWP.3
Manifying ../blib/man3/Coro::AnyEvent.3
Manifying ../blib/man3/Coro::SemaphoreSet.3
Manifying ../blib/man3/Coro::MakeMaker.3
Manifying ../blib/man3/Coro::Semaphore.3
Manifying ../blib/man3/Coro::Timer.3
Manifying ../blib/man3/Coro::AIO.3
Manifying ../blib/man3/Coro::Debug.3
Manifying ../blib/man3/Coro::State.3
Manifying ../blib/man3/Coro::Socket.3
Manifying ../blib/man3/Coro::RWLock.3
Manifying ../blib/man3/Coro::Signal.3
Manifying ../blib/man3/Coro::Intro.3
Manifying ../blib/man3/Coro::Handle.3
Manifying ../blib/man3/Coro::Storable.3
Manifying ../blib/man3/Coro::Select.3
Manifying blib/man3/Coro.3
PERL_DL_NONLAZY=1 /usr/local/perl512-dev/bin/perl "-MExtUtils::Command::MM" "-e" "test_harness(0, 'blib/lib', 'blib/arch')" t/*.t
Assertion failed: (((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)"block") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], "block")), function Perl_pp_leave, file pp_hot.c, line 1901.
t/00_basic.t ...... 
All 9 subtests passed 
Assertion failed: (((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)"loop2") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], "loop2")), function Perl_pp_leaveloop, file pp_ctl.c, line 2098.
t/01_process.t .... 
Failed 3/13 subtests 
Assertion failed: (((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)"block") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], "block")), function Perl_pp_leave, file pp_hot.c, line 1901.
t/02_channel.t .... 
All 19 subtests passed 
Assertion failed: (((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)"block") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], "block")), function Perl_pp_leave, file pp_hot.c, line 1901.
t/03_channel.t .... 
All 10 subtests passed 
Assertion failed: (((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)"loop1") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], "loop1")), function Perl_pp_leaveloop, file pp_ctl.c, line 2099.
t/04_rwlock.t ..... 
Failed 6/15 subtests 
Assertion failed: (((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)"block") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], "block")), function Perl_pp_leave, file pp_hot.c, line 1901.
t/05_specific.t ... 
All 8 subtests passed 
Assertion failed: (((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)"block") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], "block")), function Perl_pp_leave, file pp_hot.c, line 1901.
t/06_prio.t ....... 
All 10 subtests passed 
Assertion failed: (((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)"block") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], "block")), function Perl_pp_leave, file pp_hot.c, line 1901.
t/07_eval.t ....... 
All 5 subtests passed 
Assertion failed: (((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)"block") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], "block")), function Perl_pp_leave, file pp_hot.c, line 1901.
t/08_join.t ....... 
Failed 5/10 subtests 
Assertion failed: (((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)"block") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], "block")), function Perl_pp_leave, file pp_hot.c, line 1901.
t/10_bugs.t ....... 
Failed 1/3 subtests 
t/11_deadlock.t ... ok
t/12_exit.t ....... ok
Assertion failed: (((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)"loop1") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], "loop1")), function Perl_pp_leaveloop, file pp_ctl.c, line 2099.
t/13_diewarn.t .... 
Failed 2/7 subtests 
t/14_load.t ....... ok
Assertion failed: (((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)"block") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], "block")), function Perl_pp_leave, file pp_hot.c, line 1901.
t/15_semaphore.t .. 
Failed 6/6 subtests 
Assertion failed: (((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)"loop1") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], "loop1")), function Perl_pp_leaveloop, file pp_ctl.c, line 2099.
t/16_signal.t ..... 
All 18 subtests passed 
Assertion failed: (((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)"block") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], "block")), function Perl_pp_leave, file pp_hot.c, line 1901.
t/17_rouse.t ...... 
All 5 subtests passed 
Assertion failed: (((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)"loop1") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], "loop1")), function Perl_pp_leaveloop, file pp_ctl.c, line 2099.
t/18_winder.t ..... 
Failed 3/17 subtests 
Assertion failed: (((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)"block") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], "block")), function Perl_pp_leave, file pp_hot.c, line 1901.
t/19_handle.t ..... 
Failed 4/4 subtests 

Test Summary Report
-------------------
t/00_basic.t    (Wstat: 6 Tests: 9 Failed: 0)
  Non-zero wait status: 6
t/01_process.t  (Wstat: 6 Tests: 10 Failed: 0)
  Non-zero wait status: 6
  Parse errors: Bad plan.  You planned 13 tests but ran 10.
t/02_channel.t  (Wstat: 6 Tests: 19 Failed: 0)
  Non-zero wait status: 6
t/03_channel.t  (Wstat: 6 Tests: 10 Failed: 0)
  Non-zero wait status: 6
t/04_rwlock.t   (Wstat: 6 Tests: 9 Failed: 0)
  Non-zero wait status: 6
  Parse errors: Bad plan.  You planned 15 tests but ran 9.
t/05_specific.t (Wstat: 6 Tests: 8 Failed: 0)
  Non-zero wait status: 6
t/06_prio.t     (Wstat: 6 Tests: 10 Failed: 0)
  Non-zero wait status: 6
t/07_eval.t     (Wstat: 6 Tests: 5 Failed: 0)
  Non-zero wait status: 6
t/08_join.t     (Wstat: 6 Tests: 5 Failed: 0)
  Non-zero wait status: 6
  Parse errors: Bad plan.  You planned 10 tests but ran 5.
t/10_bugs.t     (Wstat: 6 Tests: 2 Failed: 0)
  Non-zero wait status: 6
  Parse errors: Bad plan.  You planned 3 tests but ran 2.
t/13_diewarn.t  (Wstat: 6 Tests: 5 Failed: 0)
  Non-zero wait status: 6
  Parse errors: Bad plan.  You planned 7 tests but ran 5.
t/15_semaphore.t (Wstat: 6 Tests: 0 Failed: 0)
  Non-zero wait status: 6
  Parse errors: Bad plan.  You planned 6 tests but ran 0.
t/16_signal.t   (Wstat: 6 Tests: 18 Failed: 0)
  Non-zero wait status: 6
t/17_rouse.t    (Wstat: 6 Tests: 5 Failed: 0)
  Non-zero wait status: 6
t/18_winder.t   (Wstat: 6 Tests: 14 Failed: 0)
  Non-zero wait status: 6
  Parse errors: Bad plan.  You planned 17 tests but ran 14.
t/19_handle.t   (Wstat: 6 Tests: 0 Failed: 0)
  Non-zero wait status: 6
  Parse errors: Bad plan.  You planned 4 tests but ran 0.
Files=19, Tests=156,  3 wallclock secs ( 0.21 usr  0.09 sys +  1.30 cusr  0.21 csys =  1.81 CPU)
Result: FAIL
Failed 16/19 test programs. 0/156 subtests failed.
make: *** [test_dynamic] Error 255
-> FAIL Installing Coro failed. See /Users/timbo/.cpanm/build.log for details.
