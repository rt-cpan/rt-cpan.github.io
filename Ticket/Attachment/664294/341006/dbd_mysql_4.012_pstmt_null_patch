diff -Naurwb dbd_mysql_4.012.org/dbdimp.c dbd_mysql_4.012.patched/dbdimp.c
--- dbd_mysql_4.012.org/dbdimp.c	2009-06-19 01:54:47.000000000 +0000
+++ dbd_mysql_4.012.patched/dbdimp.c	2009-09-15 14:34:22.000000000 +0000
@@ -3159,7 +3159,6 @@
                "Error happened while tried to clean up stmt", NULL);
       return 0;
     }
-
     imp_sth->row_num= mysql_st_internal_execute41(
                                                   sth,
                                                   DBIc_NUM_PARAMS(imp_sth),
@@ -4258,6 +4257,11 @@
   int buffer_length= slen;
   unsigned int buffer_type= 0;
 #endif
+
+  if (DBIc_TRACE_LEVEL(imp_xxh) >= 2)
+    PerlIO_printf(DBILOGFP,
+                  "   Called: dbd_bind_ph\n");
+
   attribs= attribs;
   maxlen= maxlen;
 
@@ -4300,22 +4304,26 @@
 #if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION
   if (imp_sth->use_server_side_prepare)
   {
-    if (SvOK(imp_sth->params[idx].value) && imp_sth->params[idx].value)
-    {
-      buffer_is_null= 0;
-
       switch(sql_type) {
-
-        case SQL_NUMERIC:
-        case SQL_INTEGER:
-        case SQL_SMALLINT:
-        case SQL_BIGINT:
-        case SQL_TINYINT:
+      case SQL_NUMERIC: case SQL_INTEGER: case SQL_SMALLINT: case SQL_BIGINT: case SQL_TINYINT:
+          buffer_type= MYSQL_TYPE_LONG;
+          break;
+      case SQL_DOUBLE: case SQL_DECIMAL: case SQL_FLOAT: case SQL_REAL:
+          buffer_type= MYSQL_TYPE_DOUBLE;
+          break;
+      case SQL_CHAR: case SQL_VARCHAR: case SQL_DATE: case SQL_TIME: case SQL_TIMESTAMP: case SQL_LONGVARCHAR: case SQL_BINARY: case SQL_VARBINARY: case SQL_LONGVARBINARY:
+          buffer_type= MYSQL_TYPE_BLOB;
+          break;
+      default:
+          buffer_type= MYSQL_TYPE_STRING;
+    }
+    buffer_is_null = !(SvOK(imp_sth->params[idx].value) && imp_sth->params[idx].value);
+    if (! buffer_is_null) {
+      switch(buffer_type) {
+        case MYSQL_TYPE_LONG:
           /* INT */
           if (!SvIOK(imp_sth->params[idx].value) && DBIc_TRACE_LEVEL(imp_xxh) >= 2)
             PerlIO_printf(DBILOGFP, "\t\tTRY TO BIND AN INT NUMBER\n");
-
-          buffer_type= MYSQL_TYPE_LONG;
           buffer_length = sizeof imp_sth->fbind[idx].numeric_val.lval;
           imp_sth->fbind[idx].numeric_val.lval= SvIV(imp_sth->params[idx].value);
           buffer=(void*)&(imp_sth->fbind[idx].numeric_val.lval);
@@ -4325,39 +4333,32 @@
                           sql_type, (long) (*buffer));
           break;
 
-        case SQL_DOUBLE:
-        case SQL_DECIMAL:
-        case SQL_FLOAT:
-        case SQL_REAL:
+        case MYSQL_TYPE_DOUBLE:
           if (!SvNOK(imp_sth->params[idx].value) && DBIc_TRACE_LEVEL(imp_xxh) >= 2)
             PerlIO_printf(DBILOGFP, "\t\tTRY TO BIND A FLOAT NUMBER\n");
-
-          buffer_type= MYSQL_TYPE_DOUBLE;
           buffer_length = sizeof imp_sth->fbind[idx].numeric_val.dval;
           imp_sth->fbind[idx].numeric_val.dval= SvNV(imp_sth->params[idx].value);
           buffer=(char*)&(imp_sth->fbind[idx].numeric_val.dval);
-
           if (DBIc_TRACE_LEVEL(imp_xxh) >= 2)
             PerlIO_printf(DBILOGFP,
                           "   SCALAR type %d ->%f<- IS A FLOAT NUMBER\n",
                           sql_type, (double)(*buffer));
           break;
 
-        case SQL_CHAR:
-        case SQL_VARCHAR:
-        case SQL_DATE:
-        case SQL_TIME:
-        case SQL_TIMESTAMP:
-        case SQL_LONGVARCHAR:
-        case SQL_BINARY:
-        case SQL_VARBINARY:
-        case SQL_LONGVARBINARY:
-          buffer_type= MYSQL_TYPE_BLOB;
+        case MYSQL_TYPE_BLOB:
+          if (DBIc_TRACE_LEVEL(imp_xxh) >= 2)
+            PerlIO_printf(DBILOGFP,
+                          "   SCALAR type BLOB\n");
           break;
 
-        default:
-          buffer_type= MYSQL_TYPE_STRING;
+        case MYSQL_TYPE_STRING:
+          if (DBIc_TRACE_LEVEL(imp_xxh) >= 2)
+            PerlIO_printf(DBILOGFP,
+                          "   SCALAR type STRING %d, buffertype=%d\n", sql_type, buffer_type);
           break;
+
+        default:
+          croak("Bug in DBD::Mysql file dbdimp.c#dbd_bind_ph: do not know how to handle unknown buffer type.");
       }
 
       if (buffer_type == MYSQL_TYPE_STRING || buffer_type == MYSQL_TYPE_BLOB)
@@ -4372,14 +4373,25 @@
     }
     else
     {
+      /*case: buffer_is_null != 0*/
       buffer= NULL;
-      buffer_is_null= 1;
-      buffer_type= MYSQL_TYPE_NULL;
+      if (DBIc_TRACE_LEVEL(imp_xxh) >= 2)
+        PerlIO_printf(DBILOGFP,
+                      "   SCALAR NULL VALUE: buffer type is: %d\n", buffer_type);
     }
 
     /* Type of column was changed. Force to rebind */
-    if (imp_sth->bind[idx].buffer_type != buffer_type)
+    if (imp_sth->bind[idx].buffer_type != buffer_type) {
+      /* Note: this looks like being another bug:
+       * if type of parameter N changes, then a bind is triggered
+       * with an only partially filled bind structure ??
+       */
+      if (DBIc_TRACE_LEVEL(imp_xxh) >= 2)
+          PerlIO_printf(DBILOGFP,
+                        "   FORCE REBIND: buffer type changed from %d to %d, sql-type=%d\n",
+                        imp_sth->bind[idx].buffer_type, buffer_type, sql_type);
       imp_sth->has_been_bound = 0;
+    }
 
     /* prepare has not been called */
     if (imp_sth->has_been_bound == 0)
