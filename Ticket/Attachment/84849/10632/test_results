/usr/bin/perl "-MExtUtils::Command::MM" "-e" "test_harness(1, 'blib/lib', 'blib/arch')" t/*.t
t/array........1..50
ok 1 - Got ids back OK
ok 2 - Homer inserted OK
ok 3 - Marge inserted OK
ok 4 - Nothing leaked yet!
ok 5 - Homer still exists!
ok 6 - array auto-vivify 1
ok 7 # skip one to many - marge skipped
dubious
	Test returned status 0 (wstat 139, 0x8b)
DIED. FAILED tests 8-50
	Failed 43/50 tests, 14.00% okay (less 1 skipped test: 6 okay, 12.00%)
t/bughunt......1..4
Possible precedence problem on bitwise & operator at /home/fdaly/src/Tangram-2.06/blib/lib/Tangram/Coll.pm line 194.
ok 1 - Normalise applied - iarray (Control)
ok 2 - Normalise applied - iarray (w/Package seperator)
ok 3 - Normalise applied - iarray (w/Package seperator, long form)
ok 4 - Normalise applied - iarray (w/Package seperator, long form + coll/slot)
ok
t/cursor.......1..15
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok 11
ok 12
ok 13
ok 14
ok 15
ok
t/datetime.....1..6
SELECT GET_LOCK("tx", 10)
UPDATE Tangram SET mark = LAST_INSERT_ID(mark + 1)
SELECT LAST_INSERT_ID()
preparing [1] INSERT INTO Person (id, type) VALUES (?, ?)
preparing [2] INSERT INTO NaturalPerson (id, incarnation, age, credit, credit_type, partner, partner_type, birthTime, brains, firstName, name, birth, birthDate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Compiling exporter for NaturalPerson...
sub { my ($obj, $context) = @_; my @closures = @export_closures;
shift(@closures)->($obj, $context),
exists $obj->{q{age}} ? $obj->{q{age}} : undef,
shift(@closures)->($obj, $context),
shift(@closures)->($obj, $context),
shift(@closures)->($obj, $context),
shift(@closures)->($obj, $context),
shift(@closures)->($obj, $context),
exists $obj->{q{birthTime}} ? $obj->{q{birthTime}} : undef,
shift(@closures)->($obj, $context),
exists $obj->{q{firstName}} ? $obj->{q{firstName}} : undef,
exists $obj->{q{name}} ? $obj->{q{name}} : undef,
exists $obj->{q{birth}} ? $obj->{q{birth}} : undef,
shift(@closures)->($obj, $context),
shift(@closures)->($obj, $context),
shift(@closures)->($obj, $context),
exists $obj->{q{birthDate}} ? $obj->{q{birthDate}} : undef,
shift(@closures)->($obj, $context),
shift(@closures)->($obj, $context) }
executing INSERT INTO Person (id, type) VALUES (?, ?) with (12, 2)
executing INSERT INTO NaturalPerson (id, incarnation, age, credit, credit_type, partner, partner_type, birthTime, brains, firstName, name, birth, birthDate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) with (12, 1963-08-13 11:34:17, NULL, NULL, NULL, NULL, NULL, 11:34:17, undef, Jean-Louis, NULL, 1963-8-13 11:34:17, 1963-8-13)
SELECT RELEASE_LOCK("tx")
SELECT GET_LOCK("tx", 10)
UPDATE Tangram SET mark = LAST_INSERT_ID(mark + 1)
SELECT LAST_INSERT_ID()
executing INSERT INTO Person (id, type) VALUES (?, ?) with (13, 2)
executing INSERT INTO NaturalPerson (id, incarnation, age, credit, credit_type, partner, partner_type, birthTime, brains, firstName, name, birth, birthDate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) with (13, 1993-07-28 13:10:00, NULL, NULL, NULL, NULL, NULL, NULL, undef, Chloé, NULL, 1993-7-28 13:10:00, NULL)
SELECT RELEASE_LOCK("tx")
ok 1
preparing [3] SELECT NaturalPerson.incarnation, NaturalPerson.age, NaturalPerson.credit, NaturalPerson.credit_type, NaturalPerson.partner, NaturalPerson.partner_type, NaturalPerson.birthTime, NaturalPerson.brains, NaturalPerson.firstName, NaturalPerson.name, NaturalPerson.is_ref, NaturalPerson.ia_ref, NaturalPerson.birth, NaturalPerson.birthDate FROM NaturalPerson WHERE NaturalPerson.id = ?
Compiling importer for NaturalPerson...
sub { my ($obj, $row, $context) = @_; my @closures = @import_closures;
shift(@closures)->($obj, $row, $context);
$obj->{q{age}} = shift @$row;
shift(@closures)->($obj, $row, $context);
shift(@closures)->($obj, $row, $context);
shift(@closures)->($obj, $row, $context);
shift(@closures)->($obj, $row, $context);
shift(@closures)->($obj, $row, $context);
$obj->{q{birthTime}} = shift @$row;
$obj->{brains} = eval shift @$row;
$obj->{q{firstName}} = shift @$row;
$obj->{q{name}} = shift @$row;
shift(@closures)->($obj, $row, $context);
shift(@closures)->($obj, $row, $context);
$obj->{q{birth}} = shift @$row;
shift(@closures)->($obj, $row, $context);
shift(@closures)->($obj, $row, $context);
shift(@closures)->($obj, $row, $context);
$obj->{q{birthDate}} = shift @$row;
shift(@closures)->($obj, $row, $context);
shift(@closures)->($obj, $row, $context) }
ok 2
ok 3
SELECT t1.id, t1.type, t2.incarnation, t2.age, t2.credit, t2.credit_type, t2.partner, t2.partner_type, t2.birthTime, t2.brains, t2.firstName, t2.name, t2.is_ref, t2.ia_ref, t2.birth, t2.birthDate
  FROM Person t1, NaturalPerson t2
  WHERE t1.id = t2.id AND (t2.birth > '1990-1-1')
ok 4
ok 5
ok 6
ok
t/flatarray....tests 15 (exists) skipped on this platform  at /home/fdaly/src/Tangram-2.06/blib/lib/Tangram/Storage.pm line 1038
	Tangram::Storage::sql_prepare('Tangram::mysql::Storage=HASH(0x8788d40)','SELECT a.i, a.v FROM NaturalPerson_interests a WHERE coll = 14','undef') called at /home/fdaly/src/Tangram-2.06/blib/lib/Tangram/FlatArray.pm line 105
	Tangram::FlatArray::demand('Tangram::FlatArray=HASH(0x8723d78)','Tangram::FlatArray=HASH(0x8723d78)','Tangram::mysql::Storage=HASH(0x8788d40)','NaturalPerson=HASH(0x87a2e40)','interests','NaturalPerson') called at /home/fdaly/src/Tangram-2.06/blib/lib/Tangram/Coll.pm line 231
	Tangram::CollOnDemand::FETCH('Tangram::CollOnDemand=ARRAY(0x87a3080)') called at t/flatarray.t line 156
1..21
ok 1
ok 2
ok 3
ok 4
not ok 5
t/flatarray.t(52) : error
ok 6
ok 7
ok 8
not ok 9
t/flatarray.t(80) : error
ok 10
ok 11
ok 12
not ok 13
t/flatarray.t(117) : error
ok 14
ok 15
ok 16
dubious
	Test returned status 255 (wstat 65280, 0xff00)
DIED. FAILED tests 5, 9, 13, 17-21
	Failed 8/21 tests, 61.90% okay
t/flathash..... at /home/fdaly/src/Tangram-2.06/blib/lib/Tangram/Storage.pm line 1038
	Tangram::Storage::sql_prepare('Tangram::mysql::Storage=HASH(0x878d9b8)','SELECT a.k, a.v FROM NaturalPerson_opinions a WHERE coll = 16','undef') called at /home/fdaly/src/Tangram-2.06/blib/lib/Tangram/FlatHash.pm line 102
	Tangram::FlatHash::demand('Tangram::FlatHash=HASH(0x8723984)','Tangram::FlatHash=HASH(0x8723984)','Tangram::mysql::Storage=HASH(0x878d9b8)','NaturalPerson=HASH(0x87955e4)','opinions','NaturalPerson') called at /home/fdaly/src/Tangram-2.06/blib/lib/Tangram/Coll.pm line 231
	Tangram::CollOnDemand::FETCH('Tangram::CollOnDemand=ARRAY(0x879556c)') called at t/flathash.t line 8
	main::compare_hash('undef','HASH(0x879016c)') called at t/flathash.t line 142
1..17
ok 1
ok 2
ok 3
ok 4
not ok 5
t/flathash.t(68) : error
ok 6
not ok 7
t/flathash.t(86) : error
ok 8
not ok 9
t/flathash.t(103) : error
ok 10
ok 11
ok 12
dubious
	Test returned status 255 (wstat 65280, 0xff00)
DIED. FAILED tests 5, 7, 9, 13-17
	Failed 8/17 tests, 52.94% okay
t/hash.........1..3
ok 1
ok 2
ok 3
ok
t/iarray.......1..50
ok 1 - Got ids back OK
ok 2 - Homer inserted OK
ok 3 - Marge inserted OK
ok 4 - Nothing leaked yet!
ok 5 - Homer still exists!
ok 6 - array auto-vivify 1
ok 7 # skip one to many - marge skipped
dubious
	Test returned status 0 (wstat 139, 0x8b)
DIED. FAILED tests 8-50
	Failed 43/50 tests, 14.00% okay (less 1 skipped test: 6 okay, 12.00%)
t/iset.........tests 35-42 (transactions) skipped on this platform 1..42
ok 1
ok 2
ok 3
not ok 4
t/set.t(72) : error
ok 5
ok 6
not ok 7
t/set.t(87) : error
ok 8
ok 9
not ok 10
t/set.t(102) : error
ok 11
ok 12
ok 13
ok 14
ok 15
ok 16
ok 17
ok 18
ok 19
ok 20
ok 21
ok 22
ok 23
ok 24
ok 25
ok 26
ok 27
ok 28
ok 29
ok 30
ok 31
ok 32
ok 33
ok 34
ok 35
ok 36
ok 37
ok 38
ok 39
ok 40
ok 41
ok 42
FAILED tests 4, 7, 10
	Failed 3/42 tests, 92.86% okay
t/mappings.....1..40
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok 11
ok 12
ok 13
ok 14
ok 15
ok 16
ok 17
ok 18
ok 19
ok 20
ok 21
ok 22
ok 23
ok 24
ok 25
ok 26
ok 27
ok 28
ok 29
ok 30
ok 31
ok 32
ok 33
ok 34
ok 35
ok 36
ok 37
ok 38
ok 39
ok 40
ok
t/mi...........1..12
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok 11
ok 12
ok
t/mysql........1..1
ok 1
ok
t/perldump.....1..1
ok 1
ok
t/poly.........1..8
ok 1 - Nothing leaked yet!
ok 2 - Polymorphic retrieval via Tangram::Storage->select()
ok 3 - oid_isa(positive)
ok 4 - oid_isa(positive)
ok 5 - oid_isa(positive)
ok 6 - oid_isa(positive)
ok 7 - oid_isa(negative)
ok 8 - Nothing leaked yet!
ok
t/queries......1..9
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
Marge Homer
ok 8
ok 9
ok
t/ref..........1..11
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
Credit=HASH(0x877e1a0)
ok 10
ok 11
ok
t/reload.......1..5
ok 1
ok 2
ok 3
not ok 4
t/reload.t(32) : error
ok 5
FAILED test 4
	Failed 1/5 tests, 80.00% okay
t/save.........1..3
ok 1
not ok 2
t/save.t(57) : error
not ok 3
t/save.t(85) : error
FAILED tests 2-3
	Failed 2/3 tests, 33.33% okay
t/set..........tests 35-42 (transactions) skipped on this platform 1..42
ok 1
ok 2
ok 3
not ok 4
t/set.t(72) : error
ok 5
ok 6
not ok 7
t/set.t(87) : error
ok 8
ok 9
not ok 10
t/set.t(102) : error
ok 11
ok 12
ok 13
ok 14
ok 15
ok 16
ok 17
ok 18
ok 19
ok 20
ok 21
ok 22
ok 23
ok 24
ok 25
ok 26
ok 27
ok 28
ok 29
ok 30
ok 31
ok 32
ok 33
ok 34
ok 35
ok 36
ok 37
ok 38
ok 39
ok 40
ok 41
ok 42
FAILED tests 4, 7, 10
	Failed 3/42 tests, 92.86% okay
t/stateless....1..5
ok 1
ok 2
ok 3
ok 4
ok 5
ok
t/tx...........tests 1-4 (transactions) skipped on this platform 1..4
ok 1
ok 2
ok 3
ok 4
ok
t/unload.......1..3
ok 1
ok 2
ok 3
ok
t/weakref......tests 1-3 (weakrefs) skipped on this platform 1..3
ok 1
ok 2
ok 3
ok
Failed 8/23 test scripts, 65.22% okay. 111/355 subtests failed, 68.73% okay.
Failed Test   Stat Wstat Total Fail  Failed  List of Failed
-------------------------------------------------------------------------------
t/array.t        0   139    50   43  86.00%  8-50
t/flatarray.t  255 65280    21    8  38.10%  5 9 13 17-21
t/flathash.t   255 65280    17    8  47.06%  5 7 9 13-17
t/iarray.t       0   139    50   43  86.00%  8-50
t/iset.t                    42    3   7.14%  4 7 10
t/reload.t                   5    1  20.00%  4
t/save.t                     3    2  66.67%  2-3
t/set.t                     42    3   7.14%  4 7 10
2 subtests skipped.
make: *** [test_dynamic] Error 29
