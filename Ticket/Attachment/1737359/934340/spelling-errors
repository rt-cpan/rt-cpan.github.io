--- a/Changes
+++ b/Changes
@@ -171,7 +171,7 @@
   - This means it requires WWW::Mechanize 0.57 or higher
   - added "comment" command, which allows to add comments to both, the shell
     script and the generated script. (Donated by Alexander Goller)
-  - accomodated for most recent version of LWP, which dosen't die on failing host
+  - accomodated for most recent version of LWP, which doesn't die on failing host
     lookups but returns error 500.
 
 0.29
@@ -241,7 +241,7 @@
   - Documentation fixes for "open" and "links" (also courtesy of Mark Stosberg)
   - The dumprequests feature needs Hook::LexWrap - it didn't work
     properly before. The feature is tested in t/14
-  - "restart" in a -e oneliner dosen't crash the shell (it also dosen't restart though)
+  - "restart" in a -e oneliner doesn't crash the shell (it also doesn't restart though)
   - factored out the HTML display into a module of its own (HTML::Display),
     distributed with this. This breaks existing setups, as the "browsercmd"
     and "useole" option disappeared. You can configure the used browser
@@ -267,7 +267,7 @@
     the interactive asking method to something noninteractive.
     Field types that do not get asked are : hidden,submit
   - The "eval" command now takes multiline strings. This is not interesting
-    if you're using the plain shell, as the readline shell dosen't know about
+    if you're using the plain shell, as the readline shell doesn't know about
     about multiline strings, but if you're using the $shell->cmd() feature,
     it's handy to split your evals over more than one line.
 
--- a/README.mkdn
+++ b/README.mkdn
@@ -120,7 +120,7 @@
 
 Restart the shell.
 
-This is mostly useful when you are modifying the shell itself. It dosen't
+This is mostly useful when you are modifying the shell itself. It doesn't
 work if you use the shell in oneliner mode with `-e`.
 
 ## get
@@ -590,7 +590,7 @@
 want to fill out forms using custom Perl code, here is a recipe
 how to achieve this :
 
-Code passed to the `eval` command gets evalutated in the WWW::Mechanize::Shell
+Code passed to the `eval` command gets evaluated in the WWW::Mechanize::Shell
 namespace. You can inject new subroutines there and these get picked
 up by the Callback class of WWW::Mechanize::FormFiller :
 
--- a/lib/WWW/Mechanize/Shell.pm
+++ b/lib/WWW/Mechanize/Shell.pm
@@ -127,7 +127,7 @@
   $self->agent->env_proxy();
 
   # Read our .rc file :
-  # I could use File::Homedir, but the docs claim it dosen't work on Win32. Maybe
+  # I could use File::Homedir, but the docs claim it doesn't work on Win32. Maybe
   # I should just release a patch for File::Homedir then... Not now.
   my $sourcefile;
   if (exists $args{rcfile}) {
@@ -512,7 +512,7 @@
 
 Restart the shell.
 
-This is mostly useful when you are modifying the shell itself. It dosen't
+This is mostly useful when you are modifying the shell itself. It doesn't
 work if you use the shell in oneliner mode with C<-e>.
 
 =cut
@@ -1897,7 +1897,7 @@
 want to fill out forms using custom Perl code, here is a recipe
 how to achieve this :
 
-Code passed to the C<eval> command gets evalutated in the WWW::Mechanize::Shell
+Code passed to the C<eval> command gets evaluated in the WWW::Mechanize::Shell
 namespace. You can inject new subroutines there and these get picked
 up by the Callback class of WWW::Mechanize::FormFiller :
 
--- a/t/20-restart-without-script.t
+++ b/t/20-restart-without-script.t
@@ -13,6 +13,6 @@
 
 my $output= `$^X -I./lib -MWWW::Mechanize::Shell -e "WWW::Mechanize::Shell->new('t',rcfile=>undef,warnings=>undef)->cmd('restart');print'OK'" 2>&1`;
 chomp $output;
-is($@, "","'restart' on -e dosen't crash");
-is($?, 0,"'restart' on -e dosen't crash");
-is($output,"OK","'restart' on -e dosen't crash");
+is($@, "","'restart' on -e doesn't crash");
+is($?, 0,"'restart' on -e doesn't crash");
+is($output,"OK","'restart' on -e doesn't crash");
