--- Test-Mock-Cmd-0.6/lib/Test/Mock/Cmd.pm	2013-05-03 09:49:53.000000000 -0700
+++ /usr/tools/backup/perl5/2.6.32/perls/perl-5.24.0/lib/site_perl/5.24.0/Test/Mock/Cmd.pm	2016-12-07 10:46:07.757884338 -0800
@@ -11,8 +11,8 @@
         my ( $class, %override ) = @_;
 
         for my $k ( keys %override ) {
-            if ( $k ne 'system' && $k ne 'exec' && $k ne 'qr' ) {
-                Carp::croak('Key is not system, exec, or qr');
+            if ( $k ne 'system' && $k ne 'exec' && $k ne 'qx' ) {
+                Carp::croak('Key is not system, exec, or qx');
             }
             if ( ref( $override{$k} ) ne 'CODE' && ref( $override{$k} ) ne 'HASH' ) {
                 Carp::croak('Not a CODE or HASH reference');
@@ -22,7 +22,7 @@
         no warnings 'redefine';
         *CORE::GLOBAL::system   = _transmogrify_to_code( $override{'system'}, \&orig_system ) if $override{'system'};
         *CORE::GLOBAL::exec     = _transmogrify_to_code( $override{'exec'},   \&orig_exec )   if $override{'exec'};
-        *CORE::GLOBAL::readpipe = _transmogrify_to_code( $override{'qr'},     \&orig_qr )     if $override{'qr'};
+        *CORE::GLOBAL::readpipe = _transmogrify_to_code( $override{'qx'},     \&orig_qx )     if $override{'qx'};
 
         return 1;
     }
@@ -42,7 +42,7 @@
     no warnings 'redefine';
     *CORE::GLOBAL::system = _transmogrify_to_code( $_[1], \&orig_system );
     *CORE::GLOBAL::exec     = _transmogrify_to_code( $_[2] || $_[1], \&orig_exec );
-    *CORE::GLOBAL::readpipe = _transmogrify_to_code( $_[3] || $_[1], \&orig_qr );
+    *CORE::GLOBAL::readpipe = _transmogrify_to_code( $_[3] || $_[1], \&orig_qx );
 }
 
 # This doesn't make sense w/ the once-set-always-set behavior of these functions and it's just weird so we leave it out for now.
@@ -102,7 +102,7 @@
 
 =head1 SYNOPSIS
 
-    use Test::Mock::Cmd 'system' => \&my_cmd_mocker, 'qr' => \&my_cmd_mocker;
+    use Test::Mock::Cmd 'system' => \&my_cmd_mocker, 'qx' => \&my_cmd_mocker;
 
 or
 
@@ -114,7 +114,7 @@
 
 or
 
-    use Test::Mock::Cmd 'system' => { … }, 'qr' =>  { … }; # can mix and match hash ref and code ref
+    use Test::Mock::Cmd 'system' => { … }, 'qx' =>  { … }; # can mix and match hash ref and code ref
 
 or
 
@@ -196,7 +196,7 @@
 
 =head2 Commence mocking
 
-Per the synopsis, you can provide import() with a hash whose keys are 'system', 'exec', or 'qr' and whose values are the code reference you want to replace the key's functionality with, 1 code reference to replace all 3 functions or 3 code references to replace system(), exec(), and qx() (in that order).
+Per the synopsis, you can provide import() with a hash whose keys are 'system', 'exec', or 'qx' and whose values are the code reference you want to replace the key's functionality with, 1 code reference to replace all 3 functions or 3 code references to replace system(), exec(), and qx() (in that order).
 
 As of v0.6 you can pass in a hash instead of a coderef that will generate a handler that defaults to the original call if the first argument given is not a key in said hash.
 
@@ -244,7 +244,7 @@
 
 The given value is not a code reference or a hash reference and should be one or the other.
 
-=item C<< Key is not system, exec, or qr >>
+=item C<< Key is not system, exec, or qx >>
 
 A key in your argument hash is invalid.
 
