diff --git a/lib/DBIx/MySQLSequence.pm b/lib/DBIx/MySQLSequence.pm
index cc6784a..6ed8638 100644
--- a/lib/DBIx/MySQLSequence.pm
+++ b/lib/DBIx/MySQLSequence.pm
@@ -249,7 +249,7 @@ sub name { $_[0]->{name} }
 
 =head2 exists
 
-Static Syntax: C<DBIx::MySQLSequence->exists( $dbh, $name );>
+Static Syntax: C<< DBIx::MySQLSequence->exists( $dbh, $name ); >>
 
 Examines the database to determine if a sequence exists in the database.
 Returns true if the sequence exists. Returns false if the sequence does
@@ -272,7 +272,7 @@ sub exists {
 
 =head2 create [ $start ][, $increment ]
 
-Static Syntax: C<DBIx::MySQLSequence->create( $dbh, $name [, $start ][, $increment ] );>
+Static Syntax: C<< DBIx::MySQLSequence->create( $dbh, $name [, $start ][, $increment ] ); >>
 
 Creates a sequence in the database. The create method takes optional arguments of the
 value you want to sequence to start at, and the amount you want the value to increment
@@ -280,7 +280,7 @@ value you want to sequence to start at, and the amount you want the value to inc
 
 For example
 
-C<$sequence->create( 10, 5 )>
+C<< $sequence->create( 10, 5 ) >>
 
 The above would create a new sequence whose value starts at 10, and increments by 5 each
 time a value is returned. If not passed, the default is a starting value of 1, and an 
@@ -293,7 +293,7 @@ If called as a static method, it will return a new handle to the created sequenc
 if an error occurs, or the sequence already exists. You can use this as a sort of alternate 
 constructor.
 
-C<my $sequence = DBIx::MySQLSequence->create( $dbh, $name, 5 );>
+C<< my $sequence = DBIx::MySQLSequence->create( $dbh, $name, 5 ); >>
 
 DBIx::MySQLSequence will work quite happily without the sequence table existing. It will be
 automatically created for you the first time that you create a sequence. Please note that
@@ -328,7 +328,7 @@ sub create {
 
 =head2 drop
 
-Static Syntax: C<DBIx::MySQLSequence->drop( $dbh, $name );>
+Static Syntax: C<< DBIx::MySQLSequence->drop( $dbh, $name ); >>
 
 The C<drop> method will drop a sequence from the database. It returns true on success, or undef
 on error.
@@ -355,7 +355,7 @@ sub drop {
 
 =head2 reset
 
-Static Syntax: C<DBIx::MySQLSequence->reset( $dbh, $name );>
+Static Syntax: C<< DBIx::MySQLSequence->reset( $dbh, $name ); >>
 
 The C<reset> method will return the sequence to the state it was in when it was originally created.
 Unlike Oracle, we do not need to drop and re-create the sequence in order to do this. Returns true
@@ -381,7 +381,7 @@ sub reset {
 
 =head2 currval
 
-Static Syntax: C<DBIx::MySQLSequence->currval( $dbh, $name );>
+Static Syntax: C<< DBIx::MySQLSequence->currval( $dbh, $name ); >>
 
 The C<currval> method retrieves the current value of a sequence from the database.
 The value that this returns is currently unreliable, but SHOULD match the last
@@ -404,7 +404,7 @@ sub currval {
 
 =head2 nextval
 
-Static Syntax: C<DBIx::MySQLSequence->nextval( $dbh, $name );>
+Static Syntax: C<< DBIx::MySQLSequence->nextval( $dbh, $name ); >>
 
 The C<nextval> method retrieves the next value of a sequence from the database.
 Returns the next value, or undef on error.
@@ -659,19 +659,19 @@ sub _autocommit_error {
 
 =head2 errstr
 
-Static Syntax: C<DBIx::MySQLSequence->errstr;>
+Static Syntax: C<< DBIx::MySQLSequence->errstr; >>
 
 When an error occurs ( usually indicated by a method return value of C<undef> ),
 the C<errstr> method is used to retrieve any error message that may be available.
 Any error message specific to a object method will be available from that object
 using.
 
-C<$sequence->errstr;>
+C<< $sequence->errstr; >>
 
 If you use a static method, or one of the above object method in its static form,
 you should retrieve the error message from the class statically, using
 
-C<DBIx::MySQLSequence->errstr;>
+C<< DBIx::MySQLSequence->errstr; >>
 
 =cut
 
