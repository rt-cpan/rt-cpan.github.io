--- colorer/src/shared/common/Hashtable.h	2005-04-28 14:22:34.000000000 -0700
+++ Syntax-Highlight-Universal-0.4/colorer/common/Hashtable.h	2004-09-29 08:18:40.000000000 -0700
@@ -19,8 +19,8 @@
 
   T get(const String *key) const{
     int hash = key->hashCode();
-    int bno = (hash&0x7FFFFFFF) % this->capacity;
-    for(HashEntry<T> *he = this->bucket[bno]; he != null; he = he->next)
+    int bno = (hash&0x7FFFFFFF) % capacity;
+    for(HashEntry<T> *he = bucket[bno]; he != null; he = he->next)
       if (he->hash == hash && *he->key == *key)
         return he->value;
     return null;
@@ -30,7 +30,7 @@
       Returns first element value in a sequence, or null, if hashtable is empty.
   */
   T enumerate() const{
-    T * retval = this->enumerate_int();
+    T * retval = enumerate_int();
     if (retval == null) return null;
     return *retval;
   };
@@ -39,7 +39,7 @@
       is thrown. If end of hash is reached, exception is thrown.
   */
   T next() const{
-    T *retval = this->next_int();
+    T *retval = next_int();
     if (retval == null) return null;
     return *retval;
   };
@@ -61,8 +61,8 @@
 
   const T *get(const String *key) const{
     int hash = key->hashCode();
-    int bno = (hash&0x7FFFFFFF) % this->capacity;
-    for(HashEntry<T> *he = this->bucket[bno]; he != null; he = he->next)
+    int bno = (hash&0x7FFFFFFF) % capacity;
+    for(HashEntry<T> *he = bucket[bno]; he != null; he = he->next)
       if (he->hash == hash && *he->key == *key)
         return &he->value;
     return null;
@@ -72,14 +72,14 @@
       Returns first element value in a sequence, or null, if hashtable is empty
   */
   T *enumerate() const{
-    return this->enumerate_int();
+    return enumerate_int();
   };
   /** Returns the next value object with current enumeration procedure.
       If hashtable state is changed, and next() call occurs, exception
       is thrown. If end of hash is reached, exception is thrown.
   */
   T *next() const{
-    return this->next_int();
+    return next_int();
   };
 };
 
@@ -102,7 +102,7 @@
  *
  * The Initial Developer of the Original Code is
  * Cail Lomecb <cail@nm.ru>.
- * Portions created by the Initial Developer are Copyright (C) 1999-2005
+ * Portions created by the Initial Developer are Copyright (C) 1999-2003
  * the Initial Developer. All Rights Reserved.
  *
  * Contributor(s):
