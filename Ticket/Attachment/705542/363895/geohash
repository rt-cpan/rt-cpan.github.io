#!/usr/bin/env perl

use strict;
use warnings;

use Geo::Hashing;

my($lat, $long) = @ARGV;

my $g = Geo::Hashing->new(lat => $lat, lon => $long);
printf "Today's geo hash is at %.6f, %.6f.\n", $g->lat, $g->lon;
printf "Google Maps link: http://maps.google.com/maps?q=%.6f,%.6f\n", $g->lat, $g->lon;
printf "Today's global hash is at %.6f, %.6f.\n", global_hash($g);
printf "Google Maps link: http://maps.google.com/maps?q=%.6f,%.6f\n", global_hash($g);

sub global_hash {
    my $g = shift;

    my $lat  = $g->lat;
    my $long = $g->lon;

    $lat  =~ s{^.+\.}{.};
    $long =~ s{^.+\.}{.};

    $lat  = ($lat  * 180) - 90;
    $long = ($long * 360) - 180;

    return($lat, $long);
}

__END__

=head1 NAME

geohash - Calculate today's geohash coordinates

=head1 SYNOPSIS

    geohash <latitutde> <longitude>

=head1 DESCRIPTION

geohash calculates today's geohash coordinates for your graticule and
today's globalhash.  It will also provide handy links to Google Maps.

The latitude and longitude need only be specified to the nearest
degree.

=head1 EXAMPLE

If you're in Portland, Oregon, USA at 45deg 31'12"N 122deg 40'55"W

    $ geohash 45 -122
    Today's geo hash is at 45.799602, -122.562484.
    Google Maps link: http://maps.google.com/maps?q=45.799602,-122.562484
    Today's global hash is at 53.928441, 22.494205.
    Google Maps link: http://maps.google.com/maps?q=53.928441,22.494205


=head1 SEE ALSO

L<Geo::Hashing>, L<http://wiki.xkcd.com/geohashing/>,
L<http://wiki.xkcd.com/geohashing/Globalhash>,
L<http://wiki.xkcd.com/geohashing/Graticule>
