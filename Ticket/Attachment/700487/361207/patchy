--- /usr/local/share/perl/5.10.0/Package/Alias.pm	2003-07-21 00:58:57.000000000 -0400
+++ lib/Package/Alias.pm	2009-12-01 16:01:31.000000000 -0500
@@ -8,8 +8,9 @@
 use strict qw/vars subs/;
 use vars   qw/$VERSION $DEBUG $BRAVE/;
 use Carp;
+use 5.006; #For INIT
 
-$VERSION     = '0.04';
+$VERSION     = '0.11';
 $DEBUG       = 0;
 
 #------------------------------------------------------------
@@ -28,13 +29,32 @@
 	}
 
 	*{$alias . "::"} = \*{$orig . "::"};
-
 	print STDERR __PACKAGE__ . ": aliasing '$alias' => '$orig'\n"
 	    if $DEBUG;
     }
 }
 
-*import = \&alias;
+
+sub import {
+    my $class_or_self = shift;
+    my %args  = @_;
+
+    while ( my ( $alias, $orig ) = each %args ) {
+	my($alias_pm, $orig_pm) = ($alias, $orig);
+	foreach( $alias_pm, $orig_pm ){
+	    s/::/\//g;
+	    $_ .= '.pm';
+	}
+
+	next if exists($INC{$alias_pm});
+	my $caller = caller;
+	eval "{package $caller; use $orig;}";
+	confess $@ if $@;
+	$INC{$alias_pm} = $INC{$orig_pm};
+    }
+
+    alias($class_or_self, @_);
+}
 
 1;
 
@@ -51,25 +71,38 @@
 =head1 SYNOPSIS
 
   use Package::Alias Foo    => 'main',
-		     P      => 'Really::Long::Package::Name',
-                     'A::B' => 'C::D',
+		     'P::Q' => 'Really::Long::Package::Name',
 		     Alias  => 'Existing::Namespace';
 
+  BEGIN{
+    use Package::Alias Moose => Mouse;
+
+    #Make Mouse's finicky internal checks happy...
+    Moose::Exporter->setup_import_methods(exporting_package=>'Moose',
+
+					  #Alas the defaults live in Mouse...
+					  as_is => [qw(
+							extends with
+							has
+							before after around
+							override super
+							augment  inner
+						     ),
+						    \&Scalar::Util::blessed,
+						    \&Carp::confess,
+						   ],
+					 );
+
 =head1 DESCRIPTION
 
 This module aliases one package name to another. After running the
-SYNOPSIS code,  C<@INC> and C<@Foo::INC> reference the same memory.
-C<$Really::Long::Package::Name::var> and $P::var do as well.
-
-To be strict-compliant, you'll need to quote any packages on the
-left-hand side of a => if the namespace has colons. Packages on the
-right-hand side all have to be quoted. This is documented as
-L<perlop/"Comma Operator">.
+SYNOPSIS code,  C<@INC> (shorthand for C<@main::INC>) and C<@Foo::INC>
+reference the same memory, likewise for the other pairings.
 
-Chip Salzenberg says that it's not technically feasible to perform
-runtime namespace aliasing.  At compile time, Perl grabs pointers to
-functions and global vars.  Those pointers aren't updated if we alias
-the namespace at runtime.
+To facilitate some crafty slight of hand, the above will also
+C<use P::Q> if it's not already loaded, and tell Perl that
+C<Really::Long::Package::Name> is loaded. In some rare cases
+such as C<Mouse>, additional trickery may be required...
 
 =head1 GLOBALS
 
@@ -84,10 +117,26 @@
 
   use Package::Alias Bar => 'Foo';
 
+=head1 CAVEATS
+
+To be strict-compliant, you'll need to quote any packages on the
+left-hand side of a => if the namespace has colons. Packages on the
+right-hand side all have to be quoted. This is documented as
+L<perlop/"Comma Operator">.
+
+=head1 NOTES
+
+Chip Salzenberg says that it's not technically feasible to perform
+runtime namespace aliasing.  At compile time, Perl grabs pointers to
+functions and global vars.  Those pointers aren't updated if we alias
+the namespace at runtime.
+
 =head1 AUTHOR
 
 Joshua Keroes <skunkworks@eli.net>
 
+Jerrad Pierce <jpierce@cpan.org>
+
 =head1 SEE ALSO
 
 L<Devel::Symdump>
