Description: Fix several minor spelling errors in the manpage generated from Parser.pm
Author: Harlan Lieberman-Berg <H.LiebermanBerg@gmail.com>
--- a/lib/Makefile/Parser.pm
+++ b/lib/Makefile/Parser.pm
@@ -976,7 +976,7 @@
     T_FILES = t\main.cod.t t\bin2hex.exe.t t\hex2bin.exe.t $(MIN_T_FILES)
     DIRFILESEP = ^\
 
-"Simply expanded" variables' definition sytax in GUN make is also supported:
+"Simply expanded" variables' definition syntax in GUN make is also supported:
 
     FOO := blah blah blah
 
@@ -995,7 +995,7 @@
     %.o : %.c
         $(CC) -c $<
 
-Variable expansion sytax
+Variable expansion syntax
 
     ${abc}
 
@@ -1007,9 +1007,9 @@
 $(MAKE) and $(CC). Currently they will be left untouched if they're not set
 explicitly in the Makefile.
 
-Due to the current implementation, expansion of unrecognized built-in varaibles
+Due to the current implementation, expansion of unrecognized built-in variables
 and variables not previously defined by Makefile will NOT be performed. This
-behavior is different from any practial make tools, but is reasonable at
+behavior is different from any practical make tools, but is reasonable at
 this early stage of this parser.
 
 =item Explicit Rules
@@ -1036,7 +1036,7 @@
             main.cod pat_cover.pod pat_cover.html types.cod \
             hex2bin.exe hex2bin.obj
 
-Specital variable $@ will be expanded using its value in the context.
+Special variable $@ will be expanded using its value in the context.
 
 =item Implicit Rules
 
@@ -1050,7 +1050,7 @@
     %.exe : %.obj
         link /BATCH /NOLOGO $<;
 
-The special varaibles $< and $* will be expanded according to the context.
+The special variables $< and $* will be expanded according to the context.
 
 =item Old-Fashioned Suffix Rules
 
@@ -1157,7 +1157,7 @@
 
     all : ; echo 'hello, world!'
 
-Specital variable $@ will be expanded using its value in the context.
+Special variable $@ will be expanded using its value in the context.
 
 =back
 
@@ -1256,11 +1256,11 @@
 =item C<< @roots = $obj->roots() >>
 
 The C<roots> method returns the "root targets" in Makefile. The targets
-which there're no other targets depends on are called the I<root targets>.
+which there are no other targets depends on are called the I<root targets>.
 For example, I<install>, I<uninstall>, and I<veryclean>
 are all root targets in the Makefile generated by the I<ExtUtils::MakeMaker>
 module. On the other hand, I<clean> and I<test> are not, which may be
-somewhat counterintuitive. That's because there're some other targets
+somewhat counter-intuitive. That's because there are some other targets
 depend on I<clean>, I<test>, or both.
 
 The type of the returned list is an array of Makefile::Target objects.
